
002_exercise.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ef8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  08005088  08005088  00006088  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800513c  0800513c  00007014  2**0
                  CONTENTS
  4 .ARM          00000008  0800513c  0800513c  0000613c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005144  08005144  00007014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005144  08005144  00006144  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005148  08005148  00006148  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  0800514c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00013448  20000014  08005160  00007014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2001345c  08005160  0000745c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007014  2**0
                  CONTENTS, READONLY
 12 .debug_info   000123cb  00000000  00000000  00007044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002db9  00000000  00000000  0001940f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012b0  00000000  00000000  0001c1c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e4e  00000000  00000000  0001d478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023533  00000000  00000000  0001e2c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013d54  00000000  00000000  000417f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d66e4  00000000  00000000  0005554d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012bc31  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e78  00000000  00000000  0012bc74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a8  00000000  00000000  00130aec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000014 	.word	0x20000014
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005070 	.word	0x08005070

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000018 	.word	0x20000018
 80001cc:	08005070 	.word	0x08005070

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	@ 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	20012e90 	.word	0x20012e90

08000264 <__aeabi_uldivmod>:
 8000264:	b953      	cbnz	r3, 800027c <__aeabi_uldivmod+0x18>
 8000266:	b94a      	cbnz	r2, 800027c <__aeabi_uldivmod+0x18>
 8000268:	2900      	cmp	r1, #0
 800026a:	bf08      	it	eq
 800026c:	2800      	cmpeq	r0, #0
 800026e:	bf1c      	itt	ne
 8000270:	f04f 31ff 	movne.w	r1, #4294967295
 8000274:	f04f 30ff 	movne.w	r0, #4294967295
 8000278:	f000 b96a 	b.w	8000550 <__aeabi_idiv0>
 800027c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000280:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000284:	f000 f806 	bl	8000294 <__udivmoddi4>
 8000288:	f8dd e004 	ldr.w	lr, [sp, #4]
 800028c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000290:	b004      	add	sp, #16
 8000292:	4770      	bx	lr

08000294 <__udivmoddi4>:
 8000294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000298:	9d08      	ldr	r5, [sp, #32]
 800029a:	460c      	mov	r4, r1
 800029c:	2b00      	cmp	r3, #0
 800029e:	d14e      	bne.n	800033e <__udivmoddi4+0xaa>
 80002a0:	4694      	mov	ip, r2
 80002a2:	458c      	cmp	ip, r1
 80002a4:	4686      	mov	lr, r0
 80002a6:	fab2 f282 	clz	r2, r2
 80002aa:	d962      	bls.n	8000372 <__udivmoddi4+0xde>
 80002ac:	b14a      	cbz	r2, 80002c2 <__udivmoddi4+0x2e>
 80002ae:	f1c2 0320 	rsb	r3, r2, #32
 80002b2:	4091      	lsls	r1, r2
 80002b4:	fa20 f303 	lsr.w	r3, r0, r3
 80002b8:	fa0c fc02 	lsl.w	ip, ip, r2
 80002bc:	4319      	orrs	r1, r3
 80002be:	fa00 fe02 	lsl.w	lr, r0, r2
 80002c2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002c6:	fa1f f68c 	uxth.w	r6, ip
 80002ca:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002d2:	fb07 1114 	mls	r1, r7, r4, r1
 80002d6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002da:	fb04 f106 	mul.w	r1, r4, r6
 80002de:	4299      	cmp	r1, r3
 80002e0:	d90a      	bls.n	80002f8 <__udivmoddi4+0x64>
 80002e2:	eb1c 0303 	adds.w	r3, ip, r3
 80002e6:	f104 30ff 	add.w	r0, r4, #4294967295
 80002ea:	f080 8112 	bcs.w	8000512 <__udivmoddi4+0x27e>
 80002ee:	4299      	cmp	r1, r3
 80002f0:	f240 810f 	bls.w	8000512 <__udivmoddi4+0x27e>
 80002f4:	3c02      	subs	r4, #2
 80002f6:	4463      	add	r3, ip
 80002f8:	1a59      	subs	r1, r3, r1
 80002fa:	fa1f f38e 	uxth.w	r3, lr
 80002fe:	fbb1 f0f7 	udiv	r0, r1, r7
 8000302:	fb07 1110 	mls	r1, r7, r0, r1
 8000306:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800030a:	fb00 f606 	mul.w	r6, r0, r6
 800030e:	429e      	cmp	r6, r3
 8000310:	d90a      	bls.n	8000328 <__udivmoddi4+0x94>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f100 31ff 	add.w	r1, r0, #4294967295
 800031a:	f080 80fc 	bcs.w	8000516 <__udivmoddi4+0x282>
 800031e:	429e      	cmp	r6, r3
 8000320:	f240 80f9 	bls.w	8000516 <__udivmoddi4+0x282>
 8000324:	4463      	add	r3, ip
 8000326:	3802      	subs	r0, #2
 8000328:	1b9b      	subs	r3, r3, r6
 800032a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800032e:	2100      	movs	r1, #0
 8000330:	b11d      	cbz	r5, 800033a <__udivmoddi4+0xa6>
 8000332:	40d3      	lsrs	r3, r2
 8000334:	2200      	movs	r2, #0
 8000336:	e9c5 3200 	strd	r3, r2, [r5]
 800033a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033e:	428b      	cmp	r3, r1
 8000340:	d905      	bls.n	800034e <__udivmoddi4+0xba>
 8000342:	b10d      	cbz	r5, 8000348 <__udivmoddi4+0xb4>
 8000344:	e9c5 0100 	strd	r0, r1, [r5]
 8000348:	2100      	movs	r1, #0
 800034a:	4608      	mov	r0, r1
 800034c:	e7f5      	b.n	800033a <__udivmoddi4+0xa6>
 800034e:	fab3 f183 	clz	r1, r3
 8000352:	2900      	cmp	r1, #0
 8000354:	d146      	bne.n	80003e4 <__udivmoddi4+0x150>
 8000356:	42a3      	cmp	r3, r4
 8000358:	d302      	bcc.n	8000360 <__udivmoddi4+0xcc>
 800035a:	4290      	cmp	r0, r2
 800035c:	f0c0 80f0 	bcc.w	8000540 <__udivmoddi4+0x2ac>
 8000360:	1a86      	subs	r6, r0, r2
 8000362:	eb64 0303 	sbc.w	r3, r4, r3
 8000366:	2001      	movs	r0, #1
 8000368:	2d00      	cmp	r5, #0
 800036a:	d0e6      	beq.n	800033a <__udivmoddi4+0xa6>
 800036c:	e9c5 6300 	strd	r6, r3, [r5]
 8000370:	e7e3      	b.n	800033a <__udivmoddi4+0xa6>
 8000372:	2a00      	cmp	r2, #0
 8000374:	f040 8090 	bne.w	8000498 <__udivmoddi4+0x204>
 8000378:	eba1 040c 	sub.w	r4, r1, ip
 800037c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000380:	fa1f f78c 	uxth.w	r7, ip
 8000384:	2101      	movs	r1, #1
 8000386:	fbb4 f6f8 	udiv	r6, r4, r8
 800038a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800038e:	fb08 4416 	mls	r4, r8, r6, r4
 8000392:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000396:	fb07 f006 	mul.w	r0, r7, r6
 800039a:	4298      	cmp	r0, r3
 800039c:	d908      	bls.n	80003b0 <__udivmoddi4+0x11c>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f106 34ff 	add.w	r4, r6, #4294967295
 80003a6:	d202      	bcs.n	80003ae <__udivmoddi4+0x11a>
 80003a8:	4298      	cmp	r0, r3
 80003aa:	f200 80cd 	bhi.w	8000548 <__udivmoddi4+0x2b4>
 80003ae:	4626      	mov	r6, r4
 80003b0:	1a1c      	subs	r4, r3, r0
 80003b2:	fa1f f38e 	uxth.w	r3, lr
 80003b6:	fbb4 f0f8 	udiv	r0, r4, r8
 80003ba:	fb08 4410 	mls	r4, r8, r0, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb00 f707 	mul.w	r7, r0, r7
 80003c6:	429f      	cmp	r7, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x148>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x146>
 80003d4:	429f      	cmp	r7, r3
 80003d6:	f200 80b0 	bhi.w	800053a <__udivmoddi4+0x2a6>
 80003da:	4620      	mov	r0, r4
 80003dc:	1bdb      	subs	r3, r3, r7
 80003de:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003e2:	e7a5      	b.n	8000330 <__udivmoddi4+0x9c>
 80003e4:	f1c1 0620 	rsb	r6, r1, #32
 80003e8:	408b      	lsls	r3, r1
 80003ea:	fa22 f706 	lsr.w	r7, r2, r6
 80003ee:	431f      	orrs	r7, r3
 80003f0:	fa20 fc06 	lsr.w	ip, r0, r6
 80003f4:	fa04 f301 	lsl.w	r3, r4, r1
 80003f8:	ea43 030c 	orr.w	r3, r3, ip
 80003fc:	40f4      	lsrs	r4, r6
 80003fe:	fa00 f801 	lsl.w	r8, r0, r1
 8000402:	0c38      	lsrs	r0, r7, #16
 8000404:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000408:	fbb4 fef0 	udiv	lr, r4, r0
 800040c:	fa1f fc87 	uxth.w	ip, r7
 8000410:	fb00 441e 	mls	r4, r0, lr, r4
 8000414:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000418:	fb0e f90c 	mul.w	r9, lr, ip
 800041c:	45a1      	cmp	r9, r4
 800041e:	fa02 f201 	lsl.w	r2, r2, r1
 8000422:	d90a      	bls.n	800043a <__udivmoddi4+0x1a6>
 8000424:	193c      	adds	r4, r7, r4
 8000426:	f10e 3aff 	add.w	sl, lr, #4294967295
 800042a:	f080 8084 	bcs.w	8000536 <__udivmoddi4+0x2a2>
 800042e:	45a1      	cmp	r9, r4
 8000430:	f240 8081 	bls.w	8000536 <__udivmoddi4+0x2a2>
 8000434:	f1ae 0e02 	sub.w	lr, lr, #2
 8000438:	443c      	add	r4, r7
 800043a:	eba4 0409 	sub.w	r4, r4, r9
 800043e:	fa1f f983 	uxth.w	r9, r3
 8000442:	fbb4 f3f0 	udiv	r3, r4, r0
 8000446:	fb00 4413 	mls	r4, r0, r3, r4
 800044a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800044e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000452:	45a4      	cmp	ip, r4
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x1d2>
 8000456:	193c      	adds	r4, r7, r4
 8000458:	f103 30ff 	add.w	r0, r3, #4294967295
 800045c:	d267      	bcs.n	800052e <__udivmoddi4+0x29a>
 800045e:	45a4      	cmp	ip, r4
 8000460:	d965      	bls.n	800052e <__udivmoddi4+0x29a>
 8000462:	3b02      	subs	r3, #2
 8000464:	443c      	add	r4, r7
 8000466:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800046a:	fba0 9302 	umull	r9, r3, r0, r2
 800046e:	eba4 040c 	sub.w	r4, r4, ip
 8000472:	429c      	cmp	r4, r3
 8000474:	46ce      	mov	lr, r9
 8000476:	469c      	mov	ip, r3
 8000478:	d351      	bcc.n	800051e <__udivmoddi4+0x28a>
 800047a:	d04e      	beq.n	800051a <__udivmoddi4+0x286>
 800047c:	b155      	cbz	r5, 8000494 <__udivmoddi4+0x200>
 800047e:	ebb8 030e 	subs.w	r3, r8, lr
 8000482:	eb64 040c 	sbc.w	r4, r4, ip
 8000486:	fa04 f606 	lsl.w	r6, r4, r6
 800048a:	40cb      	lsrs	r3, r1
 800048c:	431e      	orrs	r6, r3
 800048e:	40cc      	lsrs	r4, r1
 8000490:	e9c5 6400 	strd	r6, r4, [r5]
 8000494:	2100      	movs	r1, #0
 8000496:	e750      	b.n	800033a <__udivmoddi4+0xa6>
 8000498:	f1c2 0320 	rsb	r3, r2, #32
 800049c:	fa20 f103 	lsr.w	r1, r0, r3
 80004a0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004a4:	fa24 f303 	lsr.w	r3, r4, r3
 80004a8:	4094      	lsls	r4, r2
 80004aa:	430c      	orrs	r4, r1
 80004ac:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004b0:	fa00 fe02 	lsl.w	lr, r0, r2
 80004b4:	fa1f f78c 	uxth.w	r7, ip
 80004b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80004bc:	fb08 3110 	mls	r1, r8, r0, r3
 80004c0:	0c23      	lsrs	r3, r4, #16
 80004c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004c6:	fb00 f107 	mul.w	r1, r0, r7
 80004ca:	4299      	cmp	r1, r3
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x24c>
 80004ce:	eb1c 0303 	adds.w	r3, ip, r3
 80004d2:	f100 36ff 	add.w	r6, r0, #4294967295
 80004d6:	d22c      	bcs.n	8000532 <__udivmoddi4+0x29e>
 80004d8:	4299      	cmp	r1, r3
 80004da:	d92a      	bls.n	8000532 <__udivmoddi4+0x29e>
 80004dc:	3802      	subs	r0, #2
 80004de:	4463      	add	r3, ip
 80004e0:	1a5b      	subs	r3, r3, r1
 80004e2:	b2a4      	uxth	r4, r4
 80004e4:	fbb3 f1f8 	udiv	r1, r3, r8
 80004e8:	fb08 3311 	mls	r3, r8, r1, r3
 80004ec:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004f0:	fb01 f307 	mul.w	r3, r1, r7
 80004f4:	42a3      	cmp	r3, r4
 80004f6:	d908      	bls.n	800050a <__udivmoddi4+0x276>
 80004f8:	eb1c 0404 	adds.w	r4, ip, r4
 80004fc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000500:	d213      	bcs.n	800052a <__udivmoddi4+0x296>
 8000502:	42a3      	cmp	r3, r4
 8000504:	d911      	bls.n	800052a <__udivmoddi4+0x296>
 8000506:	3902      	subs	r1, #2
 8000508:	4464      	add	r4, ip
 800050a:	1ae4      	subs	r4, r4, r3
 800050c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000510:	e739      	b.n	8000386 <__udivmoddi4+0xf2>
 8000512:	4604      	mov	r4, r0
 8000514:	e6f0      	b.n	80002f8 <__udivmoddi4+0x64>
 8000516:	4608      	mov	r0, r1
 8000518:	e706      	b.n	8000328 <__udivmoddi4+0x94>
 800051a:	45c8      	cmp	r8, r9
 800051c:	d2ae      	bcs.n	800047c <__udivmoddi4+0x1e8>
 800051e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000522:	eb63 0c07 	sbc.w	ip, r3, r7
 8000526:	3801      	subs	r0, #1
 8000528:	e7a8      	b.n	800047c <__udivmoddi4+0x1e8>
 800052a:	4631      	mov	r1, r6
 800052c:	e7ed      	b.n	800050a <__udivmoddi4+0x276>
 800052e:	4603      	mov	r3, r0
 8000530:	e799      	b.n	8000466 <__udivmoddi4+0x1d2>
 8000532:	4630      	mov	r0, r6
 8000534:	e7d4      	b.n	80004e0 <__udivmoddi4+0x24c>
 8000536:	46d6      	mov	lr, sl
 8000538:	e77f      	b.n	800043a <__udivmoddi4+0x1a6>
 800053a:	4463      	add	r3, ip
 800053c:	3802      	subs	r0, #2
 800053e:	e74d      	b.n	80003dc <__udivmoddi4+0x148>
 8000540:	4606      	mov	r6, r0
 8000542:	4623      	mov	r3, r4
 8000544:	4608      	mov	r0, r1
 8000546:	e70f      	b.n	8000368 <__udivmoddi4+0xd4>
 8000548:	3e02      	subs	r6, #2
 800054a:	4463      	add	r3, ip
 800054c:	e730      	b.n	80003b0 <__udivmoddi4+0x11c>
 800054e:	bf00      	nop

08000550 <__aeabi_idiv0>:
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop

08000554 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b086      	sub	sp, #24
 8000558:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800055a:	f000 facb 	bl	8000af4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800055e:	f000 f845 	bl	80005ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000562:	f000 f8d7 	bl	8000714 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000566:	f000 f8ab 	bl	80006c0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  status = xTaskCreate(led_task_handler, "LED Task", configMINIMAL_STACK_SIZE, NULL, 1, NULL);
 800056a:	2300      	movs	r3, #0
 800056c:	9301      	str	r3, [sp, #4]
 800056e:	2301      	movs	r3, #1
 8000570:	9300      	str	r3, [sp, #0]
 8000572:	2300      	movs	r3, #0
 8000574:	2282      	movs	r2, #130	@ 0x82
 8000576:	4919      	ldr	r1, [pc, #100]	@ (80005dc <main+0x88>)
 8000578:	4819      	ldr	r0, [pc, #100]	@ (80005e0 <main+0x8c>)
 800057a:	f002 fa68 	bl	8002a4e <xTaskCreate>
 800057e:	60f8      	str	r0, [r7, #12]
  configASSERT(status == pdPASS);
 8000580:	68fb      	ldr	r3, [r7, #12]
 8000582:	2b01      	cmp	r3, #1
 8000584:	d00b      	beq.n	800059e <main+0x4a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000586:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800058a:	f383 8811 	msr	BASEPRI, r3
 800058e:	f3bf 8f6f 	isb	sy
 8000592:	f3bf 8f4f 	dsb	sy
 8000596:	60bb      	str	r3, [r7, #8]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000598:	bf00      	nop
 800059a:	bf00      	nop
 800059c:	e7fd      	b.n	800059a <main+0x46>

  status = xTaskCreate(button_task_handler, "BUTTON Task", configMINIMAL_STACK_SIZE, NULL, 1, NULL);
 800059e:	2300      	movs	r3, #0
 80005a0:	9301      	str	r3, [sp, #4]
 80005a2:	2301      	movs	r3, #1
 80005a4:	9300      	str	r3, [sp, #0]
 80005a6:	2300      	movs	r3, #0
 80005a8:	2282      	movs	r2, #130	@ 0x82
 80005aa:	490e      	ldr	r1, [pc, #56]	@ (80005e4 <main+0x90>)
 80005ac:	480e      	ldr	r0, [pc, #56]	@ (80005e8 <main+0x94>)
 80005ae:	f002 fa4e 	bl	8002a4e <xTaskCreate>
 80005b2:	60f8      	str	r0, [r7, #12]
  configASSERT(status == pdPASS);
 80005b4:	68fb      	ldr	r3, [r7, #12]
 80005b6:	2b01      	cmp	r3, #1
 80005b8:	d00b      	beq.n	80005d2 <main+0x7e>
        __asm volatile
 80005ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80005be:	f383 8811 	msr	BASEPRI, r3
 80005c2:	f3bf 8f6f 	isb	sy
 80005c6:	f3bf 8f4f 	dsb	sy
 80005ca:	607b      	str	r3, [r7, #4]
    }
 80005cc:	bf00      	nop
 80005ce:	bf00      	nop
 80005d0:	e7fd      	b.n	80005ce <main+0x7a>

  //start the freeRTOS scheduler
  vTaskStartScheduler();
 80005d2:	f002 fba1 	bl	8002d18 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005d6:	bf00      	nop
 80005d8:	e7fd      	b.n	80005d6 <main+0x82>
 80005da:	bf00      	nop
 80005dc:	08005088 	.word	0x08005088
 80005e0:	080007e9 	.word	0x080007e9
 80005e4:	08005094 	.word	0x08005094
 80005e8:	0800081d 	.word	0x0800081d

080005ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b094      	sub	sp, #80	@ 0x50
 80005f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005f2:	f107 0320 	add.w	r3, r7, #32
 80005f6:	2230      	movs	r2, #48	@ 0x30
 80005f8:	2100      	movs	r1, #0
 80005fa:	4618      	mov	r0, r3
 80005fc:	f004 fcfe 	bl	8004ffc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000600:	f107 030c 	add.w	r3, r7, #12
 8000604:	2200      	movs	r2, #0
 8000606:	601a      	str	r2, [r3, #0]
 8000608:	605a      	str	r2, [r3, #4]
 800060a:	609a      	str	r2, [r3, #8]
 800060c:	60da      	str	r2, [r3, #12]
 800060e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000610:	2300      	movs	r3, #0
 8000612:	60bb      	str	r3, [r7, #8]
 8000614:	4b28      	ldr	r3, [pc, #160]	@ (80006b8 <SystemClock_Config+0xcc>)
 8000616:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000618:	4a27      	ldr	r2, [pc, #156]	@ (80006b8 <SystemClock_Config+0xcc>)
 800061a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800061e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000620:	4b25      	ldr	r3, [pc, #148]	@ (80006b8 <SystemClock_Config+0xcc>)
 8000622:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000624:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000628:	60bb      	str	r3, [r7, #8]
 800062a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800062c:	2300      	movs	r3, #0
 800062e:	607b      	str	r3, [r7, #4]
 8000630:	4b22      	ldr	r3, [pc, #136]	@ (80006bc <SystemClock_Config+0xd0>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	4a21      	ldr	r2, [pc, #132]	@ (80006bc <SystemClock_Config+0xd0>)
 8000636:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800063a:	6013      	str	r3, [r2, #0]
 800063c:	4b1f      	ldr	r3, [pc, #124]	@ (80006bc <SystemClock_Config+0xd0>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000644:	607b      	str	r3, [r7, #4]
 8000646:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000648:	2302      	movs	r3, #2
 800064a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800064c:	2301      	movs	r3, #1
 800064e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000650:	2310      	movs	r3, #16
 8000652:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000654:	2302      	movs	r3, #2
 8000656:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000658:	2300      	movs	r3, #0
 800065a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800065c:	2308      	movs	r3, #8
 800065e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000660:	23a8      	movs	r3, #168	@ 0xa8
 8000662:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000664:	2302      	movs	r3, #2
 8000666:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000668:	2307      	movs	r3, #7
 800066a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800066c:	f107 0320 	add.w	r3, r7, #32
 8000670:	4618      	mov	r0, r3
 8000672:	f000 fd55 	bl	8001120 <HAL_RCC_OscConfig>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800067c:	f000 f8f8 	bl	8000870 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000680:	230f      	movs	r3, #15
 8000682:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000684:	2302      	movs	r3, #2
 8000686:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000688:	2300      	movs	r3, #0
 800068a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800068c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000690:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000692:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000696:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000698:	f107 030c 	add.w	r3, r7, #12
 800069c:	2105      	movs	r1, #5
 800069e:	4618      	mov	r0, r3
 80006a0:	f000 ffac 	bl	80015fc <HAL_RCC_ClockConfig>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006aa:	f000 f8e1 	bl	8000870 <Error_Handler>
  }
}
 80006ae:	bf00      	nop
 80006b0:	3750      	adds	r7, #80	@ 0x50
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	40023800 	.word	0x40023800
 80006bc:	40007000 	.word	0x40007000

080006c0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006c4:	4b11      	ldr	r3, [pc, #68]	@ (800070c <MX_USART1_UART_Init+0x4c>)
 80006c6:	4a12      	ldr	r2, [pc, #72]	@ (8000710 <MX_USART1_UART_Init+0x50>)
 80006c8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80006ca:	4b10      	ldr	r3, [pc, #64]	@ (800070c <MX_USART1_UART_Init+0x4c>)
 80006cc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80006d0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006d2:	4b0e      	ldr	r3, [pc, #56]	@ (800070c <MX_USART1_UART_Init+0x4c>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006d8:	4b0c      	ldr	r3, [pc, #48]	@ (800070c <MX_USART1_UART_Init+0x4c>)
 80006da:	2200      	movs	r2, #0
 80006dc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_EVEN;
 80006de:	4b0b      	ldr	r3, [pc, #44]	@ (800070c <MX_USART1_UART_Init+0x4c>)
 80006e0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80006e4:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006e6:	4b09      	ldr	r3, [pc, #36]	@ (800070c <MX_USART1_UART_Init+0x4c>)
 80006e8:	220c      	movs	r2, #12
 80006ea:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006ec:	4b07      	ldr	r3, [pc, #28]	@ (800070c <MX_USART1_UART_Init+0x4c>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006f2:	4b06      	ldr	r3, [pc, #24]	@ (800070c <MX_USART1_UART_Init+0x4c>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80006f8:	4804      	ldr	r0, [pc, #16]	@ (800070c <MX_USART1_UART_Init+0x4c>)
 80006fa:	f001 fc0f 	bl	8001f1c <HAL_UART_Init>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <MX_USART1_UART_Init+0x48>
  {
    Error_Handler();
 8000704:	f000 f8b4 	bl	8000870 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000708:	bf00      	nop
 800070a:	bd80      	pop	{r7, pc}
 800070c:	20000030 	.word	0x20000030
 8000710:	40011000 	.word	0x40011000

08000714 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b088      	sub	sp, #32
 8000718:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800071a:	f107 030c 	add.w	r3, r7, #12
 800071e:	2200      	movs	r2, #0
 8000720:	601a      	str	r2, [r3, #0]
 8000722:	605a      	str	r2, [r3, #4]
 8000724:	609a      	str	r2, [r3, #8]
 8000726:	60da      	str	r2, [r3, #12]
 8000728:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800072a:	2300      	movs	r3, #0
 800072c:	60bb      	str	r3, [r7, #8]
 800072e:	4b2a      	ldr	r3, [pc, #168]	@ (80007d8 <MX_GPIO_Init+0xc4>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000732:	4a29      	ldr	r2, [pc, #164]	@ (80007d8 <MX_GPIO_Init+0xc4>)
 8000734:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000738:	6313      	str	r3, [r2, #48]	@ 0x30
 800073a:	4b27      	ldr	r3, [pc, #156]	@ (80007d8 <MX_GPIO_Init+0xc4>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800073e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000742:	60bb      	str	r3, [r7, #8]
 8000744:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000746:	2300      	movs	r3, #0
 8000748:	607b      	str	r3, [r7, #4]
 800074a:	4b23      	ldr	r3, [pc, #140]	@ (80007d8 <MX_GPIO_Init+0xc4>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800074e:	4a22      	ldr	r2, [pc, #136]	@ (80007d8 <MX_GPIO_Init+0xc4>)
 8000750:	f043 0301 	orr.w	r3, r3, #1
 8000754:	6313      	str	r3, [r2, #48]	@ 0x30
 8000756:	4b20      	ldr	r3, [pc, #128]	@ (80007d8 <MX_GPIO_Init+0xc4>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800075a:	f003 0301 	and.w	r3, r3, #1
 800075e:	607b      	str	r3, [r7, #4]
 8000760:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000762:	2300      	movs	r3, #0
 8000764:	603b      	str	r3, [r7, #0]
 8000766:	4b1c      	ldr	r3, [pc, #112]	@ (80007d8 <MX_GPIO_Init+0xc4>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800076a:	4a1b      	ldr	r2, [pc, #108]	@ (80007d8 <MX_GPIO_Init+0xc4>)
 800076c:	f043 0308 	orr.w	r3, r3, #8
 8000770:	6313      	str	r3, [r2, #48]	@ 0x30
 8000772:	4b19      	ldr	r3, [pc, #100]	@ (80007d8 <MX_GPIO_Init+0xc4>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000776:	f003 0308 	and.w	r3, r3, #8
 800077a:	603b      	str	r3, [r7, #0]
 800077c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 800077e:	2200      	movs	r2, #0
 8000780:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000784:	4815      	ldr	r0, [pc, #84]	@ (80007dc <MX_GPIO_Init+0xc8>)
 8000786:	f000 fc8d 	bl	80010a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800078a:	2301      	movs	r3, #1
 800078c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800078e:	4b14      	ldr	r3, [pc, #80]	@ (80007e0 <MX_GPIO_Init+0xcc>)
 8000790:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000792:	2300      	movs	r3, #0
 8000794:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000796:	f107 030c 	add.w	r3, r7, #12
 800079a:	4619      	mov	r1, r3
 800079c:	4811      	ldr	r0, [pc, #68]	@ (80007e4 <MX_GPIO_Init+0xd0>)
 800079e:	f000 facd 	bl	8000d3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80007a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80007a6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007a8:	2301      	movs	r3, #1
 80007aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ac:	2300      	movs	r3, #0
 80007ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b0:	2300      	movs	r3, #0
 80007b2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007b4:	f107 030c 	add.w	r3, r7, #12
 80007b8:	4619      	mov	r1, r3
 80007ba:	4808      	ldr	r0, [pc, #32]	@ (80007dc <MX_GPIO_Init+0xc8>)
 80007bc:	f000 fabe 	bl	8000d3c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80007c0:	2200      	movs	r2, #0
 80007c2:	2100      	movs	r1, #0
 80007c4:	2006      	movs	r0, #6
 80007c6:	f000 fa8f 	bl	8000ce8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80007ca:	2006      	movs	r0, #6
 80007cc:	f000 faa8 	bl	8000d20 <HAL_NVIC_EnableIRQ>

}
 80007d0:	bf00      	nop
 80007d2:	3720      	adds	r7, #32
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	40023800 	.word	0x40023800
 80007dc:	40020c00 	.word	0x40020c00
 80007e0:	10110000 	.word	0x10110000
 80007e4:	40020000 	.word	0x40020000

080007e8 <led_task_handler>:

/* USER CODE BEGIN 4 */

static void led_task_handler(void* parameters)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b082      	sub	sp, #8
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
	while(1)
	{
		if(BNT_Status == PRESS)
 80007f0:	4b08      	ldr	r3, [pc, #32]	@ (8000814 <led_task_handler+0x2c>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	2b01      	cmp	r3, #1
 80007f6:	d106      	bne.n	8000806 <led_task_handler+0x1e>
		{
			// set led
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 80007f8:	2201      	movs	r2, #1
 80007fa:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80007fe:	4806      	ldr	r0, [pc, #24]	@ (8000818 <led_task_handler+0x30>)
 8000800:	f000 fc50 	bl	80010a4 <HAL_GPIO_WritePin>
 8000804:	e7f4      	b.n	80007f0 <led_task_handler+0x8>
		}else
		{
			// off led
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8000806:	2200      	movs	r2, #0
 8000808:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800080c:	4802      	ldr	r0, [pc, #8]	@ (8000818 <led_task_handler+0x30>)
 800080e:	f000 fc49 	bl	80010a4 <HAL_GPIO_WritePin>
		if(BNT_Status == PRESS)
 8000812:	e7ed      	b.n	80007f0 <led_task_handler+0x8>
 8000814:	20000070 	.word	0x20000070
 8000818:	40020c00 	.word	0x40020c00

0800081c <button_task_handler>:
		}
	}
}

static void button_task_handler(void* parameters)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b082      	sub	sp, #8
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
	while(1)
	{
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_SET)
 8000824:	2101      	movs	r1, #1
 8000826:	4807      	ldr	r0, [pc, #28]	@ (8000844 <button_task_handler+0x28>)
 8000828:	f000 fc24 	bl	8001074 <HAL_GPIO_ReadPin>
 800082c:	4603      	mov	r3, r0
 800082e:	2b01      	cmp	r3, #1
 8000830:	d103      	bne.n	800083a <button_task_handler+0x1e>
		{
			BNT_Status = PRESS;
 8000832:	4b05      	ldr	r3, [pc, #20]	@ (8000848 <button_task_handler+0x2c>)
 8000834:	2201      	movs	r2, #1
 8000836:	601a      	str	r2, [r3, #0]
 8000838:	e7f4      	b.n	8000824 <button_task_handler+0x8>
		}else
		{
			BNT_Status = UNPRESS;
 800083a:	4b03      	ldr	r3, [pc, #12]	@ (8000848 <button_task_handler+0x2c>)
 800083c:	2200      	movs	r2, #0
 800083e:	601a      	str	r2, [r3, #0]
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_SET)
 8000840:	e7f0      	b.n	8000824 <button_task_handler+0x8>
 8000842:	bf00      	nop
 8000844:	40020000 	.word	0x40020000
 8000848:	20000070 	.word	0x20000070

0800084c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	4a04      	ldr	r2, [pc, #16]	@ (800086c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800085a:	4293      	cmp	r3, r2
 800085c:	d101      	bne.n	8000862 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800085e:	f000 f96b 	bl	8000b38 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000862:	bf00      	nop
 8000864:	3708      	adds	r7, #8
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	40001000 	.word	0x40001000

08000870 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000874:	bf00      	nop
 8000876:	46bd      	mov	sp, r7
 8000878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087c:	4770      	bx	lr
	...

08000880 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b082      	sub	sp, #8
 8000884:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000886:	2300      	movs	r3, #0
 8000888:	607b      	str	r3, [r7, #4]
 800088a:	4b10      	ldr	r3, [pc, #64]	@ (80008cc <HAL_MspInit+0x4c>)
 800088c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800088e:	4a0f      	ldr	r2, [pc, #60]	@ (80008cc <HAL_MspInit+0x4c>)
 8000890:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000894:	6453      	str	r3, [r2, #68]	@ 0x44
 8000896:	4b0d      	ldr	r3, [pc, #52]	@ (80008cc <HAL_MspInit+0x4c>)
 8000898:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800089a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800089e:	607b      	str	r3, [r7, #4]
 80008a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008a2:	2300      	movs	r3, #0
 80008a4:	603b      	str	r3, [r7, #0]
 80008a6:	4b09      	ldr	r3, [pc, #36]	@ (80008cc <HAL_MspInit+0x4c>)
 80008a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008aa:	4a08      	ldr	r2, [pc, #32]	@ (80008cc <HAL_MspInit+0x4c>)
 80008ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80008b2:	4b06      	ldr	r3, [pc, #24]	@ (80008cc <HAL_MspInit+0x4c>)
 80008b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008ba:	603b      	str	r3, [r7, #0]
 80008bc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  vInitPrioGroupValue();
 80008be:	f002 fe45 	bl	800354c <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 80008c2:	bf00      	nop
 80008c4:	3708      	adds	r7, #8
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	40023800 	.word	0x40023800

080008d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b08a      	sub	sp, #40	@ 0x28
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d8:	f107 0314 	add.w	r3, r7, #20
 80008dc:	2200      	movs	r2, #0
 80008de:	601a      	str	r2, [r3, #0]
 80008e0:	605a      	str	r2, [r3, #4]
 80008e2:	609a      	str	r2, [r3, #8]
 80008e4:	60da      	str	r2, [r3, #12]
 80008e6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	4a19      	ldr	r2, [pc, #100]	@ (8000954 <HAL_UART_MspInit+0x84>)
 80008ee:	4293      	cmp	r3, r2
 80008f0:	d12c      	bne.n	800094c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80008f2:	2300      	movs	r3, #0
 80008f4:	613b      	str	r3, [r7, #16]
 80008f6:	4b18      	ldr	r3, [pc, #96]	@ (8000958 <HAL_UART_MspInit+0x88>)
 80008f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008fa:	4a17      	ldr	r2, [pc, #92]	@ (8000958 <HAL_UART_MspInit+0x88>)
 80008fc:	f043 0310 	orr.w	r3, r3, #16
 8000900:	6453      	str	r3, [r2, #68]	@ 0x44
 8000902:	4b15      	ldr	r3, [pc, #84]	@ (8000958 <HAL_UART_MspInit+0x88>)
 8000904:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000906:	f003 0310 	and.w	r3, r3, #16
 800090a:	613b      	str	r3, [r7, #16]
 800090c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800090e:	2300      	movs	r3, #0
 8000910:	60fb      	str	r3, [r7, #12]
 8000912:	4b11      	ldr	r3, [pc, #68]	@ (8000958 <HAL_UART_MspInit+0x88>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000916:	4a10      	ldr	r2, [pc, #64]	@ (8000958 <HAL_UART_MspInit+0x88>)
 8000918:	f043 0301 	orr.w	r3, r3, #1
 800091c:	6313      	str	r3, [r2, #48]	@ 0x30
 800091e:	4b0e      	ldr	r3, [pc, #56]	@ (8000958 <HAL_UART_MspInit+0x88>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000922:	f003 0301 	and.w	r3, r3, #1
 8000926:	60fb      	str	r3, [r7, #12]
 8000928:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800092a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800092e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000930:	2302      	movs	r3, #2
 8000932:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000934:	2300      	movs	r3, #0
 8000936:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000938:	2303      	movs	r3, #3
 800093a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800093c:	2307      	movs	r3, #7
 800093e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000940:	f107 0314 	add.w	r3, r7, #20
 8000944:	4619      	mov	r1, r3
 8000946:	4805      	ldr	r0, [pc, #20]	@ (800095c <HAL_UART_MspInit+0x8c>)
 8000948:	f000 f9f8 	bl	8000d3c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800094c:	bf00      	nop
 800094e:	3728      	adds	r7, #40	@ 0x28
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}
 8000954:	40011000 	.word	0x40011000
 8000958:	40023800 	.word	0x40023800
 800095c:	40020000 	.word	0x40020000

08000960 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b08c      	sub	sp, #48	@ 0x30
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000968:	2300      	movs	r3, #0
 800096a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t              uwPrescalerValue = 0;
 800096c:	2300      	movs	r3, #0
 800096e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000970:	2200      	movs	r2, #0
 8000972:	6879      	ldr	r1, [r7, #4]
 8000974:	2036      	movs	r0, #54	@ 0x36
 8000976:	f000 f9b7 	bl	8000ce8 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800097a:	2036      	movs	r0, #54	@ 0x36
 800097c:	f000 f9d0 	bl	8000d20 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000980:	2300      	movs	r3, #0
 8000982:	60fb      	str	r3, [r7, #12]
 8000984:	4b1f      	ldr	r3, [pc, #124]	@ (8000a04 <HAL_InitTick+0xa4>)
 8000986:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000988:	4a1e      	ldr	r2, [pc, #120]	@ (8000a04 <HAL_InitTick+0xa4>)
 800098a:	f043 0310 	orr.w	r3, r3, #16
 800098e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000990:	4b1c      	ldr	r3, [pc, #112]	@ (8000a04 <HAL_InitTick+0xa4>)
 8000992:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000994:	f003 0310 	and.w	r3, r3, #16
 8000998:	60fb      	str	r3, [r7, #12]
 800099a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800099c:	f107 0210 	add.w	r2, r7, #16
 80009a0:	f107 0314 	add.w	r3, r7, #20
 80009a4:	4611      	mov	r1, r2
 80009a6:	4618      	mov	r0, r3
 80009a8:	f001 f848 	bl	8001a3c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80009ac:	f001 f81e 	bl	80019ec <HAL_RCC_GetPCLK1Freq>
 80009b0:	4603      	mov	r3, r0
 80009b2:	005b      	lsls	r3, r3, #1
 80009b4:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80009b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80009b8:	4a13      	ldr	r2, [pc, #76]	@ (8000a08 <HAL_InitTick+0xa8>)
 80009ba:	fba2 2303 	umull	r2, r3, r2, r3
 80009be:	0c9b      	lsrs	r3, r3, #18
 80009c0:	3b01      	subs	r3, #1
 80009c2:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80009c4:	4b11      	ldr	r3, [pc, #68]	@ (8000a0c <HAL_InitTick+0xac>)
 80009c6:	4a12      	ldr	r2, [pc, #72]	@ (8000a10 <HAL_InitTick+0xb0>)
 80009c8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 80009ca:	4b10      	ldr	r3, [pc, #64]	@ (8000a0c <HAL_InitTick+0xac>)
 80009cc:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80009d0:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80009d2:	4a0e      	ldr	r2, [pc, #56]	@ (8000a0c <HAL_InitTick+0xac>)
 80009d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80009d6:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80009d8:	4b0c      	ldr	r3, [pc, #48]	@ (8000a0c <HAL_InitTick+0xac>)
 80009da:	2200      	movs	r2, #0
 80009dc:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009de:	4b0b      	ldr	r3, [pc, #44]	@ (8000a0c <HAL_InitTick+0xac>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80009e4:	4809      	ldr	r0, [pc, #36]	@ (8000a0c <HAL_InitTick+0xac>)
 80009e6:	f001 f85b 	bl	8001aa0 <HAL_TIM_Base_Init>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d104      	bne.n	80009fa <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80009f0:	4806      	ldr	r0, [pc, #24]	@ (8000a0c <HAL_InitTick+0xac>)
 80009f2:	f001 f88a 	bl	8001b0a <HAL_TIM_Base_Start_IT>
 80009f6:	4603      	mov	r3, r0
 80009f8:	e000      	b.n	80009fc <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80009fa:	2301      	movs	r3, #1
}
 80009fc:	4618      	mov	r0, r3
 80009fe:	3730      	adds	r7, #48	@ 0x30
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	40023800 	.word	0x40023800
 8000a08:	431bde83 	.word	0x431bde83
 8000a0c:	20000074 	.word	0x20000074
 8000a10:	40001000 	.word	0x40001000

08000a14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000a18:	bf00      	nop
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a20:	4770      	bx	lr

08000a22 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a22:	b480      	push	{r7}
 8000a24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a26:	bf00      	nop
 8000a28:	e7fd      	b.n	8000a26 <HardFault_Handler+0x4>

08000a2a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a2a:	b480      	push	{r7}
 8000a2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a2e:	bf00      	nop
 8000a30:	e7fd      	b.n	8000a2e <MemManage_Handler+0x4>

08000a32 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a32:	b480      	push	{r7}
 8000a34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a36:	bf00      	nop
 8000a38:	e7fd      	b.n	8000a36 <BusFault_Handler+0x4>

08000a3a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a3a:	b480      	push	{r7}
 8000a3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a3e:	bf00      	nop
 8000a40:	e7fd      	b.n	8000a3e <UsageFault_Handler+0x4>

08000a42 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a42:	b480      	push	{r7}
 8000a44:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a46:	bf00      	nop
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4e:	4770      	bx	lr

08000a50 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000a54:	2001      	movs	r0, #1
 8000a56:	f000 fb3f 	bl	80010d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000a5a:	bf00      	nop
 8000a5c:	bd80      	pop	{r7, pc}
	...

08000a60 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000a64:	4802      	ldr	r0, [pc, #8]	@ (8000a70 <TIM6_DAC_IRQHandler+0x10>)
 8000a66:	f001 f874 	bl	8001b52 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000a6a:	bf00      	nop
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	20000074 	.word	0x20000074

08000a74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a78:	4b08      	ldr	r3, [pc, #32]	@ (8000a9c <SystemInit+0x28>)
 8000a7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a7e:	4a07      	ldr	r2, [pc, #28]	@ (8000a9c <SystemInit+0x28>)
 8000a80:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a84:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a88:	4b04      	ldr	r3, [pc, #16]	@ (8000a9c <SystemInit+0x28>)
 8000a8a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000a8e:	609a      	str	r2, [r3, #8]
#endif
}
 8000a90:	bf00      	nop
 8000a92:	46bd      	mov	sp, r7
 8000a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop
 8000a9c:	e000ed00 	.word	0xe000ed00

08000aa0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000aa0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ad8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000aa4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000aa6:	e003      	b.n	8000ab0 <LoopCopyDataInit>

08000aa8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000aa8:	4b0c      	ldr	r3, [pc, #48]	@ (8000adc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000aaa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000aac:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000aae:	3104      	adds	r1, #4

08000ab0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000ab0:	480b      	ldr	r0, [pc, #44]	@ (8000ae0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000ab2:	4b0c      	ldr	r3, [pc, #48]	@ (8000ae4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000ab4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000ab6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000ab8:	d3f6      	bcc.n	8000aa8 <CopyDataInit>
  ldr  r2, =_sbss
 8000aba:	4a0b      	ldr	r2, [pc, #44]	@ (8000ae8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000abc:	e002      	b.n	8000ac4 <LoopFillZerobss>

08000abe <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000abe:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000ac0:	f842 3b04 	str.w	r3, [r2], #4

08000ac4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000ac4:	4b09      	ldr	r3, [pc, #36]	@ (8000aec <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000ac6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000ac8:	d3f9      	bcc.n	8000abe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000aca:	f7ff ffd3 	bl	8000a74 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ace:	f004 fa9d 	bl	800500c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ad2:	f7ff fd3f 	bl	8000554 <main>
  bx  lr    
 8000ad6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000ad8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000adc:	0800514c 	.word	0x0800514c
  ldr  r0, =_sdata
 8000ae0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000ae4:	20000014 	.word	0x20000014
  ldr  r2, =_sbss
 8000ae8:	20000014 	.word	0x20000014
  ldr  r3, = _ebss
 8000aec:	2001345c 	.word	0x2001345c

08000af0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000af0:	e7fe      	b.n	8000af0 <ADC_IRQHandler>
	...

08000af4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000af8:	4b0e      	ldr	r3, [pc, #56]	@ (8000b34 <HAL_Init+0x40>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	4a0d      	ldr	r2, [pc, #52]	@ (8000b34 <HAL_Init+0x40>)
 8000afe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000b02:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b04:	4b0b      	ldr	r3, [pc, #44]	@ (8000b34 <HAL_Init+0x40>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	4a0a      	ldr	r2, [pc, #40]	@ (8000b34 <HAL_Init+0x40>)
 8000b0a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000b0e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b10:	4b08      	ldr	r3, [pc, #32]	@ (8000b34 <HAL_Init+0x40>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	4a07      	ldr	r2, [pc, #28]	@ (8000b34 <HAL_Init+0x40>)
 8000b16:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b1a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b1c:	2003      	movs	r0, #3
 8000b1e:	f000 f8d8 	bl	8000cd2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b22:	2000      	movs	r0, #0
 8000b24:	f7ff ff1c 	bl	8000960 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b28:	f7ff feaa 	bl	8000880 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b2c:	2300      	movs	r3, #0
}
 8000b2e:	4618      	mov	r0, r3
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	40023c00 	.word	0x40023c00

08000b38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b3c:	4b06      	ldr	r3, [pc, #24]	@ (8000b58 <HAL_IncTick+0x20>)
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	461a      	mov	r2, r3
 8000b42:	4b06      	ldr	r3, [pc, #24]	@ (8000b5c <HAL_IncTick+0x24>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	4413      	add	r3, r2
 8000b48:	4a04      	ldr	r2, [pc, #16]	@ (8000b5c <HAL_IncTick+0x24>)
 8000b4a:	6013      	str	r3, [r2, #0]
}
 8000b4c:	bf00      	nop
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop
 8000b58:	20000008 	.word	0x20000008
 8000b5c:	200000b4 	.word	0x200000b4

08000b60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  return uwTick;
 8000b64:	4b03      	ldr	r3, [pc, #12]	@ (8000b74 <HAL_GetTick+0x14>)
 8000b66:	681b      	ldr	r3, [r3, #0]
}
 8000b68:	4618      	mov	r0, r3
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop
 8000b74:	200000b4 	.word	0x200000b4

08000b78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b085      	sub	sp, #20
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	f003 0307 	and.w	r3, r3, #7
 8000b86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b88:	4b0c      	ldr	r3, [pc, #48]	@ (8000bbc <__NVIC_SetPriorityGrouping+0x44>)
 8000b8a:	68db      	ldr	r3, [r3, #12]
 8000b8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b8e:	68ba      	ldr	r2, [r7, #8]
 8000b90:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b94:	4013      	ands	r3, r2
 8000b96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b9c:	68bb      	ldr	r3, [r7, #8]
 8000b9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ba0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ba4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ba8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000baa:	4a04      	ldr	r2, [pc, #16]	@ (8000bbc <__NVIC_SetPriorityGrouping+0x44>)
 8000bac:	68bb      	ldr	r3, [r7, #8]
 8000bae:	60d3      	str	r3, [r2, #12]
}
 8000bb0:	bf00      	nop
 8000bb2:	3714      	adds	r7, #20
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr
 8000bbc:	e000ed00 	.word	0xe000ed00

08000bc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bc4:	4b04      	ldr	r3, [pc, #16]	@ (8000bd8 <__NVIC_GetPriorityGrouping+0x18>)
 8000bc6:	68db      	ldr	r3, [r3, #12]
 8000bc8:	0a1b      	lsrs	r3, r3, #8
 8000bca:	f003 0307 	and.w	r3, r3, #7
}
 8000bce:	4618      	mov	r0, r3
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd6:	4770      	bx	lr
 8000bd8:	e000ed00 	.word	0xe000ed00

08000bdc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b083      	sub	sp, #12
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	4603      	mov	r3, r0
 8000be4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000be6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	db0b      	blt.n	8000c06 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bee:	79fb      	ldrb	r3, [r7, #7]
 8000bf0:	f003 021f 	and.w	r2, r3, #31
 8000bf4:	4907      	ldr	r1, [pc, #28]	@ (8000c14 <__NVIC_EnableIRQ+0x38>)
 8000bf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bfa:	095b      	lsrs	r3, r3, #5
 8000bfc:	2001      	movs	r0, #1
 8000bfe:	fa00 f202 	lsl.w	r2, r0, r2
 8000c02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c06:	bf00      	nop
 8000c08:	370c      	adds	r7, #12
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr
 8000c12:	bf00      	nop
 8000c14:	e000e100 	.word	0xe000e100

08000c18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b083      	sub	sp, #12
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	4603      	mov	r3, r0
 8000c20:	6039      	str	r1, [r7, #0]
 8000c22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	db0a      	blt.n	8000c42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	b2da      	uxtb	r2, r3
 8000c30:	490c      	ldr	r1, [pc, #48]	@ (8000c64 <__NVIC_SetPriority+0x4c>)
 8000c32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c36:	0112      	lsls	r2, r2, #4
 8000c38:	b2d2      	uxtb	r2, r2
 8000c3a:	440b      	add	r3, r1
 8000c3c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c40:	e00a      	b.n	8000c58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	b2da      	uxtb	r2, r3
 8000c46:	4908      	ldr	r1, [pc, #32]	@ (8000c68 <__NVIC_SetPriority+0x50>)
 8000c48:	79fb      	ldrb	r3, [r7, #7]
 8000c4a:	f003 030f 	and.w	r3, r3, #15
 8000c4e:	3b04      	subs	r3, #4
 8000c50:	0112      	lsls	r2, r2, #4
 8000c52:	b2d2      	uxtb	r2, r2
 8000c54:	440b      	add	r3, r1
 8000c56:	761a      	strb	r2, [r3, #24]
}
 8000c58:	bf00      	nop
 8000c5a:	370c      	adds	r7, #12
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c62:	4770      	bx	lr
 8000c64:	e000e100 	.word	0xe000e100
 8000c68:	e000ed00 	.word	0xe000ed00

08000c6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b089      	sub	sp, #36	@ 0x24
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	60f8      	str	r0, [r7, #12]
 8000c74:	60b9      	str	r1, [r7, #8]
 8000c76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	f003 0307 	and.w	r3, r3, #7
 8000c7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c80:	69fb      	ldr	r3, [r7, #28]
 8000c82:	f1c3 0307 	rsb	r3, r3, #7
 8000c86:	2b04      	cmp	r3, #4
 8000c88:	bf28      	it	cs
 8000c8a:	2304      	movcs	r3, #4
 8000c8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c8e:	69fb      	ldr	r3, [r7, #28]
 8000c90:	3304      	adds	r3, #4
 8000c92:	2b06      	cmp	r3, #6
 8000c94:	d902      	bls.n	8000c9c <NVIC_EncodePriority+0x30>
 8000c96:	69fb      	ldr	r3, [r7, #28]
 8000c98:	3b03      	subs	r3, #3
 8000c9a:	e000      	b.n	8000c9e <NVIC_EncodePriority+0x32>
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ca0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ca4:	69bb      	ldr	r3, [r7, #24]
 8000ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8000caa:	43da      	mvns	r2, r3
 8000cac:	68bb      	ldr	r3, [r7, #8]
 8000cae:	401a      	ands	r2, r3
 8000cb0:	697b      	ldr	r3, [r7, #20]
 8000cb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cb4:	f04f 31ff 	mov.w	r1, #4294967295
 8000cb8:	697b      	ldr	r3, [r7, #20]
 8000cba:	fa01 f303 	lsl.w	r3, r1, r3
 8000cbe:	43d9      	mvns	r1, r3
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cc4:	4313      	orrs	r3, r2
         );
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	3724      	adds	r7, #36	@ 0x24
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr

08000cd2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cd2:	b580      	push	{r7, lr}
 8000cd4:	b082      	sub	sp, #8
 8000cd6:	af00      	add	r7, sp, #0
 8000cd8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cda:	6878      	ldr	r0, [r7, #4]
 8000cdc:	f7ff ff4c 	bl	8000b78 <__NVIC_SetPriorityGrouping>
}
 8000ce0:	bf00      	nop
 8000ce2:	3708      	adds	r7, #8
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}

08000ce8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b086      	sub	sp, #24
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	4603      	mov	r3, r0
 8000cf0:	60b9      	str	r1, [r7, #8]
 8000cf2:	607a      	str	r2, [r7, #4]
 8000cf4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cfa:	f7ff ff61 	bl	8000bc0 <__NVIC_GetPriorityGrouping>
 8000cfe:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d00:	687a      	ldr	r2, [r7, #4]
 8000d02:	68b9      	ldr	r1, [r7, #8]
 8000d04:	6978      	ldr	r0, [r7, #20]
 8000d06:	f7ff ffb1 	bl	8000c6c <NVIC_EncodePriority>
 8000d0a:	4602      	mov	r2, r0
 8000d0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d10:	4611      	mov	r1, r2
 8000d12:	4618      	mov	r0, r3
 8000d14:	f7ff ff80 	bl	8000c18 <__NVIC_SetPriority>
}
 8000d18:	bf00      	nop
 8000d1a:	3718      	adds	r7, #24
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}

08000d20 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	4603      	mov	r3, r0
 8000d28:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f7ff ff54 	bl	8000bdc <__NVIC_EnableIRQ>
}
 8000d34:	bf00      	nop
 8000d36:	3708      	adds	r7, #8
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}

08000d3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b089      	sub	sp, #36	@ 0x24
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
 8000d44:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d46:	2300      	movs	r3, #0
 8000d48:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d52:	2300      	movs	r3, #0
 8000d54:	61fb      	str	r3, [r7, #28]
 8000d56:	e16b      	b.n	8001030 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d58:	2201      	movs	r2, #1
 8000d5a:	69fb      	ldr	r3, [r7, #28]
 8000d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d60:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	697a      	ldr	r2, [r7, #20]
 8000d68:	4013      	ands	r3, r2
 8000d6a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d6c:	693a      	ldr	r2, [r7, #16]
 8000d6e:	697b      	ldr	r3, [r7, #20]
 8000d70:	429a      	cmp	r2, r3
 8000d72:	f040 815a 	bne.w	800102a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	685b      	ldr	r3, [r3, #4]
 8000d7a:	2b01      	cmp	r3, #1
 8000d7c:	d00b      	beq.n	8000d96 <HAL_GPIO_Init+0x5a>
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	685b      	ldr	r3, [r3, #4]
 8000d82:	2b02      	cmp	r3, #2
 8000d84:	d007      	beq.n	8000d96 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d8a:	2b11      	cmp	r3, #17
 8000d8c:	d003      	beq.n	8000d96 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	685b      	ldr	r3, [r3, #4]
 8000d92:	2b12      	cmp	r3, #18
 8000d94:	d130      	bne.n	8000df8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	689b      	ldr	r3, [r3, #8]
 8000d9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d9c:	69fb      	ldr	r3, [r7, #28]
 8000d9e:	005b      	lsls	r3, r3, #1
 8000da0:	2203      	movs	r2, #3
 8000da2:	fa02 f303 	lsl.w	r3, r2, r3
 8000da6:	43db      	mvns	r3, r3
 8000da8:	69ba      	ldr	r2, [r7, #24]
 8000daa:	4013      	ands	r3, r2
 8000dac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	68da      	ldr	r2, [r3, #12]
 8000db2:	69fb      	ldr	r3, [r7, #28]
 8000db4:	005b      	lsls	r3, r3, #1
 8000db6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dba:	69ba      	ldr	r2, [r7, #24]
 8000dbc:	4313      	orrs	r3, r2
 8000dbe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	69ba      	ldr	r2, [r7, #24]
 8000dc4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	685b      	ldr	r3, [r3, #4]
 8000dca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000dcc:	2201      	movs	r2, #1
 8000dce:	69fb      	ldr	r3, [r7, #28]
 8000dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd4:	43db      	mvns	r3, r3
 8000dd6:	69ba      	ldr	r2, [r7, #24]
 8000dd8:	4013      	ands	r3, r2
 8000dda:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	685b      	ldr	r3, [r3, #4]
 8000de0:	091b      	lsrs	r3, r3, #4
 8000de2:	f003 0201 	and.w	r2, r3, #1
 8000de6:	69fb      	ldr	r3, [r7, #28]
 8000de8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dec:	69ba      	ldr	r2, [r7, #24]
 8000dee:	4313      	orrs	r3, r2
 8000df0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	69ba      	ldr	r2, [r7, #24]
 8000df6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	68db      	ldr	r3, [r3, #12]
 8000dfc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000dfe:	69fb      	ldr	r3, [r7, #28]
 8000e00:	005b      	lsls	r3, r3, #1
 8000e02:	2203      	movs	r2, #3
 8000e04:	fa02 f303 	lsl.w	r3, r2, r3
 8000e08:	43db      	mvns	r3, r3
 8000e0a:	69ba      	ldr	r2, [r7, #24]
 8000e0c:	4013      	ands	r3, r2
 8000e0e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	689a      	ldr	r2, [r3, #8]
 8000e14:	69fb      	ldr	r3, [r7, #28]
 8000e16:	005b      	lsls	r3, r3, #1
 8000e18:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1c:	69ba      	ldr	r2, [r7, #24]
 8000e1e:	4313      	orrs	r3, r2
 8000e20:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	69ba      	ldr	r2, [r7, #24]
 8000e26:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	685b      	ldr	r3, [r3, #4]
 8000e2c:	2b02      	cmp	r3, #2
 8000e2e:	d003      	beq.n	8000e38 <HAL_GPIO_Init+0xfc>
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	685b      	ldr	r3, [r3, #4]
 8000e34:	2b12      	cmp	r3, #18
 8000e36:	d123      	bne.n	8000e80 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e38:	69fb      	ldr	r3, [r7, #28]
 8000e3a:	08da      	lsrs	r2, r3, #3
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	3208      	adds	r2, #8
 8000e40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e44:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e46:	69fb      	ldr	r3, [r7, #28]
 8000e48:	f003 0307 	and.w	r3, r3, #7
 8000e4c:	009b      	lsls	r3, r3, #2
 8000e4e:	220f      	movs	r2, #15
 8000e50:	fa02 f303 	lsl.w	r3, r2, r3
 8000e54:	43db      	mvns	r3, r3
 8000e56:	69ba      	ldr	r2, [r7, #24]
 8000e58:	4013      	ands	r3, r2
 8000e5a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	691a      	ldr	r2, [r3, #16]
 8000e60:	69fb      	ldr	r3, [r7, #28]
 8000e62:	f003 0307 	and.w	r3, r3, #7
 8000e66:	009b      	lsls	r3, r3, #2
 8000e68:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6c:	69ba      	ldr	r2, [r7, #24]
 8000e6e:	4313      	orrs	r3, r2
 8000e70:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e72:	69fb      	ldr	r3, [r7, #28]
 8000e74:	08da      	lsrs	r2, r3, #3
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	3208      	adds	r2, #8
 8000e7a:	69b9      	ldr	r1, [r7, #24]
 8000e7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e86:	69fb      	ldr	r3, [r7, #28]
 8000e88:	005b      	lsls	r3, r3, #1
 8000e8a:	2203      	movs	r2, #3
 8000e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e90:	43db      	mvns	r3, r3
 8000e92:	69ba      	ldr	r2, [r7, #24]
 8000e94:	4013      	ands	r3, r2
 8000e96:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	685b      	ldr	r3, [r3, #4]
 8000e9c:	f003 0203 	and.w	r2, r3, #3
 8000ea0:	69fb      	ldr	r3, [r7, #28]
 8000ea2:	005b      	lsls	r3, r3, #1
 8000ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea8:	69ba      	ldr	r2, [r7, #24]
 8000eaa:	4313      	orrs	r3, r2
 8000eac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	69ba      	ldr	r2, [r7, #24]
 8000eb2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	685b      	ldr	r3, [r3, #4]
 8000eb8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	f000 80b4 	beq.w	800102a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	60fb      	str	r3, [r7, #12]
 8000ec6:	4b60      	ldr	r3, [pc, #384]	@ (8001048 <HAL_GPIO_Init+0x30c>)
 8000ec8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eca:	4a5f      	ldr	r2, [pc, #380]	@ (8001048 <HAL_GPIO_Init+0x30c>)
 8000ecc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ed0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ed2:	4b5d      	ldr	r3, [pc, #372]	@ (8001048 <HAL_GPIO_Init+0x30c>)
 8000ed4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ed6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000eda:	60fb      	str	r3, [r7, #12]
 8000edc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000ede:	4a5b      	ldr	r2, [pc, #364]	@ (800104c <HAL_GPIO_Init+0x310>)
 8000ee0:	69fb      	ldr	r3, [r7, #28]
 8000ee2:	089b      	lsrs	r3, r3, #2
 8000ee4:	3302      	adds	r3, #2
 8000ee6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000eec:	69fb      	ldr	r3, [r7, #28]
 8000eee:	f003 0303 	and.w	r3, r3, #3
 8000ef2:	009b      	lsls	r3, r3, #2
 8000ef4:	220f      	movs	r2, #15
 8000ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8000efa:	43db      	mvns	r3, r3
 8000efc:	69ba      	ldr	r2, [r7, #24]
 8000efe:	4013      	ands	r3, r2
 8000f00:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	4a52      	ldr	r2, [pc, #328]	@ (8001050 <HAL_GPIO_Init+0x314>)
 8000f06:	4293      	cmp	r3, r2
 8000f08:	d02b      	beq.n	8000f62 <HAL_GPIO_Init+0x226>
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	4a51      	ldr	r2, [pc, #324]	@ (8001054 <HAL_GPIO_Init+0x318>)
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d025      	beq.n	8000f5e <HAL_GPIO_Init+0x222>
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	4a50      	ldr	r2, [pc, #320]	@ (8001058 <HAL_GPIO_Init+0x31c>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d01f      	beq.n	8000f5a <HAL_GPIO_Init+0x21e>
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	4a4f      	ldr	r2, [pc, #316]	@ (800105c <HAL_GPIO_Init+0x320>)
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d019      	beq.n	8000f56 <HAL_GPIO_Init+0x21a>
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	4a4e      	ldr	r2, [pc, #312]	@ (8001060 <HAL_GPIO_Init+0x324>)
 8000f26:	4293      	cmp	r3, r2
 8000f28:	d013      	beq.n	8000f52 <HAL_GPIO_Init+0x216>
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	4a4d      	ldr	r2, [pc, #308]	@ (8001064 <HAL_GPIO_Init+0x328>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d00d      	beq.n	8000f4e <HAL_GPIO_Init+0x212>
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	4a4c      	ldr	r2, [pc, #304]	@ (8001068 <HAL_GPIO_Init+0x32c>)
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d007      	beq.n	8000f4a <HAL_GPIO_Init+0x20e>
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	4a4b      	ldr	r2, [pc, #300]	@ (800106c <HAL_GPIO_Init+0x330>)
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d101      	bne.n	8000f46 <HAL_GPIO_Init+0x20a>
 8000f42:	2307      	movs	r3, #7
 8000f44:	e00e      	b.n	8000f64 <HAL_GPIO_Init+0x228>
 8000f46:	2308      	movs	r3, #8
 8000f48:	e00c      	b.n	8000f64 <HAL_GPIO_Init+0x228>
 8000f4a:	2306      	movs	r3, #6
 8000f4c:	e00a      	b.n	8000f64 <HAL_GPIO_Init+0x228>
 8000f4e:	2305      	movs	r3, #5
 8000f50:	e008      	b.n	8000f64 <HAL_GPIO_Init+0x228>
 8000f52:	2304      	movs	r3, #4
 8000f54:	e006      	b.n	8000f64 <HAL_GPIO_Init+0x228>
 8000f56:	2303      	movs	r3, #3
 8000f58:	e004      	b.n	8000f64 <HAL_GPIO_Init+0x228>
 8000f5a:	2302      	movs	r3, #2
 8000f5c:	e002      	b.n	8000f64 <HAL_GPIO_Init+0x228>
 8000f5e:	2301      	movs	r3, #1
 8000f60:	e000      	b.n	8000f64 <HAL_GPIO_Init+0x228>
 8000f62:	2300      	movs	r3, #0
 8000f64:	69fa      	ldr	r2, [r7, #28]
 8000f66:	f002 0203 	and.w	r2, r2, #3
 8000f6a:	0092      	lsls	r2, r2, #2
 8000f6c:	4093      	lsls	r3, r2
 8000f6e:	69ba      	ldr	r2, [r7, #24]
 8000f70:	4313      	orrs	r3, r2
 8000f72:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f74:	4935      	ldr	r1, [pc, #212]	@ (800104c <HAL_GPIO_Init+0x310>)
 8000f76:	69fb      	ldr	r3, [r7, #28]
 8000f78:	089b      	lsrs	r3, r3, #2
 8000f7a:	3302      	adds	r3, #2
 8000f7c:	69ba      	ldr	r2, [r7, #24]
 8000f7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f82:	4b3b      	ldr	r3, [pc, #236]	@ (8001070 <HAL_GPIO_Init+0x334>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f88:	693b      	ldr	r3, [r7, #16]
 8000f8a:	43db      	mvns	r3, r3
 8000f8c:	69ba      	ldr	r2, [r7, #24]
 8000f8e:	4013      	ands	r3, r2
 8000f90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	685b      	ldr	r3, [r3, #4]
 8000f96:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d003      	beq.n	8000fa6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000f9e:	69ba      	ldr	r2, [r7, #24]
 8000fa0:	693b      	ldr	r3, [r7, #16]
 8000fa2:	4313      	orrs	r3, r2
 8000fa4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000fa6:	4a32      	ldr	r2, [pc, #200]	@ (8001070 <HAL_GPIO_Init+0x334>)
 8000fa8:	69bb      	ldr	r3, [r7, #24]
 8000faa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000fac:	4b30      	ldr	r3, [pc, #192]	@ (8001070 <HAL_GPIO_Init+0x334>)
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fb2:	693b      	ldr	r3, [r7, #16]
 8000fb4:	43db      	mvns	r3, r3
 8000fb6:	69ba      	ldr	r2, [r7, #24]
 8000fb8:	4013      	ands	r3, r2
 8000fba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d003      	beq.n	8000fd0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000fc8:	69ba      	ldr	r2, [r7, #24]
 8000fca:	693b      	ldr	r3, [r7, #16]
 8000fcc:	4313      	orrs	r3, r2
 8000fce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000fd0:	4a27      	ldr	r2, [pc, #156]	@ (8001070 <HAL_GPIO_Init+0x334>)
 8000fd2:	69bb      	ldr	r3, [r7, #24]
 8000fd4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fd6:	4b26      	ldr	r3, [pc, #152]	@ (8001070 <HAL_GPIO_Init+0x334>)
 8000fd8:	689b      	ldr	r3, [r3, #8]
 8000fda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fdc:	693b      	ldr	r3, [r7, #16]
 8000fde:	43db      	mvns	r3, r3
 8000fe0:	69ba      	ldr	r2, [r7, #24]
 8000fe2:	4013      	ands	r3, r2
 8000fe4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d003      	beq.n	8000ffa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000ff2:	69ba      	ldr	r2, [r7, #24]
 8000ff4:	693b      	ldr	r3, [r7, #16]
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000ffa:	4a1d      	ldr	r2, [pc, #116]	@ (8001070 <HAL_GPIO_Init+0x334>)
 8000ffc:	69bb      	ldr	r3, [r7, #24]
 8000ffe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001000:	4b1b      	ldr	r3, [pc, #108]	@ (8001070 <HAL_GPIO_Init+0x334>)
 8001002:	68db      	ldr	r3, [r3, #12]
 8001004:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001006:	693b      	ldr	r3, [r7, #16]
 8001008:	43db      	mvns	r3, r3
 800100a:	69ba      	ldr	r2, [r7, #24]
 800100c:	4013      	ands	r3, r2
 800100e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001018:	2b00      	cmp	r3, #0
 800101a:	d003      	beq.n	8001024 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800101c:	69ba      	ldr	r2, [r7, #24]
 800101e:	693b      	ldr	r3, [r7, #16]
 8001020:	4313      	orrs	r3, r2
 8001022:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001024:	4a12      	ldr	r2, [pc, #72]	@ (8001070 <HAL_GPIO_Init+0x334>)
 8001026:	69bb      	ldr	r3, [r7, #24]
 8001028:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800102a:	69fb      	ldr	r3, [r7, #28]
 800102c:	3301      	adds	r3, #1
 800102e:	61fb      	str	r3, [r7, #28]
 8001030:	69fb      	ldr	r3, [r7, #28]
 8001032:	2b0f      	cmp	r3, #15
 8001034:	f67f ae90 	bls.w	8000d58 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001038:	bf00      	nop
 800103a:	bf00      	nop
 800103c:	3724      	adds	r7, #36	@ 0x24
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop
 8001048:	40023800 	.word	0x40023800
 800104c:	40013800 	.word	0x40013800
 8001050:	40020000 	.word	0x40020000
 8001054:	40020400 	.word	0x40020400
 8001058:	40020800 	.word	0x40020800
 800105c:	40020c00 	.word	0x40020c00
 8001060:	40021000 	.word	0x40021000
 8001064:	40021400 	.word	0x40021400
 8001068:	40021800 	.word	0x40021800
 800106c:	40021c00 	.word	0x40021c00
 8001070:	40013c00 	.word	0x40013c00

08001074 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001074:	b480      	push	{r7}
 8001076:	b085      	sub	sp, #20
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
 800107c:	460b      	mov	r3, r1
 800107e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	691a      	ldr	r2, [r3, #16]
 8001084:	887b      	ldrh	r3, [r7, #2]
 8001086:	4013      	ands	r3, r2
 8001088:	2b00      	cmp	r3, #0
 800108a:	d002      	beq.n	8001092 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800108c:	2301      	movs	r3, #1
 800108e:	73fb      	strb	r3, [r7, #15]
 8001090:	e001      	b.n	8001096 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001092:	2300      	movs	r3, #0
 8001094:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001096:	7bfb      	ldrb	r3, [r7, #15]
}
 8001098:	4618      	mov	r0, r3
 800109a:	3714      	adds	r7, #20
 800109c:	46bd      	mov	sp, r7
 800109e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a2:	4770      	bx	lr

080010a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b083      	sub	sp, #12
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
 80010ac:	460b      	mov	r3, r1
 80010ae:	807b      	strh	r3, [r7, #2]
 80010b0:	4613      	mov	r3, r2
 80010b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010b4:	787b      	ldrb	r3, [r7, #1]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d003      	beq.n	80010c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010ba:	887a      	ldrh	r2, [r7, #2]
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80010c0:	e003      	b.n	80010ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80010c2:	887b      	ldrh	r3, [r7, #2]
 80010c4:	041a      	lsls	r2, r3, #16
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	619a      	str	r2, [r3, #24]
}
 80010ca:	bf00      	nop
 80010cc:	370c      	adds	r7, #12
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr
	...

080010d8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
 80010de:	4603      	mov	r3, r0
 80010e0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80010e2:	4b08      	ldr	r3, [pc, #32]	@ (8001104 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80010e4:	695a      	ldr	r2, [r3, #20]
 80010e6:	88fb      	ldrh	r3, [r7, #6]
 80010e8:	4013      	ands	r3, r2
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d006      	beq.n	80010fc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80010ee:	4a05      	ldr	r2, [pc, #20]	@ (8001104 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80010f0:	88fb      	ldrh	r3, [r7, #6]
 80010f2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80010f4:	88fb      	ldrh	r3, [r7, #6]
 80010f6:	4618      	mov	r0, r3
 80010f8:	f000 f806 	bl	8001108 <HAL_GPIO_EXTI_Callback>
  }
}
 80010fc:	bf00      	nop
 80010fe:	3708      	adds	r7, #8
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	40013c00 	.word	0x40013c00

08001108 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
 800110e:	4603      	mov	r3, r0
 8001110:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001112:	bf00      	nop
 8001114:	370c      	adds	r7, #12
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr
	...

08001120 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b086      	sub	sp, #24
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d101      	bne.n	8001132 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800112e:	2301      	movs	r3, #1
 8001130:	e25e      	b.n	80015f0 <HAL_RCC_OscConfig+0x4d0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f003 0301 	and.w	r3, r3, #1
 800113a:	2b00      	cmp	r3, #0
 800113c:	d075      	beq.n	800122a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800113e:	4b88      	ldr	r3, [pc, #544]	@ (8001360 <HAL_RCC_OscConfig+0x240>)
 8001140:	689b      	ldr	r3, [r3, #8]
 8001142:	f003 030c 	and.w	r3, r3, #12
 8001146:	2b04      	cmp	r3, #4
 8001148:	d00c      	beq.n	8001164 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800114a:	4b85      	ldr	r3, [pc, #532]	@ (8001360 <HAL_RCC_OscConfig+0x240>)
 800114c:	689b      	ldr	r3, [r3, #8]
 800114e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001152:	2b08      	cmp	r3, #8
 8001154:	d112      	bne.n	800117c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001156:	4b82      	ldr	r3, [pc, #520]	@ (8001360 <HAL_RCC_OscConfig+0x240>)
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800115e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001162:	d10b      	bne.n	800117c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001164:	4b7e      	ldr	r3, [pc, #504]	@ (8001360 <HAL_RCC_OscConfig+0x240>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800116c:	2b00      	cmp	r3, #0
 800116e:	d05b      	beq.n	8001228 <HAL_RCC_OscConfig+0x108>
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d157      	bne.n	8001228 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001178:	2301      	movs	r3, #1
 800117a:	e239      	b.n	80015f0 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001184:	d106      	bne.n	8001194 <HAL_RCC_OscConfig+0x74>
 8001186:	4b76      	ldr	r3, [pc, #472]	@ (8001360 <HAL_RCC_OscConfig+0x240>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4a75      	ldr	r2, [pc, #468]	@ (8001360 <HAL_RCC_OscConfig+0x240>)
 800118c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001190:	6013      	str	r3, [r2, #0]
 8001192:	e01d      	b.n	80011d0 <HAL_RCC_OscConfig+0xb0>
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800119c:	d10c      	bne.n	80011b8 <HAL_RCC_OscConfig+0x98>
 800119e:	4b70      	ldr	r3, [pc, #448]	@ (8001360 <HAL_RCC_OscConfig+0x240>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4a6f      	ldr	r2, [pc, #444]	@ (8001360 <HAL_RCC_OscConfig+0x240>)
 80011a4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80011a8:	6013      	str	r3, [r2, #0]
 80011aa:	4b6d      	ldr	r3, [pc, #436]	@ (8001360 <HAL_RCC_OscConfig+0x240>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	4a6c      	ldr	r2, [pc, #432]	@ (8001360 <HAL_RCC_OscConfig+0x240>)
 80011b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80011b4:	6013      	str	r3, [r2, #0]
 80011b6:	e00b      	b.n	80011d0 <HAL_RCC_OscConfig+0xb0>
 80011b8:	4b69      	ldr	r3, [pc, #420]	@ (8001360 <HAL_RCC_OscConfig+0x240>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a68      	ldr	r2, [pc, #416]	@ (8001360 <HAL_RCC_OscConfig+0x240>)
 80011be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80011c2:	6013      	str	r3, [r2, #0]
 80011c4:	4b66      	ldr	r3, [pc, #408]	@ (8001360 <HAL_RCC_OscConfig+0x240>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a65      	ldr	r2, [pc, #404]	@ (8001360 <HAL_RCC_OscConfig+0x240>)
 80011ca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80011ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d013      	beq.n	8001200 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011d8:	f7ff fcc2 	bl	8000b60 <HAL_GetTick>
 80011dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011de:	e008      	b.n	80011f2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011e0:	f7ff fcbe 	bl	8000b60 <HAL_GetTick>
 80011e4:	4602      	mov	r2, r0
 80011e6:	693b      	ldr	r3, [r7, #16]
 80011e8:	1ad3      	subs	r3, r2, r3
 80011ea:	2b64      	cmp	r3, #100	@ 0x64
 80011ec:	d901      	bls.n	80011f2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80011ee:	2303      	movs	r3, #3
 80011f0:	e1fe      	b.n	80015f0 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011f2:	4b5b      	ldr	r3, [pc, #364]	@ (8001360 <HAL_RCC_OscConfig+0x240>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d0f0      	beq.n	80011e0 <HAL_RCC_OscConfig+0xc0>
 80011fe:	e014      	b.n	800122a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001200:	f7ff fcae 	bl	8000b60 <HAL_GetTick>
 8001204:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001206:	e008      	b.n	800121a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001208:	f7ff fcaa 	bl	8000b60 <HAL_GetTick>
 800120c:	4602      	mov	r2, r0
 800120e:	693b      	ldr	r3, [r7, #16]
 8001210:	1ad3      	subs	r3, r2, r3
 8001212:	2b64      	cmp	r3, #100	@ 0x64
 8001214:	d901      	bls.n	800121a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001216:	2303      	movs	r3, #3
 8001218:	e1ea      	b.n	80015f0 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800121a:	4b51      	ldr	r3, [pc, #324]	@ (8001360 <HAL_RCC_OscConfig+0x240>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001222:	2b00      	cmp	r3, #0
 8001224:	d1f0      	bne.n	8001208 <HAL_RCC_OscConfig+0xe8>
 8001226:	e000      	b.n	800122a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001228:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f003 0302 	and.w	r3, r3, #2
 8001232:	2b00      	cmp	r3, #0
 8001234:	d063      	beq.n	80012fe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001236:	4b4a      	ldr	r3, [pc, #296]	@ (8001360 <HAL_RCC_OscConfig+0x240>)
 8001238:	689b      	ldr	r3, [r3, #8]
 800123a:	f003 030c 	and.w	r3, r3, #12
 800123e:	2b00      	cmp	r3, #0
 8001240:	d00b      	beq.n	800125a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001242:	4b47      	ldr	r3, [pc, #284]	@ (8001360 <HAL_RCC_OscConfig+0x240>)
 8001244:	689b      	ldr	r3, [r3, #8]
 8001246:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800124a:	2b08      	cmp	r3, #8
 800124c:	d11c      	bne.n	8001288 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800124e:	4b44      	ldr	r3, [pc, #272]	@ (8001360 <HAL_RCC_OscConfig+0x240>)
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001256:	2b00      	cmp	r3, #0
 8001258:	d116      	bne.n	8001288 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800125a:	4b41      	ldr	r3, [pc, #260]	@ (8001360 <HAL_RCC_OscConfig+0x240>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f003 0302 	and.w	r3, r3, #2
 8001262:	2b00      	cmp	r3, #0
 8001264:	d005      	beq.n	8001272 <HAL_RCC_OscConfig+0x152>
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	68db      	ldr	r3, [r3, #12]
 800126a:	2b01      	cmp	r3, #1
 800126c:	d001      	beq.n	8001272 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800126e:	2301      	movs	r3, #1
 8001270:	e1be      	b.n	80015f0 <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001272:	4b3b      	ldr	r3, [pc, #236]	@ (8001360 <HAL_RCC_OscConfig+0x240>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	691b      	ldr	r3, [r3, #16]
 800127e:	00db      	lsls	r3, r3, #3
 8001280:	4937      	ldr	r1, [pc, #220]	@ (8001360 <HAL_RCC_OscConfig+0x240>)
 8001282:	4313      	orrs	r3, r2
 8001284:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001286:	e03a      	b.n	80012fe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	68db      	ldr	r3, [r3, #12]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d020      	beq.n	80012d2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001290:	4b34      	ldr	r3, [pc, #208]	@ (8001364 <HAL_RCC_OscConfig+0x244>)
 8001292:	2201      	movs	r2, #1
 8001294:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001296:	f7ff fc63 	bl	8000b60 <HAL_GetTick>
 800129a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800129c:	e008      	b.n	80012b0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800129e:	f7ff fc5f 	bl	8000b60 <HAL_GetTick>
 80012a2:	4602      	mov	r2, r0
 80012a4:	693b      	ldr	r3, [r7, #16]
 80012a6:	1ad3      	subs	r3, r2, r3
 80012a8:	2b02      	cmp	r3, #2
 80012aa:	d901      	bls.n	80012b0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80012ac:	2303      	movs	r3, #3
 80012ae:	e19f      	b.n	80015f0 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012b0:	4b2b      	ldr	r3, [pc, #172]	@ (8001360 <HAL_RCC_OscConfig+0x240>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f003 0302 	and.w	r3, r3, #2
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d0f0      	beq.n	800129e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012bc:	4b28      	ldr	r3, [pc, #160]	@ (8001360 <HAL_RCC_OscConfig+0x240>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	691b      	ldr	r3, [r3, #16]
 80012c8:	00db      	lsls	r3, r3, #3
 80012ca:	4925      	ldr	r1, [pc, #148]	@ (8001360 <HAL_RCC_OscConfig+0x240>)
 80012cc:	4313      	orrs	r3, r2
 80012ce:	600b      	str	r3, [r1, #0]
 80012d0:	e015      	b.n	80012fe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012d2:	4b24      	ldr	r3, [pc, #144]	@ (8001364 <HAL_RCC_OscConfig+0x244>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012d8:	f7ff fc42 	bl	8000b60 <HAL_GetTick>
 80012dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012de:	e008      	b.n	80012f2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012e0:	f7ff fc3e 	bl	8000b60 <HAL_GetTick>
 80012e4:	4602      	mov	r2, r0
 80012e6:	693b      	ldr	r3, [r7, #16]
 80012e8:	1ad3      	subs	r3, r2, r3
 80012ea:	2b02      	cmp	r3, #2
 80012ec:	d901      	bls.n	80012f2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80012ee:	2303      	movs	r3, #3
 80012f0:	e17e      	b.n	80015f0 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012f2:	4b1b      	ldr	r3, [pc, #108]	@ (8001360 <HAL_RCC_OscConfig+0x240>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f003 0302 	and.w	r3, r3, #2
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d1f0      	bne.n	80012e0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f003 0308 	and.w	r3, r3, #8
 8001306:	2b00      	cmp	r3, #0
 8001308:	d036      	beq.n	8001378 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	695b      	ldr	r3, [r3, #20]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d016      	beq.n	8001340 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001312:	4b15      	ldr	r3, [pc, #84]	@ (8001368 <HAL_RCC_OscConfig+0x248>)
 8001314:	2201      	movs	r2, #1
 8001316:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001318:	f7ff fc22 	bl	8000b60 <HAL_GetTick>
 800131c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800131e:	e008      	b.n	8001332 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001320:	f7ff fc1e 	bl	8000b60 <HAL_GetTick>
 8001324:	4602      	mov	r2, r0
 8001326:	693b      	ldr	r3, [r7, #16]
 8001328:	1ad3      	subs	r3, r2, r3
 800132a:	2b02      	cmp	r3, #2
 800132c:	d901      	bls.n	8001332 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800132e:	2303      	movs	r3, #3
 8001330:	e15e      	b.n	80015f0 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001332:	4b0b      	ldr	r3, [pc, #44]	@ (8001360 <HAL_RCC_OscConfig+0x240>)
 8001334:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001336:	f003 0302 	and.w	r3, r3, #2
 800133a:	2b00      	cmp	r3, #0
 800133c:	d0f0      	beq.n	8001320 <HAL_RCC_OscConfig+0x200>
 800133e:	e01b      	b.n	8001378 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001340:	4b09      	ldr	r3, [pc, #36]	@ (8001368 <HAL_RCC_OscConfig+0x248>)
 8001342:	2200      	movs	r2, #0
 8001344:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001346:	f7ff fc0b 	bl	8000b60 <HAL_GetTick>
 800134a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800134c:	e00e      	b.n	800136c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800134e:	f7ff fc07 	bl	8000b60 <HAL_GetTick>
 8001352:	4602      	mov	r2, r0
 8001354:	693b      	ldr	r3, [r7, #16]
 8001356:	1ad3      	subs	r3, r2, r3
 8001358:	2b02      	cmp	r3, #2
 800135a:	d907      	bls.n	800136c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800135c:	2303      	movs	r3, #3
 800135e:	e147      	b.n	80015f0 <HAL_RCC_OscConfig+0x4d0>
 8001360:	40023800 	.word	0x40023800
 8001364:	42470000 	.word	0x42470000
 8001368:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800136c:	4b88      	ldr	r3, [pc, #544]	@ (8001590 <HAL_RCC_OscConfig+0x470>)
 800136e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001370:	f003 0302 	and.w	r3, r3, #2
 8001374:	2b00      	cmp	r3, #0
 8001376:	d1ea      	bne.n	800134e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f003 0304 	and.w	r3, r3, #4
 8001380:	2b00      	cmp	r3, #0
 8001382:	f000 8097 	beq.w	80014b4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001386:	2300      	movs	r3, #0
 8001388:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800138a:	4b81      	ldr	r3, [pc, #516]	@ (8001590 <HAL_RCC_OscConfig+0x470>)
 800138c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800138e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001392:	2b00      	cmp	r3, #0
 8001394:	d10f      	bne.n	80013b6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001396:	2300      	movs	r3, #0
 8001398:	60bb      	str	r3, [r7, #8]
 800139a:	4b7d      	ldr	r3, [pc, #500]	@ (8001590 <HAL_RCC_OscConfig+0x470>)
 800139c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800139e:	4a7c      	ldr	r2, [pc, #496]	@ (8001590 <HAL_RCC_OscConfig+0x470>)
 80013a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80013a6:	4b7a      	ldr	r3, [pc, #488]	@ (8001590 <HAL_RCC_OscConfig+0x470>)
 80013a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013ae:	60bb      	str	r3, [r7, #8]
 80013b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80013b2:	2301      	movs	r3, #1
 80013b4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013b6:	4b77      	ldr	r3, [pc, #476]	@ (8001594 <HAL_RCC_OscConfig+0x474>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d118      	bne.n	80013f4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013c2:	4b74      	ldr	r3, [pc, #464]	@ (8001594 <HAL_RCC_OscConfig+0x474>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4a73      	ldr	r2, [pc, #460]	@ (8001594 <HAL_RCC_OscConfig+0x474>)
 80013c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013ce:	f7ff fbc7 	bl	8000b60 <HAL_GetTick>
 80013d2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013d4:	e008      	b.n	80013e8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013d6:	f7ff fbc3 	bl	8000b60 <HAL_GetTick>
 80013da:	4602      	mov	r2, r0
 80013dc:	693b      	ldr	r3, [r7, #16]
 80013de:	1ad3      	subs	r3, r2, r3
 80013e0:	2b02      	cmp	r3, #2
 80013e2:	d901      	bls.n	80013e8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80013e4:	2303      	movs	r3, #3
 80013e6:	e103      	b.n	80015f0 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013e8:	4b6a      	ldr	r3, [pc, #424]	@ (8001594 <HAL_RCC_OscConfig+0x474>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d0f0      	beq.n	80013d6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	689b      	ldr	r3, [r3, #8]
 80013f8:	2b01      	cmp	r3, #1
 80013fa:	d106      	bne.n	800140a <HAL_RCC_OscConfig+0x2ea>
 80013fc:	4b64      	ldr	r3, [pc, #400]	@ (8001590 <HAL_RCC_OscConfig+0x470>)
 80013fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001400:	4a63      	ldr	r2, [pc, #396]	@ (8001590 <HAL_RCC_OscConfig+0x470>)
 8001402:	f043 0301 	orr.w	r3, r3, #1
 8001406:	6713      	str	r3, [r2, #112]	@ 0x70
 8001408:	e01c      	b.n	8001444 <HAL_RCC_OscConfig+0x324>
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	689b      	ldr	r3, [r3, #8]
 800140e:	2b05      	cmp	r3, #5
 8001410:	d10c      	bne.n	800142c <HAL_RCC_OscConfig+0x30c>
 8001412:	4b5f      	ldr	r3, [pc, #380]	@ (8001590 <HAL_RCC_OscConfig+0x470>)
 8001414:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001416:	4a5e      	ldr	r2, [pc, #376]	@ (8001590 <HAL_RCC_OscConfig+0x470>)
 8001418:	f043 0304 	orr.w	r3, r3, #4
 800141c:	6713      	str	r3, [r2, #112]	@ 0x70
 800141e:	4b5c      	ldr	r3, [pc, #368]	@ (8001590 <HAL_RCC_OscConfig+0x470>)
 8001420:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001422:	4a5b      	ldr	r2, [pc, #364]	@ (8001590 <HAL_RCC_OscConfig+0x470>)
 8001424:	f043 0301 	orr.w	r3, r3, #1
 8001428:	6713      	str	r3, [r2, #112]	@ 0x70
 800142a:	e00b      	b.n	8001444 <HAL_RCC_OscConfig+0x324>
 800142c:	4b58      	ldr	r3, [pc, #352]	@ (8001590 <HAL_RCC_OscConfig+0x470>)
 800142e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001430:	4a57      	ldr	r2, [pc, #348]	@ (8001590 <HAL_RCC_OscConfig+0x470>)
 8001432:	f023 0301 	bic.w	r3, r3, #1
 8001436:	6713      	str	r3, [r2, #112]	@ 0x70
 8001438:	4b55      	ldr	r3, [pc, #340]	@ (8001590 <HAL_RCC_OscConfig+0x470>)
 800143a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800143c:	4a54      	ldr	r2, [pc, #336]	@ (8001590 <HAL_RCC_OscConfig+0x470>)
 800143e:	f023 0304 	bic.w	r3, r3, #4
 8001442:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	689b      	ldr	r3, [r3, #8]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d015      	beq.n	8001478 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800144c:	f7ff fb88 	bl	8000b60 <HAL_GetTick>
 8001450:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001452:	e00a      	b.n	800146a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001454:	f7ff fb84 	bl	8000b60 <HAL_GetTick>
 8001458:	4602      	mov	r2, r0
 800145a:	693b      	ldr	r3, [r7, #16]
 800145c:	1ad3      	subs	r3, r2, r3
 800145e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001462:	4293      	cmp	r3, r2
 8001464:	d901      	bls.n	800146a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001466:	2303      	movs	r3, #3
 8001468:	e0c2      	b.n	80015f0 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800146a:	4b49      	ldr	r3, [pc, #292]	@ (8001590 <HAL_RCC_OscConfig+0x470>)
 800146c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800146e:	f003 0302 	and.w	r3, r3, #2
 8001472:	2b00      	cmp	r3, #0
 8001474:	d0ee      	beq.n	8001454 <HAL_RCC_OscConfig+0x334>
 8001476:	e014      	b.n	80014a2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001478:	f7ff fb72 	bl	8000b60 <HAL_GetTick>
 800147c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800147e:	e00a      	b.n	8001496 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001480:	f7ff fb6e 	bl	8000b60 <HAL_GetTick>
 8001484:	4602      	mov	r2, r0
 8001486:	693b      	ldr	r3, [r7, #16]
 8001488:	1ad3      	subs	r3, r2, r3
 800148a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800148e:	4293      	cmp	r3, r2
 8001490:	d901      	bls.n	8001496 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001492:	2303      	movs	r3, #3
 8001494:	e0ac      	b.n	80015f0 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001496:	4b3e      	ldr	r3, [pc, #248]	@ (8001590 <HAL_RCC_OscConfig+0x470>)
 8001498:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800149a:	f003 0302 	and.w	r3, r3, #2
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d1ee      	bne.n	8001480 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80014a2:	7dfb      	ldrb	r3, [r7, #23]
 80014a4:	2b01      	cmp	r3, #1
 80014a6:	d105      	bne.n	80014b4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014a8:	4b39      	ldr	r3, [pc, #228]	@ (8001590 <HAL_RCC_OscConfig+0x470>)
 80014aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ac:	4a38      	ldr	r2, [pc, #224]	@ (8001590 <HAL_RCC_OscConfig+0x470>)
 80014ae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80014b2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	699b      	ldr	r3, [r3, #24]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	f000 8098 	beq.w	80015ee <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80014be:	4b34      	ldr	r3, [pc, #208]	@ (8001590 <HAL_RCC_OscConfig+0x470>)
 80014c0:	689b      	ldr	r3, [r3, #8]
 80014c2:	f003 030c 	and.w	r3, r3, #12
 80014c6:	2b08      	cmp	r3, #8
 80014c8:	d05c      	beq.n	8001584 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	699b      	ldr	r3, [r3, #24]
 80014ce:	2b02      	cmp	r3, #2
 80014d0:	d141      	bne.n	8001556 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014d2:	4b31      	ldr	r3, [pc, #196]	@ (8001598 <HAL_RCC_OscConfig+0x478>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014d8:	f7ff fb42 	bl	8000b60 <HAL_GetTick>
 80014dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014de:	e008      	b.n	80014f2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014e0:	f7ff fb3e 	bl	8000b60 <HAL_GetTick>
 80014e4:	4602      	mov	r2, r0
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	1ad3      	subs	r3, r2, r3
 80014ea:	2b02      	cmp	r3, #2
 80014ec:	d901      	bls.n	80014f2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80014ee:	2303      	movs	r3, #3
 80014f0:	e07e      	b.n	80015f0 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014f2:	4b27      	ldr	r3, [pc, #156]	@ (8001590 <HAL_RCC_OscConfig+0x470>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d1f0      	bne.n	80014e0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	69da      	ldr	r2, [r3, #28]
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6a1b      	ldr	r3, [r3, #32]
 8001506:	431a      	orrs	r2, r3
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800150c:	019b      	lsls	r3, r3, #6
 800150e:	431a      	orrs	r2, r3
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001514:	085b      	lsrs	r3, r3, #1
 8001516:	3b01      	subs	r3, #1
 8001518:	041b      	lsls	r3, r3, #16
 800151a:	431a      	orrs	r2, r3
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001520:	061b      	lsls	r3, r3, #24
 8001522:	491b      	ldr	r1, [pc, #108]	@ (8001590 <HAL_RCC_OscConfig+0x470>)
 8001524:	4313      	orrs	r3, r2
 8001526:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001528:	4b1b      	ldr	r3, [pc, #108]	@ (8001598 <HAL_RCC_OscConfig+0x478>)
 800152a:	2201      	movs	r2, #1
 800152c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800152e:	f7ff fb17 	bl	8000b60 <HAL_GetTick>
 8001532:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001534:	e008      	b.n	8001548 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001536:	f7ff fb13 	bl	8000b60 <HAL_GetTick>
 800153a:	4602      	mov	r2, r0
 800153c:	693b      	ldr	r3, [r7, #16]
 800153e:	1ad3      	subs	r3, r2, r3
 8001540:	2b02      	cmp	r3, #2
 8001542:	d901      	bls.n	8001548 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001544:	2303      	movs	r3, #3
 8001546:	e053      	b.n	80015f0 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001548:	4b11      	ldr	r3, [pc, #68]	@ (8001590 <HAL_RCC_OscConfig+0x470>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001550:	2b00      	cmp	r3, #0
 8001552:	d0f0      	beq.n	8001536 <HAL_RCC_OscConfig+0x416>
 8001554:	e04b      	b.n	80015ee <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001556:	4b10      	ldr	r3, [pc, #64]	@ (8001598 <HAL_RCC_OscConfig+0x478>)
 8001558:	2200      	movs	r2, #0
 800155a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800155c:	f7ff fb00 	bl	8000b60 <HAL_GetTick>
 8001560:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001562:	e008      	b.n	8001576 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001564:	f7ff fafc 	bl	8000b60 <HAL_GetTick>
 8001568:	4602      	mov	r2, r0
 800156a:	693b      	ldr	r3, [r7, #16]
 800156c:	1ad3      	subs	r3, r2, r3
 800156e:	2b02      	cmp	r3, #2
 8001570:	d901      	bls.n	8001576 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001572:	2303      	movs	r3, #3
 8001574:	e03c      	b.n	80015f0 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001576:	4b06      	ldr	r3, [pc, #24]	@ (8001590 <HAL_RCC_OscConfig+0x470>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800157e:	2b00      	cmp	r3, #0
 8001580:	d1f0      	bne.n	8001564 <HAL_RCC_OscConfig+0x444>
 8001582:	e034      	b.n	80015ee <HAL_RCC_OscConfig+0x4ce>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	699b      	ldr	r3, [r3, #24]
 8001588:	2b01      	cmp	r3, #1
 800158a:	d107      	bne.n	800159c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800158c:	2301      	movs	r3, #1
 800158e:	e02f      	b.n	80015f0 <HAL_RCC_OscConfig+0x4d0>
 8001590:	40023800 	.word	0x40023800
 8001594:	40007000 	.word	0x40007000
 8001598:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800159c:	4b16      	ldr	r3, [pc, #88]	@ (80015f8 <HAL_RCC_OscConfig+0x4d8>)
 800159e:	689b      	ldr	r3, [r3, #8]
 80015a0:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	69db      	ldr	r3, [r3, #28]
 80015ac:	429a      	cmp	r2, r3
 80015ae:	d11c      	bne.n	80015ea <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015ba:	429a      	cmp	r2, r3
 80015bc:	d115      	bne.n	80015ea <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80015be:	68fa      	ldr	r2, [r7, #12]
 80015c0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80015c4:	4013      	ands	r3, r2
 80015c6:	687a      	ldr	r2, [r7, #4]
 80015c8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d10d      	bne.n	80015ea <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80015d8:	429a      	cmp	r2, r3
 80015da:	d106      	bne.n	80015ea <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80015e6:	429a      	cmp	r2, r3
 80015e8:	d001      	beq.n	80015ee <HAL_RCC_OscConfig+0x4ce>
        {
          return HAL_ERROR;
 80015ea:	2301      	movs	r3, #1
 80015ec:	e000      	b.n	80015f0 <HAL_RCC_OscConfig+0x4d0>
        }
      }
    }
  }
  return HAL_OK;
 80015ee:	2300      	movs	r3, #0
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	3718      	adds	r7, #24
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	40023800 	.word	0x40023800

080015fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b084      	sub	sp, #16
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
 8001604:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d101      	bne.n	8001610 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800160c:	2301      	movs	r3, #1
 800160e:	e0cc      	b.n	80017aa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001610:	4b68      	ldr	r3, [pc, #416]	@ (80017b4 <HAL_RCC_ClockConfig+0x1b8>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f003 030f 	and.w	r3, r3, #15
 8001618:	683a      	ldr	r2, [r7, #0]
 800161a:	429a      	cmp	r2, r3
 800161c:	d90c      	bls.n	8001638 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800161e:	4b65      	ldr	r3, [pc, #404]	@ (80017b4 <HAL_RCC_ClockConfig+0x1b8>)
 8001620:	683a      	ldr	r2, [r7, #0]
 8001622:	b2d2      	uxtb	r2, r2
 8001624:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001626:	4b63      	ldr	r3, [pc, #396]	@ (80017b4 <HAL_RCC_ClockConfig+0x1b8>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f003 030f 	and.w	r3, r3, #15
 800162e:	683a      	ldr	r2, [r7, #0]
 8001630:	429a      	cmp	r2, r3
 8001632:	d001      	beq.n	8001638 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001634:	2301      	movs	r3, #1
 8001636:	e0b8      	b.n	80017aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f003 0302 	and.w	r3, r3, #2
 8001640:	2b00      	cmp	r3, #0
 8001642:	d020      	beq.n	8001686 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f003 0304 	and.w	r3, r3, #4
 800164c:	2b00      	cmp	r3, #0
 800164e:	d005      	beq.n	800165c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001650:	4b59      	ldr	r3, [pc, #356]	@ (80017b8 <HAL_RCC_ClockConfig+0x1bc>)
 8001652:	689b      	ldr	r3, [r3, #8]
 8001654:	4a58      	ldr	r2, [pc, #352]	@ (80017b8 <HAL_RCC_ClockConfig+0x1bc>)
 8001656:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800165a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f003 0308 	and.w	r3, r3, #8
 8001664:	2b00      	cmp	r3, #0
 8001666:	d005      	beq.n	8001674 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001668:	4b53      	ldr	r3, [pc, #332]	@ (80017b8 <HAL_RCC_ClockConfig+0x1bc>)
 800166a:	689b      	ldr	r3, [r3, #8]
 800166c:	4a52      	ldr	r2, [pc, #328]	@ (80017b8 <HAL_RCC_ClockConfig+0x1bc>)
 800166e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001672:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001674:	4b50      	ldr	r3, [pc, #320]	@ (80017b8 <HAL_RCC_ClockConfig+0x1bc>)
 8001676:	689b      	ldr	r3, [r3, #8]
 8001678:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	689b      	ldr	r3, [r3, #8]
 8001680:	494d      	ldr	r1, [pc, #308]	@ (80017b8 <HAL_RCC_ClockConfig+0x1bc>)
 8001682:	4313      	orrs	r3, r2
 8001684:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f003 0301 	and.w	r3, r3, #1
 800168e:	2b00      	cmp	r3, #0
 8001690:	d044      	beq.n	800171c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	2b01      	cmp	r3, #1
 8001698:	d107      	bne.n	80016aa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800169a:	4b47      	ldr	r3, [pc, #284]	@ (80017b8 <HAL_RCC_ClockConfig+0x1bc>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d119      	bne.n	80016da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016a6:	2301      	movs	r3, #1
 80016a8:	e07f      	b.n	80017aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	2b02      	cmp	r3, #2
 80016b0:	d003      	beq.n	80016ba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016b6:	2b03      	cmp	r3, #3
 80016b8:	d107      	bne.n	80016ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016ba:	4b3f      	ldr	r3, [pc, #252]	@ (80017b8 <HAL_RCC_ClockConfig+0x1bc>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d109      	bne.n	80016da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016c6:	2301      	movs	r3, #1
 80016c8:	e06f      	b.n	80017aa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016ca:	4b3b      	ldr	r3, [pc, #236]	@ (80017b8 <HAL_RCC_ClockConfig+0x1bc>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f003 0302 	and.w	r3, r3, #2
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d101      	bne.n	80016da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016d6:	2301      	movs	r3, #1
 80016d8:	e067      	b.n	80017aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016da:	4b37      	ldr	r3, [pc, #220]	@ (80017b8 <HAL_RCC_ClockConfig+0x1bc>)
 80016dc:	689b      	ldr	r3, [r3, #8]
 80016de:	f023 0203 	bic.w	r2, r3, #3
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	4934      	ldr	r1, [pc, #208]	@ (80017b8 <HAL_RCC_ClockConfig+0x1bc>)
 80016e8:	4313      	orrs	r3, r2
 80016ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80016ec:	f7ff fa38 	bl	8000b60 <HAL_GetTick>
 80016f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016f2:	e00a      	b.n	800170a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016f4:	f7ff fa34 	bl	8000b60 <HAL_GetTick>
 80016f8:	4602      	mov	r2, r0
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	1ad3      	subs	r3, r2, r3
 80016fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001702:	4293      	cmp	r3, r2
 8001704:	d901      	bls.n	800170a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001706:	2303      	movs	r3, #3
 8001708:	e04f      	b.n	80017aa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800170a:	4b2b      	ldr	r3, [pc, #172]	@ (80017b8 <HAL_RCC_ClockConfig+0x1bc>)
 800170c:	689b      	ldr	r3, [r3, #8]
 800170e:	f003 020c 	and.w	r2, r3, #12
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	009b      	lsls	r3, r3, #2
 8001718:	429a      	cmp	r2, r3
 800171a:	d1eb      	bne.n	80016f4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800171c:	4b25      	ldr	r3, [pc, #148]	@ (80017b4 <HAL_RCC_ClockConfig+0x1b8>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f003 030f 	and.w	r3, r3, #15
 8001724:	683a      	ldr	r2, [r7, #0]
 8001726:	429a      	cmp	r2, r3
 8001728:	d20c      	bcs.n	8001744 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800172a:	4b22      	ldr	r3, [pc, #136]	@ (80017b4 <HAL_RCC_ClockConfig+0x1b8>)
 800172c:	683a      	ldr	r2, [r7, #0]
 800172e:	b2d2      	uxtb	r2, r2
 8001730:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001732:	4b20      	ldr	r3, [pc, #128]	@ (80017b4 <HAL_RCC_ClockConfig+0x1b8>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f003 030f 	and.w	r3, r3, #15
 800173a:	683a      	ldr	r2, [r7, #0]
 800173c:	429a      	cmp	r2, r3
 800173e:	d001      	beq.n	8001744 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001740:	2301      	movs	r3, #1
 8001742:	e032      	b.n	80017aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f003 0304 	and.w	r3, r3, #4
 800174c:	2b00      	cmp	r3, #0
 800174e:	d008      	beq.n	8001762 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001750:	4b19      	ldr	r3, [pc, #100]	@ (80017b8 <HAL_RCC_ClockConfig+0x1bc>)
 8001752:	689b      	ldr	r3, [r3, #8]
 8001754:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	68db      	ldr	r3, [r3, #12]
 800175c:	4916      	ldr	r1, [pc, #88]	@ (80017b8 <HAL_RCC_ClockConfig+0x1bc>)
 800175e:	4313      	orrs	r3, r2
 8001760:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f003 0308 	and.w	r3, r3, #8
 800176a:	2b00      	cmp	r3, #0
 800176c:	d009      	beq.n	8001782 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800176e:	4b12      	ldr	r3, [pc, #72]	@ (80017b8 <HAL_RCC_ClockConfig+0x1bc>)
 8001770:	689b      	ldr	r3, [r3, #8]
 8001772:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	691b      	ldr	r3, [r3, #16]
 800177a:	00db      	lsls	r3, r3, #3
 800177c:	490e      	ldr	r1, [pc, #56]	@ (80017b8 <HAL_RCC_ClockConfig+0x1bc>)
 800177e:	4313      	orrs	r3, r2
 8001780:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001782:	f000 f821 	bl	80017c8 <HAL_RCC_GetSysClockFreq>
 8001786:	4602      	mov	r2, r0
 8001788:	4b0b      	ldr	r3, [pc, #44]	@ (80017b8 <HAL_RCC_ClockConfig+0x1bc>)
 800178a:	689b      	ldr	r3, [r3, #8]
 800178c:	091b      	lsrs	r3, r3, #4
 800178e:	f003 030f 	and.w	r3, r3, #15
 8001792:	490a      	ldr	r1, [pc, #40]	@ (80017bc <HAL_RCC_ClockConfig+0x1c0>)
 8001794:	5ccb      	ldrb	r3, [r1, r3]
 8001796:	fa22 f303 	lsr.w	r3, r2, r3
 800179a:	4a09      	ldr	r2, [pc, #36]	@ (80017c0 <HAL_RCC_ClockConfig+0x1c4>)
 800179c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800179e:	4b09      	ldr	r3, [pc, #36]	@ (80017c4 <HAL_RCC_ClockConfig+0x1c8>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4618      	mov	r0, r3
 80017a4:	f7ff f8dc 	bl	8000960 <HAL_InitTick>

  return HAL_OK;
 80017a8:	2300      	movs	r3, #0
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	3710      	adds	r7, #16
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	40023c00 	.word	0x40023c00
 80017b8:	40023800 	.word	0x40023800
 80017bc:	08005118 	.word	0x08005118
 80017c0:	20000000 	.word	0x20000000
 80017c4:	20000004 	.word	0x20000004

080017c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80017cc:	b094      	sub	sp, #80	@ 0x50
 80017ce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80017d0:	2300      	movs	r3, #0
 80017d2:	647b      	str	r3, [r7, #68]	@ 0x44
 80017d4:	2300      	movs	r3, #0
 80017d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80017d8:	2300      	movs	r3, #0
 80017da:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80017dc:	2300      	movs	r3, #0
 80017de:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80017e0:	4b79      	ldr	r3, [pc, #484]	@ (80019c8 <HAL_RCC_GetSysClockFreq+0x200>)
 80017e2:	689b      	ldr	r3, [r3, #8]
 80017e4:	f003 030c 	and.w	r3, r3, #12
 80017e8:	2b08      	cmp	r3, #8
 80017ea:	d00d      	beq.n	8001808 <HAL_RCC_GetSysClockFreq+0x40>
 80017ec:	2b08      	cmp	r3, #8
 80017ee:	f200 80e1 	bhi.w	80019b4 <HAL_RCC_GetSysClockFreq+0x1ec>
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d002      	beq.n	80017fc <HAL_RCC_GetSysClockFreq+0x34>
 80017f6:	2b04      	cmp	r3, #4
 80017f8:	d003      	beq.n	8001802 <HAL_RCC_GetSysClockFreq+0x3a>
 80017fa:	e0db      	b.n	80019b4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80017fc:	4b73      	ldr	r3, [pc, #460]	@ (80019cc <HAL_RCC_GetSysClockFreq+0x204>)
 80017fe:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8001800:	e0db      	b.n	80019ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001802:	4b73      	ldr	r3, [pc, #460]	@ (80019d0 <HAL_RCC_GetSysClockFreq+0x208>)
 8001804:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001806:	e0d8      	b.n	80019ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001808:	4b6f      	ldr	r3, [pc, #444]	@ (80019c8 <HAL_RCC_GetSysClockFreq+0x200>)
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001810:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001812:	4b6d      	ldr	r3, [pc, #436]	@ (80019c8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800181a:	2b00      	cmp	r3, #0
 800181c:	d063      	beq.n	80018e6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800181e:	4b6a      	ldr	r3, [pc, #424]	@ (80019c8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	099b      	lsrs	r3, r3, #6
 8001824:	2200      	movs	r2, #0
 8001826:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001828:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800182a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800182c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001830:	633b      	str	r3, [r7, #48]	@ 0x30
 8001832:	2300      	movs	r3, #0
 8001834:	637b      	str	r3, [r7, #52]	@ 0x34
 8001836:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800183a:	4622      	mov	r2, r4
 800183c:	462b      	mov	r3, r5
 800183e:	f04f 0000 	mov.w	r0, #0
 8001842:	f04f 0100 	mov.w	r1, #0
 8001846:	0159      	lsls	r1, r3, #5
 8001848:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800184c:	0150      	lsls	r0, r2, #5
 800184e:	4602      	mov	r2, r0
 8001850:	460b      	mov	r3, r1
 8001852:	4621      	mov	r1, r4
 8001854:	1a51      	subs	r1, r2, r1
 8001856:	6139      	str	r1, [r7, #16]
 8001858:	4629      	mov	r1, r5
 800185a:	eb63 0301 	sbc.w	r3, r3, r1
 800185e:	617b      	str	r3, [r7, #20]
 8001860:	f04f 0200 	mov.w	r2, #0
 8001864:	f04f 0300 	mov.w	r3, #0
 8001868:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800186c:	4659      	mov	r1, fp
 800186e:	018b      	lsls	r3, r1, #6
 8001870:	4651      	mov	r1, sl
 8001872:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001876:	4651      	mov	r1, sl
 8001878:	018a      	lsls	r2, r1, #6
 800187a:	4651      	mov	r1, sl
 800187c:	ebb2 0801 	subs.w	r8, r2, r1
 8001880:	4659      	mov	r1, fp
 8001882:	eb63 0901 	sbc.w	r9, r3, r1
 8001886:	f04f 0200 	mov.w	r2, #0
 800188a:	f04f 0300 	mov.w	r3, #0
 800188e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001892:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001896:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800189a:	4690      	mov	r8, r2
 800189c:	4699      	mov	r9, r3
 800189e:	4623      	mov	r3, r4
 80018a0:	eb18 0303 	adds.w	r3, r8, r3
 80018a4:	60bb      	str	r3, [r7, #8]
 80018a6:	462b      	mov	r3, r5
 80018a8:	eb49 0303 	adc.w	r3, r9, r3
 80018ac:	60fb      	str	r3, [r7, #12]
 80018ae:	f04f 0200 	mov.w	r2, #0
 80018b2:	f04f 0300 	mov.w	r3, #0
 80018b6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80018ba:	4629      	mov	r1, r5
 80018bc:	024b      	lsls	r3, r1, #9
 80018be:	4621      	mov	r1, r4
 80018c0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80018c4:	4621      	mov	r1, r4
 80018c6:	024a      	lsls	r2, r1, #9
 80018c8:	4610      	mov	r0, r2
 80018ca:	4619      	mov	r1, r3
 80018cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80018ce:	2200      	movs	r2, #0
 80018d0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80018d2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80018d4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80018d8:	f7fe fcc4 	bl	8000264 <__aeabi_uldivmod>
 80018dc:	4602      	mov	r2, r0
 80018de:	460b      	mov	r3, r1
 80018e0:	4613      	mov	r3, r2
 80018e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80018e4:	e058      	b.n	8001998 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018e6:	4b38      	ldr	r3, [pc, #224]	@ (80019c8 <HAL_RCC_GetSysClockFreq+0x200>)
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	099b      	lsrs	r3, r3, #6
 80018ec:	2200      	movs	r2, #0
 80018ee:	4618      	mov	r0, r3
 80018f0:	4611      	mov	r1, r2
 80018f2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80018f6:	623b      	str	r3, [r7, #32]
 80018f8:	2300      	movs	r3, #0
 80018fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80018fc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001900:	4642      	mov	r2, r8
 8001902:	464b      	mov	r3, r9
 8001904:	f04f 0000 	mov.w	r0, #0
 8001908:	f04f 0100 	mov.w	r1, #0
 800190c:	0159      	lsls	r1, r3, #5
 800190e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001912:	0150      	lsls	r0, r2, #5
 8001914:	4602      	mov	r2, r0
 8001916:	460b      	mov	r3, r1
 8001918:	4641      	mov	r1, r8
 800191a:	ebb2 0a01 	subs.w	sl, r2, r1
 800191e:	4649      	mov	r1, r9
 8001920:	eb63 0b01 	sbc.w	fp, r3, r1
 8001924:	f04f 0200 	mov.w	r2, #0
 8001928:	f04f 0300 	mov.w	r3, #0
 800192c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001930:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001934:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001938:	ebb2 040a 	subs.w	r4, r2, sl
 800193c:	eb63 050b 	sbc.w	r5, r3, fp
 8001940:	f04f 0200 	mov.w	r2, #0
 8001944:	f04f 0300 	mov.w	r3, #0
 8001948:	00eb      	lsls	r3, r5, #3
 800194a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800194e:	00e2      	lsls	r2, r4, #3
 8001950:	4614      	mov	r4, r2
 8001952:	461d      	mov	r5, r3
 8001954:	4643      	mov	r3, r8
 8001956:	18e3      	adds	r3, r4, r3
 8001958:	603b      	str	r3, [r7, #0]
 800195a:	464b      	mov	r3, r9
 800195c:	eb45 0303 	adc.w	r3, r5, r3
 8001960:	607b      	str	r3, [r7, #4]
 8001962:	f04f 0200 	mov.w	r2, #0
 8001966:	f04f 0300 	mov.w	r3, #0
 800196a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800196e:	4629      	mov	r1, r5
 8001970:	028b      	lsls	r3, r1, #10
 8001972:	4621      	mov	r1, r4
 8001974:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001978:	4621      	mov	r1, r4
 800197a:	028a      	lsls	r2, r1, #10
 800197c:	4610      	mov	r0, r2
 800197e:	4619      	mov	r1, r3
 8001980:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001982:	2200      	movs	r2, #0
 8001984:	61bb      	str	r3, [r7, #24]
 8001986:	61fa      	str	r2, [r7, #28]
 8001988:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800198c:	f7fe fc6a 	bl	8000264 <__aeabi_uldivmod>
 8001990:	4602      	mov	r2, r0
 8001992:	460b      	mov	r3, r1
 8001994:	4613      	mov	r3, r2
 8001996:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001998:	4b0b      	ldr	r3, [pc, #44]	@ (80019c8 <HAL_RCC_GetSysClockFreq+0x200>)
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	0c1b      	lsrs	r3, r3, #16
 800199e:	f003 0303 	and.w	r3, r3, #3
 80019a2:	3301      	adds	r3, #1
 80019a4:	005b      	lsls	r3, r3, #1
 80019a6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 80019a8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80019aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80019ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80019b0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80019b2:	e002      	b.n	80019ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80019b4:	4b05      	ldr	r3, [pc, #20]	@ (80019cc <HAL_RCC_GetSysClockFreq+0x204>)
 80019b6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80019b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80019ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80019bc:	4618      	mov	r0, r3
 80019be:	3750      	adds	r7, #80	@ 0x50
 80019c0:	46bd      	mov	sp, r7
 80019c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80019c6:	bf00      	nop
 80019c8:	40023800 	.word	0x40023800
 80019cc:	00f42400 	.word	0x00f42400
 80019d0:	007a1200 	.word	0x007a1200

080019d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80019d8:	4b03      	ldr	r3, [pc, #12]	@ (80019e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80019da:	681b      	ldr	r3, [r3, #0]
}
 80019dc:	4618      	mov	r0, r3
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr
 80019e6:	bf00      	nop
 80019e8:	20000000 	.word	0x20000000

080019ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80019f0:	f7ff fff0 	bl	80019d4 <HAL_RCC_GetHCLKFreq>
 80019f4:	4602      	mov	r2, r0
 80019f6:	4b05      	ldr	r3, [pc, #20]	@ (8001a0c <HAL_RCC_GetPCLK1Freq+0x20>)
 80019f8:	689b      	ldr	r3, [r3, #8]
 80019fa:	0a9b      	lsrs	r3, r3, #10
 80019fc:	f003 0307 	and.w	r3, r3, #7
 8001a00:	4903      	ldr	r1, [pc, #12]	@ (8001a10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a02:	5ccb      	ldrb	r3, [r1, r3]
 8001a04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	40023800 	.word	0x40023800
 8001a10:	08005128 	.word	0x08005128

08001a14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001a18:	f7ff ffdc 	bl	80019d4 <HAL_RCC_GetHCLKFreq>
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	4b05      	ldr	r3, [pc, #20]	@ (8001a34 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a20:	689b      	ldr	r3, [r3, #8]
 8001a22:	0b5b      	lsrs	r3, r3, #13
 8001a24:	f003 0307 	and.w	r3, r3, #7
 8001a28:	4903      	ldr	r1, [pc, #12]	@ (8001a38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a2a:	5ccb      	ldrb	r3, [r1, r3]
 8001a2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	40023800 	.word	0x40023800
 8001a38:	08005128 	.word	0x08005128

08001a3c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b083      	sub	sp, #12
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
 8001a44:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	220f      	movs	r2, #15
 8001a4a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001a4c:	4b12      	ldr	r3, [pc, #72]	@ (8001a98 <HAL_RCC_GetClockConfig+0x5c>)
 8001a4e:	689b      	ldr	r3, [r3, #8]
 8001a50:	f003 0203 	and.w	r2, r3, #3
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001a58:	4b0f      	ldr	r3, [pc, #60]	@ (8001a98 <HAL_RCC_GetClockConfig+0x5c>)
 8001a5a:	689b      	ldr	r3, [r3, #8]
 8001a5c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001a64:	4b0c      	ldr	r3, [pc, #48]	@ (8001a98 <HAL_RCC_GetClockConfig+0x5c>)
 8001a66:	689b      	ldr	r3, [r3, #8]
 8001a68:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001a70:	4b09      	ldr	r3, [pc, #36]	@ (8001a98 <HAL_RCC_GetClockConfig+0x5c>)
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	08db      	lsrs	r3, r3, #3
 8001a76:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001a7e:	4b07      	ldr	r3, [pc, #28]	@ (8001a9c <HAL_RCC_GetClockConfig+0x60>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f003 020f 	and.w	r2, r3, #15
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	601a      	str	r2, [r3, #0]
}
 8001a8a:	bf00      	nop
 8001a8c:	370c      	adds	r7, #12
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr
 8001a96:	bf00      	nop
 8001a98:	40023800 	.word	0x40023800
 8001a9c:	40023c00 	.word	0x40023c00

08001aa0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b082      	sub	sp, #8
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d101      	bne.n	8001ab2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e01d      	b.n	8001aee <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ab8:	b2db      	uxtb	r3, r3
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d106      	bne.n	8001acc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001ac6:	6878      	ldr	r0, [r7, #4]
 8001ac8:	f000 f815 	bl	8001af6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2202      	movs	r2, #2
 8001ad0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	3304      	adds	r3, #4
 8001adc:	4619      	mov	r1, r3
 8001ade:	4610      	mov	r0, r2
 8001ae0:	f000 f968 	bl	8001db4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001aec:	2300      	movs	r3, #0
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	3708      	adds	r7, #8
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}

08001af6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001af6:	b480      	push	{r7}
 8001af8:	b083      	sub	sp, #12
 8001afa:	af00      	add	r7, sp, #0
 8001afc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001afe:	bf00      	nop
 8001b00:	370c      	adds	r7, #12
 8001b02:	46bd      	mov	sp, r7
 8001b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b08:	4770      	bx	lr

08001b0a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001b0a:	b480      	push	{r7}
 8001b0c:	b085      	sub	sp, #20
 8001b0e:	af00      	add	r7, sp, #0
 8001b10:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	68da      	ldr	r2, [r3, #12]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f042 0201 	orr.w	r2, r2, #1
 8001b20:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	689b      	ldr	r3, [r3, #8]
 8001b28:	f003 0307 	and.w	r3, r3, #7
 8001b2c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	2b06      	cmp	r3, #6
 8001b32:	d007      	beq.n	8001b44 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	681a      	ldr	r2, [r3, #0]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f042 0201 	orr.w	r2, r2, #1
 8001b42:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001b44:	2300      	movs	r3, #0
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	3714      	adds	r7, #20
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr

08001b52 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001b52:	b580      	push	{r7, lr}
 8001b54:	b082      	sub	sp, #8
 8001b56:	af00      	add	r7, sp, #0
 8001b58:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	691b      	ldr	r3, [r3, #16]
 8001b60:	f003 0302 	and.w	r3, r3, #2
 8001b64:	2b02      	cmp	r3, #2
 8001b66:	d122      	bne.n	8001bae <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	68db      	ldr	r3, [r3, #12]
 8001b6e:	f003 0302 	and.w	r3, r3, #2
 8001b72:	2b02      	cmp	r3, #2
 8001b74:	d11b      	bne.n	8001bae <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f06f 0202 	mvn.w	r2, #2
 8001b7e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2201      	movs	r2, #1
 8001b84:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	699b      	ldr	r3, [r3, #24]
 8001b8c:	f003 0303 	and.w	r3, r3, #3
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d003      	beq.n	8001b9c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001b94:	6878      	ldr	r0, [r7, #4]
 8001b96:	f000 f8ee 	bl	8001d76 <HAL_TIM_IC_CaptureCallback>
 8001b9a:	e005      	b.n	8001ba8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b9c:	6878      	ldr	r0, [r7, #4]
 8001b9e:	f000 f8e0 	bl	8001d62 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ba2:	6878      	ldr	r0, [r7, #4]
 8001ba4:	f000 f8f1 	bl	8001d8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2200      	movs	r2, #0
 8001bac:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	691b      	ldr	r3, [r3, #16]
 8001bb4:	f003 0304 	and.w	r3, r3, #4
 8001bb8:	2b04      	cmp	r3, #4
 8001bba:	d122      	bne.n	8001c02 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	68db      	ldr	r3, [r3, #12]
 8001bc2:	f003 0304 	and.w	r3, r3, #4
 8001bc6:	2b04      	cmp	r3, #4
 8001bc8:	d11b      	bne.n	8001c02 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f06f 0204 	mvn.w	r2, #4
 8001bd2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2202      	movs	r2, #2
 8001bd8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	699b      	ldr	r3, [r3, #24]
 8001be0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d003      	beq.n	8001bf0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001be8:	6878      	ldr	r0, [r7, #4]
 8001bea:	f000 f8c4 	bl	8001d76 <HAL_TIM_IC_CaptureCallback>
 8001bee:	e005      	b.n	8001bfc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bf0:	6878      	ldr	r0, [r7, #4]
 8001bf2:	f000 f8b6 	bl	8001d62 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bf6:	6878      	ldr	r0, [r7, #4]
 8001bf8:	f000 f8c7 	bl	8001d8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2200      	movs	r2, #0
 8001c00:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	691b      	ldr	r3, [r3, #16]
 8001c08:	f003 0308 	and.w	r3, r3, #8
 8001c0c:	2b08      	cmp	r3, #8
 8001c0e:	d122      	bne.n	8001c56 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	68db      	ldr	r3, [r3, #12]
 8001c16:	f003 0308 	and.w	r3, r3, #8
 8001c1a:	2b08      	cmp	r3, #8
 8001c1c:	d11b      	bne.n	8001c56 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f06f 0208 	mvn.w	r2, #8
 8001c26:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2204      	movs	r2, #4
 8001c2c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	69db      	ldr	r3, [r3, #28]
 8001c34:	f003 0303 	and.w	r3, r3, #3
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d003      	beq.n	8001c44 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c3c:	6878      	ldr	r0, [r7, #4]
 8001c3e:	f000 f89a 	bl	8001d76 <HAL_TIM_IC_CaptureCallback>
 8001c42:	e005      	b.n	8001c50 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c44:	6878      	ldr	r0, [r7, #4]
 8001c46:	f000 f88c 	bl	8001d62 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c4a:	6878      	ldr	r0, [r7, #4]
 8001c4c:	f000 f89d 	bl	8001d8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2200      	movs	r2, #0
 8001c54:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	691b      	ldr	r3, [r3, #16]
 8001c5c:	f003 0310 	and.w	r3, r3, #16
 8001c60:	2b10      	cmp	r3, #16
 8001c62:	d122      	bne.n	8001caa <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	68db      	ldr	r3, [r3, #12]
 8001c6a:	f003 0310 	and.w	r3, r3, #16
 8001c6e:	2b10      	cmp	r3, #16
 8001c70:	d11b      	bne.n	8001caa <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f06f 0210 	mvn.w	r2, #16
 8001c7a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2208      	movs	r2, #8
 8001c80:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	69db      	ldr	r3, [r3, #28]
 8001c88:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d003      	beq.n	8001c98 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c90:	6878      	ldr	r0, [r7, #4]
 8001c92:	f000 f870 	bl	8001d76 <HAL_TIM_IC_CaptureCallback>
 8001c96:	e005      	b.n	8001ca4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c98:	6878      	ldr	r0, [r7, #4]
 8001c9a:	f000 f862 	bl	8001d62 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c9e:	6878      	ldr	r0, [r7, #4]
 8001ca0:	f000 f873 	bl	8001d8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	691b      	ldr	r3, [r3, #16]
 8001cb0:	f003 0301 	and.w	r3, r3, #1
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	d10e      	bne.n	8001cd6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	68db      	ldr	r3, [r3, #12]
 8001cbe:	f003 0301 	and.w	r3, r3, #1
 8001cc2:	2b01      	cmp	r3, #1
 8001cc4:	d107      	bne.n	8001cd6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f06f 0201 	mvn.w	r2, #1
 8001cce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001cd0:	6878      	ldr	r0, [r7, #4]
 8001cd2:	f7fe fdbb 	bl	800084c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	691b      	ldr	r3, [r3, #16]
 8001cdc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ce0:	2b80      	cmp	r3, #128	@ 0x80
 8001ce2:	d10e      	bne.n	8001d02 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	68db      	ldr	r3, [r3, #12]
 8001cea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001cee:	2b80      	cmp	r3, #128	@ 0x80
 8001cf0:	d107      	bne.n	8001d02 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001cfa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001cfc:	6878      	ldr	r0, [r7, #4]
 8001cfe:	f000 f903 	bl	8001f08 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	691b      	ldr	r3, [r3, #16]
 8001d08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d0c:	2b40      	cmp	r3, #64	@ 0x40
 8001d0e:	d10e      	bne.n	8001d2e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	68db      	ldr	r3, [r3, #12]
 8001d16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d1a:	2b40      	cmp	r3, #64	@ 0x40
 8001d1c:	d107      	bne.n	8001d2e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001d26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001d28:	6878      	ldr	r0, [r7, #4]
 8001d2a:	f000 f838 	bl	8001d9e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	691b      	ldr	r3, [r3, #16]
 8001d34:	f003 0320 	and.w	r3, r3, #32
 8001d38:	2b20      	cmp	r3, #32
 8001d3a:	d10e      	bne.n	8001d5a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	68db      	ldr	r3, [r3, #12]
 8001d42:	f003 0320 	and.w	r3, r3, #32
 8001d46:	2b20      	cmp	r3, #32
 8001d48:	d107      	bne.n	8001d5a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f06f 0220 	mvn.w	r2, #32
 8001d52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001d54:	6878      	ldr	r0, [r7, #4]
 8001d56:	f000 f8cd 	bl	8001ef4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001d5a:	bf00      	nop
 8001d5c:	3708      	adds	r7, #8
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}

08001d62 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d62:	b480      	push	{r7}
 8001d64:	b083      	sub	sp, #12
 8001d66:	af00      	add	r7, sp, #0
 8001d68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001d6a:	bf00      	nop
 8001d6c:	370c      	adds	r7, #12
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr

08001d76 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001d76:	b480      	push	{r7}
 8001d78:	b083      	sub	sp, #12
 8001d7a:	af00      	add	r7, sp, #0
 8001d7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001d7e:	bf00      	nop
 8001d80:	370c      	adds	r7, #12
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr

08001d8a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001d8a:	b480      	push	{r7}
 8001d8c:	b083      	sub	sp, #12
 8001d8e:	af00      	add	r7, sp, #0
 8001d90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001d92:	bf00      	nop
 8001d94:	370c      	adds	r7, #12
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr

08001d9e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001d9e:	b480      	push	{r7}
 8001da0:	b083      	sub	sp, #12
 8001da2:	af00      	add	r7, sp, #0
 8001da4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001da6:	bf00      	nop
 8001da8:	370c      	adds	r7, #12
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr
	...

08001db4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b085      	sub	sp, #20
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
 8001dbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	4a40      	ldr	r2, [pc, #256]	@ (8001ec8 <TIM_Base_SetConfig+0x114>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d013      	beq.n	8001df4 <TIM_Base_SetConfig+0x40>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001dd2:	d00f      	beq.n	8001df4 <TIM_Base_SetConfig+0x40>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	4a3d      	ldr	r2, [pc, #244]	@ (8001ecc <TIM_Base_SetConfig+0x118>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d00b      	beq.n	8001df4 <TIM_Base_SetConfig+0x40>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	4a3c      	ldr	r2, [pc, #240]	@ (8001ed0 <TIM_Base_SetConfig+0x11c>)
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d007      	beq.n	8001df4 <TIM_Base_SetConfig+0x40>
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	4a3b      	ldr	r2, [pc, #236]	@ (8001ed4 <TIM_Base_SetConfig+0x120>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d003      	beq.n	8001df4 <TIM_Base_SetConfig+0x40>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	4a3a      	ldr	r2, [pc, #232]	@ (8001ed8 <TIM_Base_SetConfig+0x124>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d108      	bne.n	8001e06 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001dfa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	68fa      	ldr	r2, [r7, #12]
 8001e02:	4313      	orrs	r3, r2
 8001e04:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	4a2f      	ldr	r2, [pc, #188]	@ (8001ec8 <TIM_Base_SetConfig+0x114>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d02b      	beq.n	8001e66 <TIM_Base_SetConfig+0xb2>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e14:	d027      	beq.n	8001e66 <TIM_Base_SetConfig+0xb2>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	4a2c      	ldr	r2, [pc, #176]	@ (8001ecc <TIM_Base_SetConfig+0x118>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d023      	beq.n	8001e66 <TIM_Base_SetConfig+0xb2>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	4a2b      	ldr	r2, [pc, #172]	@ (8001ed0 <TIM_Base_SetConfig+0x11c>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d01f      	beq.n	8001e66 <TIM_Base_SetConfig+0xb2>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	4a2a      	ldr	r2, [pc, #168]	@ (8001ed4 <TIM_Base_SetConfig+0x120>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d01b      	beq.n	8001e66 <TIM_Base_SetConfig+0xb2>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	4a29      	ldr	r2, [pc, #164]	@ (8001ed8 <TIM_Base_SetConfig+0x124>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d017      	beq.n	8001e66 <TIM_Base_SetConfig+0xb2>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	4a28      	ldr	r2, [pc, #160]	@ (8001edc <TIM_Base_SetConfig+0x128>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d013      	beq.n	8001e66 <TIM_Base_SetConfig+0xb2>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	4a27      	ldr	r2, [pc, #156]	@ (8001ee0 <TIM_Base_SetConfig+0x12c>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d00f      	beq.n	8001e66 <TIM_Base_SetConfig+0xb2>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	4a26      	ldr	r2, [pc, #152]	@ (8001ee4 <TIM_Base_SetConfig+0x130>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d00b      	beq.n	8001e66 <TIM_Base_SetConfig+0xb2>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	4a25      	ldr	r2, [pc, #148]	@ (8001ee8 <TIM_Base_SetConfig+0x134>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d007      	beq.n	8001e66 <TIM_Base_SetConfig+0xb2>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	4a24      	ldr	r2, [pc, #144]	@ (8001eec <TIM_Base_SetConfig+0x138>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d003      	beq.n	8001e66 <TIM_Base_SetConfig+0xb2>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	4a23      	ldr	r2, [pc, #140]	@ (8001ef0 <TIM_Base_SetConfig+0x13c>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d108      	bne.n	8001e78 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001e6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	68db      	ldr	r3, [r3, #12]
 8001e72:	68fa      	ldr	r2, [r7, #12]
 8001e74:	4313      	orrs	r3, r2
 8001e76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	695b      	ldr	r3, [r3, #20]
 8001e82:	4313      	orrs	r3, r2
 8001e84:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	68fa      	ldr	r2, [r7, #12]
 8001e8a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	689a      	ldr	r2, [r3, #8]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	681a      	ldr	r2, [r3, #0]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	4a0a      	ldr	r2, [pc, #40]	@ (8001ec8 <TIM_Base_SetConfig+0x114>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d003      	beq.n	8001eac <TIM_Base_SetConfig+0xf8>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	4a0c      	ldr	r2, [pc, #48]	@ (8001ed8 <TIM_Base_SetConfig+0x124>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d103      	bne.n	8001eb4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	691a      	ldr	r2, [r3, #16]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	615a      	str	r2, [r3, #20]
}
 8001eba:	bf00      	nop
 8001ebc:	3714      	adds	r7, #20
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr
 8001ec6:	bf00      	nop
 8001ec8:	40010000 	.word	0x40010000
 8001ecc:	40000400 	.word	0x40000400
 8001ed0:	40000800 	.word	0x40000800
 8001ed4:	40000c00 	.word	0x40000c00
 8001ed8:	40010400 	.word	0x40010400
 8001edc:	40014000 	.word	0x40014000
 8001ee0:	40014400 	.word	0x40014400
 8001ee4:	40014800 	.word	0x40014800
 8001ee8:	40001800 	.word	0x40001800
 8001eec:	40001c00 	.word	0x40001c00
 8001ef0:	40002000 	.word	0x40002000

08001ef4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b083      	sub	sp, #12
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001efc:	bf00      	nop
 8001efe:	370c      	adds	r7, #12
 8001f00:	46bd      	mov	sp, r7
 8001f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f06:	4770      	bx	lr

08001f08 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b083      	sub	sp, #12
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001f10:	bf00      	nop
 8001f12:	370c      	adds	r7, #12
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr

08001f1c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b082      	sub	sp, #8
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d101      	bne.n	8001f2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e03f      	b.n	8001fae <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8001f34:	b2db      	uxtb	r3, r3
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d106      	bne.n	8001f48 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001f42:	6878      	ldr	r0, [r7, #4]
 8001f44:	f7fe fcc4 	bl	80008d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2224      	movs	r2, #36	@ 0x24
 8001f4c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	68da      	ldr	r2, [r3, #12]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001f5e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001f60:	6878      	ldr	r0, [r7, #4]
 8001f62:	f000 f829 	bl	8001fb8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	691a      	ldr	r2, [r3, #16]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001f74:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	695a      	ldr	r2, [r3, #20]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001f84:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	68da      	ldr	r2, [r3, #12]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001f94:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2200      	movs	r2, #0
 8001f9a:	63da      	str	r2, [r3, #60]	@ 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2220      	movs	r2, #32
 8001fa0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2220      	movs	r2, #32
 8001fa8:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

  return HAL_OK;
 8001fac:	2300      	movs	r3, #0
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3708      	adds	r7, #8
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}
	...

08001fb8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001fb8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001fbc:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	f8c7 01fc 	str.w	r0, [r7, #508]	@ 0x1fc
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001fc6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	691b      	ldr	r3, [r3, #16]
 8001fce:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8001fd2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8001fd6:	68d9      	ldr	r1, [r3, #12]
 8001fd8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8001fdc:	681a      	ldr	r2, [r3, #0]
 8001fde:	ea40 0301 	orr.w	r3, r0, r1
 8001fe2:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001fe4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8001fe8:	689a      	ldr	r2, [r3, #8]
 8001fea:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8001fee:	691b      	ldr	r3, [r3, #16]
 8001ff0:	431a      	orrs	r2, r3
 8001ff2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8001ff6:	695b      	ldr	r3, [r3, #20]
 8001ff8:	431a      	orrs	r2, r3
 8001ffa:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8001ffe:	69db      	ldr	r3, [r3, #28]
 8002000:	4313      	orrs	r3, r2
 8002002:	f8c7 3204 	str.w	r3, [r7, #516]	@ 0x204
  MODIFY_REG(huart->Instance->CR1,
 8002006:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	68db      	ldr	r3, [r3, #12]
 800200e:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002012:	f021 010c 	bic.w	r1, r1, #12
 8002016:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800201a:	681a      	ldr	r2, [r3, #0]
 800201c:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
 8002020:	430b      	orrs	r3, r1
 8002022:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002024:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	695b      	ldr	r3, [r3, #20]
 800202c:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002030:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8002034:	6999      	ldr	r1, [r3, #24]
 8002036:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	ea40 0301 	orr.w	r3, r0, r1
 8002040:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002042:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8002046:	69db      	ldr	r3, [r3, #28]
 8002048:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800204c:	f040 824a 	bne.w	80024e4 <UART_SetConfig+0x52c>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002050:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8002054:	681a      	ldr	r2, [r3, #0]
 8002056:	4b96      	ldr	r3, [pc, #600]	@ (80022b0 <UART_SetConfig+0x2f8>)
 8002058:	429a      	cmp	r2, r3
 800205a:	d006      	beq.n	800206a <UART_SetConfig+0xb2>
 800205c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8002060:	681a      	ldr	r2, [r3, #0]
 8002062:	4b94      	ldr	r3, [pc, #592]	@ (80022b4 <UART_SetConfig+0x2fc>)
 8002064:	429a      	cmp	r2, r3
 8002066:	f040 8129 	bne.w	80022bc <UART_SetConfig+0x304>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800206a:	f7ff fcd3 	bl	8001a14 <HAL_RCC_GetPCLK2Freq>
 800206e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002072:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002076:	2200      	movs	r2, #0
 8002078:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
 800207c:	f8c7 21f4 	str.w	r2, [r7, #500]	@ 0x1f4
 8002080:	e9d7 457c 	ldrd	r4, r5, [r7, #496]	@ 0x1f0
 8002084:	4622      	mov	r2, r4
 8002086:	462b      	mov	r3, r5
 8002088:	1891      	adds	r1, r2, r2
 800208a:	f8c7 10d0 	str.w	r1, [r7, #208]	@ 0xd0
 800208e:	415b      	adcs	r3, r3
 8002090:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8002094:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	@ 0xd0
 8002098:	4621      	mov	r1, r4
 800209a:	1851      	adds	r1, r2, r1
 800209c:	f8c7 10c8 	str.w	r1, [r7, #200]	@ 0xc8
 80020a0:	4629      	mov	r1, r5
 80020a2:	414b      	adcs	r3, r1
 80020a4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80020a8:	f04f 0200 	mov.w	r2, #0
 80020ac:	f04f 0300 	mov.w	r3, #0
 80020b0:	e9d7 8932 	ldrd	r8, r9, [r7, #200]	@ 0xc8
 80020b4:	4649      	mov	r1, r9
 80020b6:	00cb      	lsls	r3, r1, #3
 80020b8:	4641      	mov	r1, r8
 80020ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80020be:	4641      	mov	r1, r8
 80020c0:	00ca      	lsls	r2, r1, #3
 80020c2:	4610      	mov	r0, r2
 80020c4:	4619      	mov	r1, r3
 80020c6:	4603      	mov	r3, r0
 80020c8:	4622      	mov	r2, r4
 80020ca:	189b      	adds	r3, r3, r2
 80020cc:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 80020d0:	462b      	mov	r3, r5
 80020d2:	460a      	mov	r2, r1
 80020d4:	eb42 0303 	adc.w	r3, r2, r3
 80020d8:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
 80020dc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	2200      	movs	r2, #0
 80020e4:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 80020e8:	f8c7 21e4 	str.w	r2, [r7, #484]	@ 0x1e4
 80020ec:	e9d7 1278 	ldrd	r1, r2, [r7, #480]	@ 0x1e0
 80020f0:	460b      	mov	r3, r1
 80020f2:	18db      	adds	r3, r3, r3
 80020f4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80020f8:	4613      	mov	r3, r2
 80020fa:	eb42 0303 	adc.w	r3, r2, r3
 80020fe:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002102:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	@ 0xc0
 8002106:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	@ 0x1e8
 800210a:	f7fe f8ab 	bl	8000264 <__aeabi_uldivmod>
 800210e:	4602      	mov	r2, r0
 8002110:	460b      	mov	r3, r1
 8002112:	4b69      	ldr	r3, [pc, #420]	@ (80022b8 <UART_SetConfig+0x300>)
 8002114:	fba3 2302 	umull	r2, r3, r3, r2
 8002118:	095b      	lsrs	r3, r3, #5
 800211a:	011c      	lsls	r4, r3, #4
 800211c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002120:	2200      	movs	r2, #0
 8002122:	f8c7 31d8 	str.w	r3, [r7, #472]	@ 0x1d8
 8002126:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 800212a:	e9d7 8976 	ldrd	r8, r9, [r7, #472]	@ 0x1d8
 800212e:	4642      	mov	r2, r8
 8002130:	464b      	mov	r3, r9
 8002132:	1891      	adds	r1, r2, r2
 8002134:	f8c7 10b8 	str.w	r1, [r7, #184]	@ 0xb8
 8002138:	415b      	adcs	r3, r3
 800213a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800213e:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	@ 0xb8
 8002142:	4641      	mov	r1, r8
 8002144:	1851      	adds	r1, r2, r1
 8002146:	f8c7 10b0 	str.w	r1, [r7, #176]	@ 0xb0
 800214a:	4649      	mov	r1, r9
 800214c:	414b      	adcs	r3, r1
 800214e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002152:	f04f 0200 	mov.w	r2, #0
 8002156:	f04f 0300 	mov.w	r3, #0
 800215a:	e9d7 ab2c 	ldrd	sl, fp, [r7, #176]	@ 0xb0
 800215e:	4659      	mov	r1, fp
 8002160:	00cb      	lsls	r3, r1, #3
 8002162:	4651      	mov	r1, sl
 8002164:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002168:	4651      	mov	r1, sl
 800216a:	00ca      	lsls	r2, r1, #3
 800216c:	4610      	mov	r0, r2
 800216e:	4619      	mov	r1, r3
 8002170:	4603      	mov	r3, r0
 8002172:	4642      	mov	r2, r8
 8002174:	189b      	adds	r3, r3, r2
 8002176:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
 800217a:	464b      	mov	r3, r9
 800217c:	460a      	mov	r2, r1
 800217e:	eb42 0303 	adc.w	r3, r2, r3
 8002182:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
 8002186:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	2200      	movs	r2, #0
 800218e:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8002192:	f8c7 21cc 	str.w	r2, [r7, #460]	@ 0x1cc
 8002196:	e9d7 1272 	ldrd	r1, r2, [r7, #456]	@ 0x1c8
 800219a:	460b      	mov	r3, r1
 800219c:	18db      	adds	r3, r3, r3
 800219e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80021a2:	4613      	mov	r3, r2
 80021a4:	eb42 0303 	adc.w	r3, r2, r3
 80021a8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80021ac:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	@ 0xa8
 80021b0:	e9d7 0174 	ldrd	r0, r1, [r7, #464]	@ 0x1d0
 80021b4:	f7fe f856 	bl	8000264 <__aeabi_uldivmod>
 80021b8:	4602      	mov	r2, r0
 80021ba:	460b      	mov	r3, r1
 80021bc:	4611      	mov	r1, r2
 80021be:	4b3e      	ldr	r3, [pc, #248]	@ (80022b8 <UART_SetConfig+0x300>)
 80021c0:	fba3 2301 	umull	r2, r3, r3, r1
 80021c4:	095b      	lsrs	r3, r3, #5
 80021c6:	2264      	movs	r2, #100	@ 0x64
 80021c8:	fb02 f303 	mul.w	r3, r2, r3
 80021cc:	1acb      	subs	r3, r1, r3
 80021ce:	00db      	lsls	r3, r3, #3
 80021d0:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80021d4:	4b38      	ldr	r3, [pc, #224]	@ (80022b8 <UART_SetConfig+0x300>)
 80021d6:	fba3 2302 	umull	r2, r3, r3, r2
 80021da:	095b      	lsrs	r3, r3, #5
 80021dc:	005b      	lsls	r3, r3, #1
 80021de:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80021e2:	441c      	add	r4, r3
 80021e4:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80021e8:	2200      	movs	r2, #0
 80021ea:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 80021ee:	f8c7 21c4 	str.w	r2, [r7, #452]	@ 0x1c4
 80021f2:	e9d7 8970 	ldrd	r8, r9, [r7, #448]	@ 0x1c0
 80021f6:	4642      	mov	r2, r8
 80021f8:	464b      	mov	r3, r9
 80021fa:	1891      	adds	r1, r2, r2
 80021fc:	f8c7 10a0 	str.w	r1, [r7, #160]	@ 0xa0
 8002200:	415b      	adcs	r3, r3
 8002202:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8002206:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 800220a:	4641      	mov	r1, r8
 800220c:	1851      	adds	r1, r2, r1
 800220e:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
 8002212:	4649      	mov	r1, r9
 8002214:	414b      	adcs	r3, r1
 8002216:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800221a:	f04f 0200 	mov.w	r2, #0
 800221e:	f04f 0300 	mov.w	r3, #0
 8002222:	e9d7 ab26 	ldrd	sl, fp, [r7, #152]	@ 0x98
 8002226:	4659      	mov	r1, fp
 8002228:	00cb      	lsls	r3, r1, #3
 800222a:	4651      	mov	r1, sl
 800222c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002230:	4651      	mov	r1, sl
 8002232:	00ca      	lsls	r2, r1, #3
 8002234:	4610      	mov	r0, r2
 8002236:	4619      	mov	r1, r3
 8002238:	4603      	mov	r3, r0
 800223a:	4642      	mov	r2, r8
 800223c:	189b      	adds	r3, r3, r2
 800223e:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
 8002242:	464b      	mov	r3, r9
 8002244:	460a      	mov	r2, r1
 8002246:	eb42 0303 	adc.w	r3, r2, r3
 800224a:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 800224e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	2200      	movs	r2, #0
 8002256:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
 800225a:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
 800225e:	e9d7 126c 	ldrd	r1, r2, [r7, #432]	@ 0x1b0
 8002262:	460b      	mov	r3, r1
 8002264:	18db      	adds	r3, r3, r3
 8002266:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800226a:	4613      	mov	r3, r2
 800226c:	eb42 0303 	adc.w	r3, r2, r3
 8002270:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002274:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 8002278:	e9d7 016e 	ldrd	r0, r1, [r7, #440]	@ 0x1b8
 800227c:	f7fd fff2 	bl	8000264 <__aeabi_uldivmod>
 8002280:	4602      	mov	r2, r0
 8002282:	460b      	mov	r3, r1
 8002284:	4b0c      	ldr	r3, [pc, #48]	@ (80022b8 <UART_SetConfig+0x300>)
 8002286:	fba3 1302 	umull	r1, r3, r3, r2
 800228a:	095b      	lsrs	r3, r3, #5
 800228c:	2164      	movs	r1, #100	@ 0x64
 800228e:	fb01 f303 	mul.w	r3, r1, r3
 8002292:	1ad3      	subs	r3, r2, r3
 8002294:	00db      	lsls	r3, r3, #3
 8002296:	3332      	adds	r3, #50	@ 0x32
 8002298:	4a07      	ldr	r2, [pc, #28]	@ (80022b8 <UART_SetConfig+0x300>)
 800229a:	fba2 2303 	umull	r2, r3, r2, r3
 800229e:	095b      	lsrs	r3, r3, #5
 80022a0:	f003 0207 	and.w	r2, r3, #7
 80022a4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4422      	add	r2, r4
 80022ac:	609a      	str	r2, [r3, #8]
 80022ae:	e34a      	b.n	8002946 <UART_SetConfig+0x98e>
 80022b0:	40011000 	.word	0x40011000
 80022b4:	40011400 	.word	0x40011400
 80022b8:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80022bc:	f7ff fb96 	bl	80019ec <HAL_RCC_GetPCLK1Freq>
 80022c0:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80022c4:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80022c8:	2200      	movs	r2, #0
 80022ca:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 80022ce:	f8c7 21ac 	str.w	r2, [r7, #428]	@ 0x1ac
 80022d2:	e9d7 456a 	ldrd	r4, r5, [r7, #424]	@ 0x1a8
 80022d6:	4622      	mov	r2, r4
 80022d8:	462b      	mov	r3, r5
 80022da:	1891      	adds	r1, r2, r2
 80022dc:	f8c7 1088 	str.w	r1, [r7, #136]	@ 0x88
 80022e0:	415b      	adcs	r3, r3
 80022e2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80022e6:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80022ea:	4621      	mov	r1, r4
 80022ec:	eb12 0a01 	adds.w	sl, r2, r1
 80022f0:	4629      	mov	r1, r5
 80022f2:	eb43 0b01 	adc.w	fp, r3, r1
 80022f6:	f04f 0200 	mov.w	r2, #0
 80022fa:	f04f 0300 	mov.w	r3, #0
 80022fe:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002302:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002306:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800230a:	4692      	mov	sl, r2
 800230c:	469b      	mov	fp, r3
 800230e:	4623      	mov	r3, r4
 8002310:	eb1a 0303 	adds.w	r3, sl, r3
 8002314:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8002318:	462b      	mov	r3, r5
 800231a:	eb4b 0303 	adc.w	r3, fp, r3
 800231e:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8002322:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	2200      	movs	r2, #0
 800232a:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
 800232e:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 8002332:	e9d7 1266 	ldrd	r1, r2, [r7, #408]	@ 0x198
 8002336:	460b      	mov	r3, r1
 8002338:	18db      	adds	r3, r3, r3
 800233a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800233e:	4613      	mov	r3, r2
 8002340:	eb42 0303 	adc.w	r3, r2, r3
 8002344:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002348:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 800234c:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	@ 0x1a0
 8002350:	f7fd ff88 	bl	8000264 <__aeabi_uldivmod>
 8002354:	4602      	mov	r2, r0
 8002356:	460b      	mov	r3, r1
 8002358:	4b61      	ldr	r3, [pc, #388]	@ (80024e0 <UART_SetConfig+0x528>)
 800235a:	fba3 2302 	umull	r2, r3, r3, r2
 800235e:	095b      	lsrs	r3, r3, #5
 8002360:	011c      	lsls	r4, r3, #4
 8002362:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002366:	2200      	movs	r2, #0
 8002368:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
 800236c:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
 8002370:	e9d7 8964 	ldrd	r8, r9, [r7, #400]	@ 0x190
 8002374:	4642      	mov	r2, r8
 8002376:	464b      	mov	r3, r9
 8002378:	1891      	adds	r1, r2, r2
 800237a:	67b9      	str	r1, [r7, #120]	@ 0x78
 800237c:	415b      	adcs	r3, r3
 800237e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002380:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 8002384:	4641      	mov	r1, r8
 8002386:	1851      	adds	r1, r2, r1
 8002388:	6739      	str	r1, [r7, #112]	@ 0x70
 800238a:	4649      	mov	r1, r9
 800238c:	414b      	adcs	r3, r1
 800238e:	677b      	str	r3, [r7, #116]	@ 0x74
 8002390:	f04f 0200 	mov.w	r2, #0
 8002394:	f04f 0300 	mov.w	r3, #0
 8002398:	e9d7 ab1c 	ldrd	sl, fp, [r7, #112]	@ 0x70
 800239c:	4659      	mov	r1, fp
 800239e:	00cb      	lsls	r3, r1, #3
 80023a0:	4651      	mov	r1, sl
 80023a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80023a6:	4651      	mov	r1, sl
 80023a8:	00ca      	lsls	r2, r1, #3
 80023aa:	4610      	mov	r0, r2
 80023ac:	4619      	mov	r1, r3
 80023ae:	4603      	mov	r3, r0
 80023b0:	4642      	mov	r2, r8
 80023b2:	189b      	adds	r3, r3, r2
 80023b4:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 80023b8:	464b      	mov	r3, r9
 80023ba:	460a      	mov	r2, r1
 80023bc:	eb42 0303 	adc.w	r3, r2, r3
 80023c0:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
 80023c4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	2200      	movs	r2, #0
 80023cc:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 80023d0:	f8c7 2184 	str.w	r2, [r7, #388]	@ 0x184
 80023d4:	e9d7 1260 	ldrd	r1, r2, [r7, #384]	@ 0x180
 80023d8:	460b      	mov	r3, r1
 80023da:	18db      	adds	r3, r3, r3
 80023dc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80023de:	4613      	mov	r3, r2
 80023e0:	eb42 0303 	adc.w	r3, r2, r3
 80023e4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80023e6:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 80023ea:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 80023ee:	f7fd ff39 	bl	8000264 <__aeabi_uldivmod>
 80023f2:	4602      	mov	r2, r0
 80023f4:	460b      	mov	r3, r1
 80023f6:	4611      	mov	r1, r2
 80023f8:	4b39      	ldr	r3, [pc, #228]	@ (80024e0 <UART_SetConfig+0x528>)
 80023fa:	fba3 2301 	umull	r2, r3, r3, r1
 80023fe:	095b      	lsrs	r3, r3, #5
 8002400:	2264      	movs	r2, #100	@ 0x64
 8002402:	fb02 f303 	mul.w	r3, r2, r3
 8002406:	1acb      	subs	r3, r1, r3
 8002408:	00db      	lsls	r3, r3, #3
 800240a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800240e:	4b34      	ldr	r3, [pc, #208]	@ (80024e0 <UART_SetConfig+0x528>)
 8002410:	fba3 2302 	umull	r2, r3, r3, r2
 8002414:	095b      	lsrs	r3, r3, #5
 8002416:	005b      	lsls	r3, r3, #1
 8002418:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800241c:	441c      	add	r4, r3
 800241e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002422:	2200      	movs	r2, #0
 8002424:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
 8002428:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 800242c:	e9d7 895e 	ldrd	r8, r9, [r7, #376]	@ 0x178
 8002430:	4642      	mov	r2, r8
 8002432:	464b      	mov	r3, r9
 8002434:	1891      	adds	r1, r2, r2
 8002436:	6639      	str	r1, [r7, #96]	@ 0x60
 8002438:	415b      	adcs	r3, r3
 800243a:	667b      	str	r3, [r7, #100]	@ 0x64
 800243c:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8002440:	4641      	mov	r1, r8
 8002442:	1851      	adds	r1, r2, r1
 8002444:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002446:	4649      	mov	r1, r9
 8002448:	414b      	adcs	r3, r1
 800244a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800244c:	f04f 0200 	mov.w	r2, #0
 8002450:	f04f 0300 	mov.w	r3, #0
 8002454:	e9d7 ab16 	ldrd	sl, fp, [r7, #88]	@ 0x58
 8002458:	4659      	mov	r1, fp
 800245a:	00cb      	lsls	r3, r1, #3
 800245c:	4651      	mov	r1, sl
 800245e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002462:	4651      	mov	r1, sl
 8002464:	00ca      	lsls	r2, r1, #3
 8002466:	4610      	mov	r0, r2
 8002468:	4619      	mov	r1, r3
 800246a:	4603      	mov	r3, r0
 800246c:	4642      	mov	r2, r8
 800246e:	189b      	adds	r3, r3, r2
 8002470:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
 8002474:	464b      	mov	r3, r9
 8002476:	460a      	mov	r2, r1
 8002478:	eb42 0303 	adc.w	r3, r2, r3
 800247c:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
 8002480:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	2200      	movs	r2, #0
 8002488:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
 800248c:	f8c7 216c 	str.w	r2, [r7, #364]	@ 0x16c
 8002490:	e9d7 125a 	ldrd	r1, r2, [r7, #360]	@ 0x168
 8002494:	460b      	mov	r3, r1
 8002496:	18db      	adds	r3, r3, r3
 8002498:	653b      	str	r3, [r7, #80]	@ 0x50
 800249a:	4613      	mov	r3, r2
 800249c:	eb42 0303 	adc.w	r3, r2, r3
 80024a0:	657b      	str	r3, [r7, #84]	@ 0x54
 80024a2:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80024a6:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	@ 0x170
 80024aa:	f7fd fedb 	bl	8000264 <__aeabi_uldivmod>
 80024ae:	4602      	mov	r2, r0
 80024b0:	460b      	mov	r3, r1
 80024b2:	4b0b      	ldr	r3, [pc, #44]	@ (80024e0 <UART_SetConfig+0x528>)
 80024b4:	fba3 1302 	umull	r1, r3, r3, r2
 80024b8:	095b      	lsrs	r3, r3, #5
 80024ba:	2164      	movs	r1, #100	@ 0x64
 80024bc:	fb01 f303 	mul.w	r3, r1, r3
 80024c0:	1ad3      	subs	r3, r2, r3
 80024c2:	00db      	lsls	r3, r3, #3
 80024c4:	3332      	adds	r3, #50	@ 0x32
 80024c6:	4a06      	ldr	r2, [pc, #24]	@ (80024e0 <UART_SetConfig+0x528>)
 80024c8:	fba2 2303 	umull	r2, r3, r2, r3
 80024cc:	095b      	lsrs	r3, r3, #5
 80024ce:	f003 0207 	and.w	r2, r3, #7
 80024d2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4422      	add	r2, r4
 80024da:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80024dc:	e233      	b.n	8002946 <UART_SetConfig+0x98e>
 80024de:	bf00      	nop
 80024e0:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80024e4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	4b8d      	ldr	r3, [pc, #564]	@ (8002720 <UART_SetConfig+0x768>)
 80024ec:	429a      	cmp	r2, r3
 80024ee:	d006      	beq.n	80024fe <UART_SetConfig+0x546>
 80024f0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80024f4:	681a      	ldr	r2, [r3, #0]
 80024f6:	4b8b      	ldr	r3, [pc, #556]	@ (8002724 <UART_SetConfig+0x76c>)
 80024f8:	429a      	cmp	r2, r3
 80024fa:	f040 8117 	bne.w	800272c <UART_SetConfig+0x774>
      pclk = HAL_RCC_GetPCLK2Freq();
 80024fe:	f7ff fa89 	bl	8001a14 <HAL_RCC_GetPCLK2Freq>
 8002502:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002506:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800250a:	2200      	movs	r2, #0
 800250c:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
 8002510:	f8c7 2164 	str.w	r2, [r7, #356]	@ 0x164
 8002514:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	@ 0x160
 8002518:	4622      	mov	r2, r4
 800251a:	462b      	mov	r3, r5
 800251c:	1891      	adds	r1, r2, r2
 800251e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002520:	415b      	adcs	r3, r3
 8002522:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002524:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002528:	4621      	mov	r1, r4
 800252a:	eb12 0801 	adds.w	r8, r2, r1
 800252e:	4629      	mov	r1, r5
 8002530:	eb43 0901 	adc.w	r9, r3, r1
 8002534:	f04f 0200 	mov.w	r2, #0
 8002538:	f04f 0300 	mov.w	r3, #0
 800253c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002540:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002544:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002548:	4690      	mov	r8, r2
 800254a:	4699      	mov	r9, r3
 800254c:	4623      	mov	r3, r4
 800254e:	eb18 0303 	adds.w	r3, r8, r3
 8002552:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8002556:	462b      	mov	r3, r5
 8002558:	eb49 0303 	adc.w	r3, r9, r3
 800255c:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
 8002560:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	2200      	movs	r2, #0
 8002568:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 800256c:	f8c7 2154 	str.w	r2, [r7, #340]	@ 0x154
 8002570:	f04f 0200 	mov.w	r2, #0
 8002574:	f04f 0300 	mov.w	r3, #0
 8002578:	e9d7 4554 	ldrd	r4, r5, [r7, #336]	@ 0x150
 800257c:	4629      	mov	r1, r5
 800257e:	008b      	lsls	r3, r1, #2
 8002580:	4621      	mov	r1, r4
 8002582:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002586:	4621      	mov	r1, r4
 8002588:	008a      	lsls	r2, r1, #2
 800258a:	e9d7 0156 	ldrd	r0, r1, [r7, #344]	@ 0x158
 800258e:	f7fd fe69 	bl	8000264 <__aeabi_uldivmod>
 8002592:	4602      	mov	r2, r0
 8002594:	460b      	mov	r3, r1
 8002596:	4b64      	ldr	r3, [pc, #400]	@ (8002728 <UART_SetConfig+0x770>)
 8002598:	fba3 2302 	umull	r2, r3, r3, r2
 800259c:	095b      	lsrs	r3, r3, #5
 800259e:	011c      	lsls	r4, r3, #4
 80025a0:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80025a4:	2200      	movs	r2, #0
 80025a6:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
 80025aa:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 80025ae:	e9d7 8952 	ldrd	r8, r9, [r7, #328]	@ 0x148
 80025b2:	4642      	mov	r2, r8
 80025b4:	464b      	mov	r3, r9
 80025b6:	1891      	adds	r1, r2, r2
 80025b8:	6439      	str	r1, [r7, #64]	@ 0x40
 80025ba:	415b      	adcs	r3, r3
 80025bc:	647b      	str	r3, [r7, #68]	@ 0x44
 80025be:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80025c2:	4641      	mov	r1, r8
 80025c4:	1851      	adds	r1, r2, r1
 80025c6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80025c8:	4649      	mov	r1, r9
 80025ca:	414b      	adcs	r3, r1
 80025cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80025ce:	f04f 0200 	mov.w	r2, #0
 80025d2:	f04f 0300 	mov.w	r3, #0
 80025d6:	e9d7 ab0e 	ldrd	sl, fp, [r7, #56]	@ 0x38
 80025da:	4659      	mov	r1, fp
 80025dc:	00cb      	lsls	r3, r1, #3
 80025de:	4651      	mov	r1, sl
 80025e0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80025e4:	4651      	mov	r1, sl
 80025e6:	00ca      	lsls	r2, r1, #3
 80025e8:	4610      	mov	r0, r2
 80025ea:	4619      	mov	r1, r3
 80025ec:	4603      	mov	r3, r0
 80025ee:	4642      	mov	r2, r8
 80025f0:	189b      	adds	r3, r3, r2
 80025f2:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 80025f6:	464b      	mov	r3, r9
 80025f8:	460a      	mov	r2, r1
 80025fa:	eb42 0303 	adc.w	r3, r2, r3
 80025fe:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 8002602:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	2200      	movs	r2, #0
 800260a:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 800260e:	f8c7 213c 	str.w	r2, [r7, #316]	@ 0x13c
 8002612:	f04f 0200 	mov.w	r2, #0
 8002616:	f04f 0300 	mov.w	r3, #0
 800261a:	e9d7 894e 	ldrd	r8, r9, [r7, #312]	@ 0x138
 800261e:	4649      	mov	r1, r9
 8002620:	008b      	lsls	r3, r1, #2
 8002622:	4641      	mov	r1, r8
 8002624:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002628:	4641      	mov	r1, r8
 800262a:	008a      	lsls	r2, r1, #2
 800262c:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	@ 0x140
 8002630:	f7fd fe18 	bl	8000264 <__aeabi_uldivmod>
 8002634:	4602      	mov	r2, r0
 8002636:	460b      	mov	r3, r1
 8002638:	4611      	mov	r1, r2
 800263a:	4b3b      	ldr	r3, [pc, #236]	@ (8002728 <UART_SetConfig+0x770>)
 800263c:	fba3 2301 	umull	r2, r3, r3, r1
 8002640:	095b      	lsrs	r3, r3, #5
 8002642:	2264      	movs	r2, #100	@ 0x64
 8002644:	fb02 f303 	mul.w	r3, r2, r3
 8002648:	1acb      	subs	r3, r1, r3
 800264a:	011b      	lsls	r3, r3, #4
 800264c:	3332      	adds	r3, #50	@ 0x32
 800264e:	4a36      	ldr	r2, [pc, #216]	@ (8002728 <UART_SetConfig+0x770>)
 8002650:	fba2 2303 	umull	r2, r3, r2, r3
 8002654:	095b      	lsrs	r3, r3, #5
 8002656:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800265a:	441c      	add	r4, r3
 800265c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002660:	2200      	movs	r2, #0
 8002662:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8002666:	f8c7 2134 	str.w	r2, [r7, #308]	@ 0x134
 800266a:	e9d7 894c 	ldrd	r8, r9, [r7, #304]	@ 0x130
 800266e:	4642      	mov	r2, r8
 8002670:	464b      	mov	r3, r9
 8002672:	1891      	adds	r1, r2, r2
 8002674:	6339      	str	r1, [r7, #48]	@ 0x30
 8002676:	415b      	adcs	r3, r3
 8002678:	637b      	str	r3, [r7, #52]	@ 0x34
 800267a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800267e:	4641      	mov	r1, r8
 8002680:	1851      	adds	r1, r2, r1
 8002682:	62b9      	str	r1, [r7, #40]	@ 0x28
 8002684:	4649      	mov	r1, r9
 8002686:	414b      	adcs	r3, r1
 8002688:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800268a:	f04f 0200 	mov.w	r2, #0
 800268e:	f04f 0300 	mov.w	r3, #0
 8002692:	e9d7 ab0a 	ldrd	sl, fp, [r7, #40]	@ 0x28
 8002696:	4659      	mov	r1, fp
 8002698:	00cb      	lsls	r3, r1, #3
 800269a:	4651      	mov	r1, sl
 800269c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80026a0:	4651      	mov	r1, sl
 80026a2:	00ca      	lsls	r2, r1, #3
 80026a4:	4610      	mov	r0, r2
 80026a6:	4619      	mov	r1, r3
 80026a8:	4603      	mov	r3, r0
 80026aa:	4642      	mov	r2, r8
 80026ac:	189b      	adds	r3, r3, r2
 80026ae:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 80026b2:	464b      	mov	r3, r9
 80026b4:	460a      	mov	r2, r1
 80026b6:	eb42 0303 	adc.w	r3, r2, r3
 80026ba:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 80026be:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	2200      	movs	r2, #0
 80026c6:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80026ca:	f8c7 2124 	str.w	r2, [r7, #292]	@ 0x124
 80026ce:	f04f 0200 	mov.w	r2, #0
 80026d2:	f04f 0300 	mov.w	r3, #0
 80026d6:	e9d7 8948 	ldrd	r8, r9, [r7, #288]	@ 0x120
 80026da:	4649      	mov	r1, r9
 80026dc:	008b      	lsls	r3, r1, #2
 80026de:	4641      	mov	r1, r8
 80026e0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80026e4:	4641      	mov	r1, r8
 80026e6:	008a      	lsls	r2, r1, #2
 80026e8:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	@ 0x128
 80026ec:	f7fd fdba 	bl	8000264 <__aeabi_uldivmod>
 80026f0:	4602      	mov	r2, r0
 80026f2:	460b      	mov	r3, r1
 80026f4:	4b0c      	ldr	r3, [pc, #48]	@ (8002728 <UART_SetConfig+0x770>)
 80026f6:	fba3 1302 	umull	r1, r3, r3, r2
 80026fa:	095b      	lsrs	r3, r3, #5
 80026fc:	2164      	movs	r1, #100	@ 0x64
 80026fe:	fb01 f303 	mul.w	r3, r1, r3
 8002702:	1ad3      	subs	r3, r2, r3
 8002704:	011b      	lsls	r3, r3, #4
 8002706:	3332      	adds	r3, #50	@ 0x32
 8002708:	4a07      	ldr	r2, [pc, #28]	@ (8002728 <UART_SetConfig+0x770>)
 800270a:	fba2 2303 	umull	r2, r3, r2, r3
 800270e:	095b      	lsrs	r3, r3, #5
 8002710:	f003 020f 	and.w	r2, r3, #15
 8002714:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4422      	add	r2, r4
 800271c:	609a      	str	r2, [r3, #8]
 800271e:	e112      	b.n	8002946 <UART_SetConfig+0x98e>
 8002720:	40011000 	.word	0x40011000
 8002724:	40011400 	.word	0x40011400
 8002728:	51eb851f 	.word	0x51eb851f
      pclk = HAL_RCC_GetPCLK1Freq();
 800272c:	f7ff f95e 	bl	80019ec <HAL_RCC_GetPCLK1Freq>
 8002730:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002734:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002738:	2200      	movs	r2, #0
 800273a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 800273e:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8002742:	e9d7 8946 	ldrd	r8, r9, [r7, #280]	@ 0x118
 8002746:	4642      	mov	r2, r8
 8002748:	464b      	mov	r3, r9
 800274a:	1891      	adds	r1, r2, r2
 800274c:	6239      	str	r1, [r7, #32]
 800274e:	415b      	adcs	r3, r3
 8002750:	627b      	str	r3, [r7, #36]	@ 0x24
 8002752:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002756:	4641      	mov	r1, r8
 8002758:	1854      	adds	r4, r2, r1
 800275a:	4649      	mov	r1, r9
 800275c:	eb43 0501 	adc.w	r5, r3, r1
 8002760:	f04f 0200 	mov.w	r2, #0
 8002764:	f04f 0300 	mov.w	r3, #0
 8002768:	00eb      	lsls	r3, r5, #3
 800276a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800276e:	00e2      	lsls	r2, r4, #3
 8002770:	4614      	mov	r4, r2
 8002772:	461d      	mov	r5, r3
 8002774:	4643      	mov	r3, r8
 8002776:	18e3      	adds	r3, r4, r3
 8002778:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 800277c:	464b      	mov	r3, r9
 800277e:	eb45 0303 	adc.w	r3, r5, r3
 8002782:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8002786:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	2200      	movs	r2, #0
 800278e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8002792:	f8c7 210c 	str.w	r2, [r7, #268]	@ 0x10c
 8002796:	f04f 0200 	mov.w	r2, #0
 800279a:	f04f 0300 	mov.w	r3, #0
 800279e:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	@ 0x108
 80027a2:	4629      	mov	r1, r5
 80027a4:	008b      	lsls	r3, r1, #2
 80027a6:	4621      	mov	r1, r4
 80027a8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80027ac:	4621      	mov	r1, r4
 80027ae:	008a      	lsls	r2, r1, #2
 80027b0:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
 80027b4:	f7fd fd56 	bl	8000264 <__aeabi_uldivmod>
 80027b8:	4602      	mov	r2, r0
 80027ba:	460b      	mov	r3, r1
 80027bc:	4b65      	ldr	r3, [pc, #404]	@ (8002954 <UART_SetConfig+0x99c>)
 80027be:	fba3 2302 	umull	r2, r3, r3, r2
 80027c2:	095b      	lsrs	r3, r3, #5
 80027c4:	011c      	lsls	r4, r3, #4
 80027c6:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80027ca:	2200      	movs	r2, #0
 80027cc:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80027d0:	f8c7 2104 	str.w	r2, [r7, #260]	@ 0x104
 80027d4:	e9d7 8940 	ldrd	r8, r9, [r7, #256]	@ 0x100
 80027d8:	4642      	mov	r2, r8
 80027da:	464b      	mov	r3, r9
 80027dc:	1891      	adds	r1, r2, r2
 80027de:	61b9      	str	r1, [r7, #24]
 80027e0:	415b      	adcs	r3, r3
 80027e2:	61fb      	str	r3, [r7, #28]
 80027e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80027e8:	4641      	mov	r1, r8
 80027ea:	1851      	adds	r1, r2, r1
 80027ec:	6139      	str	r1, [r7, #16]
 80027ee:	4649      	mov	r1, r9
 80027f0:	414b      	adcs	r3, r1
 80027f2:	617b      	str	r3, [r7, #20]
 80027f4:	f04f 0200 	mov.w	r2, #0
 80027f8:	f04f 0300 	mov.w	r3, #0
 80027fc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002800:	4659      	mov	r1, fp
 8002802:	00cb      	lsls	r3, r1, #3
 8002804:	4651      	mov	r1, sl
 8002806:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800280a:	4651      	mov	r1, sl
 800280c:	00ca      	lsls	r2, r1, #3
 800280e:	4610      	mov	r0, r2
 8002810:	4619      	mov	r1, r3
 8002812:	4603      	mov	r3, r0
 8002814:	4642      	mov	r2, r8
 8002816:	189b      	adds	r3, r3, r2
 8002818:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800281c:	464b      	mov	r3, r9
 800281e:	460a      	mov	r2, r1
 8002820:	eb42 0303 	adc.w	r3, r2, r3
 8002824:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8002828:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	2200      	movs	r2, #0
 8002830:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8002834:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8002838:	f04f 0200 	mov.w	r2, #0
 800283c:	f04f 0300 	mov.w	r3, #0
 8002840:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	@ 0xf0
 8002844:	4649      	mov	r1, r9
 8002846:	008b      	lsls	r3, r1, #2
 8002848:	4641      	mov	r1, r8
 800284a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800284e:	4641      	mov	r1, r8
 8002850:	008a      	lsls	r2, r1, #2
 8002852:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	@ 0xf8
 8002856:	f7fd fd05 	bl	8000264 <__aeabi_uldivmod>
 800285a:	4602      	mov	r2, r0
 800285c:	460b      	mov	r3, r1
 800285e:	4611      	mov	r1, r2
 8002860:	4b3c      	ldr	r3, [pc, #240]	@ (8002954 <UART_SetConfig+0x99c>)
 8002862:	fba3 2301 	umull	r2, r3, r3, r1
 8002866:	095b      	lsrs	r3, r3, #5
 8002868:	2264      	movs	r2, #100	@ 0x64
 800286a:	fb02 f303 	mul.w	r3, r2, r3
 800286e:	1acb      	subs	r3, r1, r3
 8002870:	011b      	lsls	r3, r3, #4
 8002872:	3332      	adds	r3, #50	@ 0x32
 8002874:	4a37      	ldr	r2, [pc, #220]	@ (8002954 <UART_SetConfig+0x99c>)
 8002876:	fba2 2303 	umull	r2, r3, r2, r3
 800287a:	095b      	lsrs	r3, r3, #5
 800287c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002880:	441c      	add	r4, r3
 8002882:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002886:	2200      	movs	r2, #0
 8002888:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800288c:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002890:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 8002894:	4642      	mov	r2, r8
 8002896:	464b      	mov	r3, r9
 8002898:	1891      	adds	r1, r2, r2
 800289a:	60b9      	str	r1, [r7, #8]
 800289c:	415b      	adcs	r3, r3
 800289e:	60fb      	str	r3, [r7, #12]
 80028a0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80028a4:	4641      	mov	r1, r8
 80028a6:	1851      	adds	r1, r2, r1
 80028a8:	6039      	str	r1, [r7, #0]
 80028aa:	4649      	mov	r1, r9
 80028ac:	414b      	adcs	r3, r1
 80028ae:	607b      	str	r3, [r7, #4]
 80028b0:	f04f 0200 	mov.w	r2, #0
 80028b4:	f04f 0300 	mov.w	r3, #0
 80028b8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80028bc:	4659      	mov	r1, fp
 80028be:	00cb      	lsls	r3, r1, #3
 80028c0:	4651      	mov	r1, sl
 80028c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80028c6:	4651      	mov	r1, sl
 80028c8:	00ca      	lsls	r2, r1, #3
 80028ca:	4610      	mov	r0, r2
 80028cc:	4619      	mov	r1, r3
 80028ce:	4603      	mov	r3, r0
 80028d0:	4642      	mov	r2, r8
 80028d2:	189b      	adds	r3, r3, r2
 80028d4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80028d8:	464b      	mov	r3, r9
 80028da:	460a      	mov	r2, r1
 80028dc:	eb42 0303 	adc.w	r3, r2, r3
 80028e0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80028e4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	2200      	movs	r2, #0
 80028ec:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80028f0:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80028f4:	f04f 0200 	mov.w	r2, #0
 80028f8:	f04f 0300 	mov.w	r3, #0
 80028fc:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	@ 0xd8
 8002900:	4649      	mov	r1, r9
 8002902:	008b      	lsls	r3, r1, #2
 8002904:	4641      	mov	r1, r8
 8002906:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800290a:	4641      	mov	r1, r8
 800290c:	008a      	lsls	r2, r1, #2
 800290e:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002912:	f7fd fca7 	bl	8000264 <__aeabi_uldivmod>
 8002916:	4602      	mov	r2, r0
 8002918:	460b      	mov	r3, r1
 800291a:	4b0e      	ldr	r3, [pc, #56]	@ (8002954 <UART_SetConfig+0x99c>)
 800291c:	fba3 1302 	umull	r1, r3, r3, r2
 8002920:	095b      	lsrs	r3, r3, #5
 8002922:	2164      	movs	r1, #100	@ 0x64
 8002924:	fb01 f303 	mul.w	r3, r1, r3
 8002928:	1ad3      	subs	r3, r2, r3
 800292a:	011b      	lsls	r3, r3, #4
 800292c:	3332      	adds	r3, #50	@ 0x32
 800292e:	4a09      	ldr	r2, [pc, #36]	@ (8002954 <UART_SetConfig+0x99c>)
 8002930:	fba2 2303 	umull	r2, r3, r2, r3
 8002934:	095b      	lsrs	r3, r3, #5
 8002936:	f003 020f 	and.w	r2, r3, #15
 800293a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4422      	add	r2, r4
 8002942:	609a      	str	r2, [r3, #8]
}
 8002944:	e7ff      	b.n	8002946 <UART_SetConfig+0x98e>
 8002946:	bf00      	nop
 8002948:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 800294c:	46bd      	mov	sp, r7
 800294e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002952:	bf00      	nop
 8002954:	51eb851f 	.word	0x51eb851f

08002958 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002958:	b480      	push	{r7}
 800295a:	b083      	sub	sp, #12
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	f103 0208 	add.w	r2, r3, #8
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	f04f 32ff 	mov.w	r2, #4294967295
 8002970:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	f103 0208 	add.w	r2, r3, #8
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	f103 0208 	add.w	r2, r3, #8
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2200      	movs	r2, #0
 800298a:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800298c:	bf00      	nop
 800298e:	370c      	adds	r7, #12
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr

08002998 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002998:	b480      	push	{r7}
 800299a:	b083      	sub	sp, #12
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2200      	movs	r2, #0
 80029a4:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80029a6:	bf00      	nop
 80029a8:	370c      	adds	r7, #12
 80029aa:	46bd      	mov	sp, r7
 80029ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b0:	4770      	bx	lr

080029b2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80029b2:	b480      	push	{r7}
 80029b4:	b085      	sub	sp, #20
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	6078      	str	r0, [r7, #4]
 80029ba:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	68fa      	ldr	r2, [r7, #12]
 80029c6:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	689a      	ldr	r2, [r3, #8]
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	683a      	ldr	r2, [r7, #0]
 80029d6:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	683a      	ldr	r2, [r7, #0]
 80029dc:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	687a      	ldr	r2, [r7, #4]
 80029e2:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	1c5a      	adds	r2, r3, #1
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	601a      	str	r2, [r3, #0]
}
 80029ee:	bf00      	nop
 80029f0:	3714      	adds	r7, #20
 80029f2:	46bd      	mov	sp, r7
 80029f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f8:	4770      	bx	lr

080029fa <uxListRemove>:
    ( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80029fa:	b480      	push	{r7}
 80029fc:	b085      	sub	sp, #20
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	691b      	ldr	r3, [r3, #16]
 8002a06:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	687a      	ldr	r2, [r7, #4]
 8002a0e:	6892      	ldr	r2, [r2, #8]
 8002a10:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	687a      	ldr	r2, [r7, #4]
 8002a18:	6852      	ldr	r2, [r2, #4]
 8002a1a:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	687a      	ldr	r2, [r7, #4]
 8002a22:	429a      	cmp	r2, r3
 8002a24:	d103      	bne.n	8002a2e <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	689a      	ldr	r2, [r3, #8]
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2200      	movs	r2, #0
 8002a32:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	1e5a      	subs	r2, r3, #1
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	3714      	adds	r7, #20
 8002a46:	46bd      	mov	sp, r7
 8002a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4c:	4770      	bx	lr

08002a4e <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002a4e:	b580      	push	{r7, lr}
 8002a50:	b08c      	sub	sp, #48	@ 0x30
 8002a52:	af04      	add	r7, sp, #16
 8002a54:	60f8      	str	r0, [r7, #12]
 8002a56:	60b9      	str	r1, [r7, #8]
 8002a58:	603b      	str	r3, [r7, #0]
 8002a5a:	4613      	mov	r3, r2
 8002a5c:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002a5e:	88fb      	ldrh	r3, [r7, #6]
 8002a60:	009b      	lsls	r3, r3, #2
 8002a62:	4618      	mov	r0, r3
 8002a64:	f000 fee2 	bl	800382c <pvPortMalloc>
 8002a68:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d00e      	beq.n	8002a8e <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002a70:	2058      	movs	r0, #88	@ 0x58
 8002a72:	f000 fedb 	bl	800382c <pvPortMalloc>
 8002a76:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8002a78:	69fb      	ldr	r3, [r7, #28]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d003      	beq.n	8002a86 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8002a7e:	69fb      	ldr	r3, [r7, #28]
 8002a80:	697a      	ldr	r2, [r7, #20]
 8002a82:	631a      	str	r2, [r3, #48]	@ 0x30
 8002a84:	e005      	b.n	8002a92 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8002a86:	6978      	ldr	r0, [r7, #20]
 8002a88:	f000 ffb2 	bl	80039f0 <vPortFree>
 8002a8c:	e001      	b.n	8002a92 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002a92:	69fb      	ldr	r3, [r7, #28]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d013      	beq.n	8002ac0 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002a98:	88fa      	ldrh	r2, [r7, #6]
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	9303      	str	r3, [sp, #12]
 8002a9e:	69fb      	ldr	r3, [r7, #28]
 8002aa0:	9302      	str	r3, [sp, #8]
 8002aa2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002aa4:	9301      	str	r3, [sp, #4]
 8002aa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002aa8:	9300      	str	r3, [sp, #0]
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	68b9      	ldr	r1, [r7, #8]
 8002aae:	68f8      	ldr	r0, [r7, #12]
 8002ab0:	f000 f80e 	bl	8002ad0 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002ab4:	69f8      	ldr	r0, [r7, #28]
 8002ab6:	f000 f8a3 	bl	8002c00 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002aba:	2301      	movs	r3, #1
 8002abc:	61bb      	str	r3, [r7, #24]
 8002abe:	e002      	b.n	8002ac6 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002ac0:	f04f 33ff 	mov.w	r3, #4294967295
 8002ac4:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002ac6:	69bb      	ldr	r3, [r7, #24]
    }
 8002ac8:	4618      	mov	r0, r3
 8002aca:	3720      	adds	r7, #32
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}

08002ad0 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b088      	sub	sp, #32
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	60f8      	str	r0, [r7, #12]
 8002ad8:	60b9      	str	r1, [r7, #8]
 8002ada:	607a      	str	r2, [r7, #4]
 8002adc:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002ade:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ae0:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	009b      	lsls	r3, r3, #2
 8002ae6:	461a      	mov	r2, r3
 8002ae8:	21a5      	movs	r1, #165	@ 0xa5
 8002aea:	f002 fa87 	bl	8004ffc <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002aee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002af0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002af8:	3b01      	subs	r3, #1
 8002afa:	009b      	lsls	r3, r3, #2
 8002afc:	4413      	add	r3, r2
 8002afe:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002b00:	69bb      	ldr	r3, [r7, #24]
 8002b02:	f023 0307 	bic.w	r3, r3, #7
 8002b06:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002b08:	69bb      	ldr	r3, [r7, #24]
 8002b0a:	f003 0307 	and.w	r3, r3, #7
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d00b      	beq.n	8002b2a <prvInitialiseNewTask+0x5a>
        __asm volatile
 8002b12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b16:	f383 8811 	msr	BASEPRI, r3
 8002b1a:	f3bf 8f6f 	isb	sy
 8002b1e:	f3bf 8f4f 	dsb	sy
 8002b22:	617b      	str	r3, [r7, #20]
    }
 8002b24:	bf00      	nop
 8002b26:	bf00      	nop
 8002b28:	e7fd      	b.n	8002b26 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002b2a:	68bb      	ldr	r3, [r7, #8]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d01f      	beq.n	8002b70 <prvInitialiseNewTask+0xa0>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002b30:	2300      	movs	r3, #0
 8002b32:	61fb      	str	r3, [r7, #28]
 8002b34:	e012      	b.n	8002b5c <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002b36:	68ba      	ldr	r2, [r7, #8]
 8002b38:	69fb      	ldr	r3, [r7, #28]
 8002b3a:	4413      	add	r3, r2
 8002b3c:	7819      	ldrb	r1, [r3, #0]
 8002b3e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002b40:	69fb      	ldr	r3, [r7, #28]
 8002b42:	4413      	add	r3, r2
 8002b44:	3334      	adds	r3, #52	@ 0x34
 8002b46:	460a      	mov	r2, r1
 8002b48:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002b4a:	68ba      	ldr	r2, [r7, #8]
 8002b4c:	69fb      	ldr	r3, [r7, #28]
 8002b4e:	4413      	add	r3, r2
 8002b50:	781b      	ldrb	r3, [r3, #0]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d006      	beq.n	8002b64 <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002b56:	69fb      	ldr	r3, [r7, #28]
 8002b58:	3301      	adds	r3, #1
 8002b5a:	61fb      	str	r3, [r7, #28]
 8002b5c:	69fb      	ldr	r3, [r7, #28]
 8002b5e:	2b09      	cmp	r3, #9
 8002b60:	d9e9      	bls.n	8002b36 <prvInitialiseNewTask+0x66>
 8002b62:	e000      	b.n	8002b66 <prvInitialiseNewTask+0x96>
            {
                break;
 8002b64:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002b66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b68:	2200      	movs	r2, #0
 8002b6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8002b6e:	e003      	b.n	8002b78 <prvInitialiseNewTask+0xa8>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002b70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b72:	2200      	movs	r2, #0
 8002b74:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002b78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b7a:	2b04      	cmp	r3, #4
 8002b7c:	d901      	bls.n	8002b82 <prvInitialiseNewTask+0xb2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002b7e:	2304      	movs	r3, #4
 8002b80:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002b82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b84:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002b86:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8002b88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b8a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002b8c:	649a      	str	r2, [r3, #72]	@ 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8002b8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b90:	2200      	movs	r2, #0
 8002b92:	64da      	str	r2, [r3, #76]	@ 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002b94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b96:	3304      	adds	r3, #4
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f7ff fefd 	bl	8002998 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002b9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ba0:	3318      	adds	r3, #24
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f7ff fef8 	bl	8002998 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002ba8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002baa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002bac:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002bae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bb0:	f1c3 0205 	rsb	r2, r3, #5
 8002bb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bb6:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002bb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002bbc:	625a      	str	r2, [r3, #36]	@ 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8002bbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bc0:	3350      	adds	r3, #80	@ 0x50
 8002bc2:	2204      	movs	r2, #4
 8002bc4:	2100      	movs	r1, #0
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f002 fa18 	bl	8004ffc <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8002bcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bce:	3354      	adds	r3, #84	@ 0x54
 8002bd0:	2201      	movs	r2, #1
 8002bd2:	2100      	movs	r1, #0
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f002 fa11 	bl	8004ffc <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002bda:	683a      	ldr	r2, [r7, #0]
 8002bdc:	68f9      	ldr	r1, [r7, #12]
 8002bde:	69b8      	ldr	r0, [r7, #24]
 8002be0:	f000 fb80 	bl	80032e4 <pxPortInitialiseStack>
 8002be4:	4602      	mov	r2, r0
 8002be6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002be8:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002bea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d002      	beq.n	8002bf6 <prvInitialiseNewTask+0x126>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002bf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bf2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002bf4:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002bf6:	bf00      	nop
 8002bf8:	3720      	adds	r7, #32
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}
	...

08002c00 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002c00:	b5b0      	push	{r4, r5, r7, lr}
 8002c02:	b084      	sub	sp, #16
 8002c04:	af02      	add	r7, sp, #8
 8002c06:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002c08:	f000 fd20 	bl	800364c <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002c0c:	4b3b      	ldr	r3, [pc, #236]	@ (8002cfc <prvAddNewTaskToReadyList+0xfc>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	3301      	adds	r3, #1
 8002c12:	4a3a      	ldr	r2, [pc, #232]	@ (8002cfc <prvAddNewTaskToReadyList+0xfc>)
 8002c14:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002c16:	4b3a      	ldr	r3, [pc, #232]	@ (8002d00 <prvAddNewTaskToReadyList+0x100>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d109      	bne.n	8002c32 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002c1e:	4a38      	ldr	r2, [pc, #224]	@ (8002d00 <prvAddNewTaskToReadyList+0x100>)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002c24:	4b35      	ldr	r3, [pc, #212]	@ (8002cfc <prvAddNewTaskToReadyList+0xfc>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	2b01      	cmp	r3, #1
 8002c2a:	d110      	bne.n	8002c4e <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002c2c:	f000 fac0 	bl	80031b0 <prvInitialiseTaskLists>
 8002c30:	e00d      	b.n	8002c4e <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002c32:	4b34      	ldr	r3, [pc, #208]	@ (8002d04 <prvAddNewTaskToReadyList+0x104>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d109      	bne.n	8002c4e <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002c3a:	4b31      	ldr	r3, [pc, #196]	@ (8002d00 <prvAddNewTaskToReadyList+0x100>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c44:	429a      	cmp	r2, r3
 8002c46:	d802      	bhi.n	8002c4e <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002c48:	4a2d      	ldr	r2, [pc, #180]	@ (8002d00 <prvAddNewTaskToReadyList+0x100>)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002c4e:	4b2e      	ldr	r3, [pc, #184]	@ (8002d08 <prvAddNewTaskToReadyList+0x108>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	3301      	adds	r3, #1
 8002c54:	4a2c      	ldr	r2, [pc, #176]	@ (8002d08 <prvAddNewTaskToReadyList+0x108>)
 8002c56:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002c58:	4b2b      	ldr	r3, [pc, #172]	@ (8002d08 <prvAddNewTaskToReadyList+0x108>)
 8002c5a:	681a      	ldr	r2, [r3, #0]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	641a      	str	r2, [r3, #64]	@ 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d016      	beq.n	8002c94 <prvAddNewTaskToReadyList+0x94>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f001 ffb9 	bl	8004be0 <SEGGER_SYSVIEW_OnTaskCreate>
 8002c6e:	6878      	ldr	r0, [r7, #4]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c7e:	461d      	mov	r5, r3
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	461c      	mov	r4, r3
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c8a:	1ae3      	subs	r3, r4, r3
 8002c8c:	9300      	str	r3, [sp, #0]
 8002c8e:	462b      	mov	r3, r5
 8002c90:	f000 ffce 	bl	8003c30 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	4618      	mov	r0, r3
 8002c98:	f002 f826 	bl	8004ce8 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ca0:	2201      	movs	r2, #1
 8002ca2:	409a      	lsls	r2, r3
 8002ca4:	4b19      	ldr	r3, [pc, #100]	@ (8002d0c <prvAddNewTaskToReadyList+0x10c>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	4a18      	ldr	r2, [pc, #96]	@ (8002d0c <prvAddNewTaskToReadyList+0x10c>)
 8002cac:	6013      	str	r3, [r2, #0]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002cb2:	4613      	mov	r3, r2
 8002cb4:	009b      	lsls	r3, r3, #2
 8002cb6:	4413      	add	r3, r2
 8002cb8:	009b      	lsls	r3, r3, #2
 8002cba:	4a15      	ldr	r2, [pc, #84]	@ (8002d10 <prvAddNewTaskToReadyList+0x110>)
 8002cbc:	441a      	add	r2, r3
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	3304      	adds	r3, #4
 8002cc2:	4619      	mov	r1, r3
 8002cc4:	4610      	mov	r0, r2
 8002cc6:	f7ff fe74 	bl	80029b2 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002cca:	f000 fcf1 	bl	80036b0 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002cce:	4b0d      	ldr	r3, [pc, #52]	@ (8002d04 <prvAddNewTaskToReadyList+0x104>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d00e      	beq.n	8002cf4 <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002cd6:	4b0a      	ldr	r3, [pc, #40]	@ (8002d00 <prvAddNewTaskToReadyList+0x100>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ce0:	429a      	cmp	r2, r3
 8002ce2:	d207      	bcs.n	8002cf4 <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8002ce4:	4b0b      	ldr	r3, [pc, #44]	@ (8002d14 <prvAddNewTaskToReadyList+0x114>)
 8002ce6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002cea:	601a      	str	r2, [r3, #0]
 8002cec:	f3bf 8f4f 	dsb	sy
 8002cf0:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002cf4:	bf00      	nop
 8002cf6:	3708      	adds	r7, #8
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bdb0      	pop	{r4, r5, r7, pc}
 8002cfc:	20000190 	.word	0x20000190
 8002d00:	200000b8 	.word	0x200000b8
 8002d04:	2000019c 	.word	0x2000019c
 8002d08:	200001ac 	.word	0x200001ac
 8002d0c:	20000198 	.word	0x20000198
 8002d10:	200000bc 	.word	0x200000bc
 8002d14:	e000ed04 	.word	0xe000ed04

08002d18 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b086      	sub	sp, #24
 8002d1c:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8002d1e:	4b24      	ldr	r3, [pc, #144]	@ (8002db0 <vTaskStartScheduler+0x98>)
 8002d20:	9301      	str	r3, [sp, #4]
 8002d22:	2300      	movs	r3, #0
 8002d24:	9300      	str	r3, [sp, #0]
 8002d26:	2300      	movs	r3, #0
 8002d28:	2282      	movs	r2, #130	@ 0x82
 8002d2a:	4922      	ldr	r1, [pc, #136]	@ (8002db4 <vTaskStartScheduler+0x9c>)
 8002d2c:	4822      	ldr	r0, [pc, #136]	@ (8002db8 <vTaskStartScheduler+0xa0>)
 8002d2e:	f7ff fe8e 	bl	8002a4e <xTaskCreate>
 8002d32:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	2b01      	cmp	r3, #1
 8002d38:	d124      	bne.n	8002d84 <vTaskStartScheduler+0x6c>
        __asm volatile
 8002d3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d3e:	f383 8811 	msr	BASEPRI, r3
 8002d42:	f3bf 8f6f 	isb	sy
 8002d46:	f3bf 8f4f 	dsb	sy
 8002d4a:	60bb      	str	r3, [r7, #8]
    }
 8002d4c:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8002d4e:	4b1b      	ldr	r3, [pc, #108]	@ (8002dbc <vTaskStartScheduler+0xa4>)
 8002d50:	f04f 32ff 	mov.w	r2, #4294967295
 8002d54:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002d56:	4b1a      	ldr	r3, [pc, #104]	@ (8002dc0 <vTaskStartScheduler+0xa8>)
 8002d58:	2201      	movs	r2, #1
 8002d5a:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002d5c:	4b19      	ldr	r3, [pc, #100]	@ (8002dc4 <vTaskStartScheduler+0xac>)
 8002d5e:	2200      	movs	r2, #0
 8002d60:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8002d62:	4b19      	ldr	r3, [pc, #100]	@ (8002dc8 <vTaskStartScheduler+0xb0>)
 8002d64:	681a      	ldr	r2, [r3, #0]
 8002d66:	4b12      	ldr	r3, [pc, #72]	@ (8002db0 <vTaskStartScheduler+0x98>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	429a      	cmp	r2, r3
 8002d6c:	d102      	bne.n	8002d74 <vTaskStartScheduler+0x5c>
 8002d6e:	f001 ff1b 	bl	8004ba8 <SEGGER_SYSVIEW_OnIdle>
 8002d72:	e004      	b.n	8002d7e <vTaskStartScheduler+0x66>
 8002d74:	4b14      	ldr	r3, [pc, #80]	@ (8002dc8 <vTaskStartScheduler+0xb0>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f001 ff73 	bl	8004c64 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8002d7e:	f000 fb41 	bl	8003404 <xPortStartScheduler>
 8002d82:	e00f      	b.n	8002da4 <vTaskStartScheduler+0x8c>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d8a:	d10b      	bne.n	8002da4 <vTaskStartScheduler+0x8c>
        __asm volatile
 8002d8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d90:	f383 8811 	msr	BASEPRI, r3
 8002d94:	f3bf 8f6f 	isb	sy
 8002d98:	f3bf 8f4f 	dsb	sy
 8002d9c:	607b      	str	r3, [r7, #4]
    }
 8002d9e:	bf00      	nop
 8002da0:	bf00      	nop
 8002da2:	e7fd      	b.n	8002da0 <vTaskStartScheduler+0x88>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002da4:	4b09      	ldr	r3, [pc, #36]	@ (8002dcc <vTaskStartScheduler+0xb4>)
 8002da6:	681b      	ldr	r3, [r3, #0]
}
 8002da8:	bf00      	nop
 8002daa:	3710      	adds	r7, #16
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bd80      	pop	{r7, pc}
 8002db0:	200001b4 	.word	0x200001b4
 8002db4:	080050a0 	.word	0x080050a0
 8002db8:	08003181 	.word	0x08003181
 8002dbc:	200001b0 	.word	0x200001b0
 8002dc0:	2000019c 	.word	0x2000019c
 8002dc4:	20000194 	.word	0x20000194
 8002dc8:	200000b8 	.word	0x200000b8
 8002dcc:	2000000c 	.word	0x2000000c

08002dd0 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002dd4:	4b04      	ldr	r3, [pc, #16]	@ (8002de8 <vTaskSuspendAll+0x18>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	3301      	adds	r3, #1
 8002dda:	4a03      	ldr	r2, [pc, #12]	@ (8002de8 <vTaskSuspendAll+0x18>)
 8002ddc:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002dde:	bf00      	nop
 8002de0:	46bd      	mov	sp, r7
 8002de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de6:	4770      	bx	lr
 8002de8:	200001b8 	.word	0x200001b8

08002dec <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b084      	sub	sp, #16
 8002df0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002df2:	2300      	movs	r3, #0
 8002df4:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002df6:	2300      	movs	r3, #0
 8002df8:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002dfa:	4b44      	ldr	r3, [pc, #272]	@ (8002f0c <xTaskResumeAll+0x120>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d10b      	bne.n	8002e1a <xTaskResumeAll+0x2e>
        __asm volatile
 8002e02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e06:	f383 8811 	msr	BASEPRI, r3
 8002e0a:	f3bf 8f6f 	isb	sy
 8002e0e:	f3bf 8f4f 	dsb	sy
 8002e12:	603b      	str	r3, [r7, #0]
    }
 8002e14:	bf00      	nop
 8002e16:	bf00      	nop
 8002e18:	e7fd      	b.n	8002e16 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002e1a:	f000 fc17 	bl	800364c <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002e1e:	4b3b      	ldr	r3, [pc, #236]	@ (8002f0c <xTaskResumeAll+0x120>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	3b01      	subs	r3, #1
 8002e24:	4a39      	ldr	r2, [pc, #228]	@ (8002f0c <xTaskResumeAll+0x120>)
 8002e26:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002e28:	4b38      	ldr	r3, [pc, #224]	@ (8002f0c <xTaskResumeAll+0x120>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d165      	bne.n	8002efc <xTaskResumeAll+0x110>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002e30:	4b37      	ldr	r3, [pc, #220]	@ (8002f10 <xTaskResumeAll+0x124>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d061      	beq.n	8002efc <xTaskResumeAll+0x110>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002e38:	e032      	b.n	8002ea0 <xTaskResumeAll+0xb4>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002e3a:	4b36      	ldr	r3, [pc, #216]	@ (8002f14 <xTaskResumeAll+0x128>)
 8002e3c:	68db      	ldr	r3, [r3, #12]
 8002e3e:	68db      	ldr	r3, [r3, #12]
 8002e40:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	3318      	adds	r3, #24
 8002e46:	4618      	mov	r0, r3
 8002e48:	f7ff fdd7 	bl	80029fa <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	3304      	adds	r3, #4
 8002e50:	4618      	mov	r0, r3
 8002e52:	f7ff fdd2 	bl	80029fa <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f001 ff45 	bl	8004ce8 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e62:	2201      	movs	r2, #1
 8002e64:	409a      	lsls	r2, r3
 8002e66:	4b2c      	ldr	r3, [pc, #176]	@ (8002f18 <xTaskResumeAll+0x12c>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	4a2a      	ldr	r2, [pc, #168]	@ (8002f18 <xTaskResumeAll+0x12c>)
 8002e6e:	6013      	str	r3, [r2, #0]
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e74:	4613      	mov	r3, r2
 8002e76:	009b      	lsls	r3, r3, #2
 8002e78:	4413      	add	r3, r2
 8002e7a:	009b      	lsls	r3, r3, #2
 8002e7c:	4a27      	ldr	r2, [pc, #156]	@ (8002f1c <xTaskResumeAll+0x130>)
 8002e7e:	441a      	add	r2, r3
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	3304      	adds	r3, #4
 8002e84:	4619      	mov	r1, r3
 8002e86:	4610      	mov	r0, r2
 8002e88:	f7ff fd93 	bl	80029b2 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e90:	4b23      	ldr	r3, [pc, #140]	@ (8002f20 <xTaskResumeAll+0x134>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e96:	429a      	cmp	r2, r3
 8002e98:	d302      	bcc.n	8002ea0 <xTaskResumeAll+0xb4>
                    {
                        xYieldPending = pdTRUE;
 8002e9a:	4b22      	ldr	r3, [pc, #136]	@ (8002f24 <xTaskResumeAll+0x138>)
 8002e9c:	2201      	movs	r2, #1
 8002e9e:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002ea0:	4b1c      	ldr	r3, [pc, #112]	@ (8002f14 <xTaskResumeAll+0x128>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d1c8      	bne.n	8002e3a <xTaskResumeAll+0x4e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d001      	beq.n	8002eb2 <xTaskResumeAll+0xc6>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002eae:	f000 f9fd 	bl	80032ac <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002eb2:	4b1d      	ldr	r3, [pc, #116]	@ (8002f28 <xTaskResumeAll+0x13c>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d010      	beq.n	8002ee0 <xTaskResumeAll+0xf4>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002ebe:	f000 f837 	bl	8002f30 <xTaskIncrementTick>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d002      	beq.n	8002ece <xTaskResumeAll+0xe2>
                            {
                                xYieldPending = pdTRUE;
 8002ec8:	4b16      	ldr	r3, [pc, #88]	@ (8002f24 <xTaskResumeAll+0x138>)
 8002eca:	2201      	movs	r2, #1
 8002ecc:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	3b01      	subs	r3, #1
 8002ed2:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d1f1      	bne.n	8002ebe <xTaskResumeAll+0xd2>

                        xPendedTicks = 0;
 8002eda:	4b13      	ldr	r3, [pc, #76]	@ (8002f28 <xTaskResumeAll+0x13c>)
 8002edc:	2200      	movs	r2, #0
 8002ede:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002ee0:	4b10      	ldr	r3, [pc, #64]	@ (8002f24 <xTaskResumeAll+0x138>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d009      	beq.n	8002efc <xTaskResumeAll+0x110>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8002eec:	4b0f      	ldr	r3, [pc, #60]	@ (8002f2c <xTaskResumeAll+0x140>)
 8002eee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002ef2:	601a      	str	r2, [r3, #0]
 8002ef4:	f3bf 8f4f 	dsb	sy
 8002ef8:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8002efc:	f000 fbd8 	bl	80036b0 <vPortExitCritical>

    return xAlreadyYielded;
 8002f00:	68bb      	ldr	r3, [r7, #8]
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	3710      	adds	r7, #16
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}
 8002f0a:	bf00      	nop
 8002f0c:	200001b8 	.word	0x200001b8
 8002f10:	20000190 	.word	0x20000190
 8002f14:	20000150 	.word	0x20000150
 8002f18:	20000198 	.word	0x20000198
 8002f1c:	200000bc 	.word	0x200000bc
 8002f20:	200000b8 	.word	0x200000b8
 8002f24:	200001a4 	.word	0x200001a4
 8002f28:	200001a0 	.word	0x200001a0
 8002f2c:	e000ed04 	.word	0xe000ed04

08002f30 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b086      	sub	sp, #24
 8002f34:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002f36:	2300      	movs	r3, #0
 8002f38:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002f3a:	4b51      	ldr	r3, [pc, #324]	@ (8003080 <xTaskIncrementTick+0x150>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	f040 8093 	bne.w	800306a <xTaskIncrementTick+0x13a>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002f44:	4b4f      	ldr	r3, [pc, #316]	@ (8003084 <xTaskIncrementTick+0x154>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	3301      	adds	r3, #1
 8002f4a:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002f4c:	4a4d      	ldr	r2, [pc, #308]	@ (8003084 <xTaskIncrementTick+0x154>)
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002f52:	693b      	ldr	r3, [r7, #16]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d121      	bne.n	8002f9c <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 8002f58:	4b4b      	ldr	r3, [pc, #300]	@ (8003088 <xTaskIncrementTick+0x158>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d00b      	beq.n	8002f7a <xTaskIncrementTick+0x4a>
        __asm volatile
 8002f62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f66:	f383 8811 	msr	BASEPRI, r3
 8002f6a:	f3bf 8f6f 	isb	sy
 8002f6e:	f3bf 8f4f 	dsb	sy
 8002f72:	603b      	str	r3, [r7, #0]
    }
 8002f74:	bf00      	nop
 8002f76:	bf00      	nop
 8002f78:	e7fd      	b.n	8002f76 <xTaskIncrementTick+0x46>
 8002f7a:	4b43      	ldr	r3, [pc, #268]	@ (8003088 <xTaskIncrementTick+0x158>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	60fb      	str	r3, [r7, #12]
 8002f80:	4b42      	ldr	r3, [pc, #264]	@ (800308c <xTaskIncrementTick+0x15c>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a40      	ldr	r2, [pc, #256]	@ (8003088 <xTaskIncrementTick+0x158>)
 8002f86:	6013      	str	r3, [r2, #0]
 8002f88:	4a40      	ldr	r2, [pc, #256]	@ (800308c <xTaskIncrementTick+0x15c>)
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	6013      	str	r3, [r2, #0]
 8002f8e:	4b40      	ldr	r3, [pc, #256]	@ (8003090 <xTaskIncrementTick+0x160>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	3301      	adds	r3, #1
 8002f94:	4a3e      	ldr	r2, [pc, #248]	@ (8003090 <xTaskIncrementTick+0x160>)
 8002f96:	6013      	str	r3, [r2, #0]
 8002f98:	f000 f988 	bl	80032ac <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002f9c:	4b3d      	ldr	r3, [pc, #244]	@ (8003094 <xTaskIncrementTick+0x164>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	693a      	ldr	r2, [r7, #16]
 8002fa2:	429a      	cmp	r2, r3
 8002fa4:	d34c      	bcc.n	8003040 <xTaskIncrementTick+0x110>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002fa6:	4b38      	ldr	r3, [pc, #224]	@ (8003088 <xTaskIncrementTick+0x158>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d104      	bne.n	8002fba <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002fb0:	4b38      	ldr	r3, [pc, #224]	@ (8003094 <xTaskIncrementTick+0x164>)
 8002fb2:	f04f 32ff 	mov.w	r2, #4294967295
 8002fb6:	601a      	str	r2, [r3, #0]
                    break;
 8002fb8:	e042      	b.n	8003040 <xTaskIncrementTick+0x110>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002fba:	4b33      	ldr	r3, [pc, #204]	@ (8003088 <xTaskIncrementTick+0x158>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	68db      	ldr	r3, [r3, #12]
 8002fc0:	68db      	ldr	r3, [r3, #12]
 8002fc2:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8002fca:	693a      	ldr	r2, [r7, #16]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	429a      	cmp	r2, r3
 8002fd0:	d203      	bcs.n	8002fda <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002fd2:	4a30      	ldr	r2, [pc, #192]	@ (8003094 <xTaskIncrementTick+0x164>)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002fd8:	e032      	b.n	8003040 <xTaskIncrementTick+0x110>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	3304      	adds	r3, #4
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f7ff fd0b 	bl	80029fa <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d004      	beq.n	8002ff6 <xTaskIncrementTick+0xc6>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002fec:	68bb      	ldr	r3, [r7, #8]
 8002fee:	3318      	adds	r3, #24
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	f7ff fd02 	bl	80029fa <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	f001 fe75 	bl	8004ce8 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003002:	2201      	movs	r2, #1
 8003004:	409a      	lsls	r2, r3
 8003006:	4b24      	ldr	r3, [pc, #144]	@ (8003098 <xTaskIncrementTick+0x168>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4313      	orrs	r3, r2
 800300c:	4a22      	ldr	r2, [pc, #136]	@ (8003098 <xTaskIncrementTick+0x168>)
 800300e:	6013      	str	r3, [r2, #0]
 8003010:	68bb      	ldr	r3, [r7, #8]
 8003012:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003014:	4613      	mov	r3, r2
 8003016:	009b      	lsls	r3, r3, #2
 8003018:	4413      	add	r3, r2
 800301a:	009b      	lsls	r3, r3, #2
 800301c:	4a1f      	ldr	r2, [pc, #124]	@ (800309c <xTaskIncrementTick+0x16c>)
 800301e:	441a      	add	r2, r3
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	3304      	adds	r3, #4
 8003024:	4619      	mov	r1, r3
 8003026:	4610      	mov	r0, r2
 8003028:	f7ff fcc3 	bl	80029b2 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003030:	4b1b      	ldr	r3, [pc, #108]	@ (80030a0 <xTaskIncrementTick+0x170>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003036:	429a      	cmp	r2, r3
 8003038:	d3b5      	bcc.n	8002fa6 <xTaskIncrementTick+0x76>
                            {
                                xSwitchRequired = pdTRUE;
 800303a:	2301      	movs	r3, #1
 800303c:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800303e:	e7b2      	b.n	8002fa6 <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003040:	4b17      	ldr	r3, [pc, #92]	@ (80030a0 <xTaskIncrementTick+0x170>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003046:	4915      	ldr	r1, [pc, #84]	@ (800309c <xTaskIncrementTick+0x16c>)
 8003048:	4613      	mov	r3, r2
 800304a:	009b      	lsls	r3, r3, #2
 800304c:	4413      	add	r3, r2
 800304e:	009b      	lsls	r3, r3, #2
 8003050:	440b      	add	r3, r1
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	2b01      	cmp	r3, #1
 8003056:	d901      	bls.n	800305c <xTaskIncrementTick+0x12c>
                {
                    xSwitchRequired = pdTRUE;
 8003058:	2301      	movs	r3, #1
 800305a:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 800305c:	4b11      	ldr	r3, [pc, #68]	@ (80030a4 <xTaskIncrementTick+0x174>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d007      	beq.n	8003074 <xTaskIncrementTick+0x144>
                {
                    xSwitchRequired = pdTRUE;
 8003064:	2301      	movs	r3, #1
 8003066:	617b      	str	r3, [r7, #20]
 8003068:	e004      	b.n	8003074 <xTaskIncrementTick+0x144>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800306a:	4b0f      	ldr	r3, [pc, #60]	@ (80030a8 <xTaskIncrementTick+0x178>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	3301      	adds	r3, #1
 8003070:	4a0d      	ldr	r2, [pc, #52]	@ (80030a8 <xTaskIncrementTick+0x178>)
 8003072:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8003074:	697b      	ldr	r3, [r7, #20]
}
 8003076:	4618      	mov	r0, r3
 8003078:	3718      	adds	r7, #24
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}
 800307e:	bf00      	nop
 8003080:	200001b8 	.word	0x200001b8
 8003084:	20000194 	.word	0x20000194
 8003088:	20000148 	.word	0x20000148
 800308c:	2000014c 	.word	0x2000014c
 8003090:	200001a8 	.word	0x200001a8
 8003094:	200001b0 	.word	0x200001b0
 8003098:	20000198 	.word	0x20000198
 800309c:	200000bc 	.word	0x200000bc
 80030a0:	200000b8 	.word	0x200000b8
 80030a4:	200001a4 	.word	0x200001a4
 80030a8:	200001a0 	.word	0x200001a0

080030ac <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b086      	sub	sp, #24
 80030b0:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80030b2:	4b2d      	ldr	r3, [pc, #180]	@ (8003168 <vTaskSwitchContext+0xbc>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d003      	beq.n	80030c2 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80030ba:	4b2c      	ldr	r3, [pc, #176]	@ (800316c <vTaskSwitchContext+0xc0>)
 80030bc:	2201      	movs	r2, #1
 80030be:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 80030c0:	e04e      	b.n	8003160 <vTaskSwitchContext+0xb4>
        xYieldPending = pdFALSE;
 80030c2:	4b2a      	ldr	r3, [pc, #168]	@ (800316c <vTaskSwitchContext+0xc0>)
 80030c4:	2200      	movs	r2, #0
 80030c6:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80030c8:	4b29      	ldr	r3, [pc, #164]	@ (8003170 <vTaskSwitchContext+0xc4>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	fab3 f383 	clz	r3, r3
 80030d4:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80030d6:	7afb      	ldrb	r3, [r7, #11]
 80030d8:	f1c3 031f 	rsb	r3, r3, #31
 80030dc:	617b      	str	r3, [r7, #20]
 80030de:	4925      	ldr	r1, [pc, #148]	@ (8003174 <vTaskSwitchContext+0xc8>)
 80030e0:	697a      	ldr	r2, [r7, #20]
 80030e2:	4613      	mov	r3, r2
 80030e4:	009b      	lsls	r3, r3, #2
 80030e6:	4413      	add	r3, r2
 80030e8:	009b      	lsls	r3, r3, #2
 80030ea:	440b      	add	r3, r1
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d10b      	bne.n	800310a <vTaskSwitchContext+0x5e>
        __asm volatile
 80030f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030f6:	f383 8811 	msr	BASEPRI, r3
 80030fa:	f3bf 8f6f 	isb	sy
 80030fe:	f3bf 8f4f 	dsb	sy
 8003102:	607b      	str	r3, [r7, #4]
    }
 8003104:	bf00      	nop
 8003106:	bf00      	nop
 8003108:	e7fd      	b.n	8003106 <vTaskSwitchContext+0x5a>
 800310a:	697a      	ldr	r2, [r7, #20]
 800310c:	4613      	mov	r3, r2
 800310e:	009b      	lsls	r3, r3, #2
 8003110:	4413      	add	r3, r2
 8003112:	009b      	lsls	r3, r3, #2
 8003114:	4a17      	ldr	r2, [pc, #92]	@ (8003174 <vTaskSwitchContext+0xc8>)
 8003116:	4413      	add	r3, r2
 8003118:	613b      	str	r3, [r7, #16]
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	685a      	ldr	r2, [r3, #4]
 8003120:	693b      	ldr	r3, [r7, #16]
 8003122:	605a      	str	r2, [r3, #4]
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	685a      	ldr	r2, [r3, #4]
 8003128:	693b      	ldr	r3, [r7, #16]
 800312a:	3308      	adds	r3, #8
 800312c:	429a      	cmp	r2, r3
 800312e:	d104      	bne.n	800313a <vTaskSwitchContext+0x8e>
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	685a      	ldr	r2, [r3, #4]
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	605a      	str	r2, [r3, #4]
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	68db      	ldr	r3, [r3, #12]
 8003140:	4a0d      	ldr	r2, [pc, #52]	@ (8003178 <vTaskSwitchContext+0xcc>)
 8003142:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8003144:	4b0c      	ldr	r3, [pc, #48]	@ (8003178 <vTaskSwitchContext+0xcc>)
 8003146:	681a      	ldr	r2, [r3, #0]
 8003148:	4b0c      	ldr	r3, [pc, #48]	@ (800317c <vTaskSwitchContext+0xd0>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	429a      	cmp	r2, r3
 800314e:	d102      	bne.n	8003156 <vTaskSwitchContext+0xaa>
 8003150:	f001 fd2a 	bl	8004ba8 <SEGGER_SYSVIEW_OnIdle>
}
 8003154:	e004      	b.n	8003160 <vTaskSwitchContext+0xb4>
        traceTASK_SWITCHED_IN();
 8003156:	4b08      	ldr	r3, [pc, #32]	@ (8003178 <vTaskSwitchContext+0xcc>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4618      	mov	r0, r3
 800315c:	f001 fd82 	bl	8004c64 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8003160:	bf00      	nop
 8003162:	3718      	adds	r7, #24
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}
 8003168:	200001b8 	.word	0x200001b8
 800316c:	200001a4 	.word	0x200001a4
 8003170:	20000198 	.word	0x20000198
 8003174:	200000bc 	.word	0x200000bc
 8003178:	200000b8 	.word	0x200000b8
 800317c:	200001b4 	.word	0x200001b4

08003180 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b082      	sub	sp, #8
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003188:	f000 f852 	bl	8003230 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800318c:	4b06      	ldr	r3, [pc, #24]	@ (80031a8 <prvIdleTask+0x28>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	2b01      	cmp	r3, #1
 8003192:	d9f9      	bls.n	8003188 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8003194:	4b05      	ldr	r3, [pc, #20]	@ (80031ac <prvIdleTask+0x2c>)
 8003196:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800319a:	601a      	str	r2, [r3, #0]
 800319c:	f3bf 8f4f 	dsb	sy
 80031a0:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80031a4:	e7f0      	b.n	8003188 <prvIdleTask+0x8>
 80031a6:	bf00      	nop
 80031a8:	200000bc 	.word	0x200000bc
 80031ac:	e000ed04 	.word	0xe000ed04

080031b0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b082      	sub	sp, #8
 80031b4:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80031b6:	2300      	movs	r3, #0
 80031b8:	607b      	str	r3, [r7, #4]
 80031ba:	e00c      	b.n	80031d6 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80031bc:	687a      	ldr	r2, [r7, #4]
 80031be:	4613      	mov	r3, r2
 80031c0:	009b      	lsls	r3, r3, #2
 80031c2:	4413      	add	r3, r2
 80031c4:	009b      	lsls	r3, r3, #2
 80031c6:	4a12      	ldr	r2, [pc, #72]	@ (8003210 <prvInitialiseTaskLists+0x60>)
 80031c8:	4413      	add	r3, r2
 80031ca:	4618      	mov	r0, r3
 80031cc:	f7ff fbc4 	bl	8002958 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	3301      	adds	r3, #1
 80031d4:	607b      	str	r3, [r7, #4]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2b04      	cmp	r3, #4
 80031da:	d9ef      	bls.n	80031bc <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80031dc:	480d      	ldr	r0, [pc, #52]	@ (8003214 <prvInitialiseTaskLists+0x64>)
 80031de:	f7ff fbbb 	bl	8002958 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80031e2:	480d      	ldr	r0, [pc, #52]	@ (8003218 <prvInitialiseTaskLists+0x68>)
 80031e4:	f7ff fbb8 	bl	8002958 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80031e8:	480c      	ldr	r0, [pc, #48]	@ (800321c <prvInitialiseTaskLists+0x6c>)
 80031ea:	f7ff fbb5 	bl	8002958 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 80031ee:	480c      	ldr	r0, [pc, #48]	@ (8003220 <prvInitialiseTaskLists+0x70>)
 80031f0:	f7ff fbb2 	bl	8002958 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 80031f4:	480b      	ldr	r0, [pc, #44]	@ (8003224 <prvInitialiseTaskLists+0x74>)
 80031f6:	f7ff fbaf 	bl	8002958 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80031fa:	4b0b      	ldr	r3, [pc, #44]	@ (8003228 <prvInitialiseTaskLists+0x78>)
 80031fc:	4a05      	ldr	r2, [pc, #20]	@ (8003214 <prvInitialiseTaskLists+0x64>)
 80031fe:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003200:	4b0a      	ldr	r3, [pc, #40]	@ (800322c <prvInitialiseTaskLists+0x7c>)
 8003202:	4a05      	ldr	r2, [pc, #20]	@ (8003218 <prvInitialiseTaskLists+0x68>)
 8003204:	601a      	str	r2, [r3, #0]
}
 8003206:	bf00      	nop
 8003208:	3708      	adds	r7, #8
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}
 800320e:	bf00      	nop
 8003210:	200000bc 	.word	0x200000bc
 8003214:	20000120 	.word	0x20000120
 8003218:	20000134 	.word	0x20000134
 800321c:	20000150 	.word	0x20000150
 8003220:	20000164 	.word	0x20000164
 8003224:	2000017c 	.word	0x2000017c
 8003228:	20000148 	.word	0x20000148
 800322c:	2000014c 	.word	0x2000014c

08003230 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b082      	sub	sp, #8
 8003234:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003236:	e019      	b.n	800326c <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8003238:	f000 fa08 	bl	800364c <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800323c:	4b10      	ldr	r3, [pc, #64]	@ (8003280 <prvCheckTasksWaitingTermination+0x50>)
 800323e:	68db      	ldr	r3, [r3, #12]
 8003240:	68db      	ldr	r3, [r3, #12]
 8003242:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	3304      	adds	r3, #4
 8003248:	4618      	mov	r0, r3
 800324a:	f7ff fbd6 	bl	80029fa <uxListRemove>
                    --uxCurrentNumberOfTasks;
 800324e:	4b0d      	ldr	r3, [pc, #52]	@ (8003284 <prvCheckTasksWaitingTermination+0x54>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	3b01      	subs	r3, #1
 8003254:	4a0b      	ldr	r2, [pc, #44]	@ (8003284 <prvCheckTasksWaitingTermination+0x54>)
 8003256:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8003258:	4b0b      	ldr	r3, [pc, #44]	@ (8003288 <prvCheckTasksWaitingTermination+0x58>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	3b01      	subs	r3, #1
 800325e:	4a0a      	ldr	r2, [pc, #40]	@ (8003288 <prvCheckTasksWaitingTermination+0x58>)
 8003260:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8003262:	f000 fa25 	bl	80036b0 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8003266:	6878      	ldr	r0, [r7, #4]
 8003268:	f000 f810 	bl	800328c <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800326c:	4b06      	ldr	r3, [pc, #24]	@ (8003288 <prvCheckTasksWaitingTermination+0x58>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d1e1      	bne.n	8003238 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8003274:	bf00      	nop
 8003276:	bf00      	nop
 8003278:	3708      	adds	r7, #8
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}
 800327e:	bf00      	nop
 8003280:	20000164 	.word	0x20000164
 8003284:	20000190 	.word	0x20000190
 8003288:	20000178 	.word	0x20000178

0800328c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 800328c:	b580      	push	{r7, lr}
 800328e:	b082      	sub	sp, #8
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003298:	4618      	mov	r0, r3
 800329a:	f000 fba9 	bl	80039f0 <vPortFree>
                vPortFree( pxTCB );
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	f000 fba6 	bl	80039f0 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80032a4:	bf00      	nop
 80032a6:	3708      	adds	r7, #8
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}

080032ac <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80032ac:	b480      	push	{r7}
 80032ae:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80032b0:	4b0a      	ldr	r3, [pc, #40]	@ (80032dc <prvResetNextTaskUnblockTime+0x30>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d104      	bne.n	80032c4 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80032ba:	4b09      	ldr	r3, [pc, #36]	@ (80032e0 <prvResetNextTaskUnblockTime+0x34>)
 80032bc:	f04f 32ff 	mov.w	r2, #4294967295
 80032c0:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80032c2:	e005      	b.n	80032d0 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80032c4:	4b05      	ldr	r3, [pc, #20]	@ (80032dc <prvResetNextTaskUnblockTime+0x30>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	68db      	ldr	r3, [r3, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a04      	ldr	r2, [pc, #16]	@ (80032e0 <prvResetNextTaskUnblockTime+0x34>)
 80032ce:	6013      	str	r3, [r2, #0]
}
 80032d0:	bf00      	nop
 80032d2:	46bd      	mov	sp, r7
 80032d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d8:	4770      	bx	lr
 80032da:	bf00      	nop
 80032dc:	20000148 	.word	0x20000148
 80032e0:	200001b0 	.word	0x200001b0

080032e4 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80032e4:	b480      	push	{r7}
 80032e6:	b085      	sub	sp, #20
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	60f8      	str	r0, [r7, #12]
 80032ec:	60b9      	str	r1, [r7, #8]
 80032ee:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	3b04      	subs	r3, #4
 80032f4:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80032fc:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	3b04      	subs	r3, #4
 8003302:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	f023 0201 	bic.w	r2, r3, #1
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	3b04      	subs	r3, #4
 8003312:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8003314:	4a0c      	ldr	r2, [pc, #48]	@ (8003348 <pxPortInitialiseStack+0x64>)
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	3b14      	subs	r3, #20
 800331e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8003320:	687a      	ldr	r2, [r7, #4]
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	3b04      	subs	r3, #4
 800332a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	f06f 0202 	mvn.w	r2, #2
 8003332:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	3b20      	subs	r3, #32
 8003338:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800333a:	68fb      	ldr	r3, [r7, #12]
}
 800333c:	4618      	mov	r0, r3
 800333e:	3714      	adds	r7, #20
 8003340:	46bd      	mov	sp, r7
 8003342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003346:	4770      	bx	lr
 8003348:	0800334d 	.word	0x0800334d

0800334c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800334c:	b480      	push	{r7}
 800334e:	b085      	sub	sp, #20
 8003350:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8003352:	2300      	movs	r3, #0
 8003354:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8003356:	4b13      	ldr	r3, [pc, #76]	@ (80033a4 <prvTaskExitError+0x58>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800335e:	d00b      	beq.n	8003378 <prvTaskExitError+0x2c>
        __asm volatile
 8003360:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003364:	f383 8811 	msr	BASEPRI, r3
 8003368:	f3bf 8f6f 	isb	sy
 800336c:	f3bf 8f4f 	dsb	sy
 8003370:	60fb      	str	r3, [r7, #12]
    }
 8003372:	bf00      	nop
 8003374:	bf00      	nop
 8003376:	e7fd      	b.n	8003374 <prvTaskExitError+0x28>
        __asm volatile
 8003378:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800337c:	f383 8811 	msr	BASEPRI, r3
 8003380:	f3bf 8f6f 	isb	sy
 8003384:	f3bf 8f4f 	dsb	sy
 8003388:	60bb      	str	r3, [r7, #8]
    }
 800338a:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800338c:	bf00      	nop
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d0fc      	beq.n	800338e <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8003394:	bf00      	nop
 8003396:	bf00      	nop
 8003398:	3714      	adds	r7, #20
 800339a:	46bd      	mov	sp, r7
 800339c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a0:	4770      	bx	lr
 80033a2:	bf00      	nop
 80033a4:	20000010 	.word	0x20000010
	...

080033b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80033b0:	4b07      	ldr	r3, [pc, #28]	@ (80033d0 <pxCurrentTCBConst2>)
 80033b2:	6819      	ldr	r1, [r3, #0]
 80033b4:	6808      	ldr	r0, [r1, #0]
 80033b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80033ba:	f380 8809 	msr	PSP, r0
 80033be:	f3bf 8f6f 	isb	sy
 80033c2:	f04f 0000 	mov.w	r0, #0
 80033c6:	f380 8811 	msr	BASEPRI, r0
 80033ca:	4770      	bx	lr
 80033cc:	f3af 8000 	nop.w

080033d0 <pxCurrentTCBConst2>:
 80033d0:	200000b8 	.word	0x200000b8
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80033d4:	bf00      	nop
 80033d6:	bf00      	nop

080033d8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80033d8:	4808      	ldr	r0, [pc, #32]	@ (80033fc <prvPortStartFirstTask+0x24>)
 80033da:	6800      	ldr	r0, [r0, #0]
 80033dc:	6800      	ldr	r0, [r0, #0]
 80033de:	f380 8808 	msr	MSP, r0
 80033e2:	f04f 0000 	mov.w	r0, #0
 80033e6:	f380 8814 	msr	CONTROL, r0
 80033ea:	b662      	cpsie	i
 80033ec:	b661      	cpsie	f
 80033ee:	f3bf 8f4f 	dsb	sy
 80033f2:	f3bf 8f6f 	isb	sy
 80033f6:	df00      	svc	0
 80033f8:	bf00      	nop
 80033fa:	0000      	.short	0x0000
 80033fc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8003400:	bf00      	nop
 8003402:	bf00      	nop

08003404 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b086      	sub	sp, #24
 8003408:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800340a:	4b47      	ldr	r3, [pc, #284]	@ (8003528 <xPortStartScheduler+0x124>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a47      	ldr	r2, [pc, #284]	@ (800352c <xPortStartScheduler+0x128>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d10b      	bne.n	800342c <xPortStartScheduler+0x28>
        __asm volatile
 8003414:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003418:	f383 8811 	msr	BASEPRI, r3
 800341c:	f3bf 8f6f 	isb	sy
 8003420:	f3bf 8f4f 	dsb	sy
 8003424:	613b      	str	r3, [r7, #16]
    }
 8003426:	bf00      	nop
 8003428:	bf00      	nop
 800342a:	e7fd      	b.n	8003428 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800342c:	4b3e      	ldr	r3, [pc, #248]	@ (8003528 <xPortStartScheduler+0x124>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a3f      	ldr	r2, [pc, #252]	@ (8003530 <xPortStartScheduler+0x12c>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d10b      	bne.n	800344e <xPortStartScheduler+0x4a>
        __asm volatile
 8003436:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800343a:	f383 8811 	msr	BASEPRI, r3
 800343e:	f3bf 8f6f 	isb	sy
 8003442:	f3bf 8f4f 	dsb	sy
 8003446:	60fb      	str	r3, [r7, #12]
    }
 8003448:	bf00      	nop
 800344a:	bf00      	nop
 800344c:	e7fd      	b.n	800344a <xPortStartScheduler+0x46>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800344e:	4b39      	ldr	r3, [pc, #228]	@ (8003534 <xPortStartScheduler+0x130>)
 8003450:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	781b      	ldrb	r3, [r3, #0]
 8003456:	b2db      	uxtb	r3, r3
 8003458:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	22ff      	movs	r2, #255	@ 0xff
 800345e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	781b      	ldrb	r3, [r3, #0]
 8003464:	b2db      	uxtb	r3, r3
 8003466:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003468:	78fb      	ldrb	r3, [r7, #3]
 800346a:	b2db      	uxtb	r3, r3
 800346c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003470:	b2da      	uxtb	r2, r3
 8003472:	4b31      	ldr	r3, [pc, #196]	@ (8003538 <xPortStartScheduler+0x134>)
 8003474:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003476:	4b31      	ldr	r3, [pc, #196]	@ (800353c <xPortStartScheduler+0x138>)
 8003478:	2207      	movs	r2, #7
 800347a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800347c:	e009      	b.n	8003492 <xPortStartScheduler+0x8e>
            {
                ulMaxPRIGROUPValue--;
 800347e:	4b2f      	ldr	r3, [pc, #188]	@ (800353c <xPortStartScheduler+0x138>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	3b01      	subs	r3, #1
 8003484:	4a2d      	ldr	r2, [pc, #180]	@ (800353c <xPortStartScheduler+0x138>)
 8003486:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003488:	78fb      	ldrb	r3, [r7, #3]
 800348a:	b2db      	uxtb	r3, r3
 800348c:	005b      	lsls	r3, r3, #1
 800348e:	b2db      	uxtb	r3, r3
 8003490:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003492:	78fb      	ldrb	r3, [r7, #3]
 8003494:	b2db      	uxtb	r3, r3
 8003496:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800349a:	2b80      	cmp	r3, #128	@ 0x80
 800349c:	d0ef      	beq.n	800347e <xPortStartScheduler+0x7a>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800349e:	4b27      	ldr	r3, [pc, #156]	@ (800353c <xPortStartScheduler+0x138>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f1c3 0307 	rsb	r3, r3, #7
 80034a6:	2b04      	cmp	r3, #4
 80034a8:	d00b      	beq.n	80034c2 <xPortStartScheduler+0xbe>
        __asm volatile
 80034aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034ae:	f383 8811 	msr	BASEPRI, r3
 80034b2:	f3bf 8f6f 	isb	sy
 80034b6:	f3bf 8f4f 	dsb	sy
 80034ba:	60bb      	str	r3, [r7, #8]
    }
 80034bc:	bf00      	nop
 80034be:	bf00      	nop
 80034c0:	e7fd      	b.n	80034be <xPortStartScheduler+0xba>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80034c2:	4b1e      	ldr	r3, [pc, #120]	@ (800353c <xPortStartScheduler+0x138>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	021b      	lsls	r3, r3, #8
 80034c8:	4a1c      	ldr	r2, [pc, #112]	@ (800353c <xPortStartScheduler+0x138>)
 80034ca:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80034cc:	4b1b      	ldr	r3, [pc, #108]	@ (800353c <xPortStartScheduler+0x138>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80034d4:	4a19      	ldr	r2, [pc, #100]	@ (800353c <xPortStartScheduler+0x138>)
 80034d6:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	b2da      	uxtb	r2, r3
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80034e0:	4b17      	ldr	r3, [pc, #92]	@ (8003540 <xPortStartScheduler+0x13c>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a16      	ldr	r2, [pc, #88]	@ (8003540 <xPortStartScheduler+0x13c>)
 80034e6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80034ea:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80034ec:	4b14      	ldr	r3, [pc, #80]	@ (8003540 <xPortStartScheduler+0x13c>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a13      	ldr	r2, [pc, #76]	@ (8003540 <xPortStartScheduler+0x13c>)
 80034f2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80034f6:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80034f8:	f000 f968 	bl	80037cc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80034fc:	4b11      	ldr	r3, [pc, #68]	@ (8003544 <xPortStartScheduler+0x140>)
 80034fe:	2200      	movs	r2, #0
 8003500:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8003502:	f000 f987 	bl	8003814 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003506:	4b10      	ldr	r3, [pc, #64]	@ (8003548 <xPortStartScheduler+0x144>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a0f      	ldr	r2, [pc, #60]	@ (8003548 <xPortStartScheduler+0x144>)
 800350c:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8003510:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8003512:	f7ff ff61 	bl	80033d8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8003516:	f7ff fdc9 	bl	80030ac <vTaskSwitchContext>
    prvTaskExitError();
 800351a:	f7ff ff17 	bl	800334c <prvTaskExitError>

    /* Should not get here! */
    return 0;
 800351e:	2300      	movs	r3, #0
}
 8003520:	4618      	mov	r0, r3
 8003522:	3718      	adds	r7, #24
 8003524:	46bd      	mov	sp, r7
 8003526:	bd80      	pop	{r7, pc}
 8003528:	e000ed00 	.word	0xe000ed00
 800352c:	410fc271 	.word	0x410fc271
 8003530:	410fc270 	.word	0x410fc270
 8003534:	e000e400 	.word	0xe000e400
 8003538:	200001bc 	.word	0x200001bc
 800353c:	200001c0 	.word	0x200001c0
 8003540:	e000ed20 	.word	0xe000ed20
 8003544:	20000010 	.word	0x20000010
 8003548:	e000ef34 	.word	0xe000ef34

0800354c <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 800354c:	b480      	push	{r7}
 800354e:	b087      	sub	sp, #28
 8003550:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003552:	4b38      	ldr	r3, [pc, #224]	@ (8003634 <vInitPrioGroupValue+0xe8>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a38      	ldr	r2, [pc, #224]	@ (8003638 <vInitPrioGroupValue+0xec>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d10b      	bne.n	8003574 <vInitPrioGroupValue+0x28>
        __asm volatile
 800355c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003560:	f383 8811 	msr	BASEPRI, r3
 8003564:	f3bf 8f6f 	isb	sy
 8003568:	f3bf 8f4f 	dsb	sy
 800356c:	613b      	str	r3, [r7, #16]
    }
 800356e:	bf00      	nop
 8003570:	bf00      	nop
 8003572:	e7fd      	b.n	8003570 <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003574:	4b2f      	ldr	r3, [pc, #188]	@ (8003634 <vInitPrioGroupValue+0xe8>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a30      	ldr	r2, [pc, #192]	@ (800363c <vInitPrioGroupValue+0xf0>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d10b      	bne.n	8003596 <vInitPrioGroupValue+0x4a>
        __asm volatile
 800357e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003582:	f383 8811 	msr	BASEPRI, r3
 8003586:	f3bf 8f6f 	isb	sy
 800358a:	f3bf 8f4f 	dsb	sy
 800358e:	60fb      	str	r3, [r7, #12]
    }
 8003590:	bf00      	nop
 8003592:	bf00      	nop
 8003594:	e7fd      	b.n	8003592 <vInitPrioGroupValue+0x46>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003596:	4b2a      	ldr	r3, [pc, #168]	@ (8003640 <vInitPrioGroupValue+0xf4>)
 8003598:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	781b      	ldrb	r3, [r3, #0]
 800359e:	b2db      	uxtb	r3, r3
 80035a0:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	22ff      	movs	r2, #255	@ 0xff
 80035a6:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	781b      	ldrb	r3, [r3, #0]
 80035ac:	b2db      	uxtb	r3, r3
 80035ae:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80035b0:	78fb      	ldrb	r3, [r7, #3]
 80035b2:	b2db      	uxtb	r3, r3
 80035b4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80035b8:	b2da      	uxtb	r2, r3
 80035ba:	4b22      	ldr	r3, [pc, #136]	@ (8003644 <vInitPrioGroupValue+0xf8>)
 80035bc:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80035be:	4b22      	ldr	r3, [pc, #136]	@ (8003648 <vInitPrioGroupValue+0xfc>)
 80035c0:	2207      	movs	r2, #7
 80035c2:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80035c4:	e009      	b.n	80035da <vInitPrioGroupValue+0x8e>
            {
                ulMaxPRIGROUPValue--;
 80035c6:	4b20      	ldr	r3, [pc, #128]	@ (8003648 <vInitPrioGroupValue+0xfc>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	3b01      	subs	r3, #1
 80035cc:	4a1e      	ldr	r2, [pc, #120]	@ (8003648 <vInitPrioGroupValue+0xfc>)
 80035ce:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80035d0:	78fb      	ldrb	r3, [r7, #3]
 80035d2:	b2db      	uxtb	r3, r3
 80035d4:	005b      	lsls	r3, r3, #1
 80035d6:	b2db      	uxtb	r3, r3
 80035d8:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80035da:	78fb      	ldrb	r3, [r7, #3]
 80035dc:	b2db      	uxtb	r3, r3
 80035de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035e2:	2b80      	cmp	r3, #128	@ 0x80
 80035e4:	d0ef      	beq.n	80035c6 <vInitPrioGroupValue+0x7a>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80035e6:	4b18      	ldr	r3, [pc, #96]	@ (8003648 <vInitPrioGroupValue+0xfc>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f1c3 0307 	rsb	r3, r3, #7
 80035ee:	2b04      	cmp	r3, #4
 80035f0:	d00b      	beq.n	800360a <vInitPrioGroupValue+0xbe>
        __asm volatile
 80035f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035f6:	f383 8811 	msr	BASEPRI, r3
 80035fa:	f3bf 8f6f 	isb	sy
 80035fe:	f3bf 8f4f 	dsb	sy
 8003602:	60bb      	str	r3, [r7, #8]
    }
 8003604:	bf00      	nop
 8003606:	bf00      	nop
 8003608:	e7fd      	b.n	8003606 <vInitPrioGroupValue+0xba>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800360a:	4b0f      	ldr	r3, [pc, #60]	@ (8003648 <vInitPrioGroupValue+0xfc>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	021b      	lsls	r3, r3, #8
 8003610:	4a0d      	ldr	r2, [pc, #52]	@ (8003648 <vInitPrioGroupValue+0xfc>)
 8003612:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003614:	4b0c      	ldr	r3, [pc, #48]	@ (8003648 <vInitPrioGroupValue+0xfc>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800361c:	4a0a      	ldr	r2, [pc, #40]	@ (8003648 <vInitPrioGroupValue+0xfc>)
 800361e:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	b2da      	uxtb	r2, r3
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 8003628:	bf00      	nop
 800362a:	371c      	adds	r7, #28
 800362c:	46bd      	mov	sp, r7
 800362e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003632:	4770      	bx	lr
 8003634:	e000ed00 	.word	0xe000ed00
 8003638:	410fc271 	.word	0x410fc271
 800363c:	410fc270 	.word	0x410fc270
 8003640:	e000e400 	.word	0xe000e400
 8003644:	200001bc 	.word	0x200001bc
 8003648:	200001c0 	.word	0x200001c0

0800364c <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800364c:	b480      	push	{r7}
 800364e:	b083      	sub	sp, #12
 8003650:	af00      	add	r7, sp, #0
        __asm volatile
 8003652:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003656:	f383 8811 	msr	BASEPRI, r3
 800365a:	f3bf 8f6f 	isb	sy
 800365e:	f3bf 8f4f 	dsb	sy
 8003662:	607b      	str	r3, [r7, #4]
    }
 8003664:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8003666:	4b10      	ldr	r3, [pc, #64]	@ (80036a8 <vPortEnterCritical+0x5c>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	3301      	adds	r3, #1
 800366c:	4a0e      	ldr	r2, [pc, #56]	@ (80036a8 <vPortEnterCritical+0x5c>)
 800366e:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8003670:	4b0d      	ldr	r3, [pc, #52]	@ (80036a8 <vPortEnterCritical+0x5c>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	2b01      	cmp	r3, #1
 8003676:	d110      	bne.n	800369a <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003678:	4b0c      	ldr	r3, [pc, #48]	@ (80036ac <vPortEnterCritical+0x60>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	b2db      	uxtb	r3, r3
 800367e:	2b00      	cmp	r3, #0
 8003680:	d00b      	beq.n	800369a <vPortEnterCritical+0x4e>
        __asm volatile
 8003682:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003686:	f383 8811 	msr	BASEPRI, r3
 800368a:	f3bf 8f6f 	isb	sy
 800368e:	f3bf 8f4f 	dsb	sy
 8003692:	603b      	str	r3, [r7, #0]
    }
 8003694:	bf00      	nop
 8003696:	bf00      	nop
 8003698:	e7fd      	b.n	8003696 <vPortEnterCritical+0x4a>
    }
}
 800369a:	bf00      	nop
 800369c:	370c      	adds	r7, #12
 800369e:	46bd      	mov	sp, r7
 80036a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a4:	4770      	bx	lr
 80036a6:	bf00      	nop
 80036a8:	20000010 	.word	0x20000010
 80036ac:	e000ed04 	.word	0xe000ed04

080036b0 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80036b0:	b480      	push	{r7}
 80036b2:	b083      	sub	sp, #12
 80036b4:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80036b6:	4b12      	ldr	r3, [pc, #72]	@ (8003700 <vPortExitCritical+0x50>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d10b      	bne.n	80036d6 <vPortExitCritical+0x26>
        __asm volatile
 80036be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036c2:	f383 8811 	msr	BASEPRI, r3
 80036c6:	f3bf 8f6f 	isb	sy
 80036ca:	f3bf 8f4f 	dsb	sy
 80036ce:	607b      	str	r3, [r7, #4]
    }
 80036d0:	bf00      	nop
 80036d2:	bf00      	nop
 80036d4:	e7fd      	b.n	80036d2 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80036d6:	4b0a      	ldr	r3, [pc, #40]	@ (8003700 <vPortExitCritical+0x50>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	3b01      	subs	r3, #1
 80036dc:	4a08      	ldr	r2, [pc, #32]	@ (8003700 <vPortExitCritical+0x50>)
 80036de:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80036e0:	4b07      	ldr	r3, [pc, #28]	@ (8003700 <vPortExitCritical+0x50>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d105      	bne.n	80036f4 <vPortExitCritical+0x44>
 80036e8:	2300      	movs	r3, #0
 80036ea:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80036f2:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80036f4:	bf00      	nop
 80036f6:	370c      	adds	r7, #12
 80036f8:	46bd      	mov	sp, r7
 80036fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fe:	4770      	bx	lr
 8003700:	20000010 	.word	0x20000010
	...

08003710 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8003710:	f3ef 8009 	mrs	r0, PSP
 8003714:	f3bf 8f6f 	isb	sy
 8003718:	4b15      	ldr	r3, [pc, #84]	@ (8003770 <pxCurrentTCBConst>)
 800371a:	681a      	ldr	r2, [r3, #0]
 800371c:	f01e 0f10 	tst.w	lr, #16
 8003720:	bf08      	it	eq
 8003722:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003726:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800372a:	6010      	str	r0, [r2, #0]
 800372c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003730:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8003734:	f380 8811 	msr	BASEPRI, r0
 8003738:	f3bf 8f4f 	dsb	sy
 800373c:	f3bf 8f6f 	isb	sy
 8003740:	f7ff fcb4 	bl	80030ac <vTaskSwitchContext>
 8003744:	f04f 0000 	mov.w	r0, #0
 8003748:	f380 8811 	msr	BASEPRI, r0
 800374c:	bc09      	pop	{r0, r3}
 800374e:	6819      	ldr	r1, [r3, #0]
 8003750:	6808      	ldr	r0, [r1, #0]
 8003752:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003756:	f01e 0f10 	tst.w	lr, #16
 800375a:	bf08      	it	eq
 800375c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003760:	f380 8809 	msr	PSP, r0
 8003764:	f3bf 8f6f 	isb	sy
 8003768:	4770      	bx	lr
 800376a:	bf00      	nop
 800376c:	f3af 8000 	nop.w

08003770 <pxCurrentTCBConst>:
 8003770:	200000b8 	.word	0x200000b8
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8003774:	bf00      	nop
 8003776:	bf00      	nop

08003778 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b082      	sub	sp, #8
 800377c:	af00      	add	r7, sp, #0
        __asm volatile
 800377e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003782:	f383 8811 	msr	BASEPRI, r3
 8003786:	f3bf 8f6f 	isb	sy
 800378a:	f3bf 8f4f 	dsb	sy
 800378e:	607b      	str	r3, [r7, #4]
    }
 8003790:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8003792:	f001 f98f 	bl	8004ab4 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8003796:	f7ff fbcb 	bl	8002f30 <xTaskIncrementTick>
 800379a:	4603      	mov	r3, r0
 800379c:	2b00      	cmp	r3, #0
 800379e:	d006      	beq.n	80037ae <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 80037a0:	f001 f9e6 	bl	8004b70 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80037a4:	4b08      	ldr	r3, [pc, #32]	@ (80037c8 <SysTick_Handler+0x50>)
 80037a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80037aa:	601a      	str	r2, [r3, #0]
 80037ac:	e001      	b.n	80037b2 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 80037ae:	f001 f9c3 	bl	8004b38 <SEGGER_SYSVIEW_RecordExitISR>
 80037b2:	2300      	movs	r3, #0
 80037b4:	603b      	str	r3, [r7, #0]
        __asm volatile
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	f383 8811 	msr	BASEPRI, r3
    }
 80037bc:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 80037be:	bf00      	nop
 80037c0:	3708      	adds	r7, #8
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}
 80037c6:	bf00      	nop
 80037c8:	e000ed04 	.word	0xe000ed04

080037cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80037cc:	b480      	push	{r7}
 80037ce:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80037d0:	4b0b      	ldr	r3, [pc, #44]	@ (8003800 <vPortSetupTimerInterrupt+0x34>)
 80037d2:	2200      	movs	r2, #0
 80037d4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80037d6:	4b0b      	ldr	r3, [pc, #44]	@ (8003804 <vPortSetupTimerInterrupt+0x38>)
 80037d8:	2200      	movs	r2, #0
 80037da:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80037dc:	4b0a      	ldr	r3, [pc, #40]	@ (8003808 <vPortSetupTimerInterrupt+0x3c>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a0a      	ldr	r2, [pc, #40]	@ (800380c <vPortSetupTimerInterrupt+0x40>)
 80037e2:	fba2 2303 	umull	r2, r3, r2, r3
 80037e6:	099b      	lsrs	r3, r3, #6
 80037e8:	4a09      	ldr	r2, [pc, #36]	@ (8003810 <vPortSetupTimerInterrupt+0x44>)
 80037ea:	3b01      	subs	r3, #1
 80037ec:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80037ee:	4b04      	ldr	r3, [pc, #16]	@ (8003800 <vPortSetupTimerInterrupt+0x34>)
 80037f0:	2207      	movs	r2, #7
 80037f2:	601a      	str	r2, [r3, #0]
}
 80037f4:	bf00      	nop
 80037f6:	46bd      	mov	sp, r7
 80037f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fc:	4770      	bx	lr
 80037fe:	bf00      	nop
 8003800:	e000e010 	.word	0xe000e010
 8003804:	e000e018 	.word	0xe000e018
 8003808:	20000000 	.word	0x20000000
 800380c:	10624dd3 	.word	0x10624dd3
 8003810:	e000e014 	.word	0xe000e014

08003814 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8003814:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8003824 <vPortEnableVFP+0x10>
 8003818:	6801      	ldr	r1, [r0, #0]
 800381a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800381e:	6001      	str	r1, [r0, #0]
 8003820:	4770      	bx	lr
 8003822:	0000      	.short	0x0000
 8003824:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8003828:	bf00      	nop
 800382a:	bf00      	nop

0800382c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b08a      	sub	sp, #40	@ 0x28
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8003834:	2300      	movs	r3, #0
 8003836:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8003838:	f7ff faca 	bl	8002dd0 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800383c:	4b66      	ldr	r3, [pc, #408]	@ (80039d8 <pvPortMalloc+0x1ac>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d101      	bne.n	8003848 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8003844:	f000 f938 	bl	8003ab8 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003848:	4b64      	ldr	r3, [pc, #400]	@ (80039dc <pvPortMalloc+0x1b0>)
 800384a:	681a      	ldr	r2, [r3, #0]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	4013      	ands	r3, r2
 8003850:	2b00      	cmp	r3, #0
 8003852:	f040 80a9 	bne.w	80039a8 <pvPortMalloc+0x17c>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d02e      	beq.n	80038ba <pvPortMalloc+0x8e>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 800385c:	2208      	movs	r2, #8
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8003862:	687a      	ldr	r2, [r7, #4]
 8003864:	429a      	cmp	r2, r3
 8003866:	d228      	bcs.n	80038ba <pvPortMalloc+0x8e>
            {
                xWantedSize += xHeapStructSize;
 8003868:	2208      	movs	r2, #8
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	4413      	add	r3, r2
 800386e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	f003 0307 	and.w	r3, r3, #7
 8003876:	2b00      	cmp	r3, #0
 8003878:	d022      	beq.n	80038c0 <pvPortMalloc+0x94>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	f023 0307 	bic.w	r3, r3, #7
 8003880:	3308      	adds	r3, #8
 8003882:	687a      	ldr	r2, [r7, #4]
 8003884:	429a      	cmp	r2, r3
 8003886:	d215      	bcs.n	80038b4 <pvPortMalloc+0x88>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	f023 0307 	bic.w	r3, r3, #7
 800388e:	3308      	adds	r3, #8
 8003890:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	f003 0307 	and.w	r3, r3, #7
 8003898:	2b00      	cmp	r3, #0
 800389a:	d011      	beq.n	80038c0 <pvPortMalloc+0x94>
        __asm volatile
 800389c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038a0:	f383 8811 	msr	BASEPRI, r3
 80038a4:	f3bf 8f6f 	isb	sy
 80038a8:	f3bf 8f4f 	dsb	sy
 80038ac:	617b      	str	r3, [r7, #20]
    }
 80038ae:	bf00      	nop
 80038b0:	bf00      	nop
 80038b2:	e7fd      	b.n	80038b0 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 80038b4:	2300      	movs	r3, #0
 80038b6:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80038b8:	e002      	b.n	80038c0 <pvPortMalloc+0x94>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 80038ba:	2300      	movs	r3, #0
 80038bc:	607b      	str	r3, [r7, #4]
 80038be:	e000      	b.n	80038c2 <pvPortMalloc+0x96>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80038c0:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d06f      	beq.n	80039a8 <pvPortMalloc+0x17c>
 80038c8:	4b45      	ldr	r3, [pc, #276]	@ (80039e0 <pvPortMalloc+0x1b4>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	687a      	ldr	r2, [r7, #4]
 80038ce:	429a      	cmp	r2, r3
 80038d0:	d86a      	bhi.n	80039a8 <pvPortMalloc+0x17c>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80038d2:	4b44      	ldr	r3, [pc, #272]	@ (80039e4 <pvPortMalloc+0x1b8>)
 80038d4:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80038d6:	4b43      	ldr	r3, [pc, #268]	@ (80039e4 <pvPortMalloc+0x1b8>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	627b      	str	r3, [r7, #36]	@ 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80038dc:	e004      	b.n	80038e8 <pvPortMalloc+0xbc>
                {
                    pxPreviousBlock = pxBlock;
 80038de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038e0:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80038e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	627b      	str	r3, [r7, #36]	@ 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80038e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	687a      	ldr	r2, [r7, #4]
 80038ee:	429a      	cmp	r2, r3
 80038f0:	d903      	bls.n	80038fa <pvPortMalloc+0xce>
 80038f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d1f1      	bne.n	80038de <pvPortMalloc+0xb2>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80038fa:	4b37      	ldr	r3, [pc, #220]	@ (80039d8 <pvPortMalloc+0x1ac>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003900:	429a      	cmp	r2, r3
 8003902:	d051      	beq.n	80039a8 <pvPortMalloc+0x17c>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003904:	6a3b      	ldr	r3, [r7, #32]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	2208      	movs	r2, #8
 800390a:	4413      	add	r3, r2
 800390c:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800390e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003910:	681a      	ldr	r2, [r3, #0]
 8003912:	6a3b      	ldr	r3, [r7, #32]
 8003914:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003918:	685a      	ldr	r2, [r3, #4]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	1ad2      	subs	r2, r2, r3
 800391e:	2308      	movs	r3, #8
 8003920:	005b      	lsls	r3, r3, #1
 8003922:	429a      	cmp	r2, r3
 8003924:	d920      	bls.n	8003968 <pvPortMalloc+0x13c>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003926:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	4413      	add	r3, r2
 800392c:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800392e:	69bb      	ldr	r3, [r7, #24]
 8003930:	f003 0307 	and.w	r3, r3, #7
 8003934:	2b00      	cmp	r3, #0
 8003936:	d00b      	beq.n	8003950 <pvPortMalloc+0x124>
        __asm volatile
 8003938:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800393c:	f383 8811 	msr	BASEPRI, r3
 8003940:	f3bf 8f6f 	isb	sy
 8003944:	f3bf 8f4f 	dsb	sy
 8003948:	613b      	str	r3, [r7, #16]
    }
 800394a:	bf00      	nop
 800394c:	bf00      	nop
 800394e:	e7fd      	b.n	800394c <pvPortMalloc+0x120>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003950:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003952:	685a      	ldr	r2, [r3, #4]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	1ad2      	subs	r2, r2, r3
 8003958:	69bb      	ldr	r3, [r7, #24]
 800395a:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 800395c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800395e:	687a      	ldr	r2, [r7, #4]
 8003960:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003962:	69b8      	ldr	r0, [r7, #24]
 8003964:	f000 f90a 	bl	8003b7c <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003968:	4b1d      	ldr	r3, [pc, #116]	@ (80039e0 <pvPortMalloc+0x1b4>)
 800396a:	681a      	ldr	r2, [r3, #0]
 800396c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	1ad3      	subs	r3, r2, r3
 8003972:	4a1b      	ldr	r2, [pc, #108]	@ (80039e0 <pvPortMalloc+0x1b4>)
 8003974:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003976:	4b1a      	ldr	r3, [pc, #104]	@ (80039e0 <pvPortMalloc+0x1b4>)
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	4b1b      	ldr	r3, [pc, #108]	@ (80039e8 <pvPortMalloc+0x1bc>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	429a      	cmp	r2, r3
 8003980:	d203      	bcs.n	800398a <pvPortMalloc+0x15e>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003982:	4b17      	ldr	r3, [pc, #92]	@ (80039e0 <pvPortMalloc+0x1b4>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4a18      	ldr	r2, [pc, #96]	@ (80039e8 <pvPortMalloc+0x1bc>)
 8003988:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 800398a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800398c:	685a      	ldr	r2, [r3, #4]
 800398e:	4b13      	ldr	r3, [pc, #76]	@ (80039dc <pvPortMalloc+0x1b0>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	431a      	orrs	r2, r3
 8003994:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003996:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8003998:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800399a:	2200      	movs	r2, #0
 800399c:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800399e:	4b13      	ldr	r3, [pc, #76]	@ (80039ec <pvPortMalloc+0x1c0>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	3301      	adds	r3, #1
 80039a4:	4a11      	ldr	r2, [pc, #68]	@ (80039ec <pvPortMalloc+0x1c0>)
 80039a6:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80039a8:	f7ff fa20 	bl	8002dec <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80039ac:	69fb      	ldr	r3, [r7, #28]
 80039ae:	f003 0307 	and.w	r3, r3, #7
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d00b      	beq.n	80039ce <pvPortMalloc+0x1a2>
        __asm volatile
 80039b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039ba:	f383 8811 	msr	BASEPRI, r3
 80039be:	f3bf 8f6f 	isb	sy
 80039c2:	f3bf 8f4f 	dsb	sy
 80039c6:	60fb      	str	r3, [r7, #12]
    }
 80039c8:	bf00      	nop
 80039ca:	bf00      	nop
 80039cc:	e7fd      	b.n	80039ca <pvPortMalloc+0x19e>
    return pvReturn;
 80039ce:	69fb      	ldr	r3, [r7, #28]
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	3728      	adds	r7, #40	@ 0x28
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bd80      	pop	{r7, pc}
 80039d8:	20012dcc 	.word	0x20012dcc
 80039dc:	20012de0 	.word	0x20012de0
 80039e0:	20012dd0 	.word	0x20012dd0
 80039e4:	20012dc4 	.word	0x20012dc4
 80039e8:	20012dd4 	.word	0x20012dd4
 80039ec:	20012dd8 	.word	0x20012dd8

080039f0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b086      	sub	sp, #24
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d04f      	beq.n	8003aa2 <vPortFree+0xb2>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8003a02:	2308      	movs	r3, #8
 8003a04:	425b      	negs	r3, r3
 8003a06:	697a      	ldr	r2, [r7, #20]
 8003a08:	4413      	add	r3, r2
 8003a0a:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8003a0c:	697b      	ldr	r3, [r7, #20]
 8003a0e:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003a10:	693b      	ldr	r3, [r7, #16]
 8003a12:	685a      	ldr	r2, [r3, #4]
 8003a14:	4b25      	ldr	r3, [pc, #148]	@ (8003aac <vPortFree+0xbc>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4013      	ands	r3, r2
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d10b      	bne.n	8003a36 <vPortFree+0x46>
        __asm volatile
 8003a1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a22:	f383 8811 	msr	BASEPRI, r3
 8003a26:	f3bf 8f6f 	isb	sy
 8003a2a:	f3bf 8f4f 	dsb	sy
 8003a2e:	60fb      	str	r3, [r7, #12]
    }
 8003a30:	bf00      	nop
 8003a32:	bf00      	nop
 8003a34:	e7fd      	b.n	8003a32 <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003a36:	693b      	ldr	r3, [r7, #16]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d00b      	beq.n	8003a56 <vPortFree+0x66>
        __asm volatile
 8003a3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a42:	f383 8811 	msr	BASEPRI, r3
 8003a46:	f3bf 8f6f 	isb	sy
 8003a4a:	f3bf 8f4f 	dsb	sy
 8003a4e:	60bb      	str	r3, [r7, #8]
    }
 8003a50:	bf00      	nop
 8003a52:	bf00      	nop
 8003a54:	e7fd      	b.n	8003a52 <vPortFree+0x62>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	685a      	ldr	r2, [r3, #4]
 8003a5a:	4b14      	ldr	r3, [pc, #80]	@ (8003aac <vPortFree+0xbc>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4013      	ands	r3, r2
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d01e      	beq.n	8003aa2 <vPortFree+0xb2>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d11a      	bne.n	8003aa2 <vPortFree+0xb2>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	685a      	ldr	r2, [r3, #4]
 8003a70:	4b0e      	ldr	r3, [pc, #56]	@ (8003aac <vPortFree+0xbc>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	43db      	mvns	r3, r3
 8003a76:	401a      	ands	r2, r3
 8003a78:	693b      	ldr	r3, [r7, #16]
 8003a7a:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8003a7c:	f7ff f9a8 	bl	8002dd0 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8003a80:	693b      	ldr	r3, [r7, #16]
 8003a82:	685a      	ldr	r2, [r3, #4]
 8003a84:	4b0a      	ldr	r3, [pc, #40]	@ (8003ab0 <vPortFree+0xc0>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4413      	add	r3, r2
 8003a8a:	4a09      	ldr	r2, [pc, #36]	@ (8003ab0 <vPortFree+0xc0>)
 8003a8c:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003a8e:	6938      	ldr	r0, [r7, #16]
 8003a90:	f000 f874 	bl	8003b7c <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8003a94:	4b07      	ldr	r3, [pc, #28]	@ (8003ab4 <vPortFree+0xc4>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	3301      	adds	r3, #1
 8003a9a:	4a06      	ldr	r2, [pc, #24]	@ (8003ab4 <vPortFree+0xc4>)
 8003a9c:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8003a9e:	f7ff f9a5 	bl	8002dec <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8003aa2:	bf00      	nop
 8003aa4:	3718      	adds	r7, #24
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}
 8003aaa:	bf00      	nop
 8003aac:	20012de0 	.word	0x20012de0
 8003ab0:	20012dd0 	.word	0x20012dd0
 8003ab4:	20012ddc 	.word	0x20012ddc

08003ab8 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b085      	sub	sp, #20
 8003abc:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003abe:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 8003ac2:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8003ac4:	4b27      	ldr	r3, [pc, #156]	@ (8003b64 <prvHeapInit+0xac>)
 8003ac6:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	f003 0307 	and.w	r3, r3, #7
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d00c      	beq.n	8003aec <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	3307      	adds	r3, #7
 8003ad6:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	f023 0307 	bic.w	r3, r3, #7
 8003ade:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003ae0:	68ba      	ldr	r2, [r7, #8]
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	1ad3      	subs	r3, r2, r3
 8003ae6:	4a1f      	ldr	r2, [pc, #124]	@ (8003b64 <prvHeapInit+0xac>)
 8003ae8:	4413      	add	r3, r2
 8003aea:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003af0:	4a1d      	ldr	r2, [pc, #116]	@ (8003b68 <prvHeapInit+0xb0>)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8003af6:	4b1c      	ldr	r3, [pc, #112]	@ (8003b68 <prvHeapInit+0xb0>)
 8003af8:	2200      	movs	r2, #0
 8003afa:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	68ba      	ldr	r2, [r7, #8]
 8003b00:	4413      	add	r3, r2
 8003b02:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8003b04:	2208      	movs	r2, #8
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	1a9b      	subs	r3, r3, r2
 8003b0a:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	f023 0307 	bic.w	r3, r3, #7
 8003b12:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	4a15      	ldr	r2, [pc, #84]	@ (8003b6c <prvHeapInit+0xb4>)
 8003b18:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8003b1a:	4b14      	ldr	r3, [pc, #80]	@ (8003b6c <prvHeapInit+0xb4>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8003b22:	4b12      	ldr	r3, [pc, #72]	@ (8003b6c <prvHeapInit+0xb4>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	2200      	movs	r2, #0
 8003b28:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	68fa      	ldr	r2, [r7, #12]
 8003b32:	1ad2      	subs	r2, r2, r3
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003b38:	4b0c      	ldr	r3, [pc, #48]	@ (8003b6c <prvHeapInit+0xb4>)
 8003b3a:	681a      	ldr	r2, [r3, #0]
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	4a0a      	ldr	r2, [pc, #40]	@ (8003b70 <prvHeapInit+0xb8>)
 8003b46:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	4a09      	ldr	r2, [pc, #36]	@ (8003b74 <prvHeapInit+0xbc>)
 8003b4e:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003b50:	4b09      	ldr	r3, [pc, #36]	@ (8003b78 <prvHeapInit+0xc0>)
 8003b52:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8003b56:	601a      	str	r2, [r3, #0]
}
 8003b58:	bf00      	nop
 8003b5a:	3714      	adds	r7, #20
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b62:	4770      	bx	lr
 8003b64:	200001c4 	.word	0x200001c4
 8003b68:	20012dc4 	.word	0x20012dc4
 8003b6c:	20012dcc 	.word	0x20012dcc
 8003b70:	20012dd4 	.word	0x20012dd4
 8003b74:	20012dd0 	.word	0x20012dd0
 8003b78:	20012de0 	.word	0x20012de0

08003b7c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	b085      	sub	sp, #20
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003b84:	4b28      	ldr	r3, [pc, #160]	@ (8003c28 <prvInsertBlockIntoFreeList+0xac>)
 8003b86:	60fb      	str	r3, [r7, #12]
 8003b88:	e002      	b.n	8003b90 <prvInsertBlockIntoFreeList+0x14>
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	60fb      	str	r3, [r7, #12]
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	687a      	ldr	r2, [r7, #4]
 8003b96:	429a      	cmp	r2, r3
 8003b98:	d8f7      	bhi.n	8003b8a <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	68ba      	ldr	r2, [r7, #8]
 8003ba4:	4413      	add	r3, r2
 8003ba6:	687a      	ldr	r2, [r7, #4]
 8003ba8:	429a      	cmp	r2, r3
 8003baa:	d108      	bne.n	8003bbe <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	685a      	ldr	r2, [r3, #4]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	441a      	add	r2, r3
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	68ba      	ldr	r2, [r7, #8]
 8003bc8:	441a      	add	r2, r3
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	429a      	cmp	r2, r3
 8003bd0:	d118      	bne.n	8003c04 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681a      	ldr	r2, [r3, #0]
 8003bd6:	4b15      	ldr	r3, [pc, #84]	@ (8003c2c <prvInsertBlockIntoFreeList+0xb0>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	429a      	cmp	r2, r3
 8003bdc:	d00d      	beq.n	8003bfa <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	685a      	ldr	r2, [r3, #4]
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	441a      	add	r2, r3
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	681a      	ldr	r2, [r3, #0]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	601a      	str	r2, [r3, #0]
 8003bf8:	e008      	b.n	8003c0c <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003bfa:	4b0c      	ldr	r3, [pc, #48]	@ (8003c2c <prvInsertBlockIntoFreeList+0xb0>)
 8003bfc:	681a      	ldr	r2, [r3, #0]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	601a      	str	r2, [r3, #0]
 8003c02:	e003      	b.n	8003c0c <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681a      	ldr	r2, [r3, #0]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8003c0c:	68fa      	ldr	r2, [r7, #12]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	429a      	cmp	r2, r3
 8003c12:	d002      	beq.n	8003c1a <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	687a      	ldr	r2, [r7, #4]
 8003c18:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003c1a:	bf00      	nop
 8003c1c:	3714      	adds	r7, #20
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c24:	4770      	bx	lr
 8003c26:	bf00      	nop
 8003c28:	20012dc4 	.word	0x20012dc4
 8003c2c:	20012dcc 	.word	0x20012dcc

08003c30 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b086      	sub	sp, #24
 8003c34:	af02      	add	r7, sp, #8
 8003c36:	60f8      	str	r0, [r7, #12]
 8003c38:	60b9      	str	r1, [r7, #8]
 8003c3a:	607a      	str	r2, [r7, #4]
 8003c3c:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8003c3e:	2205      	movs	r2, #5
 8003c40:	492b      	ldr	r1, [pc, #172]	@ (8003cf0 <SYSVIEW_AddTask+0xc0>)
 8003c42:	68b8      	ldr	r0, [r7, #8]
 8003c44:	f001 f9ca 	bl	8004fdc <memcmp>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d04b      	beq.n	8003ce6 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8003c4e:	4b29      	ldr	r3, [pc, #164]	@ (8003cf4 <SYSVIEW_AddTask+0xc4>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	2b07      	cmp	r3, #7
 8003c54:	d903      	bls.n	8003c5e <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8003c56:	4828      	ldr	r0, [pc, #160]	@ (8003cf8 <SYSVIEW_AddTask+0xc8>)
 8003c58:	f001 f964 	bl	8004f24 <SEGGER_SYSVIEW_Warn>
    return;
 8003c5c:	e044      	b.n	8003ce8 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8003c5e:	4b25      	ldr	r3, [pc, #148]	@ (8003cf4 <SYSVIEW_AddTask+0xc4>)
 8003c60:	681a      	ldr	r2, [r3, #0]
 8003c62:	4926      	ldr	r1, [pc, #152]	@ (8003cfc <SYSVIEW_AddTask+0xcc>)
 8003c64:	4613      	mov	r3, r2
 8003c66:	009b      	lsls	r3, r3, #2
 8003c68:	4413      	add	r3, r2
 8003c6a:	009b      	lsls	r3, r3, #2
 8003c6c:	440b      	add	r3, r1
 8003c6e:	68fa      	ldr	r2, [r7, #12]
 8003c70:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8003c72:	4b20      	ldr	r3, [pc, #128]	@ (8003cf4 <SYSVIEW_AddTask+0xc4>)
 8003c74:	681a      	ldr	r2, [r3, #0]
 8003c76:	4921      	ldr	r1, [pc, #132]	@ (8003cfc <SYSVIEW_AddTask+0xcc>)
 8003c78:	4613      	mov	r3, r2
 8003c7a:	009b      	lsls	r3, r3, #2
 8003c7c:	4413      	add	r3, r2
 8003c7e:	009b      	lsls	r3, r3, #2
 8003c80:	440b      	add	r3, r1
 8003c82:	3304      	adds	r3, #4
 8003c84:	68ba      	ldr	r2, [r7, #8]
 8003c86:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8003c88:	4b1a      	ldr	r3, [pc, #104]	@ (8003cf4 <SYSVIEW_AddTask+0xc4>)
 8003c8a:	681a      	ldr	r2, [r3, #0]
 8003c8c:	491b      	ldr	r1, [pc, #108]	@ (8003cfc <SYSVIEW_AddTask+0xcc>)
 8003c8e:	4613      	mov	r3, r2
 8003c90:	009b      	lsls	r3, r3, #2
 8003c92:	4413      	add	r3, r2
 8003c94:	009b      	lsls	r3, r3, #2
 8003c96:	440b      	add	r3, r1
 8003c98:	3308      	adds	r3, #8
 8003c9a:	687a      	ldr	r2, [r7, #4]
 8003c9c:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8003c9e:	4b15      	ldr	r3, [pc, #84]	@ (8003cf4 <SYSVIEW_AddTask+0xc4>)
 8003ca0:	681a      	ldr	r2, [r3, #0]
 8003ca2:	4916      	ldr	r1, [pc, #88]	@ (8003cfc <SYSVIEW_AddTask+0xcc>)
 8003ca4:	4613      	mov	r3, r2
 8003ca6:	009b      	lsls	r3, r3, #2
 8003ca8:	4413      	add	r3, r2
 8003caa:	009b      	lsls	r3, r3, #2
 8003cac:	440b      	add	r3, r1
 8003cae:	330c      	adds	r3, #12
 8003cb0:	683a      	ldr	r2, [r7, #0]
 8003cb2:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8003cb4:	4b0f      	ldr	r3, [pc, #60]	@ (8003cf4 <SYSVIEW_AddTask+0xc4>)
 8003cb6:	681a      	ldr	r2, [r3, #0]
 8003cb8:	4910      	ldr	r1, [pc, #64]	@ (8003cfc <SYSVIEW_AddTask+0xcc>)
 8003cba:	4613      	mov	r3, r2
 8003cbc:	009b      	lsls	r3, r3, #2
 8003cbe:	4413      	add	r3, r2
 8003cc0:	009b      	lsls	r3, r3, #2
 8003cc2:	440b      	add	r3, r1
 8003cc4:	3310      	adds	r3, #16
 8003cc6:	69ba      	ldr	r2, [r7, #24]
 8003cc8:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8003cca:	4b0a      	ldr	r3, [pc, #40]	@ (8003cf4 <SYSVIEW_AddTask+0xc4>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	3301      	adds	r3, #1
 8003cd0:	4a08      	ldr	r2, [pc, #32]	@ (8003cf4 <SYSVIEW_AddTask+0xc4>)
 8003cd2:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8003cd4:	69bb      	ldr	r3, [r7, #24]
 8003cd6:	9300      	str	r3, [sp, #0]
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	687a      	ldr	r2, [r7, #4]
 8003cdc:	68b9      	ldr	r1, [r7, #8]
 8003cde:	68f8      	ldr	r0, [r7, #12]
 8003ce0:	f000 f80e 	bl	8003d00 <SYSVIEW_SendTaskInfo>
 8003ce4:	e000      	b.n	8003ce8 <SYSVIEW_AddTask+0xb8>
    return;
 8003ce6:	bf00      	nop

}
 8003ce8:	3710      	adds	r7, #16
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}
 8003cee:	bf00      	nop
 8003cf0:	080050a8 	.word	0x080050a8
 8003cf4:	20012e84 	.word	0x20012e84
 8003cf8:	080050b0 	.word	0x080050b0
 8003cfc:	20012de4 	.word	0x20012de4

08003d00 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b08a      	sub	sp, #40	@ 0x28
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	60f8      	str	r0, [r7, #12]
 8003d08:	60b9      	str	r1, [r7, #8]
 8003d0a:	607a      	str	r2, [r7, #4]
 8003d0c:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8003d0e:	f107 0314 	add.w	r3, r7, #20
 8003d12:	2214      	movs	r2, #20
 8003d14:	2100      	movs	r1, #0
 8003d16:	4618      	mov	r0, r3
 8003d18:	f001 f970 	bl	8004ffc <memset>
  TaskInfo.TaskID     = TaskID;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8003d2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d2e:	627b      	str	r3, [r7, #36]	@ 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8003d30:	f107 0314 	add.w	r3, r7, #20
 8003d34:	4618      	mov	r0, r3
 8003d36:	f000 fd93 	bl	8004860 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8003d3a:	bf00      	nop
 8003d3c:	3728      	adds	r7, #40	@ 0x28
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bd80      	pop	{r7, pc}
	...

08003d44 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b084      	sub	sp, #16
 8003d48:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 8003d4a:	4b1e      	ldr	r3, [pc, #120]	@ (8003dc4 <USART2_IRQHandler+0x80>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	f003 0320 	and.w	r3, r3, #32
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d011      	beq.n	8003d7e <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 8003d5a:	4b1b      	ldr	r3, [pc, #108]	@ (8003dc8 <USART2_IRQHandler+0x84>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	b2db      	uxtb	r3, r3
 8003d60:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	f003 030b 	and.w	r3, r3, #11
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d108      	bne.n	8003d7e <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 8003d6c:	4b17      	ldr	r3, [pc, #92]	@ (8003dcc <USART2_IRQHandler+0x88>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d004      	beq.n	8003d7e <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8003d74:	4b15      	ldr	r3, [pc, #84]	@ (8003dcc <USART2_IRQHandler+0x88>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	79fa      	ldrb	r2, [r7, #7]
 8003d7a:	4610      	mov	r0, r2
 8003d7c:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d01a      	beq.n	8003dbe <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8003d88:	4b11      	ldr	r3, [pc, #68]	@ (8003dd0 <USART2_IRQHandler+0x8c>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d015      	beq.n	8003dbc <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8003d90:	4b0f      	ldr	r3, [pc, #60]	@ (8003dd0 <USART2_IRQHandler+0x8c>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	1dfa      	adds	r2, r7, #7
 8003d96:	4610      	mov	r0, r2
 8003d98:	4798      	blx	r3
 8003d9a:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d106      	bne.n	8003db0 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 8003da2:	4b0c      	ldr	r3, [pc, #48]	@ (8003dd4 <USART2_IRQHandler+0x90>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a0b      	ldr	r2, [pc, #44]	@ (8003dd4 <USART2_IRQHandler+0x90>)
 8003da8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003dac:	6013      	str	r3, [r2, #0]
 8003dae:	e006      	b.n	8003dbe <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8003db0:	4b04      	ldr	r3, [pc, #16]	@ (8003dc4 <USART2_IRQHandler+0x80>)
 8003db2:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 8003db4:	79fa      	ldrb	r2, [r7, #7]
 8003db6:	4b04      	ldr	r3, [pc, #16]	@ (8003dc8 <USART2_IRQHandler+0x84>)
 8003db8:	601a      	str	r2, [r3, #0]
 8003dba:	e000      	b.n	8003dbe <USART2_IRQHandler+0x7a>
      return;
 8003dbc:	bf00      	nop
    }
  }
}
 8003dbe:	3710      	adds	r7, #16
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	bd80      	pop	{r7, pc}
 8003dc4:	40004400 	.word	0x40004400
 8003dc8:	40004404 	.word	0x40004404
 8003dcc:	20012e88 	.word	0x20012e88
 8003dd0:	20012e8c 	.word	0x20012e8c
 8003dd4:	4000440c 	.word	0x4000440c

08003dd8 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 8003dd8:	b480      	push	{r7}
 8003dda:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 8003ddc:	4b05      	ldr	r3, [pc, #20]	@ (8003df4 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a04      	ldr	r2, [pc, #16]	@ (8003df4 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8003de2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003de6:	6013      	str	r3, [r2, #0]
}
 8003de8:	bf00      	nop
 8003dea:	46bd      	mov	sp, r7
 8003dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df0:	4770      	bx	lr
 8003df2:	bf00      	nop
 8003df4:	4000440c 	.word	0x4000440c

08003df8 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8003df8:	b480      	push	{r7}
 8003dfa:	b083      	sub	sp, #12
 8003dfc:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8003dfe:	4b24      	ldr	r3, [pc, #144]	@ (8003e90 <_DoInit+0x98>)
 8003e00:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2203      	movs	r2, #3
 8003e06:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2203      	movs	r2, #3
 8003e0c:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	4a20      	ldr	r2, [pc, #128]	@ (8003e94 <_DoInit+0x9c>)
 8003e12:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	4a20      	ldr	r2, [pc, #128]	@ (8003e98 <_DoInit+0xa0>)
 8003e18:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003e20:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2200      	movs	r2, #0
 8003e26:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2200      	movs	r2, #0
 8003e32:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	4a17      	ldr	r2, [pc, #92]	@ (8003e94 <_DoInit+0x9c>)
 8003e38:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	4a17      	ldr	r2, [pc, #92]	@ (8003e9c <_DoInit+0xa4>)
 8003e3e:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2210      	movs	r2, #16
 8003e44:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2200      	movs	r2, #0
 8003e56:	675a      	str	r2, [r3, #116]	@ 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	3307      	adds	r3, #7
 8003e5c:	4a10      	ldr	r2, [pc, #64]	@ (8003ea0 <_DoInit+0xa8>)
 8003e5e:	6810      	ldr	r0, [r2, #0]
 8003e60:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8003e62:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	4a0e      	ldr	r2, [pc, #56]	@ (8003ea4 <_DoInit+0xac>)
 8003e6a:	6810      	ldr	r0, [r2, #0]
 8003e6c:	6018      	str	r0, [r3, #0]
 8003e6e:	8891      	ldrh	r1, [r2, #4]
 8003e70:	7992      	ldrb	r2, [r2, #6]
 8003e72:	8099      	strh	r1, [r3, #4]
 8003e74:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8003e76:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2220      	movs	r2, #32
 8003e7e:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8003e80:	f3bf 8f5f 	dmb	sy
}
 8003e84:	bf00      	nop
 8003e86:	370c      	adds	r7, #12
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8e:	4770      	bx	lr
 8003e90:	20012e90 	.word	0x20012e90
 8003e94:	08005100 	.word	0x08005100
 8003e98:	20012f38 	.word	0x20012f38
 8003e9c:	20013338 	.word	0x20013338
 8003ea0:	0800510c 	.word	0x0800510c
 8003ea4:	08005110 	.word	0x08005110

08003ea8 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b08c      	sub	sp, #48	@ 0x30
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	60f8      	str	r0, [r7, #12]
 8003eb0:	60b9      	str	r1, [r7, #8]
 8003eb2:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8003eb4:	4b3e      	ldr	r3, [pc, #248]	@ (8003fb0 <SEGGER_RTT_ReadNoLock+0x108>)
 8003eb6:	623b      	str	r3, [r7, #32]
 8003eb8:	6a3b      	ldr	r3, [r7, #32]
 8003eba:	781b      	ldrb	r3, [r3, #0]
 8003ebc:	b2db      	uxtb	r3, r3
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d101      	bne.n	8003ec6 <SEGGER_RTT_ReadNoLock+0x1e>
 8003ec2:	f7ff ff99 	bl	8003df8 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003ec6:	68fa      	ldr	r2, [r7, #12]
 8003ec8:	4613      	mov	r3, r2
 8003eca:	005b      	lsls	r3, r3, #1
 8003ecc:	4413      	add	r3, r2
 8003ece:	00db      	lsls	r3, r3, #3
 8003ed0:	3360      	adds	r3, #96	@ 0x60
 8003ed2:	4a37      	ldr	r2, [pc, #220]	@ (8003fb0 <SEGGER_RTT_ReadNoLock+0x108>)
 8003ed4:	4413      	add	r3, r2
 8003ed6:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8003ed8:	68bb      	ldr	r3, [r7, #8]
 8003eda:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 8003edc:	69fb      	ldr	r3, [r7, #28]
 8003ede:	691b      	ldr	r3, [r3, #16]
 8003ee0:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 8003ee2:	69fb      	ldr	r3, [r7, #28]
 8003ee4:	68db      	ldr	r3, [r3, #12]
 8003ee6:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8003ee8:	2300      	movs	r3, #0
 8003eea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8003eec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003eee:	69bb      	ldr	r3, [r7, #24]
 8003ef0:	429a      	cmp	r2, r3
 8003ef2:	d92b      	bls.n	8003f4c <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8003ef4:	69fb      	ldr	r3, [r7, #28]
 8003ef6:	689a      	ldr	r2, [r3, #8]
 8003ef8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003efa:	1ad3      	subs	r3, r2, r3
 8003efc:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003efe:	697a      	ldr	r2, [r7, #20]
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	4293      	cmp	r3, r2
 8003f04:	bf28      	it	cs
 8003f06:	4613      	movcs	r3, r2
 8003f08:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003f0a:	69fb      	ldr	r3, [r7, #28]
 8003f0c:	685a      	ldr	r2, [r3, #4]
 8003f0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f10:	4413      	add	r3, r2
 8003f12:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003f14:	697a      	ldr	r2, [r7, #20]
 8003f16:	6939      	ldr	r1, [r7, #16]
 8003f18:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003f1a:	f001 f89b 	bl	8005054 <memcpy>
    NumBytesRead += NumBytesRem;
 8003f1e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003f20:	697b      	ldr	r3, [r7, #20]
 8003f22:	4413      	add	r3, r2
 8003f24:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8003f26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	4413      	add	r3, r2
 8003f2c:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8003f2e:	687a      	ldr	r2, [r7, #4]
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	1ad3      	subs	r3, r2, r3
 8003f34:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003f36:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003f38:	697b      	ldr	r3, [r7, #20]
 8003f3a:	4413      	add	r3, r2
 8003f3c:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8003f3e:	69fb      	ldr	r3, [r7, #28]
 8003f40:	689b      	ldr	r3, [r3, #8]
 8003f42:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003f44:	429a      	cmp	r2, r3
 8003f46:	d101      	bne.n	8003f4c <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8003f48:	2300      	movs	r3, #0
 8003f4a:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8003f4c:	69ba      	ldr	r2, [r7, #24]
 8003f4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f50:	1ad3      	subs	r3, r2, r3
 8003f52:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003f54:	697a      	ldr	r2, [r7, #20]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	bf28      	it	cs
 8003f5c:	4613      	movcs	r3, r2
 8003f5e:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8003f60:	697b      	ldr	r3, [r7, #20]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d019      	beq.n	8003f9a <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003f66:	69fb      	ldr	r3, [r7, #28]
 8003f68:	685a      	ldr	r2, [r3, #4]
 8003f6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f6c:	4413      	add	r3, r2
 8003f6e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003f70:	697a      	ldr	r2, [r7, #20]
 8003f72:	6939      	ldr	r1, [r7, #16]
 8003f74:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003f76:	f001 f86d 	bl	8005054 <memcpy>
    NumBytesRead += NumBytesRem;
 8003f7a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	4413      	add	r3, r2
 8003f80:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8003f82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	4413      	add	r3, r2
 8003f88:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8003f8a:	687a      	ldr	r2, [r7, #4]
 8003f8c:	697b      	ldr	r3, [r7, #20]
 8003f8e:	1ad3      	subs	r3, r2, r3
 8003f90:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003f92:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003f94:	697b      	ldr	r3, [r7, #20]
 8003f96:	4413      	add	r3, r2
 8003f98:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  if (NumBytesRead) {
 8003f9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d002      	beq.n	8003fa6 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8003fa0:	69fb      	ldr	r3, [r7, #28]
 8003fa2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003fa4:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8003fa6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	3730      	adds	r7, #48	@ 0x30
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bd80      	pop	{r7, pc}
 8003fb0:	20012e90 	.word	0x20012e90

08003fb4 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8003fb4:	b480      	push	{r7}
 8003fb6:	b087      	sub	sp, #28
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	60f8      	str	r0, [r7, #12]
 8003fbc:	60b9      	str	r1, [r7, #8]
 8003fbe:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8003fc4:	e002      	b.n	8003fcc <_EncodeStr+0x18>
    Len++;
 8003fc6:	693b      	ldr	r3, [r7, #16]
 8003fc8:	3301      	adds	r3, #1
 8003fca:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8003fcc:	68ba      	ldr	r2, [r7, #8]
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	4413      	add	r3, r2
 8003fd2:	781b      	ldrb	r3, [r3, #0]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d1f6      	bne.n	8003fc6 <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 8003fd8:	693a      	ldr	r2, [r7, #16]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	429a      	cmp	r2, r3
 8003fde:	d901      	bls.n	8003fe4 <_EncodeStr+0x30>
    Len = Limit;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8003fe4:	693b      	ldr	r3, [r7, #16]
 8003fe6:	2bfe      	cmp	r3, #254	@ 0xfe
 8003fe8:	d806      	bhi.n	8003ff8 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	1c5a      	adds	r2, r3, #1
 8003fee:	60fa      	str	r2, [r7, #12]
 8003ff0:	693a      	ldr	r2, [r7, #16]
 8003ff2:	b2d2      	uxtb	r2, r2
 8003ff4:	701a      	strb	r2, [r3, #0]
 8003ff6:	e011      	b.n	800401c <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	1c5a      	adds	r2, r3, #1
 8003ffc:	60fa      	str	r2, [r7, #12]
 8003ffe:	22ff      	movs	r2, #255	@ 0xff
 8004000:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	1c5a      	adds	r2, r3, #1
 8004006:	60fa      	str	r2, [r7, #12]
 8004008:	693a      	ldr	r2, [r7, #16]
 800400a:	b2d2      	uxtb	r2, r2
 800400c:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 800400e:	693b      	ldr	r3, [r7, #16]
 8004010:	0a19      	lsrs	r1, r3, #8
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	1c5a      	adds	r2, r3, #1
 8004016:	60fa      	str	r2, [r7, #12]
 8004018:	b2ca      	uxtb	r2, r1
 800401a:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 800401c:	2300      	movs	r3, #0
 800401e:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8004020:	e00a      	b.n	8004038 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 8004022:	68ba      	ldr	r2, [r7, #8]
 8004024:	1c53      	adds	r3, r2, #1
 8004026:	60bb      	str	r3, [r7, #8]
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	1c59      	adds	r1, r3, #1
 800402c:	60f9      	str	r1, [r7, #12]
 800402e:	7812      	ldrb	r2, [r2, #0]
 8004030:	701a      	strb	r2, [r3, #0]
    n++;
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	3301      	adds	r3, #1
 8004036:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8004038:	697a      	ldr	r2, [r7, #20]
 800403a:	693b      	ldr	r3, [r7, #16]
 800403c:	429a      	cmp	r2, r3
 800403e:	d3f0      	bcc.n	8004022 <_EncodeStr+0x6e>
  }
  return pPayload;
 8004040:	68fb      	ldr	r3, [r7, #12]
}
 8004042:	4618      	mov	r0, r3
 8004044:	371c      	adds	r7, #28
 8004046:	46bd      	mov	sp, r7
 8004048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404c:	4770      	bx	lr

0800404e <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 800404e:	b480      	push	{r7}
 8004050:	b083      	sub	sp, #12
 8004052:	af00      	add	r7, sp, #0
 8004054:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	3304      	adds	r3, #4
}
 800405a:	4618      	mov	r0, r3
 800405c:	370c      	adds	r7, #12
 800405e:	46bd      	mov	sp, r7
 8004060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004064:	4770      	bx	lr
	...

08004068 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8004068:	b580      	push	{r7, lr}
 800406a:	b082      	sub	sp, #8
 800406c:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800406e:	4b35      	ldr	r3, [pc, #212]	@ (8004144 <_HandleIncomingPacket+0xdc>)
 8004070:	7e1b      	ldrb	r3, [r3, #24]
 8004072:	4618      	mov	r0, r3
 8004074:	1cfb      	adds	r3, r7, #3
 8004076:	2201      	movs	r2, #1
 8004078:	4619      	mov	r1, r3
 800407a:	f7ff ff15 	bl	8003ea8 <SEGGER_RTT_ReadNoLock>
 800407e:	4603      	mov	r3, r0
 8004080:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2b00      	cmp	r3, #0
 8004086:	dd59      	ble.n	800413c <_HandleIncomingPacket+0xd4>
    switch (Cmd) {
 8004088:	78fb      	ldrb	r3, [r7, #3]
 800408a:	2b80      	cmp	r3, #128	@ 0x80
 800408c:	d032      	beq.n	80040f4 <_HandleIncomingPacket+0x8c>
 800408e:	2b80      	cmp	r3, #128	@ 0x80
 8004090:	dc42      	bgt.n	8004118 <_HandleIncomingPacket+0xb0>
 8004092:	2b07      	cmp	r3, #7
 8004094:	dc16      	bgt.n	80040c4 <_HandleIncomingPacket+0x5c>
 8004096:	2b00      	cmp	r3, #0
 8004098:	dd3e      	ble.n	8004118 <_HandleIncomingPacket+0xb0>
 800409a:	3b01      	subs	r3, #1
 800409c:	2b06      	cmp	r3, #6
 800409e:	d83b      	bhi.n	8004118 <_HandleIncomingPacket+0xb0>
 80040a0:	a201      	add	r2, pc, #4	@ (adr r2, 80040a8 <_HandleIncomingPacket+0x40>)
 80040a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040a6:	bf00      	nop
 80040a8:	080040cb 	.word	0x080040cb
 80040ac:	080040d1 	.word	0x080040d1
 80040b0:	080040d7 	.word	0x080040d7
 80040b4:	080040dd 	.word	0x080040dd
 80040b8:	080040e3 	.word	0x080040e3
 80040bc:	080040e9 	.word	0x080040e9
 80040c0:	080040ef 	.word	0x080040ef
 80040c4:	2b7f      	cmp	r3, #127	@ 0x7f
 80040c6:	d034      	beq.n	8004132 <_HandleIncomingPacket+0xca>
 80040c8:	e026      	b.n	8004118 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 80040ca:	f000 fa4d 	bl	8004568 <SEGGER_SYSVIEW_Start>
      break;
 80040ce:	e035      	b.n	800413c <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 80040d0:	f000 fb06 	bl	80046e0 <SEGGER_SYSVIEW_Stop>
      break;
 80040d4:	e032      	b.n	800413c <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 80040d6:	f000 fcbb 	bl	8004a50 <SEGGER_SYSVIEW_RecordSystime>
      break;
 80040da:	e02f      	b.n	800413c <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 80040dc:	f000 fca4 	bl	8004a28 <SEGGER_SYSVIEW_SendTaskList>
      break;
 80040e0:	e02c      	b.n	800413c <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 80040e2:	f000 fb23 	bl	800472c <SEGGER_SYSVIEW_GetSysDesc>
      break;
 80040e6:	e029      	b.n	800413c <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 80040e8:	f000 fede 	bl	8004ea8 <SEGGER_SYSVIEW_SendNumModules>
      break;
 80040ec:	e026      	b.n	800413c <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 80040ee:	f000 febd 	bl	8004e6c <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 80040f2:	e023      	b.n	800413c <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80040f4:	4b13      	ldr	r3, [pc, #76]	@ (8004144 <_HandleIncomingPacket+0xdc>)
 80040f6:	7e1b      	ldrb	r3, [r3, #24]
 80040f8:	4618      	mov	r0, r3
 80040fa:	1cfb      	adds	r3, r7, #3
 80040fc:	2201      	movs	r2, #1
 80040fe:	4619      	mov	r1, r3
 8004100:	f7ff fed2 	bl	8003ea8 <SEGGER_RTT_ReadNoLock>
 8004104:	4603      	mov	r3, r0
 8004106:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2b00      	cmp	r3, #0
 800410c:	dd13      	ble.n	8004136 <_HandleIncomingPacket+0xce>
        SEGGER_SYSVIEW_SendModule(Cmd);
 800410e:	78fb      	ldrb	r3, [r7, #3]
 8004110:	4618      	mov	r0, r3
 8004112:	f000 fe2b 	bl	8004d6c <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8004116:	e00e      	b.n	8004136 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8004118:	78fb      	ldrb	r3, [r7, #3]
 800411a:	b25b      	sxtb	r3, r3
 800411c:	2b00      	cmp	r3, #0
 800411e:	da0c      	bge.n	800413a <_HandleIncomingPacket+0xd2>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004120:	4b08      	ldr	r3, [pc, #32]	@ (8004144 <_HandleIncomingPacket+0xdc>)
 8004122:	7e1b      	ldrb	r3, [r3, #24]
 8004124:	4618      	mov	r0, r3
 8004126:	1cfb      	adds	r3, r7, #3
 8004128:	2201      	movs	r2, #1
 800412a:	4619      	mov	r1, r3
 800412c:	f7ff febc 	bl	8003ea8 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8004130:	e003      	b.n	800413a <_HandleIncomingPacket+0xd2>
      break;
 8004132:	bf00      	nop
 8004134:	e002      	b.n	800413c <_HandleIncomingPacket+0xd4>
      break;
 8004136:	bf00      	nop
 8004138:	e000      	b.n	800413c <_HandleIncomingPacket+0xd4>
      break;
 800413a:	bf00      	nop
    }
  }
}
 800413c:	bf00      	nop
 800413e:	3708      	adds	r7, #8
 8004140:	46bd      	mov	sp, r7
 8004142:	bd80      	pop	{r7, pc}
 8004144:	20013348 	.word	0x20013348

08004148 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8004148:	b580      	push	{r7, lr}
 800414a:	b08c      	sub	sp, #48	@ 0x30
 800414c:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 800414e:	2301      	movs	r3, #1
 8004150:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8004152:	1d3b      	adds	r3, r7, #4
 8004154:	3301      	adds	r3, #1
 8004156:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8004158:	69fb      	ldr	r3, [r7, #28]
 800415a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800415c:	4b32      	ldr	r3, [pc, #200]	@ (8004228 <_TrySendOverflowPacket+0xe0>)
 800415e:	695b      	ldr	r3, [r3, #20]
 8004160:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004162:	e00b      	b.n	800417c <_TrySendOverflowPacket+0x34>
 8004164:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004166:	b2da      	uxtb	r2, r3
 8004168:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800416a:	1c59      	adds	r1, r3, #1
 800416c:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800416e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004172:	b2d2      	uxtb	r2, r2
 8004174:	701a      	strb	r2, [r3, #0]
 8004176:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004178:	09db      	lsrs	r3, r3, #7
 800417a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800417c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800417e:	2b7f      	cmp	r3, #127	@ 0x7f
 8004180:	d8f0      	bhi.n	8004164 <_TrySendOverflowPacket+0x1c>
 8004182:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004184:	1c5a      	adds	r2, r3, #1
 8004186:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004188:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800418a:	b2d2      	uxtb	r2, r2
 800418c:	701a      	strb	r2, [r3, #0]
 800418e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004190:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004192:	4b26      	ldr	r3, [pc, #152]	@ (800422c <_TrySendOverflowPacket+0xe4>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004198:	4b23      	ldr	r3, [pc, #140]	@ (8004228 <_TrySendOverflowPacket+0xe0>)
 800419a:	68db      	ldr	r3, [r3, #12]
 800419c:	69ba      	ldr	r2, [r7, #24]
 800419e:	1ad3      	subs	r3, r2, r3
 80041a0:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 80041a2:	69fb      	ldr	r3, [r7, #28]
 80041a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	623b      	str	r3, [r7, #32]
 80041aa:	e00b      	b.n	80041c4 <_TrySendOverflowPacket+0x7c>
 80041ac:	6a3b      	ldr	r3, [r7, #32]
 80041ae:	b2da      	uxtb	r2, r3
 80041b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041b2:	1c59      	adds	r1, r3, #1
 80041b4:	6279      	str	r1, [r7, #36]	@ 0x24
 80041b6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80041ba:	b2d2      	uxtb	r2, r2
 80041bc:	701a      	strb	r2, [r3, #0]
 80041be:	6a3b      	ldr	r3, [r7, #32]
 80041c0:	09db      	lsrs	r3, r3, #7
 80041c2:	623b      	str	r3, [r7, #32]
 80041c4:	6a3b      	ldr	r3, [r7, #32]
 80041c6:	2b7f      	cmp	r3, #127	@ 0x7f
 80041c8:	d8f0      	bhi.n	80041ac <_TrySendOverflowPacket+0x64>
 80041ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041cc:	1c5a      	adds	r2, r3, #1
 80041ce:	627a      	str	r2, [r7, #36]	@ 0x24
 80041d0:	6a3a      	ldr	r2, [r7, #32]
 80041d2:	b2d2      	uxtb	r2, r2
 80041d4:	701a      	strb	r2, [r3, #0]
 80041d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041d8:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 80041da:	4b13      	ldr	r3, [pc, #76]	@ (8004228 <_TrySendOverflowPacket+0xe0>)
 80041dc:	785b      	ldrb	r3, [r3, #1]
 80041de:	4618      	mov	r0, r3
 80041e0:	1d3b      	adds	r3, r7, #4
 80041e2:	69fa      	ldr	r2, [r7, #28]
 80041e4:	1ad3      	subs	r3, r2, r3
 80041e6:	461a      	mov	r2, r3
 80041e8:	1d3b      	adds	r3, r7, #4
 80041ea:	4619      	mov	r1, r3
 80041ec:	f7fb fff0 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80041f0:	4603      	mov	r3, r0
 80041f2:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 80041f4:	f7ff fdf0 	bl	8003dd8 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 80041f8:	693b      	ldr	r3, [r7, #16]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d009      	beq.n	8004212 <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80041fe:	4a0a      	ldr	r2, [pc, #40]	@ (8004228 <_TrySendOverflowPacket+0xe0>)
 8004200:	69bb      	ldr	r3, [r7, #24]
 8004202:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8004204:	4b08      	ldr	r3, [pc, #32]	@ (8004228 <_TrySendOverflowPacket+0xe0>)
 8004206:	781b      	ldrb	r3, [r3, #0]
 8004208:	3b01      	subs	r3, #1
 800420a:	b2da      	uxtb	r2, r3
 800420c:	4b06      	ldr	r3, [pc, #24]	@ (8004228 <_TrySendOverflowPacket+0xe0>)
 800420e:	701a      	strb	r2, [r3, #0]
 8004210:	e004      	b.n	800421c <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8004212:	4b05      	ldr	r3, [pc, #20]	@ (8004228 <_TrySendOverflowPacket+0xe0>)
 8004214:	695b      	ldr	r3, [r3, #20]
 8004216:	3301      	adds	r3, #1
 8004218:	4a03      	ldr	r2, [pc, #12]	@ (8004228 <_TrySendOverflowPacket+0xe0>)
 800421a:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 800421c:	693b      	ldr	r3, [r7, #16]
}
 800421e:	4618      	mov	r0, r3
 8004220:	3730      	adds	r7, #48	@ 0x30
 8004222:	46bd      	mov	sp, r7
 8004224:	bd80      	pop	{r7, pc}
 8004226:	bf00      	nop
 8004228:	20013348 	.word	0x20013348
 800422c:	e0001004 	.word	0xe0001004

08004230 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8004230:	b580      	push	{r7, lr}
 8004232:	b08a      	sub	sp, #40	@ 0x28
 8004234:	af00      	add	r7, sp, #0
 8004236:	60f8      	str	r0, [r7, #12]
 8004238:	60b9      	str	r1, [r7, #8]
 800423a:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 800423c:	4b6d      	ldr	r3, [pc, #436]	@ (80043f4 <_SendPacket+0x1c4>)
 800423e:	781b      	ldrb	r3, [r3, #0]
 8004240:	2b01      	cmp	r3, #1
 8004242:	d010      	beq.n	8004266 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8004244:	4b6b      	ldr	r3, [pc, #428]	@ (80043f4 <_SendPacket+0x1c4>)
 8004246:	781b      	ldrb	r3, [r3, #0]
 8004248:	2b00      	cmp	r3, #0
 800424a:	f000 80a5 	beq.w	8004398 <_SendPacket+0x168>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 800424e:	4b69      	ldr	r3, [pc, #420]	@ (80043f4 <_SendPacket+0x1c4>)
 8004250:	781b      	ldrb	r3, [r3, #0]
 8004252:	2b02      	cmp	r3, #2
 8004254:	d109      	bne.n	800426a <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8004256:	f7ff ff77 	bl	8004148 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 800425a:	4b66      	ldr	r3, [pc, #408]	@ (80043f4 <_SendPacket+0x1c4>)
 800425c:	781b      	ldrb	r3, [r3, #0]
 800425e:	2b01      	cmp	r3, #1
 8004260:	f040 809c 	bne.w	800439c <_SendPacket+0x16c>
      goto SendDone;
    }
  }
Send:
 8004264:	e001      	b.n	800426a <_SendPacket+0x3a>
    goto Send;
 8004266:	bf00      	nop
 8004268:	e000      	b.n	800426c <_SendPacket+0x3c>
Send:
 800426a:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2b1f      	cmp	r3, #31
 8004270:	d809      	bhi.n	8004286 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8004272:	4b60      	ldr	r3, [pc, #384]	@ (80043f4 <_SendPacket+0x1c4>)
 8004274:	69da      	ldr	r2, [r3, #28]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	fa22 f303 	lsr.w	r3, r2, r3
 800427c:	f003 0301 	and.w	r3, r3, #1
 8004280:	2b00      	cmp	r3, #0
 8004282:	f040 808d 	bne.w	80043a0 <_SendPacket+0x170>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2b17      	cmp	r3, #23
 800428a:	d807      	bhi.n	800429c <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	3b01      	subs	r3, #1
 8004290:	60fb      	str	r3, [r7, #12]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	b2da      	uxtb	r2, r3
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	701a      	strb	r2, [r3, #0]
 800429a:	e03d      	b.n	8004318 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 800429c:	68ba      	ldr	r2, [r7, #8]
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	1ad3      	subs	r3, r2, r3
 80042a2:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 80042a4:	69fb      	ldr	r3, [r7, #28]
 80042a6:	2b7f      	cmp	r3, #127	@ 0x7f
 80042a8:	d912      	bls.n	80042d0 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 80042aa:	69fb      	ldr	r3, [r7, #28]
 80042ac:	09da      	lsrs	r2, r3, #7
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	3b01      	subs	r3, #1
 80042b2:	60fb      	str	r3, [r7, #12]
 80042b4:	b2d2      	uxtb	r2, r2
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 80042ba:	69fb      	ldr	r3, [r7, #28]
 80042bc:	b2db      	uxtb	r3, r3
 80042be:	68fa      	ldr	r2, [r7, #12]
 80042c0:	3a01      	subs	r2, #1
 80042c2:	60fa      	str	r2, [r7, #12]
 80042c4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80042c8:	b2da      	uxtb	r2, r3
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	701a      	strb	r2, [r3, #0]
 80042ce:	e006      	b.n	80042de <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	3b01      	subs	r3, #1
 80042d4:	60fb      	str	r3, [r7, #12]
 80042d6:	69fb      	ldr	r3, [r7, #28]
 80042d8:	b2da      	uxtb	r2, r3
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2b7f      	cmp	r3, #127	@ 0x7f
 80042e2:	d912      	bls.n	800430a <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	09da      	lsrs	r2, r3, #7
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	3b01      	subs	r3, #1
 80042ec:	60fb      	str	r3, [r7, #12]
 80042ee:	b2d2      	uxtb	r2, r2
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	b2db      	uxtb	r3, r3
 80042f8:	68fa      	ldr	r2, [r7, #12]
 80042fa:	3a01      	subs	r2, #1
 80042fc:	60fa      	str	r2, [r7, #12]
 80042fe:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004302:	b2da      	uxtb	r2, r3
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	701a      	strb	r2, [r3, #0]
 8004308:	e006      	b.n	8004318 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	3b01      	subs	r3, #1
 800430e:	60fb      	str	r3, [r7, #12]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	b2da      	uxtb	r2, r3
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004318:	4b37      	ldr	r3, [pc, #220]	@ (80043f8 <_SendPacket+0x1c8>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800431e:	4b35      	ldr	r3, [pc, #212]	@ (80043f4 <_SendPacket+0x1c4>)
 8004320:	68db      	ldr	r3, [r3, #12]
 8004322:	69ba      	ldr	r2, [r7, #24]
 8004324:	1ad3      	subs	r3, r2, r3
 8004326:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	627b      	str	r3, [r7, #36]	@ 0x24
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	623b      	str	r3, [r7, #32]
 8004330:	e00b      	b.n	800434a <_SendPacket+0x11a>
 8004332:	6a3b      	ldr	r3, [r7, #32]
 8004334:	b2da      	uxtb	r2, r3
 8004336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004338:	1c59      	adds	r1, r3, #1
 800433a:	6279      	str	r1, [r7, #36]	@ 0x24
 800433c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004340:	b2d2      	uxtb	r2, r2
 8004342:	701a      	strb	r2, [r3, #0]
 8004344:	6a3b      	ldr	r3, [r7, #32]
 8004346:	09db      	lsrs	r3, r3, #7
 8004348:	623b      	str	r3, [r7, #32]
 800434a:	6a3b      	ldr	r3, [r7, #32]
 800434c:	2b7f      	cmp	r3, #127	@ 0x7f
 800434e:	d8f0      	bhi.n	8004332 <_SendPacket+0x102>
 8004350:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004352:	1c5a      	adds	r2, r3, #1
 8004354:	627a      	str	r2, [r7, #36]	@ 0x24
 8004356:	6a3a      	ldr	r2, [r7, #32]
 8004358:	b2d2      	uxtb	r2, r2
 800435a:	701a      	strb	r2, [r3, #0]
 800435c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800435e:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8004360:	4b24      	ldr	r3, [pc, #144]	@ (80043f4 <_SendPacket+0x1c4>)
 8004362:	785b      	ldrb	r3, [r3, #1]
 8004364:	4618      	mov	r0, r3
 8004366:	68ba      	ldr	r2, [r7, #8]
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	1ad3      	subs	r3, r2, r3
 800436c:	461a      	mov	r2, r3
 800436e:	68f9      	ldr	r1, [r7, #12]
 8004370:	f7fb ff2e 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004374:	4603      	mov	r3, r0
 8004376:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 8004378:	f7ff fd2e 	bl	8003dd8 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 800437c:	693b      	ldr	r3, [r7, #16]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d003      	beq.n	800438a <_SendPacket+0x15a>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8004382:	4a1c      	ldr	r2, [pc, #112]	@ (80043f4 <_SendPacket+0x1c4>)
 8004384:	69bb      	ldr	r3, [r7, #24]
 8004386:	60d3      	str	r3, [r2, #12]
 8004388:	e00b      	b.n	80043a2 <_SendPacket+0x172>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 800438a:	4b1a      	ldr	r3, [pc, #104]	@ (80043f4 <_SendPacket+0x1c4>)
 800438c:	781b      	ldrb	r3, [r3, #0]
 800438e:	3301      	adds	r3, #1
 8004390:	b2da      	uxtb	r2, r3
 8004392:	4b18      	ldr	r3, [pc, #96]	@ (80043f4 <_SendPacket+0x1c4>)
 8004394:	701a      	strb	r2, [r3, #0]
 8004396:	e004      	b.n	80043a2 <_SendPacket+0x172>
    goto SendDone;
 8004398:	bf00      	nop
 800439a:	e002      	b.n	80043a2 <_SendPacket+0x172>
      goto SendDone;
 800439c:	bf00      	nop
 800439e:	e000      	b.n	80043a2 <_SendPacket+0x172>
      goto SendDone;
 80043a0:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80043a2:	4b14      	ldr	r3, [pc, #80]	@ (80043f4 <_SendPacket+0x1c4>)
 80043a4:	7e1b      	ldrb	r3, [r3, #24]
 80043a6:	4619      	mov	r1, r3
 80043a8:	4a14      	ldr	r2, [pc, #80]	@ (80043fc <_SendPacket+0x1cc>)
 80043aa:	460b      	mov	r3, r1
 80043ac:	005b      	lsls	r3, r3, #1
 80043ae:	440b      	add	r3, r1
 80043b0:	00db      	lsls	r3, r3, #3
 80043b2:	4413      	add	r3, r2
 80043b4:	336c      	adds	r3, #108	@ 0x6c
 80043b6:	681a      	ldr	r2, [r3, #0]
 80043b8:	4b0e      	ldr	r3, [pc, #56]	@ (80043f4 <_SendPacket+0x1c4>)
 80043ba:	7e1b      	ldrb	r3, [r3, #24]
 80043bc:	4618      	mov	r0, r3
 80043be:	490f      	ldr	r1, [pc, #60]	@ (80043fc <_SendPacket+0x1cc>)
 80043c0:	4603      	mov	r3, r0
 80043c2:	005b      	lsls	r3, r3, #1
 80043c4:	4403      	add	r3, r0
 80043c6:	00db      	lsls	r3, r3, #3
 80043c8:	440b      	add	r3, r1
 80043ca:	3370      	adds	r3, #112	@ 0x70
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	429a      	cmp	r2, r3
 80043d0:	d00b      	beq.n	80043ea <_SendPacket+0x1ba>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80043d2:	4b08      	ldr	r3, [pc, #32]	@ (80043f4 <_SendPacket+0x1c4>)
 80043d4:	789b      	ldrb	r3, [r3, #2]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d107      	bne.n	80043ea <_SendPacket+0x1ba>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80043da:	4b06      	ldr	r3, [pc, #24]	@ (80043f4 <_SendPacket+0x1c4>)
 80043dc:	2201      	movs	r2, #1
 80043de:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80043e0:	f7ff fe42 	bl	8004068 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80043e4:	4b03      	ldr	r3, [pc, #12]	@ (80043f4 <_SendPacket+0x1c4>)
 80043e6:	2200      	movs	r2, #0
 80043e8:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 80043ea:	bf00      	nop
 80043ec:	3728      	adds	r7, #40	@ 0x28
 80043ee:	46bd      	mov	sp, r7
 80043f0:	bd80      	pop	{r7, pc}
 80043f2:	bf00      	nop
 80043f4:	20013348 	.word	0x20013348
 80043f8:	e0001004 	.word	0xe0001004
 80043fc:	20012e90 	.word	0x20012e90

08004400 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8004400:	b580      	push	{r7, lr}
 8004402:	b084      	sub	sp, #16
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004408:	f3ef 8311 	mrs	r3, BASEPRI
 800440c:	f04f 0120 	mov.w	r1, #32
 8004410:	f381 8811 	msr	BASEPRI, r1
 8004414:	60fb      	str	r3, [r7, #12]
 8004416:	4808      	ldr	r0, [pc, #32]	@ (8004438 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8004418:	f7ff fe19 	bl	800404e <_PreparePacket>
 800441c:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 800441e:	687a      	ldr	r2, [r7, #4]
 8004420:	68b9      	ldr	r1, [r7, #8]
 8004422:	68b8      	ldr	r0, [r7, #8]
 8004424:	f7ff ff04 	bl	8004230 <_SendPacket>
  RECORD_END();
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	f383 8811 	msr	BASEPRI, r3
}
 800442e:	bf00      	nop
 8004430:	3710      	adds	r7, #16
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}
 8004436:	bf00      	nop
 8004438:	20013378 	.word	0x20013378

0800443c <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 800443c:	b580      	push	{r7, lr}
 800443e:	b088      	sub	sp, #32
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
 8004444:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004446:	f3ef 8311 	mrs	r3, BASEPRI
 800444a:	f04f 0120 	mov.w	r1, #32
 800444e:	f381 8811 	msr	BASEPRI, r1
 8004452:	617b      	str	r3, [r7, #20]
 8004454:	4816      	ldr	r0, [pc, #88]	@ (80044b0 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8004456:	f7ff fdfa 	bl	800404e <_PreparePacket>
 800445a:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800445c:	693b      	ldr	r3, [r7, #16]
 800445e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	61fb      	str	r3, [r7, #28]
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	61bb      	str	r3, [r7, #24]
 8004468:	e00b      	b.n	8004482 <SEGGER_SYSVIEW_RecordU32+0x46>
 800446a:	69bb      	ldr	r3, [r7, #24]
 800446c:	b2da      	uxtb	r2, r3
 800446e:	69fb      	ldr	r3, [r7, #28]
 8004470:	1c59      	adds	r1, r3, #1
 8004472:	61f9      	str	r1, [r7, #28]
 8004474:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004478:	b2d2      	uxtb	r2, r2
 800447a:	701a      	strb	r2, [r3, #0]
 800447c:	69bb      	ldr	r3, [r7, #24]
 800447e:	09db      	lsrs	r3, r3, #7
 8004480:	61bb      	str	r3, [r7, #24]
 8004482:	69bb      	ldr	r3, [r7, #24]
 8004484:	2b7f      	cmp	r3, #127	@ 0x7f
 8004486:	d8f0      	bhi.n	800446a <SEGGER_SYSVIEW_RecordU32+0x2e>
 8004488:	69fb      	ldr	r3, [r7, #28]
 800448a:	1c5a      	adds	r2, r3, #1
 800448c:	61fa      	str	r2, [r7, #28]
 800448e:	69ba      	ldr	r2, [r7, #24]
 8004490:	b2d2      	uxtb	r2, r2
 8004492:	701a      	strb	r2, [r3, #0]
 8004494:	69fb      	ldr	r3, [r7, #28]
 8004496:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004498:	687a      	ldr	r2, [r7, #4]
 800449a:	68f9      	ldr	r1, [r7, #12]
 800449c:	6938      	ldr	r0, [r7, #16]
 800449e:	f7ff fec7 	bl	8004230 <_SendPacket>
  RECORD_END();
 80044a2:	697b      	ldr	r3, [r7, #20]
 80044a4:	f383 8811 	msr	BASEPRI, r3
}
 80044a8:	bf00      	nop
 80044aa:	3720      	adds	r7, #32
 80044ac:	46bd      	mov	sp, r7
 80044ae:	bd80      	pop	{r7, pc}
 80044b0:	20013378 	.word	0x20013378

080044b4 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b08c      	sub	sp, #48	@ 0x30
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	60f8      	str	r0, [r7, #12]
 80044bc:	60b9      	str	r1, [r7, #8]
 80044be:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80044c0:	f3ef 8311 	mrs	r3, BASEPRI
 80044c4:	f04f 0120 	mov.w	r1, #32
 80044c8:	f381 8811 	msr	BASEPRI, r1
 80044cc:	61fb      	str	r3, [r7, #28]
 80044ce:	4825      	ldr	r0, [pc, #148]	@ (8004564 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 80044d0:	f7ff fdbd 	bl	800404e <_PreparePacket>
 80044d4:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80044d6:	69bb      	ldr	r3, [r7, #24]
 80044d8:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80044da:	697b      	ldr	r3, [r7, #20]
 80044dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80044e2:	e00b      	b.n	80044fc <SEGGER_SYSVIEW_RecordU32x2+0x48>
 80044e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044e6:	b2da      	uxtb	r2, r3
 80044e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044ea:	1c59      	adds	r1, r3, #1
 80044ec:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80044ee:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80044f2:	b2d2      	uxtb	r2, r2
 80044f4:	701a      	strb	r2, [r3, #0]
 80044f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044f8:	09db      	lsrs	r3, r3, #7
 80044fa:	62bb      	str	r3, [r7, #40]	@ 0x28
 80044fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044fe:	2b7f      	cmp	r3, #127	@ 0x7f
 8004500:	d8f0      	bhi.n	80044e4 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8004502:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004504:	1c5a      	adds	r2, r3, #1
 8004506:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004508:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800450a:	b2d2      	uxtb	r2, r2
 800450c:	701a      	strb	r2, [r3, #0]
 800450e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004510:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8004512:	697b      	ldr	r3, [r7, #20]
 8004514:	627b      	str	r3, [r7, #36]	@ 0x24
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	623b      	str	r3, [r7, #32]
 800451a:	e00b      	b.n	8004534 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 800451c:	6a3b      	ldr	r3, [r7, #32]
 800451e:	b2da      	uxtb	r2, r3
 8004520:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004522:	1c59      	adds	r1, r3, #1
 8004524:	6279      	str	r1, [r7, #36]	@ 0x24
 8004526:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800452a:	b2d2      	uxtb	r2, r2
 800452c:	701a      	strb	r2, [r3, #0]
 800452e:	6a3b      	ldr	r3, [r7, #32]
 8004530:	09db      	lsrs	r3, r3, #7
 8004532:	623b      	str	r3, [r7, #32]
 8004534:	6a3b      	ldr	r3, [r7, #32]
 8004536:	2b7f      	cmp	r3, #127	@ 0x7f
 8004538:	d8f0      	bhi.n	800451c <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800453a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800453c:	1c5a      	adds	r2, r3, #1
 800453e:	627a      	str	r2, [r7, #36]	@ 0x24
 8004540:	6a3a      	ldr	r2, [r7, #32]
 8004542:	b2d2      	uxtb	r2, r2
 8004544:	701a      	strb	r2, [r3, #0]
 8004546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004548:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800454a:	68fa      	ldr	r2, [r7, #12]
 800454c:	6979      	ldr	r1, [r7, #20]
 800454e:	69b8      	ldr	r0, [r7, #24]
 8004550:	f7ff fe6e 	bl	8004230 <_SendPacket>
  RECORD_END();
 8004554:	69fb      	ldr	r3, [r7, #28]
 8004556:	f383 8811 	msr	BASEPRI, r3
}
 800455a:	bf00      	nop
 800455c:	3730      	adds	r7, #48	@ 0x30
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}
 8004562:	bf00      	nop
 8004564:	20013378 	.word	0x20013378

08004568 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8004568:	b580      	push	{r7, lr}
 800456a:	b08c      	sub	sp, #48	@ 0x30
 800456c:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 800456e:	4b59      	ldr	r3, [pc, #356]	@ (80046d4 <SEGGER_SYSVIEW_Start+0x16c>)
 8004570:	2201      	movs	r2, #1
 8004572:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8004574:	f3ef 8311 	mrs	r3, BASEPRI
 8004578:	f04f 0120 	mov.w	r1, #32
 800457c:	f381 8811 	msr	BASEPRI, r1
 8004580:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8004582:	4b54      	ldr	r3, [pc, #336]	@ (80046d4 <SEGGER_SYSVIEW_Start+0x16c>)
 8004584:	785b      	ldrb	r3, [r3, #1]
 8004586:	220a      	movs	r2, #10
 8004588:	4953      	ldr	r1, [pc, #332]	@ (80046d8 <SEGGER_SYSVIEW_Start+0x170>)
 800458a:	4618      	mov	r0, r3
 800458c:	f7fb fe20 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 8004596:	f7ff fc1f 	bl	8003dd8 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 800459a:	200a      	movs	r0, #10
 800459c:	f7ff ff30 	bl	8004400 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80045a0:	f3ef 8311 	mrs	r3, BASEPRI
 80045a4:	f04f 0120 	mov.w	r1, #32
 80045a8:	f381 8811 	msr	BASEPRI, r1
 80045ac:	60bb      	str	r3, [r7, #8]
 80045ae:	484b      	ldr	r0, [pc, #300]	@ (80046dc <SEGGER_SYSVIEW_Start+0x174>)
 80045b0:	f7ff fd4d 	bl	800404e <_PreparePacket>
 80045b4:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80045be:	4b45      	ldr	r3, [pc, #276]	@ (80046d4 <SEGGER_SYSVIEW_Start+0x16c>)
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80045c4:	e00b      	b.n	80045de <SEGGER_SYSVIEW_Start+0x76>
 80045c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045c8:	b2da      	uxtb	r2, r3
 80045ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045cc:	1c59      	adds	r1, r3, #1
 80045ce:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80045d0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80045d4:	b2d2      	uxtb	r2, r2
 80045d6:	701a      	strb	r2, [r3, #0]
 80045d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045da:	09db      	lsrs	r3, r3, #7
 80045dc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80045de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045e0:	2b7f      	cmp	r3, #127	@ 0x7f
 80045e2:	d8f0      	bhi.n	80045c6 <SEGGER_SYSVIEW_Start+0x5e>
 80045e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045e6:	1c5a      	adds	r2, r3, #1
 80045e8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80045ea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80045ec:	b2d2      	uxtb	r2, r2
 80045ee:	701a      	strb	r2, [r3, #0]
 80045f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045f2:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80045f8:	4b36      	ldr	r3, [pc, #216]	@ (80046d4 <SEGGER_SYSVIEW_Start+0x16c>)
 80045fa:	689b      	ldr	r3, [r3, #8]
 80045fc:	623b      	str	r3, [r7, #32]
 80045fe:	e00b      	b.n	8004618 <SEGGER_SYSVIEW_Start+0xb0>
 8004600:	6a3b      	ldr	r3, [r7, #32]
 8004602:	b2da      	uxtb	r2, r3
 8004604:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004606:	1c59      	adds	r1, r3, #1
 8004608:	6279      	str	r1, [r7, #36]	@ 0x24
 800460a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800460e:	b2d2      	uxtb	r2, r2
 8004610:	701a      	strb	r2, [r3, #0]
 8004612:	6a3b      	ldr	r3, [r7, #32]
 8004614:	09db      	lsrs	r3, r3, #7
 8004616:	623b      	str	r3, [r7, #32]
 8004618:	6a3b      	ldr	r3, [r7, #32]
 800461a:	2b7f      	cmp	r3, #127	@ 0x7f
 800461c:	d8f0      	bhi.n	8004600 <SEGGER_SYSVIEW_Start+0x98>
 800461e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004620:	1c5a      	adds	r2, r3, #1
 8004622:	627a      	str	r2, [r7, #36]	@ 0x24
 8004624:	6a3a      	ldr	r2, [r7, #32]
 8004626:	b2d2      	uxtb	r2, r2
 8004628:	701a      	strb	r2, [r3, #0]
 800462a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800462c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	61fb      	str	r3, [r7, #28]
 8004632:	4b28      	ldr	r3, [pc, #160]	@ (80046d4 <SEGGER_SYSVIEW_Start+0x16c>)
 8004634:	691b      	ldr	r3, [r3, #16]
 8004636:	61bb      	str	r3, [r7, #24]
 8004638:	e00b      	b.n	8004652 <SEGGER_SYSVIEW_Start+0xea>
 800463a:	69bb      	ldr	r3, [r7, #24]
 800463c:	b2da      	uxtb	r2, r3
 800463e:	69fb      	ldr	r3, [r7, #28]
 8004640:	1c59      	adds	r1, r3, #1
 8004642:	61f9      	str	r1, [r7, #28]
 8004644:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004648:	b2d2      	uxtb	r2, r2
 800464a:	701a      	strb	r2, [r3, #0]
 800464c:	69bb      	ldr	r3, [r7, #24]
 800464e:	09db      	lsrs	r3, r3, #7
 8004650:	61bb      	str	r3, [r7, #24]
 8004652:	69bb      	ldr	r3, [r7, #24]
 8004654:	2b7f      	cmp	r3, #127	@ 0x7f
 8004656:	d8f0      	bhi.n	800463a <SEGGER_SYSVIEW_Start+0xd2>
 8004658:	69fb      	ldr	r3, [r7, #28]
 800465a:	1c5a      	adds	r2, r3, #1
 800465c:	61fa      	str	r2, [r7, #28]
 800465e:	69ba      	ldr	r2, [r7, #24]
 8004660:	b2d2      	uxtb	r2, r2
 8004662:	701a      	strb	r2, [r3, #0]
 8004664:	69fb      	ldr	r3, [r7, #28]
 8004666:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	617b      	str	r3, [r7, #20]
 800466c:	2300      	movs	r3, #0
 800466e:	613b      	str	r3, [r7, #16]
 8004670:	e00b      	b.n	800468a <SEGGER_SYSVIEW_Start+0x122>
 8004672:	693b      	ldr	r3, [r7, #16]
 8004674:	b2da      	uxtb	r2, r3
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	1c59      	adds	r1, r3, #1
 800467a:	6179      	str	r1, [r7, #20]
 800467c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004680:	b2d2      	uxtb	r2, r2
 8004682:	701a      	strb	r2, [r3, #0]
 8004684:	693b      	ldr	r3, [r7, #16]
 8004686:	09db      	lsrs	r3, r3, #7
 8004688:	613b      	str	r3, [r7, #16]
 800468a:	693b      	ldr	r3, [r7, #16]
 800468c:	2b7f      	cmp	r3, #127	@ 0x7f
 800468e:	d8f0      	bhi.n	8004672 <SEGGER_SYSVIEW_Start+0x10a>
 8004690:	697b      	ldr	r3, [r7, #20]
 8004692:	1c5a      	adds	r2, r3, #1
 8004694:	617a      	str	r2, [r7, #20]
 8004696:	693a      	ldr	r2, [r7, #16]
 8004698:	b2d2      	uxtb	r2, r2
 800469a:	701a      	strb	r2, [r3, #0]
 800469c:	697b      	ldr	r3, [r7, #20]
 800469e:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80046a0:	2218      	movs	r2, #24
 80046a2:	6839      	ldr	r1, [r7, #0]
 80046a4:	6878      	ldr	r0, [r7, #4]
 80046a6:	f7ff fdc3 	bl	8004230 <_SendPacket>
      RECORD_END();
 80046aa:	68bb      	ldr	r3, [r7, #8]
 80046ac:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 80046b0:	4b08      	ldr	r3, [pc, #32]	@ (80046d4 <SEGGER_SYSVIEW_Start+0x16c>)
 80046b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d002      	beq.n	80046be <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 80046b8:	4b06      	ldr	r3, [pc, #24]	@ (80046d4 <SEGGER_SYSVIEW_Start+0x16c>)
 80046ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046bc:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 80046be:	f000 f9c7 	bl	8004a50 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 80046c2:	f000 f9b1 	bl	8004a28 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 80046c6:	f000 fbef 	bl	8004ea8 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 80046ca:	bf00      	nop
 80046cc:	3730      	adds	r7, #48	@ 0x30
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}
 80046d2:	bf00      	nop
 80046d4:	20013348 	.word	0x20013348
 80046d8:	08005130 	.word	0x08005130
 80046dc:	20013378 	.word	0x20013378

080046e0 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b082      	sub	sp, #8
 80046e4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80046e6:	f3ef 8311 	mrs	r3, BASEPRI
 80046ea:	f04f 0120 	mov.w	r1, #32
 80046ee:	f381 8811 	msr	BASEPRI, r1
 80046f2:	607b      	str	r3, [r7, #4]
 80046f4:	480b      	ldr	r0, [pc, #44]	@ (8004724 <SEGGER_SYSVIEW_Stop+0x44>)
 80046f6:	f7ff fcaa 	bl	800404e <_PreparePacket>
 80046fa:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 80046fc:	4b0a      	ldr	r3, [pc, #40]	@ (8004728 <SEGGER_SYSVIEW_Stop+0x48>)
 80046fe:	781b      	ldrb	r3, [r3, #0]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d007      	beq.n	8004714 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8004704:	220b      	movs	r2, #11
 8004706:	6839      	ldr	r1, [r7, #0]
 8004708:	6838      	ldr	r0, [r7, #0]
 800470a:	f7ff fd91 	bl	8004230 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800470e:	4b06      	ldr	r3, [pc, #24]	@ (8004728 <SEGGER_SYSVIEW_Stop+0x48>)
 8004710:	2200      	movs	r2, #0
 8004712:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	f383 8811 	msr	BASEPRI, r3
}
 800471a:	bf00      	nop
 800471c:	3708      	adds	r7, #8
 800471e:	46bd      	mov	sp, r7
 8004720:	bd80      	pop	{r7, pc}
 8004722:	bf00      	nop
 8004724:	20013378 	.word	0x20013378
 8004728:	20013348 	.word	0x20013348

0800472c <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 800472c:	b580      	push	{r7, lr}
 800472e:	b08c      	sub	sp, #48	@ 0x30
 8004730:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004732:	f3ef 8311 	mrs	r3, BASEPRI
 8004736:	f04f 0120 	mov.w	r1, #32
 800473a:	f381 8811 	msr	BASEPRI, r1
 800473e:	60fb      	str	r3, [r7, #12]
 8004740:	4845      	ldr	r0, [pc, #276]	@ (8004858 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8004742:	f7ff fc84 	bl	800404e <_PreparePacket>
 8004746:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004750:	4b42      	ldr	r3, [pc, #264]	@ (800485c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004756:	e00b      	b.n	8004770 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8004758:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800475a:	b2da      	uxtb	r2, r3
 800475c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800475e:	1c59      	adds	r1, r3, #1
 8004760:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8004762:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004766:	b2d2      	uxtb	r2, r2
 8004768:	701a      	strb	r2, [r3, #0]
 800476a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800476c:	09db      	lsrs	r3, r3, #7
 800476e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004770:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004772:	2b7f      	cmp	r3, #127	@ 0x7f
 8004774:	d8f0      	bhi.n	8004758 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8004776:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004778:	1c5a      	adds	r2, r3, #1
 800477a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800477c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800477e:	b2d2      	uxtb	r2, r2
 8004780:	701a      	strb	r2, [r3, #0]
 8004782:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004784:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	627b      	str	r3, [r7, #36]	@ 0x24
 800478a:	4b34      	ldr	r3, [pc, #208]	@ (800485c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800478c:	689b      	ldr	r3, [r3, #8]
 800478e:	623b      	str	r3, [r7, #32]
 8004790:	e00b      	b.n	80047aa <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8004792:	6a3b      	ldr	r3, [r7, #32]
 8004794:	b2da      	uxtb	r2, r3
 8004796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004798:	1c59      	adds	r1, r3, #1
 800479a:	6279      	str	r1, [r7, #36]	@ 0x24
 800479c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80047a0:	b2d2      	uxtb	r2, r2
 80047a2:	701a      	strb	r2, [r3, #0]
 80047a4:	6a3b      	ldr	r3, [r7, #32]
 80047a6:	09db      	lsrs	r3, r3, #7
 80047a8:	623b      	str	r3, [r7, #32]
 80047aa:	6a3b      	ldr	r3, [r7, #32]
 80047ac:	2b7f      	cmp	r3, #127	@ 0x7f
 80047ae:	d8f0      	bhi.n	8004792 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 80047b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047b2:	1c5a      	adds	r2, r3, #1
 80047b4:	627a      	str	r2, [r7, #36]	@ 0x24
 80047b6:	6a3a      	ldr	r2, [r7, #32]
 80047b8:	b2d2      	uxtb	r2, r2
 80047ba:	701a      	strb	r2, [r3, #0]
 80047bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047be:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	61fb      	str	r3, [r7, #28]
 80047c4:	4b25      	ldr	r3, [pc, #148]	@ (800485c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80047c6:	691b      	ldr	r3, [r3, #16]
 80047c8:	61bb      	str	r3, [r7, #24]
 80047ca:	e00b      	b.n	80047e4 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 80047cc:	69bb      	ldr	r3, [r7, #24]
 80047ce:	b2da      	uxtb	r2, r3
 80047d0:	69fb      	ldr	r3, [r7, #28]
 80047d2:	1c59      	adds	r1, r3, #1
 80047d4:	61f9      	str	r1, [r7, #28]
 80047d6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80047da:	b2d2      	uxtb	r2, r2
 80047dc:	701a      	strb	r2, [r3, #0]
 80047de:	69bb      	ldr	r3, [r7, #24]
 80047e0:	09db      	lsrs	r3, r3, #7
 80047e2:	61bb      	str	r3, [r7, #24]
 80047e4:	69bb      	ldr	r3, [r7, #24]
 80047e6:	2b7f      	cmp	r3, #127	@ 0x7f
 80047e8:	d8f0      	bhi.n	80047cc <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 80047ea:	69fb      	ldr	r3, [r7, #28]
 80047ec:	1c5a      	adds	r2, r3, #1
 80047ee:	61fa      	str	r2, [r7, #28]
 80047f0:	69ba      	ldr	r2, [r7, #24]
 80047f2:	b2d2      	uxtb	r2, r2
 80047f4:	701a      	strb	r2, [r3, #0]
 80047f6:	69fb      	ldr	r3, [r7, #28]
 80047f8:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	617b      	str	r3, [r7, #20]
 80047fe:	2300      	movs	r3, #0
 8004800:	613b      	str	r3, [r7, #16]
 8004802:	e00b      	b.n	800481c <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8004804:	693b      	ldr	r3, [r7, #16]
 8004806:	b2da      	uxtb	r2, r3
 8004808:	697b      	ldr	r3, [r7, #20]
 800480a:	1c59      	adds	r1, r3, #1
 800480c:	6179      	str	r1, [r7, #20]
 800480e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004812:	b2d2      	uxtb	r2, r2
 8004814:	701a      	strb	r2, [r3, #0]
 8004816:	693b      	ldr	r3, [r7, #16]
 8004818:	09db      	lsrs	r3, r3, #7
 800481a:	613b      	str	r3, [r7, #16]
 800481c:	693b      	ldr	r3, [r7, #16]
 800481e:	2b7f      	cmp	r3, #127	@ 0x7f
 8004820:	d8f0      	bhi.n	8004804 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8004822:	697b      	ldr	r3, [r7, #20]
 8004824:	1c5a      	adds	r2, r3, #1
 8004826:	617a      	str	r2, [r7, #20]
 8004828:	693a      	ldr	r2, [r7, #16]
 800482a:	b2d2      	uxtb	r2, r2
 800482c:	701a      	strb	r2, [r3, #0]
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8004832:	2218      	movs	r2, #24
 8004834:	6879      	ldr	r1, [r7, #4]
 8004836:	68b8      	ldr	r0, [r7, #8]
 8004838:	f7ff fcfa 	bl	8004230 <_SendPacket>
  RECORD_END();
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8004842:	4b06      	ldr	r3, [pc, #24]	@ (800485c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004844:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004846:	2b00      	cmp	r3, #0
 8004848:	d002      	beq.n	8004850 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 800484a:	4b04      	ldr	r3, [pc, #16]	@ (800485c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800484c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800484e:	4798      	blx	r3
  }
}
 8004850:	bf00      	nop
 8004852:	3730      	adds	r7, #48	@ 0x30
 8004854:	46bd      	mov	sp, r7
 8004856:	bd80      	pop	{r7, pc}
 8004858:	20013378 	.word	0x20013378
 800485c:	20013348 	.word	0x20013348

08004860 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8004860:	b580      	push	{r7, lr}
 8004862:	b092      	sub	sp, #72	@ 0x48
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8004868:	f3ef 8311 	mrs	r3, BASEPRI
 800486c:	f04f 0120 	mov.w	r1, #32
 8004870:	f381 8811 	msr	BASEPRI, r1
 8004874:	617b      	str	r3, [r7, #20]
 8004876:	486a      	ldr	r0, [pc, #424]	@ (8004a20 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8004878:	f7ff fbe9 	bl	800404e <_PreparePacket>
 800487c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800487e:	693b      	ldr	r3, [r7, #16]
 8004880:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	647b      	str	r3, [r7, #68]	@ 0x44
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681a      	ldr	r2, [r3, #0]
 800488a:	4b66      	ldr	r3, [pc, #408]	@ (8004a24 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800488c:	691b      	ldr	r3, [r3, #16]
 800488e:	1ad3      	subs	r3, r2, r3
 8004890:	643b      	str	r3, [r7, #64]	@ 0x40
 8004892:	e00b      	b.n	80048ac <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8004894:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004896:	b2da      	uxtb	r2, r3
 8004898:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800489a:	1c59      	adds	r1, r3, #1
 800489c:	6479      	str	r1, [r7, #68]	@ 0x44
 800489e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80048a2:	b2d2      	uxtb	r2, r2
 80048a4:	701a      	strb	r2, [r3, #0]
 80048a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80048a8:	09db      	lsrs	r3, r3, #7
 80048aa:	643b      	str	r3, [r7, #64]	@ 0x40
 80048ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80048ae:	2b7f      	cmp	r3, #127	@ 0x7f
 80048b0:	d8f0      	bhi.n	8004894 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 80048b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80048b4:	1c5a      	adds	r2, r3, #1
 80048b6:	647a      	str	r2, [r7, #68]	@ 0x44
 80048b8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80048ba:	b2d2      	uxtb	r2, r2
 80048bc:	701a      	strb	r2, [r3, #0]
 80048be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80048c0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	689b      	ldr	r3, [r3, #8]
 80048ca:	63bb      	str	r3, [r7, #56]	@ 0x38
 80048cc:	e00b      	b.n	80048e6 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 80048ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048d0:	b2da      	uxtb	r2, r3
 80048d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80048d4:	1c59      	adds	r1, r3, #1
 80048d6:	63f9      	str	r1, [r7, #60]	@ 0x3c
 80048d8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80048dc:	b2d2      	uxtb	r2, r2
 80048de:	701a      	strb	r2, [r3, #0]
 80048e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048e2:	09db      	lsrs	r3, r3, #7
 80048e4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80048e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048e8:	2b7f      	cmp	r3, #127	@ 0x7f
 80048ea:	d8f0      	bhi.n	80048ce <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 80048ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80048ee:	1c5a      	adds	r2, r3, #1
 80048f0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80048f2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80048f4:	b2d2      	uxtb	r2, r2
 80048f6:	701a      	strb	r2, [r3, #0]
 80048f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80048fa:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	2220      	movs	r2, #32
 8004902:	4619      	mov	r1, r3
 8004904:	68f8      	ldr	r0, [r7, #12]
 8004906:	f7ff fb55 	bl	8003fb4 <_EncodeStr>
 800490a:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 800490c:	2209      	movs	r2, #9
 800490e:	68f9      	ldr	r1, [r7, #12]
 8004910:	6938      	ldr	r0, [r7, #16]
 8004912:	f7ff fc8d 	bl	8004230 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8004916:	693b      	ldr	r3, [r7, #16]
 8004918:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	637b      	str	r3, [r7, #52]	@ 0x34
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681a      	ldr	r2, [r3, #0]
 8004922:	4b40      	ldr	r3, [pc, #256]	@ (8004a24 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8004924:	691b      	ldr	r3, [r3, #16]
 8004926:	1ad3      	subs	r3, r2, r3
 8004928:	633b      	str	r3, [r7, #48]	@ 0x30
 800492a:	e00b      	b.n	8004944 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 800492c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800492e:	b2da      	uxtb	r2, r3
 8004930:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004932:	1c59      	adds	r1, r3, #1
 8004934:	6379      	str	r1, [r7, #52]	@ 0x34
 8004936:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800493a:	b2d2      	uxtb	r2, r2
 800493c:	701a      	strb	r2, [r3, #0]
 800493e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004940:	09db      	lsrs	r3, r3, #7
 8004942:	633b      	str	r3, [r7, #48]	@ 0x30
 8004944:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004946:	2b7f      	cmp	r3, #127	@ 0x7f
 8004948:	d8f0      	bhi.n	800492c <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 800494a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800494c:	1c5a      	adds	r2, r3, #1
 800494e:	637a      	str	r2, [r7, #52]	@ 0x34
 8004950:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004952:	b2d2      	uxtb	r2, r2
 8004954:	701a      	strb	r2, [r3, #0]
 8004956:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004958:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	68db      	ldr	r3, [r3, #12]
 8004962:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004964:	e00b      	b.n	800497e <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8004966:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004968:	b2da      	uxtb	r2, r3
 800496a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800496c:	1c59      	adds	r1, r3, #1
 800496e:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8004970:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004974:	b2d2      	uxtb	r2, r2
 8004976:	701a      	strb	r2, [r3, #0]
 8004978:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800497a:	09db      	lsrs	r3, r3, #7
 800497c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800497e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004980:	2b7f      	cmp	r3, #127	@ 0x7f
 8004982:	d8f0      	bhi.n	8004966 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8004984:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004986:	1c5a      	adds	r2, r3, #1
 8004988:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800498a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800498c:	b2d2      	uxtb	r2, r2
 800498e:	701a      	strb	r2, [r3, #0]
 8004990:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004992:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	627b      	str	r3, [r7, #36]	@ 0x24
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	691b      	ldr	r3, [r3, #16]
 800499c:	623b      	str	r3, [r7, #32]
 800499e:	e00b      	b.n	80049b8 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 80049a0:	6a3b      	ldr	r3, [r7, #32]
 80049a2:	b2da      	uxtb	r2, r3
 80049a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049a6:	1c59      	adds	r1, r3, #1
 80049a8:	6279      	str	r1, [r7, #36]	@ 0x24
 80049aa:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80049ae:	b2d2      	uxtb	r2, r2
 80049b0:	701a      	strb	r2, [r3, #0]
 80049b2:	6a3b      	ldr	r3, [r7, #32]
 80049b4:	09db      	lsrs	r3, r3, #7
 80049b6:	623b      	str	r3, [r7, #32]
 80049b8:	6a3b      	ldr	r3, [r7, #32]
 80049ba:	2b7f      	cmp	r3, #127	@ 0x7f
 80049bc:	d8f0      	bhi.n	80049a0 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 80049be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049c0:	1c5a      	adds	r2, r3, #1
 80049c2:	627a      	str	r2, [r7, #36]	@ 0x24
 80049c4:	6a3a      	ldr	r2, [r7, #32]
 80049c6:	b2d2      	uxtb	r2, r2
 80049c8:	701a      	strb	r2, [r3, #0]
 80049ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049cc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	61fb      	str	r3, [r7, #28]
 80049d2:	2300      	movs	r3, #0
 80049d4:	61bb      	str	r3, [r7, #24]
 80049d6:	e00b      	b.n	80049f0 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 80049d8:	69bb      	ldr	r3, [r7, #24]
 80049da:	b2da      	uxtb	r2, r3
 80049dc:	69fb      	ldr	r3, [r7, #28]
 80049de:	1c59      	adds	r1, r3, #1
 80049e0:	61f9      	str	r1, [r7, #28]
 80049e2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80049e6:	b2d2      	uxtb	r2, r2
 80049e8:	701a      	strb	r2, [r3, #0]
 80049ea:	69bb      	ldr	r3, [r7, #24]
 80049ec:	09db      	lsrs	r3, r3, #7
 80049ee:	61bb      	str	r3, [r7, #24]
 80049f0:	69bb      	ldr	r3, [r7, #24]
 80049f2:	2b7f      	cmp	r3, #127	@ 0x7f
 80049f4:	d8f0      	bhi.n	80049d8 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 80049f6:	69fb      	ldr	r3, [r7, #28]
 80049f8:	1c5a      	adds	r2, r3, #1
 80049fa:	61fa      	str	r2, [r7, #28]
 80049fc:	69ba      	ldr	r2, [r7, #24]
 80049fe:	b2d2      	uxtb	r2, r2
 8004a00:	701a      	strb	r2, [r3, #0]
 8004a02:	69fb      	ldr	r3, [r7, #28]
 8004a04:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8004a06:	2215      	movs	r2, #21
 8004a08:	68f9      	ldr	r1, [r7, #12]
 8004a0a:	6938      	ldr	r0, [r7, #16]
 8004a0c:	f7ff fc10 	bl	8004230 <_SendPacket>
  RECORD_END();
 8004a10:	697b      	ldr	r3, [r7, #20]
 8004a12:	f383 8811 	msr	BASEPRI, r3
}
 8004a16:	bf00      	nop
 8004a18:	3748      	adds	r7, #72	@ 0x48
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	bd80      	pop	{r7, pc}
 8004a1e:	bf00      	nop
 8004a20:	20013378 	.word	0x20013378
 8004a24:	20013348 	.word	0x20013348

08004a28 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8004a2c:	4b07      	ldr	r3, [pc, #28]	@ (8004a4c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004a2e:	6a1b      	ldr	r3, [r3, #32]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d008      	beq.n	8004a46 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8004a34:	4b05      	ldr	r3, [pc, #20]	@ (8004a4c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004a36:	6a1b      	ldr	r3, [r3, #32]
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d003      	beq.n	8004a46 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8004a3e:	4b03      	ldr	r3, [pc, #12]	@ (8004a4c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004a40:	6a1b      	ldr	r3, [r3, #32]
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	4798      	blx	r3
  }
}
 8004a46:	bf00      	nop
 8004a48:	bd80      	pop	{r7, pc}
 8004a4a:	bf00      	nop
 8004a4c:	20013348 	.word	0x20013348

08004a50 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8004a50:	b590      	push	{r4, r7, lr}
 8004a52:	b083      	sub	sp, #12
 8004a54:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8004a56:	4b15      	ldr	r3, [pc, #84]	@ (8004aac <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004a58:	6a1b      	ldr	r3, [r3, #32]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d01a      	beq.n	8004a94 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8004a5e:	4b13      	ldr	r3, [pc, #76]	@ (8004aac <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004a60:	6a1b      	ldr	r3, [r3, #32]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d015      	beq.n	8004a94 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8004a68:	4b10      	ldr	r3, [pc, #64]	@ (8004aac <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004a6a:	6a1b      	ldr	r3, [r3, #32]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4798      	blx	r3
 8004a70:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8004a74:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8004a76:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004a7a:	f04f 0200 	mov.w	r2, #0
 8004a7e:	f04f 0300 	mov.w	r3, #0
 8004a82:	000a      	movs	r2, r1
 8004a84:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8004a86:	4613      	mov	r3, r2
 8004a88:	461a      	mov	r2, r3
 8004a8a:	4621      	mov	r1, r4
 8004a8c:	200d      	movs	r0, #13
 8004a8e:	f7ff fd11 	bl	80044b4 <SEGGER_SYSVIEW_RecordU32x2>
 8004a92:	e006      	b.n	8004aa2 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8004a94:	4b06      	ldr	r3, [pc, #24]	@ (8004ab0 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4619      	mov	r1, r3
 8004a9a:	200c      	movs	r0, #12
 8004a9c:	f7ff fcce 	bl	800443c <SEGGER_SYSVIEW_RecordU32>
  }
}
 8004aa0:	bf00      	nop
 8004aa2:	bf00      	nop
 8004aa4:	370c      	adds	r7, #12
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bd90      	pop	{r4, r7, pc}
 8004aaa:	bf00      	nop
 8004aac:	20013348 	.word	0x20013348
 8004ab0:	e0001004 	.word	0xe0001004

08004ab4 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b086      	sub	sp, #24
 8004ab8:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004aba:	f3ef 8311 	mrs	r3, BASEPRI
 8004abe:	f04f 0120 	mov.w	r1, #32
 8004ac2:	f381 8811 	msr	BASEPRI, r1
 8004ac6:	60fb      	str	r3, [r7, #12]
 8004ac8:	4819      	ldr	r0, [pc, #100]	@ (8004b30 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8004aca:	f7ff fac0 	bl	800404e <_PreparePacket>
 8004ace:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8004ad4:	4b17      	ldr	r3, [pc, #92]	@ (8004b34 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004adc:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	617b      	str	r3, [r7, #20]
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	613b      	str	r3, [r7, #16]
 8004ae6:	e00b      	b.n	8004b00 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8004ae8:	693b      	ldr	r3, [r7, #16]
 8004aea:	b2da      	uxtb	r2, r3
 8004aec:	697b      	ldr	r3, [r7, #20]
 8004aee:	1c59      	adds	r1, r3, #1
 8004af0:	6179      	str	r1, [r7, #20]
 8004af2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004af6:	b2d2      	uxtb	r2, r2
 8004af8:	701a      	strb	r2, [r3, #0]
 8004afa:	693b      	ldr	r3, [r7, #16]
 8004afc:	09db      	lsrs	r3, r3, #7
 8004afe:	613b      	str	r3, [r7, #16]
 8004b00:	693b      	ldr	r3, [r7, #16]
 8004b02:	2b7f      	cmp	r3, #127	@ 0x7f
 8004b04:	d8f0      	bhi.n	8004ae8 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8004b06:	697b      	ldr	r3, [r7, #20]
 8004b08:	1c5a      	adds	r2, r3, #1
 8004b0a:	617a      	str	r2, [r7, #20]
 8004b0c:	693a      	ldr	r2, [r7, #16]
 8004b0e:	b2d2      	uxtb	r2, r2
 8004b10:	701a      	strb	r2, [r3, #0]
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8004b16:	2202      	movs	r2, #2
 8004b18:	6879      	ldr	r1, [r7, #4]
 8004b1a:	68b8      	ldr	r0, [r7, #8]
 8004b1c:	f7ff fb88 	bl	8004230 <_SendPacket>
  RECORD_END();
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	f383 8811 	msr	BASEPRI, r3
}
 8004b26:	bf00      	nop
 8004b28:	3718      	adds	r7, #24
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	bd80      	pop	{r7, pc}
 8004b2e:	bf00      	nop
 8004b30:	20013378 	.word	0x20013378
 8004b34:	e000ed04 	.word	0xe000ed04

08004b38 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b082      	sub	sp, #8
 8004b3c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004b3e:	f3ef 8311 	mrs	r3, BASEPRI
 8004b42:	f04f 0120 	mov.w	r1, #32
 8004b46:	f381 8811 	msr	BASEPRI, r1
 8004b4a:	607b      	str	r3, [r7, #4]
 8004b4c:	4807      	ldr	r0, [pc, #28]	@ (8004b6c <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8004b4e:	f7ff fa7e 	bl	800404e <_PreparePacket>
 8004b52:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8004b54:	2203      	movs	r2, #3
 8004b56:	6839      	ldr	r1, [r7, #0]
 8004b58:	6838      	ldr	r0, [r7, #0]
 8004b5a:	f7ff fb69 	bl	8004230 <_SendPacket>
  RECORD_END();
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	f383 8811 	msr	BASEPRI, r3
}
 8004b64:	bf00      	nop
 8004b66:	3708      	adds	r7, #8
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	bd80      	pop	{r7, pc}
 8004b6c:	20013378 	.word	0x20013378

08004b70 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b082      	sub	sp, #8
 8004b74:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004b76:	f3ef 8311 	mrs	r3, BASEPRI
 8004b7a:	f04f 0120 	mov.w	r1, #32
 8004b7e:	f381 8811 	msr	BASEPRI, r1
 8004b82:	607b      	str	r3, [r7, #4]
 8004b84:	4807      	ldr	r0, [pc, #28]	@ (8004ba4 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8004b86:	f7ff fa62 	bl	800404e <_PreparePacket>
 8004b8a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8004b8c:	2212      	movs	r2, #18
 8004b8e:	6839      	ldr	r1, [r7, #0]
 8004b90:	6838      	ldr	r0, [r7, #0]
 8004b92:	f7ff fb4d 	bl	8004230 <_SendPacket>
  RECORD_END();
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	f383 8811 	msr	BASEPRI, r3
}
 8004b9c:	bf00      	nop
 8004b9e:	3708      	adds	r7, #8
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	bd80      	pop	{r7, pc}
 8004ba4:	20013378 	.word	0x20013378

08004ba8 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b082      	sub	sp, #8
 8004bac:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004bae:	f3ef 8311 	mrs	r3, BASEPRI
 8004bb2:	f04f 0120 	mov.w	r1, #32
 8004bb6:	f381 8811 	msr	BASEPRI, r1
 8004bba:	607b      	str	r3, [r7, #4]
 8004bbc:	4807      	ldr	r0, [pc, #28]	@ (8004bdc <SEGGER_SYSVIEW_OnIdle+0x34>)
 8004bbe:	f7ff fa46 	bl	800404e <_PreparePacket>
 8004bc2:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8004bc4:	2211      	movs	r2, #17
 8004bc6:	6839      	ldr	r1, [r7, #0]
 8004bc8:	6838      	ldr	r0, [r7, #0]
 8004bca:	f7ff fb31 	bl	8004230 <_SendPacket>
  RECORD_END();
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	f383 8811 	msr	BASEPRI, r3
}
 8004bd4:	bf00      	nop
 8004bd6:	3708      	adds	r7, #8
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	bd80      	pop	{r7, pc}
 8004bdc:	20013378 	.word	0x20013378

08004be0 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b088      	sub	sp, #32
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004be8:	f3ef 8311 	mrs	r3, BASEPRI
 8004bec:	f04f 0120 	mov.w	r1, #32
 8004bf0:	f381 8811 	msr	BASEPRI, r1
 8004bf4:	617b      	str	r3, [r7, #20]
 8004bf6:	4819      	ldr	r0, [pc, #100]	@ (8004c5c <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8004bf8:	f7ff fa29 	bl	800404e <_PreparePacket>
 8004bfc:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004bfe:	693b      	ldr	r3, [r7, #16]
 8004c00:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004c02:	4b17      	ldr	r3, [pc, #92]	@ (8004c60 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8004c04:	691b      	ldr	r3, [r3, #16]
 8004c06:	687a      	ldr	r2, [r7, #4]
 8004c08:	1ad3      	subs	r3, r2, r3
 8004c0a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	61fb      	str	r3, [r7, #28]
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	61bb      	str	r3, [r7, #24]
 8004c14:	e00b      	b.n	8004c2e <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8004c16:	69bb      	ldr	r3, [r7, #24]
 8004c18:	b2da      	uxtb	r2, r3
 8004c1a:	69fb      	ldr	r3, [r7, #28]
 8004c1c:	1c59      	adds	r1, r3, #1
 8004c1e:	61f9      	str	r1, [r7, #28]
 8004c20:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004c24:	b2d2      	uxtb	r2, r2
 8004c26:	701a      	strb	r2, [r3, #0]
 8004c28:	69bb      	ldr	r3, [r7, #24]
 8004c2a:	09db      	lsrs	r3, r3, #7
 8004c2c:	61bb      	str	r3, [r7, #24]
 8004c2e:	69bb      	ldr	r3, [r7, #24]
 8004c30:	2b7f      	cmp	r3, #127	@ 0x7f
 8004c32:	d8f0      	bhi.n	8004c16 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8004c34:	69fb      	ldr	r3, [r7, #28]
 8004c36:	1c5a      	adds	r2, r3, #1
 8004c38:	61fa      	str	r2, [r7, #28]
 8004c3a:	69ba      	ldr	r2, [r7, #24]
 8004c3c:	b2d2      	uxtb	r2, r2
 8004c3e:	701a      	strb	r2, [r3, #0]
 8004c40:	69fb      	ldr	r3, [r7, #28]
 8004c42:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8004c44:	2208      	movs	r2, #8
 8004c46:	68f9      	ldr	r1, [r7, #12]
 8004c48:	6938      	ldr	r0, [r7, #16]
 8004c4a:	f7ff faf1 	bl	8004230 <_SendPacket>
  RECORD_END();
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	f383 8811 	msr	BASEPRI, r3
}
 8004c54:	bf00      	nop
 8004c56:	3720      	adds	r7, #32
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	bd80      	pop	{r7, pc}
 8004c5c:	20013378 	.word	0x20013378
 8004c60:	20013348 	.word	0x20013348

08004c64 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b088      	sub	sp, #32
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004c6c:	f3ef 8311 	mrs	r3, BASEPRI
 8004c70:	f04f 0120 	mov.w	r1, #32
 8004c74:	f381 8811 	msr	BASEPRI, r1
 8004c78:	617b      	str	r3, [r7, #20]
 8004c7a:	4819      	ldr	r0, [pc, #100]	@ (8004ce0 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8004c7c:	f7ff f9e7 	bl	800404e <_PreparePacket>
 8004c80:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004c82:	693b      	ldr	r3, [r7, #16]
 8004c84:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004c86:	4b17      	ldr	r3, [pc, #92]	@ (8004ce4 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8004c88:	691b      	ldr	r3, [r3, #16]
 8004c8a:	687a      	ldr	r2, [r7, #4]
 8004c8c:	1ad3      	subs	r3, r2, r3
 8004c8e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	61fb      	str	r3, [r7, #28]
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	61bb      	str	r3, [r7, #24]
 8004c98:	e00b      	b.n	8004cb2 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8004c9a:	69bb      	ldr	r3, [r7, #24]
 8004c9c:	b2da      	uxtb	r2, r3
 8004c9e:	69fb      	ldr	r3, [r7, #28]
 8004ca0:	1c59      	adds	r1, r3, #1
 8004ca2:	61f9      	str	r1, [r7, #28]
 8004ca4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004ca8:	b2d2      	uxtb	r2, r2
 8004caa:	701a      	strb	r2, [r3, #0]
 8004cac:	69bb      	ldr	r3, [r7, #24]
 8004cae:	09db      	lsrs	r3, r3, #7
 8004cb0:	61bb      	str	r3, [r7, #24]
 8004cb2:	69bb      	ldr	r3, [r7, #24]
 8004cb4:	2b7f      	cmp	r3, #127	@ 0x7f
 8004cb6:	d8f0      	bhi.n	8004c9a <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8004cb8:	69fb      	ldr	r3, [r7, #28]
 8004cba:	1c5a      	adds	r2, r3, #1
 8004cbc:	61fa      	str	r2, [r7, #28]
 8004cbe:	69ba      	ldr	r2, [r7, #24]
 8004cc0:	b2d2      	uxtb	r2, r2
 8004cc2:	701a      	strb	r2, [r3, #0]
 8004cc4:	69fb      	ldr	r3, [r7, #28]
 8004cc6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8004cc8:	2204      	movs	r2, #4
 8004cca:	68f9      	ldr	r1, [r7, #12]
 8004ccc:	6938      	ldr	r0, [r7, #16]
 8004cce:	f7ff faaf 	bl	8004230 <_SendPacket>
  RECORD_END();
 8004cd2:	697b      	ldr	r3, [r7, #20]
 8004cd4:	f383 8811 	msr	BASEPRI, r3
}
 8004cd8:	bf00      	nop
 8004cda:	3720      	adds	r7, #32
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	bd80      	pop	{r7, pc}
 8004ce0:	20013378 	.word	0x20013378
 8004ce4:	20013348 	.word	0x20013348

08004ce8 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b088      	sub	sp, #32
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004cf0:	f3ef 8311 	mrs	r3, BASEPRI
 8004cf4:	f04f 0120 	mov.w	r1, #32
 8004cf8:	f381 8811 	msr	BASEPRI, r1
 8004cfc:	617b      	str	r3, [r7, #20]
 8004cfe:	4819      	ldr	r0, [pc, #100]	@ (8004d64 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8004d00:	f7ff f9a5 	bl	800404e <_PreparePacket>
 8004d04:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004d06:	693b      	ldr	r3, [r7, #16]
 8004d08:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004d0a:	4b17      	ldr	r3, [pc, #92]	@ (8004d68 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8004d0c:	691b      	ldr	r3, [r3, #16]
 8004d0e:	687a      	ldr	r2, [r7, #4]
 8004d10:	1ad3      	subs	r3, r2, r3
 8004d12:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	61fb      	str	r3, [r7, #28]
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	61bb      	str	r3, [r7, #24]
 8004d1c:	e00b      	b.n	8004d36 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8004d1e:	69bb      	ldr	r3, [r7, #24]
 8004d20:	b2da      	uxtb	r2, r3
 8004d22:	69fb      	ldr	r3, [r7, #28]
 8004d24:	1c59      	adds	r1, r3, #1
 8004d26:	61f9      	str	r1, [r7, #28]
 8004d28:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004d2c:	b2d2      	uxtb	r2, r2
 8004d2e:	701a      	strb	r2, [r3, #0]
 8004d30:	69bb      	ldr	r3, [r7, #24]
 8004d32:	09db      	lsrs	r3, r3, #7
 8004d34:	61bb      	str	r3, [r7, #24]
 8004d36:	69bb      	ldr	r3, [r7, #24]
 8004d38:	2b7f      	cmp	r3, #127	@ 0x7f
 8004d3a:	d8f0      	bhi.n	8004d1e <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8004d3c:	69fb      	ldr	r3, [r7, #28]
 8004d3e:	1c5a      	adds	r2, r3, #1
 8004d40:	61fa      	str	r2, [r7, #28]
 8004d42:	69ba      	ldr	r2, [r7, #24]
 8004d44:	b2d2      	uxtb	r2, r2
 8004d46:	701a      	strb	r2, [r3, #0]
 8004d48:	69fb      	ldr	r3, [r7, #28]
 8004d4a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8004d4c:	2206      	movs	r2, #6
 8004d4e:	68f9      	ldr	r1, [r7, #12]
 8004d50:	6938      	ldr	r0, [r7, #16]
 8004d52:	f7ff fa6d 	bl	8004230 <_SendPacket>
  RECORD_END();
 8004d56:	697b      	ldr	r3, [r7, #20]
 8004d58:	f383 8811 	msr	BASEPRI, r3
}
 8004d5c:	bf00      	nop
 8004d5e:	3720      	adds	r7, #32
 8004d60:	46bd      	mov	sp, r7
 8004d62:	bd80      	pop	{r7, pc}
 8004d64:	20013378 	.word	0x20013378
 8004d68:	20013348 	.word	0x20013348

08004d6c <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b08c      	sub	sp, #48	@ 0x30
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	4603      	mov	r3, r0
 8004d74:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8004d76:	4b3b      	ldr	r3, [pc, #236]	@ (8004e64 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d06d      	beq.n	8004e5a <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8004d7e:	4b39      	ldr	r3, [pc, #228]	@ (8004e64 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (n = 0; n < ModuleId; n++) {
 8004d84:	2300      	movs	r3, #0
 8004d86:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004d88:	e008      	b.n	8004d9c <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8004d8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d8c:	691b      	ldr	r3, [r3, #16]
 8004d8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (pModule == 0) {
 8004d90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d007      	beq.n	8004da6 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8004d96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d98:	3301      	adds	r3, #1
 8004d9a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004d9c:	79fb      	ldrb	r3, [r7, #7]
 8004d9e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004da0:	429a      	cmp	r2, r3
 8004da2:	d3f2      	bcc.n	8004d8a <SEGGER_SYSVIEW_SendModule+0x1e>
 8004da4:	e000      	b.n	8004da8 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8004da6:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8004da8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d055      	beq.n	8004e5a <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004dae:	f3ef 8311 	mrs	r3, BASEPRI
 8004db2:	f04f 0120 	mov.w	r1, #32
 8004db6:	f381 8811 	msr	BASEPRI, r1
 8004dba:	617b      	str	r3, [r7, #20]
 8004dbc:	482a      	ldr	r0, [pc, #168]	@ (8004e68 <SEGGER_SYSVIEW_SendModule+0xfc>)
 8004dbe:	f7ff f946 	bl	800404e <_PreparePacket>
 8004dc2:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8004dc4:	693b      	ldr	r3, [r7, #16]
 8004dc6:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	627b      	str	r3, [r7, #36]	@ 0x24
 8004dcc:	79fb      	ldrb	r3, [r7, #7]
 8004dce:	623b      	str	r3, [r7, #32]
 8004dd0:	e00b      	b.n	8004dea <SEGGER_SYSVIEW_SendModule+0x7e>
 8004dd2:	6a3b      	ldr	r3, [r7, #32]
 8004dd4:	b2da      	uxtb	r2, r3
 8004dd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dd8:	1c59      	adds	r1, r3, #1
 8004dda:	6279      	str	r1, [r7, #36]	@ 0x24
 8004ddc:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004de0:	b2d2      	uxtb	r2, r2
 8004de2:	701a      	strb	r2, [r3, #0]
 8004de4:	6a3b      	ldr	r3, [r7, #32]
 8004de6:	09db      	lsrs	r3, r3, #7
 8004de8:	623b      	str	r3, [r7, #32]
 8004dea:	6a3b      	ldr	r3, [r7, #32]
 8004dec:	2b7f      	cmp	r3, #127	@ 0x7f
 8004dee:	d8f0      	bhi.n	8004dd2 <SEGGER_SYSVIEW_SendModule+0x66>
 8004df0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004df2:	1c5a      	adds	r2, r3, #1
 8004df4:	627a      	str	r2, [r7, #36]	@ 0x24
 8004df6:	6a3a      	ldr	r2, [r7, #32]
 8004df8:	b2d2      	uxtb	r2, r2
 8004dfa:	701a      	strb	r2, [r3, #0]
 8004dfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dfe:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	61fb      	str	r3, [r7, #28]
 8004e04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e06:	689b      	ldr	r3, [r3, #8]
 8004e08:	61bb      	str	r3, [r7, #24]
 8004e0a:	e00b      	b.n	8004e24 <SEGGER_SYSVIEW_SendModule+0xb8>
 8004e0c:	69bb      	ldr	r3, [r7, #24]
 8004e0e:	b2da      	uxtb	r2, r3
 8004e10:	69fb      	ldr	r3, [r7, #28]
 8004e12:	1c59      	adds	r1, r3, #1
 8004e14:	61f9      	str	r1, [r7, #28]
 8004e16:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004e1a:	b2d2      	uxtb	r2, r2
 8004e1c:	701a      	strb	r2, [r3, #0]
 8004e1e:	69bb      	ldr	r3, [r7, #24]
 8004e20:	09db      	lsrs	r3, r3, #7
 8004e22:	61bb      	str	r3, [r7, #24]
 8004e24:	69bb      	ldr	r3, [r7, #24]
 8004e26:	2b7f      	cmp	r3, #127	@ 0x7f
 8004e28:	d8f0      	bhi.n	8004e0c <SEGGER_SYSVIEW_SendModule+0xa0>
 8004e2a:	69fb      	ldr	r3, [r7, #28]
 8004e2c:	1c5a      	adds	r2, r3, #1
 8004e2e:	61fa      	str	r2, [r7, #28]
 8004e30:	69ba      	ldr	r2, [r7, #24]
 8004e32:	b2d2      	uxtb	r2, r2
 8004e34:	701a      	strb	r2, [r3, #0]
 8004e36:	69fb      	ldr	r3, [r7, #28]
 8004e38:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004e3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	2280      	movs	r2, #128	@ 0x80
 8004e40:	4619      	mov	r1, r3
 8004e42:	68f8      	ldr	r0, [r7, #12]
 8004e44:	f7ff f8b6 	bl	8003fb4 <_EncodeStr>
 8004e48:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8004e4a:	2216      	movs	r2, #22
 8004e4c:	68f9      	ldr	r1, [r7, #12]
 8004e4e:	6938      	ldr	r0, [r7, #16]
 8004e50:	f7ff f9ee 	bl	8004230 <_SendPacket>
      RECORD_END();
 8004e54:	697b      	ldr	r3, [r7, #20]
 8004e56:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8004e5a:	bf00      	nop
 8004e5c:	3730      	adds	r7, #48	@ 0x30
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	bd80      	pop	{r7, pc}
 8004e62:	bf00      	nop
 8004e64:	20013370 	.word	0x20013370
 8004e68:	20013378 	.word	0x20013378

08004e6c <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b082      	sub	sp, #8
 8004e70:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8004e72:	4b0c      	ldr	r3, [pc, #48]	@ (8004ea4 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d00f      	beq.n	8004e9a <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8004e7a:	4b0a      	ldr	r3, [pc, #40]	@ (8004ea4 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	68db      	ldr	r3, [r3, #12]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d002      	beq.n	8004e8e <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	68db      	ldr	r3, [r3, #12]
 8004e8c:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	691b      	ldr	r3, [r3, #16]
 8004e92:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d1f2      	bne.n	8004e80 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8004e9a:	bf00      	nop
 8004e9c:	3708      	adds	r7, #8
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	bd80      	pop	{r7, pc}
 8004ea2:	bf00      	nop
 8004ea4:	20013370 	.word	0x20013370

08004ea8 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b086      	sub	sp, #24
 8004eac:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8004eae:	f3ef 8311 	mrs	r3, BASEPRI
 8004eb2:	f04f 0120 	mov.w	r1, #32
 8004eb6:	f381 8811 	msr	BASEPRI, r1
 8004eba:	60fb      	str	r3, [r7, #12]
 8004ebc:	4817      	ldr	r0, [pc, #92]	@ (8004f1c <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8004ebe:	f7ff f8c6 	bl	800404e <_PreparePacket>
 8004ec2:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8004ec4:	68bb      	ldr	r3, [r7, #8]
 8004ec6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	617b      	str	r3, [r7, #20]
 8004ecc:	4b14      	ldr	r3, [pc, #80]	@ (8004f20 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8004ece:	781b      	ldrb	r3, [r3, #0]
 8004ed0:	613b      	str	r3, [r7, #16]
 8004ed2:	e00b      	b.n	8004eec <SEGGER_SYSVIEW_SendNumModules+0x44>
 8004ed4:	693b      	ldr	r3, [r7, #16]
 8004ed6:	b2da      	uxtb	r2, r3
 8004ed8:	697b      	ldr	r3, [r7, #20]
 8004eda:	1c59      	adds	r1, r3, #1
 8004edc:	6179      	str	r1, [r7, #20]
 8004ede:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004ee2:	b2d2      	uxtb	r2, r2
 8004ee4:	701a      	strb	r2, [r3, #0]
 8004ee6:	693b      	ldr	r3, [r7, #16]
 8004ee8:	09db      	lsrs	r3, r3, #7
 8004eea:	613b      	str	r3, [r7, #16]
 8004eec:	693b      	ldr	r3, [r7, #16]
 8004eee:	2b7f      	cmp	r3, #127	@ 0x7f
 8004ef0:	d8f0      	bhi.n	8004ed4 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8004ef2:	697b      	ldr	r3, [r7, #20]
 8004ef4:	1c5a      	adds	r2, r3, #1
 8004ef6:	617a      	str	r2, [r7, #20]
 8004ef8:	693a      	ldr	r2, [r7, #16]
 8004efa:	b2d2      	uxtb	r2, r2
 8004efc:	701a      	strb	r2, [r3, #0]
 8004efe:	697b      	ldr	r3, [r7, #20]
 8004f00:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8004f02:	221b      	movs	r2, #27
 8004f04:	6879      	ldr	r1, [r7, #4]
 8004f06:	68b8      	ldr	r0, [r7, #8]
 8004f08:	f7ff f992 	bl	8004230 <_SendPacket>
  RECORD_END();
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	f383 8811 	msr	BASEPRI, r3
}
 8004f12:	bf00      	nop
 8004f14:	3718      	adds	r7, #24
 8004f16:	46bd      	mov	sp, r7
 8004f18:	bd80      	pop	{r7, pc}
 8004f1a:	bf00      	nop
 8004f1c:	20013378 	.word	0x20013378
 8004f20:	20013374 	.word	0x20013374

08004f24 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b08a      	sub	sp, #40	@ 0x28
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004f2c:	f3ef 8311 	mrs	r3, BASEPRI
 8004f30:	f04f 0120 	mov.w	r1, #32
 8004f34:	f381 8811 	msr	BASEPRI, r1
 8004f38:	617b      	str	r3, [r7, #20]
 8004f3a:	4827      	ldr	r0, [pc, #156]	@ (8004fd8 <SEGGER_SYSVIEW_Warn+0xb4>)
 8004f3c:	f7ff f887 	bl	800404e <_PreparePacket>
 8004f40:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004f42:	2280      	movs	r2, #128	@ 0x80
 8004f44:	6879      	ldr	r1, [r7, #4]
 8004f46:	6938      	ldr	r0, [r7, #16]
 8004f48:	f7ff f834 	bl	8003fb4 <_EncodeStr>
 8004f4c:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f52:	2301      	movs	r3, #1
 8004f54:	623b      	str	r3, [r7, #32]
 8004f56:	e00b      	b.n	8004f70 <SEGGER_SYSVIEW_Warn+0x4c>
 8004f58:	6a3b      	ldr	r3, [r7, #32]
 8004f5a:	b2da      	uxtb	r2, r3
 8004f5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f5e:	1c59      	adds	r1, r3, #1
 8004f60:	6279      	str	r1, [r7, #36]	@ 0x24
 8004f62:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004f66:	b2d2      	uxtb	r2, r2
 8004f68:	701a      	strb	r2, [r3, #0]
 8004f6a:	6a3b      	ldr	r3, [r7, #32]
 8004f6c:	09db      	lsrs	r3, r3, #7
 8004f6e:	623b      	str	r3, [r7, #32]
 8004f70:	6a3b      	ldr	r3, [r7, #32]
 8004f72:	2b7f      	cmp	r3, #127	@ 0x7f
 8004f74:	d8f0      	bhi.n	8004f58 <SEGGER_SYSVIEW_Warn+0x34>
 8004f76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f78:	1c5a      	adds	r2, r3, #1
 8004f7a:	627a      	str	r2, [r7, #36]	@ 0x24
 8004f7c:	6a3a      	ldr	r2, [r7, #32]
 8004f7e:	b2d2      	uxtb	r2, r2
 8004f80:	701a      	strb	r2, [r3, #0]
 8004f82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f84:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	61fb      	str	r3, [r7, #28]
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	61bb      	str	r3, [r7, #24]
 8004f8e:	e00b      	b.n	8004fa8 <SEGGER_SYSVIEW_Warn+0x84>
 8004f90:	69bb      	ldr	r3, [r7, #24]
 8004f92:	b2da      	uxtb	r2, r3
 8004f94:	69fb      	ldr	r3, [r7, #28]
 8004f96:	1c59      	adds	r1, r3, #1
 8004f98:	61f9      	str	r1, [r7, #28]
 8004f9a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004f9e:	b2d2      	uxtb	r2, r2
 8004fa0:	701a      	strb	r2, [r3, #0]
 8004fa2:	69bb      	ldr	r3, [r7, #24]
 8004fa4:	09db      	lsrs	r3, r3, #7
 8004fa6:	61bb      	str	r3, [r7, #24]
 8004fa8:	69bb      	ldr	r3, [r7, #24]
 8004faa:	2b7f      	cmp	r3, #127	@ 0x7f
 8004fac:	d8f0      	bhi.n	8004f90 <SEGGER_SYSVIEW_Warn+0x6c>
 8004fae:	69fb      	ldr	r3, [r7, #28]
 8004fb0:	1c5a      	adds	r2, r3, #1
 8004fb2:	61fa      	str	r2, [r7, #28]
 8004fb4:	69ba      	ldr	r2, [r7, #24]
 8004fb6:	b2d2      	uxtb	r2, r2
 8004fb8:	701a      	strb	r2, [r3, #0]
 8004fba:	69fb      	ldr	r3, [r7, #28]
 8004fbc:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8004fbe:	221a      	movs	r2, #26
 8004fc0:	68f9      	ldr	r1, [r7, #12]
 8004fc2:	6938      	ldr	r0, [r7, #16]
 8004fc4:	f7ff f934 	bl	8004230 <_SendPacket>
  RECORD_END();
 8004fc8:	697b      	ldr	r3, [r7, #20]
 8004fca:	f383 8811 	msr	BASEPRI, r3
}
 8004fce:	bf00      	nop
 8004fd0:	3728      	adds	r7, #40	@ 0x28
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	bd80      	pop	{r7, pc}
 8004fd6:	bf00      	nop
 8004fd8:	20013378 	.word	0x20013378

08004fdc <memcmp>:
 8004fdc:	b510      	push	{r4, lr}
 8004fde:	3901      	subs	r1, #1
 8004fe0:	4402      	add	r2, r0
 8004fe2:	4290      	cmp	r0, r2
 8004fe4:	d101      	bne.n	8004fea <memcmp+0xe>
 8004fe6:	2000      	movs	r0, #0
 8004fe8:	e005      	b.n	8004ff6 <memcmp+0x1a>
 8004fea:	7803      	ldrb	r3, [r0, #0]
 8004fec:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8004ff0:	42a3      	cmp	r3, r4
 8004ff2:	d001      	beq.n	8004ff8 <memcmp+0x1c>
 8004ff4:	1b18      	subs	r0, r3, r4
 8004ff6:	bd10      	pop	{r4, pc}
 8004ff8:	3001      	adds	r0, #1
 8004ffa:	e7f2      	b.n	8004fe2 <memcmp+0x6>

08004ffc <memset>:
 8004ffc:	4402      	add	r2, r0
 8004ffe:	4603      	mov	r3, r0
 8005000:	4293      	cmp	r3, r2
 8005002:	d100      	bne.n	8005006 <memset+0xa>
 8005004:	4770      	bx	lr
 8005006:	f803 1b01 	strb.w	r1, [r3], #1
 800500a:	e7f9      	b.n	8005000 <memset+0x4>

0800500c <__libc_init_array>:
 800500c:	b570      	push	{r4, r5, r6, lr}
 800500e:	4d0d      	ldr	r5, [pc, #52]	@ (8005044 <__libc_init_array+0x38>)
 8005010:	4c0d      	ldr	r4, [pc, #52]	@ (8005048 <__libc_init_array+0x3c>)
 8005012:	1b64      	subs	r4, r4, r5
 8005014:	10a4      	asrs	r4, r4, #2
 8005016:	2600      	movs	r6, #0
 8005018:	42a6      	cmp	r6, r4
 800501a:	d109      	bne.n	8005030 <__libc_init_array+0x24>
 800501c:	4d0b      	ldr	r5, [pc, #44]	@ (800504c <__libc_init_array+0x40>)
 800501e:	4c0c      	ldr	r4, [pc, #48]	@ (8005050 <__libc_init_array+0x44>)
 8005020:	f000 f826 	bl	8005070 <_init>
 8005024:	1b64      	subs	r4, r4, r5
 8005026:	10a4      	asrs	r4, r4, #2
 8005028:	2600      	movs	r6, #0
 800502a:	42a6      	cmp	r6, r4
 800502c:	d105      	bne.n	800503a <__libc_init_array+0x2e>
 800502e:	bd70      	pop	{r4, r5, r6, pc}
 8005030:	f855 3b04 	ldr.w	r3, [r5], #4
 8005034:	4798      	blx	r3
 8005036:	3601      	adds	r6, #1
 8005038:	e7ee      	b.n	8005018 <__libc_init_array+0xc>
 800503a:	f855 3b04 	ldr.w	r3, [r5], #4
 800503e:	4798      	blx	r3
 8005040:	3601      	adds	r6, #1
 8005042:	e7f2      	b.n	800502a <__libc_init_array+0x1e>
 8005044:	08005144 	.word	0x08005144
 8005048:	08005144 	.word	0x08005144
 800504c:	08005144 	.word	0x08005144
 8005050:	08005148 	.word	0x08005148

08005054 <memcpy>:
 8005054:	440a      	add	r2, r1
 8005056:	4291      	cmp	r1, r2
 8005058:	f100 33ff 	add.w	r3, r0, #4294967295
 800505c:	d100      	bne.n	8005060 <memcpy+0xc>
 800505e:	4770      	bx	lr
 8005060:	b510      	push	{r4, lr}
 8005062:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005066:	f803 4f01 	strb.w	r4, [r3, #1]!
 800506a:	4291      	cmp	r1, r2
 800506c:	d1f9      	bne.n	8005062 <memcpy+0xe>
 800506e:	bd10      	pop	{r4, pc}

08005070 <_init>:
 8005070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005072:	bf00      	nop
 8005074:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005076:	bc08      	pop	{r3}
 8005078:	469e      	mov	lr, r3
 800507a:	4770      	bx	lr

0800507c <_fini>:
 800507c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800507e:	bf00      	nop
 8005080:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005082:	bc08      	pop	{r3}
 8005084:	469e      	mov	lr, r3
 8005086:	4770      	bx	lr
