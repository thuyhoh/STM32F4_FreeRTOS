
002_exercise.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e78  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  08005008  08005008  00006008  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080050b0  080050b0  00007014  2**0
                  CONTENTS
  4 .ARM          00000008  080050b0  080050b0  000060b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080050b8  080050b8  00007014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080050b8  080050b8  000060b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080050bc  080050bc  000060bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  080050c0  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00013448  20000014  080050d4  00007014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2001345c  080050d4  0000745c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012393  00000000  00000000  00007044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d91  00000000  00000000  000193d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012b0  00000000  00000000  0001c168  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e4d  00000000  00000000  0001d418  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023533  00000000  00000000  0001e265  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013d3f  00000000  00000000  00041798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d66d0  00000000  00000000  000554d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012bba7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e80  00000000  00000000  0012bbec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a8  00000000  00000000  00130a6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000014 	.word	0x20000014
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004ff0 	.word	0x08004ff0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000018 	.word	0x20000018
 80001cc:	08004ff0 	.word	0x08004ff0

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	@ 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	20012e90 	.word	0x20012e90

08000264 <__aeabi_uldivmod>:
 8000264:	b953      	cbnz	r3, 800027c <__aeabi_uldivmod+0x18>
 8000266:	b94a      	cbnz	r2, 800027c <__aeabi_uldivmod+0x18>
 8000268:	2900      	cmp	r1, #0
 800026a:	bf08      	it	eq
 800026c:	2800      	cmpeq	r0, #0
 800026e:	bf1c      	itt	ne
 8000270:	f04f 31ff 	movne.w	r1, #4294967295
 8000274:	f04f 30ff 	movne.w	r0, #4294967295
 8000278:	f000 b96a 	b.w	8000550 <__aeabi_idiv0>
 800027c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000280:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000284:	f000 f806 	bl	8000294 <__udivmoddi4>
 8000288:	f8dd e004 	ldr.w	lr, [sp, #4]
 800028c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000290:	b004      	add	sp, #16
 8000292:	4770      	bx	lr

08000294 <__udivmoddi4>:
 8000294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000298:	9d08      	ldr	r5, [sp, #32]
 800029a:	460c      	mov	r4, r1
 800029c:	2b00      	cmp	r3, #0
 800029e:	d14e      	bne.n	800033e <__udivmoddi4+0xaa>
 80002a0:	4694      	mov	ip, r2
 80002a2:	458c      	cmp	ip, r1
 80002a4:	4686      	mov	lr, r0
 80002a6:	fab2 f282 	clz	r2, r2
 80002aa:	d962      	bls.n	8000372 <__udivmoddi4+0xde>
 80002ac:	b14a      	cbz	r2, 80002c2 <__udivmoddi4+0x2e>
 80002ae:	f1c2 0320 	rsb	r3, r2, #32
 80002b2:	4091      	lsls	r1, r2
 80002b4:	fa20 f303 	lsr.w	r3, r0, r3
 80002b8:	fa0c fc02 	lsl.w	ip, ip, r2
 80002bc:	4319      	orrs	r1, r3
 80002be:	fa00 fe02 	lsl.w	lr, r0, r2
 80002c2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002c6:	fa1f f68c 	uxth.w	r6, ip
 80002ca:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002d2:	fb07 1114 	mls	r1, r7, r4, r1
 80002d6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002da:	fb04 f106 	mul.w	r1, r4, r6
 80002de:	4299      	cmp	r1, r3
 80002e0:	d90a      	bls.n	80002f8 <__udivmoddi4+0x64>
 80002e2:	eb1c 0303 	adds.w	r3, ip, r3
 80002e6:	f104 30ff 	add.w	r0, r4, #4294967295
 80002ea:	f080 8112 	bcs.w	8000512 <__udivmoddi4+0x27e>
 80002ee:	4299      	cmp	r1, r3
 80002f0:	f240 810f 	bls.w	8000512 <__udivmoddi4+0x27e>
 80002f4:	3c02      	subs	r4, #2
 80002f6:	4463      	add	r3, ip
 80002f8:	1a59      	subs	r1, r3, r1
 80002fa:	fa1f f38e 	uxth.w	r3, lr
 80002fe:	fbb1 f0f7 	udiv	r0, r1, r7
 8000302:	fb07 1110 	mls	r1, r7, r0, r1
 8000306:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800030a:	fb00 f606 	mul.w	r6, r0, r6
 800030e:	429e      	cmp	r6, r3
 8000310:	d90a      	bls.n	8000328 <__udivmoddi4+0x94>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f100 31ff 	add.w	r1, r0, #4294967295
 800031a:	f080 80fc 	bcs.w	8000516 <__udivmoddi4+0x282>
 800031e:	429e      	cmp	r6, r3
 8000320:	f240 80f9 	bls.w	8000516 <__udivmoddi4+0x282>
 8000324:	4463      	add	r3, ip
 8000326:	3802      	subs	r0, #2
 8000328:	1b9b      	subs	r3, r3, r6
 800032a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800032e:	2100      	movs	r1, #0
 8000330:	b11d      	cbz	r5, 800033a <__udivmoddi4+0xa6>
 8000332:	40d3      	lsrs	r3, r2
 8000334:	2200      	movs	r2, #0
 8000336:	e9c5 3200 	strd	r3, r2, [r5]
 800033a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033e:	428b      	cmp	r3, r1
 8000340:	d905      	bls.n	800034e <__udivmoddi4+0xba>
 8000342:	b10d      	cbz	r5, 8000348 <__udivmoddi4+0xb4>
 8000344:	e9c5 0100 	strd	r0, r1, [r5]
 8000348:	2100      	movs	r1, #0
 800034a:	4608      	mov	r0, r1
 800034c:	e7f5      	b.n	800033a <__udivmoddi4+0xa6>
 800034e:	fab3 f183 	clz	r1, r3
 8000352:	2900      	cmp	r1, #0
 8000354:	d146      	bne.n	80003e4 <__udivmoddi4+0x150>
 8000356:	42a3      	cmp	r3, r4
 8000358:	d302      	bcc.n	8000360 <__udivmoddi4+0xcc>
 800035a:	4290      	cmp	r0, r2
 800035c:	f0c0 80f0 	bcc.w	8000540 <__udivmoddi4+0x2ac>
 8000360:	1a86      	subs	r6, r0, r2
 8000362:	eb64 0303 	sbc.w	r3, r4, r3
 8000366:	2001      	movs	r0, #1
 8000368:	2d00      	cmp	r5, #0
 800036a:	d0e6      	beq.n	800033a <__udivmoddi4+0xa6>
 800036c:	e9c5 6300 	strd	r6, r3, [r5]
 8000370:	e7e3      	b.n	800033a <__udivmoddi4+0xa6>
 8000372:	2a00      	cmp	r2, #0
 8000374:	f040 8090 	bne.w	8000498 <__udivmoddi4+0x204>
 8000378:	eba1 040c 	sub.w	r4, r1, ip
 800037c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000380:	fa1f f78c 	uxth.w	r7, ip
 8000384:	2101      	movs	r1, #1
 8000386:	fbb4 f6f8 	udiv	r6, r4, r8
 800038a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800038e:	fb08 4416 	mls	r4, r8, r6, r4
 8000392:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000396:	fb07 f006 	mul.w	r0, r7, r6
 800039a:	4298      	cmp	r0, r3
 800039c:	d908      	bls.n	80003b0 <__udivmoddi4+0x11c>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f106 34ff 	add.w	r4, r6, #4294967295
 80003a6:	d202      	bcs.n	80003ae <__udivmoddi4+0x11a>
 80003a8:	4298      	cmp	r0, r3
 80003aa:	f200 80cd 	bhi.w	8000548 <__udivmoddi4+0x2b4>
 80003ae:	4626      	mov	r6, r4
 80003b0:	1a1c      	subs	r4, r3, r0
 80003b2:	fa1f f38e 	uxth.w	r3, lr
 80003b6:	fbb4 f0f8 	udiv	r0, r4, r8
 80003ba:	fb08 4410 	mls	r4, r8, r0, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb00 f707 	mul.w	r7, r0, r7
 80003c6:	429f      	cmp	r7, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x148>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x146>
 80003d4:	429f      	cmp	r7, r3
 80003d6:	f200 80b0 	bhi.w	800053a <__udivmoddi4+0x2a6>
 80003da:	4620      	mov	r0, r4
 80003dc:	1bdb      	subs	r3, r3, r7
 80003de:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003e2:	e7a5      	b.n	8000330 <__udivmoddi4+0x9c>
 80003e4:	f1c1 0620 	rsb	r6, r1, #32
 80003e8:	408b      	lsls	r3, r1
 80003ea:	fa22 f706 	lsr.w	r7, r2, r6
 80003ee:	431f      	orrs	r7, r3
 80003f0:	fa20 fc06 	lsr.w	ip, r0, r6
 80003f4:	fa04 f301 	lsl.w	r3, r4, r1
 80003f8:	ea43 030c 	orr.w	r3, r3, ip
 80003fc:	40f4      	lsrs	r4, r6
 80003fe:	fa00 f801 	lsl.w	r8, r0, r1
 8000402:	0c38      	lsrs	r0, r7, #16
 8000404:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000408:	fbb4 fef0 	udiv	lr, r4, r0
 800040c:	fa1f fc87 	uxth.w	ip, r7
 8000410:	fb00 441e 	mls	r4, r0, lr, r4
 8000414:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000418:	fb0e f90c 	mul.w	r9, lr, ip
 800041c:	45a1      	cmp	r9, r4
 800041e:	fa02 f201 	lsl.w	r2, r2, r1
 8000422:	d90a      	bls.n	800043a <__udivmoddi4+0x1a6>
 8000424:	193c      	adds	r4, r7, r4
 8000426:	f10e 3aff 	add.w	sl, lr, #4294967295
 800042a:	f080 8084 	bcs.w	8000536 <__udivmoddi4+0x2a2>
 800042e:	45a1      	cmp	r9, r4
 8000430:	f240 8081 	bls.w	8000536 <__udivmoddi4+0x2a2>
 8000434:	f1ae 0e02 	sub.w	lr, lr, #2
 8000438:	443c      	add	r4, r7
 800043a:	eba4 0409 	sub.w	r4, r4, r9
 800043e:	fa1f f983 	uxth.w	r9, r3
 8000442:	fbb4 f3f0 	udiv	r3, r4, r0
 8000446:	fb00 4413 	mls	r4, r0, r3, r4
 800044a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800044e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000452:	45a4      	cmp	ip, r4
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x1d2>
 8000456:	193c      	adds	r4, r7, r4
 8000458:	f103 30ff 	add.w	r0, r3, #4294967295
 800045c:	d267      	bcs.n	800052e <__udivmoddi4+0x29a>
 800045e:	45a4      	cmp	ip, r4
 8000460:	d965      	bls.n	800052e <__udivmoddi4+0x29a>
 8000462:	3b02      	subs	r3, #2
 8000464:	443c      	add	r4, r7
 8000466:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800046a:	fba0 9302 	umull	r9, r3, r0, r2
 800046e:	eba4 040c 	sub.w	r4, r4, ip
 8000472:	429c      	cmp	r4, r3
 8000474:	46ce      	mov	lr, r9
 8000476:	469c      	mov	ip, r3
 8000478:	d351      	bcc.n	800051e <__udivmoddi4+0x28a>
 800047a:	d04e      	beq.n	800051a <__udivmoddi4+0x286>
 800047c:	b155      	cbz	r5, 8000494 <__udivmoddi4+0x200>
 800047e:	ebb8 030e 	subs.w	r3, r8, lr
 8000482:	eb64 040c 	sbc.w	r4, r4, ip
 8000486:	fa04 f606 	lsl.w	r6, r4, r6
 800048a:	40cb      	lsrs	r3, r1
 800048c:	431e      	orrs	r6, r3
 800048e:	40cc      	lsrs	r4, r1
 8000490:	e9c5 6400 	strd	r6, r4, [r5]
 8000494:	2100      	movs	r1, #0
 8000496:	e750      	b.n	800033a <__udivmoddi4+0xa6>
 8000498:	f1c2 0320 	rsb	r3, r2, #32
 800049c:	fa20 f103 	lsr.w	r1, r0, r3
 80004a0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004a4:	fa24 f303 	lsr.w	r3, r4, r3
 80004a8:	4094      	lsls	r4, r2
 80004aa:	430c      	orrs	r4, r1
 80004ac:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004b0:	fa00 fe02 	lsl.w	lr, r0, r2
 80004b4:	fa1f f78c 	uxth.w	r7, ip
 80004b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80004bc:	fb08 3110 	mls	r1, r8, r0, r3
 80004c0:	0c23      	lsrs	r3, r4, #16
 80004c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004c6:	fb00 f107 	mul.w	r1, r0, r7
 80004ca:	4299      	cmp	r1, r3
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x24c>
 80004ce:	eb1c 0303 	adds.w	r3, ip, r3
 80004d2:	f100 36ff 	add.w	r6, r0, #4294967295
 80004d6:	d22c      	bcs.n	8000532 <__udivmoddi4+0x29e>
 80004d8:	4299      	cmp	r1, r3
 80004da:	d92a      	bls.n	8000532 <__udivmoddi4+0x29e>
 80004dc:	3802      	subs	r0, #2
 80004de:	4463      	add	r3, ip
 80004e0:	1a5b      	subs	r3, r3, r1
 80004e2:	b2a4      	uxth	r4, r4
 80004e4:	fbb3 f1f8 	udiv	r1, r3, r8
 80004e8:	fb08 3311 	mls	r3, r8, r1, r3
 80004ec:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004f0:	fb01 f307 	mul.w	r3, r1, r7
 80004f4:	42a3      	cmp	r3, r4
 80004f6:	d908      	bls.n	800050a <__udivmoddi4+0x276>
 80004f8:	eb1c 0404 	adds.w	r4, ip, r4
 80004fc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000500:	d213      	bcs.n	800052a <__udivmoddi4+0x296>
 8000502:	42a3      	cmp	r3, r4
 8000504:	d911      	bls.n	800052a <__udivmoddi4+0x296>
 8000506:	3902      	subs	r1, #2
 8000508:	4464      	add	r4, ip
 800050a:	1ae4      	subs	r4, r4, r3
 800050c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000510:	e739      	b.n	8000386 <__udivmoddi4+0xf2>
 8000512:	4604      	mov	r4, r0
 8000514:	e6f0      	b.n	80002f8 <__udivmoddi4+0x64>
 8000516:	4608      	mov	r0, r1
 8000518:	e706      	b.n	8000328 <__udivmoddi4+0x94>
 800051a:	45c8      	cmp	r8, r9
 800051c:	d2ae      	bcs.n	800047c <__udivmoddi4+0x1e8>
 800051e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000522:	eb63 0c07 	sbc.w	ip, r3, r7
 8000526:	3801      	subs	r0, #1
 8000528:	e7a8      	b.n	800047c <__udivmoddi4+0x1e8>
 800052a:	4631      	mov	r1, r6
 800052c:	e7ed      	b.n	800050a <__udivmoddi4+0x276>
 800052e:	4603      	mov	r3, r0
 8000530:	e799      	b.n	8000466 <__udivmoddi4+0x1d2>
 8000532:	4630      	mov	r0, r6
 8000534:	e7d4      	b.n	80004e0 <__udivmoddi4+0x24c>
 8000536:	46d6      	mov	lr, sl
 8000538:	e77f      	b.n	800043a <__udivmoddi4+0x1a6>
 800053a:	4463      	add	r3, ip
 800053c:	3802      	subs	r0, #2
 800053e:	e74d      	b.n	80003dc <__udivmoddi4+0x148>
 8000540:	4606      	mov	r6, r0
 8000542:	4623      	mov	r3, r4
 8000544:	4608      	mov	r0, r1
 8000546:	e70f      	b.n	8000368 <__udivmoddi4+0xd4>
 8000548:	3e02      	subs	r6, #2
 800054a:	4463      	add	r3, ip
 800054c:	e730      	b.n	80003b0 <__udivmoddi4+0x11c>
 800054e:	bf00      	nop

08000550 <__aeabi_idiv0>:
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop

08000554 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b084      	sub	sp, #16
 8000558:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800055a:	f000 fab1 	bl	8000ac0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800055e:	f000 f827 	bl	80005b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000562:	f000 f8b9 	bl	80006d8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000566:	f000 f88d 	bl	8000684 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  status = xTaskCreate(led_task_handler, "LED Task", configMINIMAL_STACK_SIZE, NULL, 1, NULL);
 800056a:	2300      	movs	r3, #0
 800056c:	9301      	str	r3, [sp, #4]
 800056e:	2301      	movs	r3, #1
 8000570:	9300      	str	r3, [sp, #0]
 8000572:	2300      	movs	r3, #0
 8000574:	2282      	movs	r2, #130	@ 0x82
 8000576:	490c      	ldr	r1, [pc, #48]	@ (80005a8 <main+0x54>)
 8000578:	480c      	ldr	r0, [pc, #48]	@ (80005ac <main+0x58>)
 800057a:	f002 fa2a 	bl	80029d2 <xTaskCreate>
 800057e:	6078      	str	r0, [r7, #4]
  configASSERT(status == pdPASS);
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	2b01      	cmp	r3, #1
 8000584:	d00b      	beq.n	800059e <main+0x4a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000586:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800058a:	f383 8811 	msr	BASEPRI, r3
 800058e:	f3bf 8f6f 	isb	sy
 8000592:	f3bf 8f4f 	dsb	sy
 8000596:	603b      	str	r3, [r7, #0]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000598:	bf00      	nop
 800059a:	bf00      	nop
 800059c:	e7fd      	b.n	800059a <main+0x46>


  //start the freeRTOS scheduler
  vTaskStartScheduler();
 800059e:	f002 fb7d 	bl	8002c9c <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005a2:	bf00      	nop
 80005a4:	e7fd      	b.n	80005a2 <main+0x4e>
 80005a6:	bf00      	nop
 80005a8:	08005008 	.word	0x08005008
 80005ac:	080007ad 	.word	0x080007ad

080005b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b094      	sub	sp, #80	@ 0x50
 80005b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005b6:	f107 0320 	add.w	r3, r7, #32
 80005ba:	2230      	movs	r2, #48	@ 0x30
 80005bc:	2100      	movs	r1, #0
 80005be:	4618      	mov	r0, r3
 80005c0:	f004 fcdc 	bl	8004f7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005c4:	f107 030c 	add.w	r3, r7, #12
 80005c8:	2200      	movs	r2, #0
 80005ca:	601a      	str	r2, [r3, #0]
 80005cc:	605a      	str	r2, [r3, #4]
 80005ce:	609a      	str	r2, [r3, #8]
 80005d0:	60da      	str	r2, [r3, #12]
 80005d2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005d4:	2300      	movs	r3, #0
 80005d6:	60bb      	str	r3, [r7, #8]
 80005d8:	4b28      	ldr	r3, [pc, #160]	@ (800067c <SystemClock_Config+0xcc>)
 80005da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005dc:	4a27      	ldr	r2, [pc, #156]	@ (800067c <SystemClock_Config+0xcc>)
 80005de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005e2:	6413      	str	r3, [r2, #64]	@ 0x40
 80005e4:	4b25      	ldr	r3, [pc, #148]	@ (800067c <SystemClock_Config+0xcc>)
 80005e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005ec:	60bb      	str	r3, [r7, #8]
 80005ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005f0:	2300      	movs	r3, #0
 80005f2:	607b      	str	r3, [r7, #4]
 80005f4:	4b22      	ldr	r3, [pc, #136]	@ (8000680 <SystemClock_Config+0xd0>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	4a21      	ldr	r2, [pc, #132]	@ (8000680 <SystemClock_Config+0xd0>)
 80005fa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005fe:	6013      	str	r3, [r2, #0]
 8000600:	4b1f      	ldr	r3, [pc, #124]	@ (8000680 <SystemClock_Config+0xd0>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000608:	607b      	str	r3, [r7, #4]
 800060a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800060c:	2302      	movs	r3, #2
 800060e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000610:	2301      	movs	r3, #1
 8000612:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000614:	2310      	movs	r3, #16
 8000616:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000618:	2302      	movs	r3, #2
 800061a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800061c:	2300      	movs	r3, #0
 800061e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000620:	2308      	movs	r3, #8
 8000622:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000624:	23a8      	movs	r3, #168	@ 0xa8
 8000626:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000628:	2302      	movs	r3, #2
 800062a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800062c:	2307      	movs	r3, #7
 800062e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000630:	f107 0320 	add.w	r3, r7, #32
 8000634:	4618      	mov	r0, r3
 8000636:	f000 fd35 	bl	80010a4 <HAL_RCC_OscConfig>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000640:	f000 f8fc 	bl	800083c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000644:	230f      	movs	r3, #15
 8000646:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000648:	2302      	movs	r3, #2
 800064a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800064c:	2300      	movs	r3, #0
 800064e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000650:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000654:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000656:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800065a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800065c:	f107 030c 	add.w	r3, r7, #12
 8000660:	2105      	movs	r1, #5
 8000662:	4618      	mov	r0, r3
 8000664:	f000 ff8c 	bl	8001580 <HAL_RCC_ClockConfig>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d001      	beq.n	8000672 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800066e:	f000 f8e5 	bl	800083c <Error_Handler>
  }
}
 8000672:	bf00      	nop
 8000674:	3750      	adds	r7, #80	@ 0x50
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	40023800 	.word	0x40023800
 8000680:	40007000 	.word	0x40007000

08000684 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000688:	4b11      	ldr	r3, [pc, #68]	@ (80006d0 <MX_USART1_UART_Init+0x4c>)
 800068a:	4a12      	ldr	r2, [pc, #72]	@ (80006d4 <MX_USART1_UART_Init+0x50>)
 800068c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800068e:	4b10      	ldr	r3, [pc, #64]	@ (80006d0 <MX_USART1_UART_Init+0x4c>)
 8000690:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000694:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000696:	4b0e      	ldr	r3, [pc, #56]	@ (80006d0 <MX_USART1_UART_Init+0x4c>)
 8000698:	2200      	movs	r2, #0
 800069a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800069c:	4b0c      	ldr	r3, [pc, #48]	@ (80006d0 <MX_USART1_UART_Init+0x4c>)
 800069e:	2200      	movs	r2, #0
 80006a0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_EVEN;
 80006a2:	4b0b      	ldr	r3, [pc, #44]	@ (80006d0 <MX_USART1_UART_Init+0x4c>)
 80006a4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80006a8:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006aa:	4b09      	ldr	r3, [pc, #36]	@ (80006d0 <MX_USART1_UART_Init+0x4c>)
 80006ac:	220c      	movs	r2, #12
 80006ae:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006b0:	4b07      	ldr	r3, [pc, #28]	@ (80006d0 <MX_USART1_UART_Init+0x4c>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006b6:	4b06      	ldr	r3, [pc, #24]	@ (80006d0 <MX_USART1_UART_Init+0x4c>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80006bc:	4804      	ldr	r0, [pc, #16]	@ (80006d0 <MX_USART1_UART_Init+0x4c>)
 80006be:	f001 fbef 	bl	8001ea0 <HAL_UART_Init>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <MX_USART1_UART_Init+0x48>
  {
    Error_Handler();
 80006c8:	f000 f8b8 	bl	800083c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80006cc:	bf00      	nop
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	20000030 	.word	0x20000030
 80006d4:	40011000 	.word	0x40011000

080006d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b088      	sub	sp, #32
 80006dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006de:	f107 030c 	add.w	r3, r7, #12
 80006e2:	2200      	movs	r2, #0
 80006e4:	601a      	str	r2, [r3, #0]
 80006e6:	605a      	str	r2, [r3, #4]
 80006e8:	609a      	str	r2, [r3, #8]
 80006ea:	60da      	str	r2, [r3, #12]
 80006ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006ee:	2300      	movs	r3, #0
 80006f0:	60bb      	str	r3, [r7, #8]
 80006f2:	4b2a      	ldr	r3, [pc, #168]	@ (800079c <MX_GPIO_Init+0xc4>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006f6:	4a29      	ldr	r2, [pc, #164]	@ (800079c <MX_GPIO_Init+0xc4>)
 80006f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80006fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80006fe:	4b27      	ldr	r3, [pc, #156]	@ (800079c <MX_GPIO_Init+0xc4>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000702:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000706:	60bb      	str	r3, [r7, #8]
 8000708:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800070a:	2300      	movs	r3, #0
 800070c:	607b      	str	r3, [r7, #4]
 800070e:	4b23      	ldr	r3, [pc, #140]	@ (800079c <MX_GPIO_Init+0xc4>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000712:	4a22      	ldr	r2, [pc, #136]	@ (800079c <MX_GPIO_Init+0xc4>)
 8000714:	f043 0301 	orr.w	r3, r3, #1
 8000718:	6313      	str	r3, [r2, #48]	@ 0x30
 800071a:	4b20      	ldr	r3, [pc, #128]	@ (800079c <MX_GPIO_Init+0xc4>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800071e:	f003 0301 	and.w	r3, r3, #1
 8000722:	607b      	str	r3, [r7, #4]
 8000724:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000726:	2300      	movs	r3, #0
 8000728:	603b      	str	r3, [r7, #0]
 800072a:	4b1c      	ldr	r3, [pc, #112]	@ (800079c <MX_GPIO_Init+0xc4>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800072e:	4a1b      	ldr	r2, [pc, #108]	@ (800079c <MX_GPIO_Init+0xc4>)
 8000730:	f043 0308 	orr.w	r3, r3, #8
 8000734:	6313      	str	r3, [r2, #48]	@ 0x30
 8000736:	4b19      	ldr	r3, [pc, #100]	@ (800079c <MX_GPIO_Init+0xc4>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800073a:	f003 0308 	and.w	r3, r3, #8
 800073e:	603b      	str	r3, [r7, #0]
 8000740:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8000742:	2200      	movs	r2, #0
 8000744:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000748:	4815      	ldr	r0, [pc, #84]	@ (80007a0 <MX_GPIO_Init+0xc8>)
 800074a:	f000 fc79 	bl	8001040 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800074e:	2301      	movs	r3, #1
 8000750:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000752:	4b14      	ldr	r3, [pc, #80]	@ (80007a4 <MX_GPIO_Init+0xcc>)
 8000754:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000756:	2300      	movs	r3, #0
 8000758:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800075a:	f107 030c 	add.w	r3, r7, #12
 800075e:	4619      	mov	r1, r3
 8000760:	4811      	ldr	r0, [pc, #68]	@ (80007a8 <MX_GPIO_Init+0xd0>)
 8000762:	f000 fad1 	bl	8000d08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000766:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800076a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800076c:	2301      	movs	r3, #1
 800076e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000770:	2300      	movs	r3, #0
 8000772:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000774:	2300      	movs	r3, #0
 8000776:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000778:	f107 030c 	add.w	r3, r7, #12
 800077c:	4619      	mov	r1, r3
 800077e:	4808      	ldr	r0, [pc, #32]	@ (80007a0 <MX_GPIO_Init+0xc8>)
 8000780:	f000 fac2 	bl	8000d08 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000784:	2200      	movs	r2, #0
 8000786:	2100      	movs	r1, #0
 8000788:	2006      	movs	r0, #6
 800078a:	f000 fa93 	bl	8000cb4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800078e:	2006      	movs	r0, #6
 8000790:	f000 faac 	bl	8000cec <HAL_NVIC_EnableIRQ>

}
 8000794:	bf00      	nop
 8000796:	3720      	adds	r7, #32
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	40023800 	.word	0x40023800
 80007a0:	40020c00 	.word	0x40020c00
 80007a4:	10110000 	.word	0x10110000
 80007a8:	40020000 	.word	0x40020000

080007ac <led_task_handler>:

/* USER CODE BEGIN 4 */

static void led_task_handler(void* parameters)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b082      	sub	sp, #8
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
	while(1)
	{
		if(BNT_Status == PRESS)
 80007b4:	4b08      	ldr	r3, [pc, #32]	@ (80007d8 <led_task_handler+0x2c>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	2b01      	cmp	r3, #1
 80007ba:	d106      	bne.n	80007ca <led_task_handler+0x1e>
		{
			// set led
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 80007bc:	2201      	movs	r2, #1
 80007be:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80007c2:	4806      	ldr	r0, [pc, #24]	@ (80007dc <led_task_handler+0x30>)
 80007c4:	f000 fc3c 	bl	8001040 <HAL_GPIO_WritePin>
 80007c8:	e7f4      	b.n	80007b4 <led_task_handler+0x8>
		}else
		{
			// off led
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 80007ca:	2200      	movs	r2, #0
 80007cc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80007d0:	4802      	ldr	r0, [pc, #8]	@ (80007dc <led_task_handler+0x30>)
 80007d2:	f000 fc35 	bl	8001040 <HAL_GPIO_WritePin>
		if(BNT_Status == PRESS)
 80007d6:	e7ed      	b.n	80007b4 <led_task_handler+0x8>
 80007d8:	20000070 	.word	0x20000070
 80007dc:	40020c00 	.word	0x40020c00

080007e0 <HAL_GPIO_EXTI_Callback>:
		}
	}
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80007e0:	b480      	push	{r7}
 80007e2:	b083      	sub	sp, #12
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	4603      	mov	r3, r0
 80007e8:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_0)
 80007ea:	88fb      	ldrh	r3, [r7, #6]
 80007ec:	2b01      	cmp	r3, #1
 80007ee:	d10a      	bne.n	8000806 <HAL_GPIO_EXTI_Callback+0x26>
	{
		if(BNT_Status == PRESS)
 80007f0:	4b08      	ldr	r3, [pc, #32]	@ (8000814 <HAL_GPIO_EXTI_Callback+0x34>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	2b01      	cmp	r3, #1
 80007f6:	d103      	bne.n	8000800 <HAL_GPIO_EXTI_Callback+0x20>
		{
			BNT_Status = UNPRESS;
 80007f8:	4b06      	ldr	r3, [pc, #24]	@ (8000814 <HAL_GPIO_EXTI_Callback+0x34>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	601a      	str	r2, [r3, #0]
		else
		{
			BNT_Status = PRESS;
		}
	}
}
 80007fe:	e002      	b.n	8000806 <HAL_GPIO_EXTI_Callback+0x26>
			BNT_Status = PRESS;
 8000800:	4b04      	ldr	r3, [pc, #16]	@ (8000814 <HAL_GPIO_EXTI_Callback+0x34>)
 8000802:	2201      	movs	r2, #1
 8000804:	601a      	str	r2, [r3, #0]
}
 8000806:	bf00      	nop
 8000808:	370c      	adds	r7, #12
 800080a:	46bd      	mov	sp, r7
 800080c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000810:	4770      	bx	lr
 8000812:	bf00      	nop
 8000814:	20000070 	.word	0x20000070

08000818 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	4a04      	ldr	r2, [pc, #16]	@ (8000838 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000826:	4293      	cmp	r3, r2
 8000828:	d101      	bne.n	800082e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800082a:	f000 f96b 	bl	8000b04 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800082e:	bf00      	nop
 8000830:	3708      	adds	r7, #8
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	40001000 	.word	0x40001000

0800083c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000840:	bf00      	nop
 8000842:	46bd      	mov	sp, r7
 8000844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000848:	4770      	bx	lr
	...

0800084c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000852:	2300      	movs	r3, #0
 8000854:	607b      	str	r3, [r7, #4]
 8000856:	4b10      	ldr	r3, [pc, #64]	@ (8000898 <HAL_MspInit+0x4c>)
 8000858:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800085a:	4a0f      	ldr	r2, [pc, #60]	@ (8000898 <HAL_MspInit+0x4c>)
 800085c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000860:	6453      	str	r3, [r2, #68]	@ 0x44
 8000862:	4b0d      	ldr	r3, [pc, #52]	@ (8000898 <HAL_MspInit+0x4c>)
 8000864:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000866:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800086a:	607b      	str	r3, [r7, #4]
 800086c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800086e:	2300      	movs	r3, #0
 8000870:	603b      	str	r3, [r7, #0]
 8000872:	4b09      	ldr	r3, [pc, #36]	@ (8000898 <HAL_MspInit+0x4c>)
 8000874:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000876:	4a08      	ldr	r2, [pc, #32]	@ (8000898 <HAL_MspInit+0x4c>)
 8000878:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800087c:	6413      	str	r3, [r2, #64]	@ 0x40
 800087e:	4b06      	ldr	r3, [pc, #24]	@ (8000898 <HAL_MspInit+0x4c>)
 8000880:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000882:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000886:	603b      	str	r3, [r7, #0]
 8000888:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  vInitPrioGroupValue();
 800088a:	f002 fe1f 	bl	80034cc <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 800088e:	bf00      	nop
 8000890:	3708      	adds	r7, #8
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	40023800 	.word	0x40023800

0800089c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b08a      	sub	sp, #40	@ 0x28
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a4:	f107 0314 	add.w	r3, r7, #20
 80008a8:	2200      	movs	r2, #0
 80008aa:	601a      	str	r2, [r3, #0]
 80008ac:	605a      	str	r2, [r3, #4]
 80008ae:	609a      	str	r2, [r3, #8]
 80008b0:	60da      	str	r2, [r3, #12]
 80008b2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	4a19      	ldr	r2, [pc, #100]	@ (8000920 <HAL_UART_MspInit+0x84>)
 80008ba:	4293      	cmp	r3, r2
 80008bc:	d12c      	bne.n	8000918 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80008be:	2300      	movs	r3, #0
 80008c0:	613b      	str	r3, [r7, #16]
 80008c2:	4b18      	ldr	r3, [pc, #96]	@ (8000924 <HAL_UART_MspInit+0x88>)
 80008c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008c6:	4a17      	ldr	r2, [pc, #92]	@ (8000924 <HAL_UART_MspInit+0x88>)
 80008c8:	f043 0310 	orr.w	r3, r3, #16
 80008cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80008ce:	4b15      	ldr	r3, [pc, #84]	@ (8000924 <HAL_UART_MspInit+0x88>)
 80008d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008d2:	f003 0310 	and.w	r3, r3, #16
 80008d6:	613b      	str	r3, [r7, #16]
 80008d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008da:	2300      	movs	r3, #0
 80008dc:	60fb      	str	r3, [r7, #12]
 80008de:	4b11      	ldr	r3, [pc, #68]	@ (8000924 <HAL_UART_MspInit+0x88>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008e2:	4a10      	ldr	r2, [pc, #64]	@ (8000924 <HAL_UART_MspInit+0x88>)
 80008e4:	f043 0301 	orr.w	r3, r3, #1
 80008e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ea:	4b0e      	ldr	r3, [pc, #56]	@ (8000924 <HAL_UART_MspInit+0x88>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ee:	f003 0301 	and.w	r3, r3, #1
 80008f2:	60fb      	str	r3, [r7, #12]
 80008f4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80008f6:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80008fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008fc:	2302      	movs	r3, #2
 80008fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000900:	2300      	movs	r3, #0
 8000902:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000904:	2303      	movs	r3, #3
 8000906:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000908:	2307      	movs	r3, #7
 800090a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800090c:	f107 0314 	add.w	r3, r7, #20
 8000910:	4619      	mov	r1, r3
 8000912:	4805      	ldr	r0, [pc, #20]	@ (8000928 <HAL_UART_MspInit+0x8c>)
 8000914:	f000 f9f8 	bl	8000d08 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000918:	bf00      	nop
 800091a:	3728      	adds	r7, #40	@ 0x28
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}
 8000920:	40011000 	.word	0x40011000
 8000924:	40023800 	.word	0x40023800
 8000928:	40020000 	.word	0x40020000

0800092c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b08c      	sub	sp, #48	@ 0x30
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000934:	2300      	movs	r3, #0
 8000936:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000938:	2300      	movs	r3, #0
 800093a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 800093c:	2200      	movs	r2, #0
 800093e:	6879      	ldr	r1, [r7, #4]
 8000940:	2036      	movs	r0, #54	@ 0x36
 8000942:	f000 f9b7 	bl	8000cb4 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000946:	2036      	movs	r0, #54	@ 0x36
 8000948:	f000 f9d0 	bl	8000cec <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800094c:	2300      	movs	r3, #0
 800094e:	60fb      	str	r3, [r7, #12]
 8000950:	4b1f      	ldr	r3, [pc, #124]	@ (80009d0 <HAL_InitTick+0xa4>)
 8000952:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000954:	4a1e      	ldr	r2, [pc, #120]	@ (80009d0 <HAL_InitTick+0xa4>)
 8000956:	f043 0310 	orr.w	r3, r3, #16
 800095a:	6413      	str	r3, [r2, #64]	@ 0x40
 800095c:	4b1c      	ldr	r3, [pc, #112]	@ (80009d0 <HAL_InitTick+0xa4>)
 800095e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000960:	f003 0310 	and.w	r3, r3, #16
 8000964:	60fb      	str	r3, [r7, #12]
 8000966:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000968:	f107 0210 	add.w	r2, r7, #16
 800096c:	f107 0314 	add.w	r3, r7, #20
 8000970:	4611      	mov	r1, r2
 8000972:	4618      	mov	r0, r3
 8000974:	f001 f824 	bl	80019c0 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000978:	f000 fffa 	bl	8001970 <HAL_RCC_GetPCLK1Freq>
 800097c:	4603      	mov	r3, r0
 800097e:	005b      	lsls	r3, r3, #1
 8000980:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000982:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000984:	4a13      	ldr	r2, [pc, #76]	@ (80009d4 <HAL_InitTick+0xa8>)
 8000986:	fba2 2303 	umull	r2, r3, r2, r3
 800098a:	0c9b      	lsrs	r3, r3, #18
 800098c:	3b01      	subs	r3, #1
 800098e:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000990:	4b11      	ldr	r3, [pc, #68]	@ (80009d8 <HAL_InitTick+0xac>)
 8000992:	4a12      	ldr	r2, [pc, #72]	@ (80009dc <HAL_InitTick+0xb0>)
 8000994:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8000996:	4b10      	ldr	r3, [pc, #64]	@ (80009d8 <HAL_InitTick+0xac>)
 8000998:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800099c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800099e:	4a0e      	ldr	r2, [pc, #56]	@ (80009d8 <HAL_InitTick+0xac>)
 80009a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80009a2:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80009a4:	4b0c      	ldr	r3, [pc, #48]	@ (80009d8 <HAL_InitTick+0xac>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009aa:	4b0b      	ldr	r3, [pc, #44]	@ (80009d8 <HAL_InitTick+0xac>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80009b0:	4809      	ldr	r0, [pc, #36]	@ (80009d8 <HAL_InitTick+0xac>)
 80009b2:	f001 f837 	bl	8001a24 <HAL_TIM_Base_Init>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d104      	bne.n	80009c6 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80009bc:	4806      	ldr	r0, [pc, #24]	@ (80009d8 <HAL_InitTick+0xac>)
 80009be:	f001 f866 	bl	8001a8e <HAL_TIM_Base_Start_IT>
 80009c2:	4603      	mov	r3, r0
 80009c4:	e000      	b.n	80009c8 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80009c6:	2301      	movs	r3, #1
}
 80009c8:	4618      	mov	r0, r3
 80009ca:	3730      	adds	r7, #48	@ 0x30
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	40023800 	.word	0x40023800
 80009d4:	431bde83 	.word	0x431bde83
 80009d8:	20000074 	.word	0x20000074
 80009dc:	40001000 	.word	0x40001000

080009e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80009e4:	bf00      	nop
 80009e6:	46bd      	mov	sp, r7
 80009e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ec:	4770      	bx	lr

080009ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009ee:	b480      	push	{r7}
 80009f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009f2:	bf00      	nop
 80009f4:	e7fd      	b.n	80009f2 <HardFault_Handler+0x4>

080009f6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009f6:	b480      	push	{r7}
 80009f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009fa:	bf00      	nop
 80009fc:	e7fd      	b.n	80009fa <MemManage_Handler+0x4>

080009fe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009fe:	b480      	push	{r7}
 8000a00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a02:	bf00      	nop
 8000a04:	e7fd      	b.n	8000a02 <BusFault_Handler+0x4>

08000a06 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a06:	b480      	push	{r7}
 8000a08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a0a:	bf00      	nop
 8000a0c:	e7fd      	b.n	8000a0a <UsageFault_Handler+0x4>

08000a0e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a0e:	b480      	push	{r7}
 8000a10:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a12:	bf00      	nop
 8000a14:	46bd      	mov	sp, r7
 8000a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1a:	4770      	bx	lr

08000a1c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000a20:	2001      	movs	r0, #1
 8000a22:	f000 fb27 	bl	8001074 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000a26:	bf00      	nop
 8000a28:	bd80      	pop	{r7, pc}
	...

08000a2c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000a30:	4802      	ldr	r0, [pc, #8]	@ (8000a3c <TIM6_DAC_IRQHandler+0x10>)
 8000a32:	f001 f850 	bl	8001ad6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000a36:	bf00      	nop
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	20000074 	.word	0x20000074

08000a40 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a44:	4b08      	ldr	r3, [pc, #32]	@ (8000a68 <SystemInit+0x28>)
 8000a46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a4a:	4a07      	ldr	r2, [pc, #28]	@ (8000a68 <SystemInit+0x28>)
 8000a4c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a50:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a54:	4b04      	ldr	r3, [pc, #16]	@ (8000a68 <SystemInit+0x28>)
 8000a56:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000a5a:	609a      	str	r2, [r3, #8]
#endif
}
 8000a5c:	bf00      	nop
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop
 8000a68:	e000ed00 	.word	0xe000ed00

08000a6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000a6c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000aa4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000a70:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000a72:	e003      	b.n	8000a7c <LoopCopyDataInit>

08000a74 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000a74:	4b0c      	ldr	r3, [pc, #48]	@ (8000aa8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000a76:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000a78:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000a7a:	3104      	adds	r1, #4

08000a7c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000a7c:	480b      	ldr	r0, [pc, #44]	@ (8000aac <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000a7e:	4b0c      	ldr	r3, [pc, #48]	@ (8000ab0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000a80:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000a82:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000a84:	d3f6      	bcc.n	8000a74 <CopyDataInit>
  ldr  r2, =_sbss
 8000a86:	4a0b      	ldr	r2, [pc, #44]	@ (8000ab4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000a88:	e002      	b.n	8000a90 <LoopFillZerobss>

08000a8a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000a8a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000a8c:	f842 3b04 	str.w	r3, [r2], #4

08000a90 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000a90:	4b09      	ldr	r3, [pc, #36]	@ (8000ab8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000a92:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000a94:	d3f9      	bcc.n	8000a8a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000a96:	f7ff ffd3 	bl	8000a40 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a9a:	f004 fa77 	bl	8004f8c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a9e:	f7ff fd59 	bl	8000554 <main>
  bx  lr    
 8000aa2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000aa4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000aa8:	080050c0 	.word	0x080050c0
  ldr  r0, =_sdata
 8000aac:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000ab0:	20000014 	.word	0x20000014
  ldr  r2, =_sbss
 8000ab4:	20000014 	.word	0x20000014
  ldr  r3, = _ebss
 8000ab8:	2001345c 	.word	0x2001345c

08000abc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000abc:	e7fe      	b.n	8000abc <ADC_IRQHandler>
	...

08000ac0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ac4:	4b0e      	ldr	r3, [pc, #56]	@ (8000b00 <HAL_Init+0x40>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	4a0d      	ldr	r2, [pc, #52]	@ (8000b00 <HAL_Init+0x40>)
 8000aca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000ace:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ad0:	4b0b      	ldr	r3, [pc, #44]	@ (8000b00 <HAL_Init+0x40>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	4a0a      	ldr	r2, [pc, #40]	@ (8000b00 <HAL_Init+0x40>)
 8000ad6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000ada:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000adc:	4b08      	ldr	r3, [pc, #32]	@ (8000b00 <HAL_Init+0x40>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	4a07      	ldr	r2, [pc, #28]	@ (8000b00 <HAL_Init+0x40>)
 8000ae2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ae6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ae8:	2003      	movs	r0, #3
 8000aea:	f000 f8d8 	bl	8000c9e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000aee:	2000      	movs	r0, #0
 8000af0:	f7ff ff1c 	bl	800092c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000af4:	f7ff feaa 	bl	800084c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000af8:	2300      	movs	r3, #0
}
 8000afa:	4618      	mov	r0, r3
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	40023c00 	.word	0x40023c00

08000b04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b08:	4b06      	ldr	r3, [pc, #24]	@ (8000b24 <HAL_IncTick+0x20>)
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	461a      	mov	r2, r3
 8000b0e:	4b06      	ldr	r3, [pc, #24]	@ (8000b28 <HAL_IncTick+0x24>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	4413      	add	r3, r2
 8000b14:	4a04      	ldr	r2, [pc, #16]	@ (8000b28 <HAL_IncTick+0x24>)
 8000b16:	6013      	str	r3, [r2, #0]
}
 8000b18:	bf00      	nop
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
 8000b24:	20000008 	.word	0x20000008
 8000b28:	200000b4 	.word	0x200000b4

08000b2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b30:	4b03      	ldr	r3, [pc, #12]	@ (8000b40 <HAL_GetTick+0x14>)
 8000b32:	681b      	ldr	r3, [r3, #0]
}
 8000b34:	4618      	mov	r0, r3
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop
 8000b40:	200000b4 	.word	0x200000b4

08000b44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b44:	b480      	push	{r7}
 8000b46:	b085      	sub	sp, #20
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	f003 0307 	and.w	r3, r3, #7
 8000b52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b54:	4b0c      	ldr	r3, [pc, #48]	@ (8000b88 <__NVIC_SetPriorityGrouping+0x44>)
 8000b56:	68db      	ldr	r3, [r3, #12]
 8000b58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b5a:	68ba      	ldr	r2, [r7, #8]
 8000b5c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b60:	4013      	ands	r3, r2
 8000b62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b68:	68bb      	ldr	r3, [r7, #8]
 8000b6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b6c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b70:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b76:	4a04      	ldr	r2, [pc, #16]	@ (8000b88 <__NVIC_SetPriorityGrouping+0x44>)
 8000b78:	68bb      	ldr	r3, [r7, #8]
 8000b7a:	60d3      	str	r3, [r2, #12]
}
 8000b7c:	bf00      	nop
 8000b7e:	3714      	adds	r7, #20
 8000b80:	46bd      	mov	sp, r7
 8000b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b86:	4770      	bx	lr
 8000b88:	e000ed00 	.word	0xe000ed00

08000b8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b90:	4b04      	ldr	r3, [pc, #16]	@ (8000ba4 <__NVIC_GetPriorityGrouping+0x18>)
 8000b92:	68db      	ldr	r3, [r3, #12]
 8000b94:	0a1b      	lsrs	r3, r3, #8
 8000b96:	f003 0307 	and.w	r3, r3, #7
}
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba2:	4770      	bx	lr
 8000ba4:	e000ed00 	.word	0xe000ed00

08000ba8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b083      	sub	sp, #12
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	4603      	mov	r3, r0
 8000bb0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	db0b      	blt.n	8000bd2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bba:	79fb      	ldrb	r3, [r7, #7]
 8000bbc:	f003 021f 	and.w	r2, r3, #31
 8000bc0:	4907      	ldr	r1, [pc, #28]	@ (8000be0 <__NVIC_EnableIRQ+0x38>)
 8000bc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc6:	095b      	lsrs	r3, r3, #5
 8000bc8:	2001      	movs	r0, #1
 8000bca:	fa00 f202 	lsl.w	r2, r0, r2
 8000bce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000bd2:	bf00      	nop
 8000bd4:	370c      	adds	r7, #12
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop
 8000be0:	e000e100 	.word	0xe000e100

08000be4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000be4:	b480      	push	{r7}
 8000be6:	b083      	sub	sp, #12
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	4603      	mov	r3, r0
 8000bec:	6039      	str	r1, [r7, #0]
 8000bee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	db0a      	blt.n	8000c0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bf8:	683b      	ldr	r3, [r7, #0]
 8000bfa:	b2da      	uxtb	r2, r3
 8000bfc:	490c      	ldr	r1, [pc, #48]	@ (8000c30 <__NVIC_SetPriority+0x4c>)
 8000bfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c02:	0112      	lsls	r2, r2, #4
 8000c04:	b2d2      	uxtb	r2, r2
 8000c06:	440b      	add	r3, r1
 8000c08:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c0c:	e00a      	b.n	8000c24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	b2da      	uxtb	r2, r3
 8000c12:	4908      	ldr	r1, [pc, #32]	@ (8000c34 <__NVIC_SetPriority+0x50>)
 8000c14:	79fb      	ldrb	r3, [r7, #7]
 8000c16:	f003 030f 	and.w	r3, r3, #15
 8000c1a:	3b04      	subs	r3, #4
 8000c1c:	0112      	lsls	r2, r2, #4
 8000c1e:	b2d2      	uxtb	r2, r2
 8000c20:	440b      	add	r3, r1
 8000c22:	761a      	strb	r2, [r3, #24]
}
 8000c24:	bf00      	nop
 8000c26:	370c      	adds	r7, #12
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2e:	4770      	bx	lr
 8000c30:	e000e100 	.word	0xe000e100
 8000c34:	e000ed00 	.word	0xe000ed00

08000c38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b089      	sub	sp, #36	@ 0x24
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	60f8      	str	r0, [r7, #12]
 8000c40:	60b9      	str	r1, [r7, #8]
 8000c42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	f003 0307 	and.w	r3, r3, #7
 8000c4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c4c:	69fb      	ldr	r3, [r7, #28]
 8000c4e:	f1c3 0307 	rsb	r3, r3, #7
 8000c52:	2b04      	cmp	r3, #4
 8000c54:	bf28      	it	cs
 8000c56:	2304      	movcs	r3, #4
 8000c58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c5a:	69fb      	ldr	r3, [r7, #28]
 8000c5c:	3304      	adds	r3, #4
 8000c5e:	2b06      	cmp	r3, #6
 8000c60:	d902      	bls.n	8000c68 <NVIC_EncodePriority+0x30>
 8000c62:	69fb      	ldr	r3, [r7, #28]
 8000c64:	3b03      	subs	r3, #3
 8000c66:	e000      	b.n	8000c6a <NVIC_EncodePriority+0x32>
 8000c68:	2300      	movs	r3, #0
 8000c6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c6c:	f04f 32ff 	mov.w	r2, #4294967295
 8000c70:	69bb      	ldr	r3, [r7, #24]
 8000c72:	fa02 f303 	lsl.w	r3, r2, r3
 8000c76:	43da      	mvns	r2, r3
 8000c78:	68bb      	ldr	r3, [r7, #8]
 8000c7a:	401a      	ands	r2, r3
 8000c7c:	697b      	ldr	r3, [r7, #20]
 8000c7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c80:	f04f 31ff 	mov.w	r1, #4294967295
 8000c84:	697b      	ldr	r3, [r7, #20]
 8000c86:	fa01 f303 	lsl.w	r3, r1, r3
 8000c8a:	43d9      	mvns	r1, r3
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c90:	4313      	orrs	r3, r2
         );
}
 8000c92:	4618      	mov	r0, r3
 8000c94:	3724      	adds	r7, #36	@ 0x24
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr

08000c9e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c9e:	b580      	push	{r7, lr}
 8000ca0:	b082      	sub	sp, #8
 8000ca2:	af00      	add	r7, sp, #0
 8000ca4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ca6:	6878      	ldr	r0, [r7, #4]
 8000ca8:	f7ff ff4c 	bl	8000b44 <__NVIC_SetPriorityGrouping>
}
 8000cac:	bf00      	nop
 8000cae:	3708      	adds	r7, #8
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}

08000cb4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b086      	sub	sp, #24
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	4603      	mov	r3, r0
 8000cbc:	60b9      	str	r1, [r7, #8]
 8000cbe:	607a      	str	r2, [r7, #4]
 8000cc0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cc6:	f7ff ff61 	bl	8000b8c <__NVIC_GetPriorityGrouping>
 8000cca:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ccc:	687a      	ldr	r2, [r7, #4]
 8000cce:	68b9      	ldr	r1, [r7, #8]
 8000cd0:	6978      	ldr	r0, [r7, #20]
 8000cd2:	f7ff ffb1 	bl	8000c38 <NVIC_EncodePriority>
 8000cd6:	4602      	mov	r2, r0
 8000cd8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cdc:	4611      	mov	r1, r2
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f7ff ff80 	bl	8000be4 <__NVIC_SetPriority>
}
 8000ce4:	bf00      	nop
 8000ce6:	3718      	adds	r7, #24
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}

08000cec <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f7ff ff54 	bl	8000ba8 <__NVIC_EnableIRQ>
}
 8000d00:	bf00      	nop
 8000d02:	3708      	adds	r7, #8
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}

08000d08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b089      	sub	sp, #36	@ 0x24
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
 8000d10:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d12:	2300      	movs	r3, #0
 8000d14:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d16:	2300      	movs	r3, #0
 8000d18:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d1e:	2300      	movs	r3, #0
 8000d20:	61fb      	str	r3, [r7, #28]
 8000d22:	e16b      	b.n	8000ffc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d24:	2201      	movs	r2, #1
 8000d26:	69fb      	ldr	r3, [r7, #28]
 8000d28:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	697a      	ldr	r2, [r7, #20]
 8000d34:	4013      	ands	r3, r2
 8000d36:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d38:	693a      	ldr	r2, [r7, #16]
 8000d3a:	697b      	ldr	r3, [r7, #20]
 8000d3c:	429a      	cmp	r2, r3
 8000d3e:	f040 815a 	bne.w	8000ff6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d42:	683b      	ldr	r3, [r7, #0]
 8000d44:	685b      	ldr	r3, [r3, #4]
 8000d46:	2b01      	cmp	r3, #1
 8000d48:	d00b      	beq.n	8000d62 <HAL_GPIO_Init+0x5a>
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	685b      	ldr	r3, [r3, #4]
 8000d4e:	2b02      	cmp	r3, #2
 8000d50:	d007      	beq.n	8000d62 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d56:	2b11      	cmp	r3, #17
 8000d58:	d003      	beq.n	8000d62 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	685b      	ldr	r3, [r3, #4]
 8000d5e:	2b12      	cmp	r3, #18
 8000d60:	d130      	bne.n	8000dc4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	689b      	ldr	r3, [r3, #8]
 8000d66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d68:	69fb      	ldr	r3, [r7, #28]
 8000d6a:	005b      	lsls	r3, r3, #1
 8000d6c:	2203      	movs	r2, #3
 8000d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d72:	43db      	mvns	r3, r3
 8000d74:	69ba      	ldr	r2, [r7, #24]
 8000d76:	4013      	ands	r3, r2
 8000d78:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	68da      	ldr	r2, [r3, #12]
 8000d7e:	69fb      	ldr	r3, [r7, #28]
 8000d80:	005b      	lsls	r3, r3, #1
 8000d82:	fa02 f303 	lsl.w	r3, r2, r3
 8000d86:	69ba      	ldr	r2, [r7, #24]
 8000d88:	4313      	orrs	r3, r2
 8000d8a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	69ba      	ldr	r2, [r7, #24]
 8000d90:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	685b      	ldr	r3, [r3, #4]
 8000d96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d98:	2201      	movs	r2, #1
 8000d9a:	69fb      	ldr	r3, [r7, #28]
 8000d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000da0:	43db      	mvns	r3, r3
 8000da2:	69ba      	ldr	r2, [r7, #24]
 8000da4:	4013      	ands	r3, r2
 8000da6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	685b      	ldr	r3, [r3, #4]
 8000dac:	091b      	lsrs	r3, r3, #4
 8000dae:	f003 0201 	and.w	r2, r3, #1
 8000db2:	69fb      	ldr	r3, [r7, #28]
 8000db4:	fa02 f303 	lsl.w	r3, r2, r3
 8000db8:	69ba      	ldr	r2, [r7, #24]
 8000dba:	4313      	orrs	r3, r2
 8000dbc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	69ba      	ldr	r2, [r7, #24]
 8000dc2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	68db      	ldr	r3, [r3, #12]
 8000dc8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000dca:	69fb      	ldr	r3, [r7, #28]
 8000dcc:	005b      	lsls	r3, r3, #1
 8000dce:	2203      	movs	r2, #3
 8000dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd4:	43db      	mvns	r3, r3
 8000dd6:	69ba      	ldr	r2, [r7, #24]
 8000dd8:	4013      	ands	r3, r2
 8000dda:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	689a      	ldr	r2, [r3, #8]
 8000de0:	69fb      	ldr	r3, [r7, #28]
 8000de2:	005b      	lsls	r3, r3, #1
 8000de4:	fa02 f303 	lsl.w	r3, r2, r3
 8000de8:	69ba      	ldr	r2, [r7, #24]
 8000dea:	4313      	orrs	r3, r2
 8000dec:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	69ba      	ldr	r2, [r7, #24]
 8000df2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	2b02      	cmp	r3, #2
 8000dfa:	d003      	beq.n	8000e04 <HAL_GPIO_Init+0xfc>
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	685b      	ldr	r3, [r3, #4]
 8000e00:	2b12      	cmp	r3, #18
 8000e02:	d123      	bne.n	8000e4c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e04:	69fb      	ldr	r3, [r7, #28]
 8000e06:	08da      	lsrs	r2, r3, #3
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	3208      	adds	r2, #8
 8000e0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e10:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e12:	69fb      	ldr	r3, [r7, #28]
 8000e14:	f003 0307 	and.w	r3, r3, #7
 8000e18:	009b      	lsls	r3, r3, #2
 8000e1a:	220f      	movs	r2, #15
 8000e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e20:	43db      	mvns	r3, r3
 8000e22:	69ba      	ldr	r2, [r7, #24]
 8000e24:	4013      	ands	r3, r2
 8000e26:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	691a      	ldr	r2, [r3, #16]
 8000e2c:	69fb      	ldr	r3, [r7, #28]
 8000e2e:	f003 0307 	and.w	r3, r3, #7
 8000e32:	009b      	lsls	r3, r3, #2
 8000e34:	fa02 f303 	lsl.w	r3, r2, r3
 8000e38:	69ba      	ldr	r2, [r7, #24]
 8000e3a:	4313      	orrs	r3, r2
 8000e3c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e3e:	69fb      	ldr	r3, [r7, #28]
 8000e40:	08da      	lsrs	r2, r3, #3
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	3208      	adds	r2, #8
 8000e46:	69b9      	ldr	r1, [r7, #24]
 8000e48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e52:	69fb      	ldr	r3, [r7, #28]
 8000e54:	005b      	lsls	r3, r3, #1
 8000e56:	2203      	movs	r2, #3
 8000e58:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5c:	43db      	mvns	r3, r3
 8000e5e:	69ba      	ldr	r2, [r7, #24]
 8000e60:	4013      	ands	r3, r2
 8000e62:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	685b      	ldr	r3, [r3, #4]
 8000e68:	f003 0203 	and.w	r2, r3, #3
 8000e6c:	69fb      	ldr	r3, [r7, #28]
 8000e6e:	005b      	lsls	r3, r3, #1
 8000e70:	fa02 f303 	lsl.w	r3, r2, r3
 8000e74:	69ba      	ldr	r2, [r7, #24]
 8000e76:	4313      	orrs	r3, r2
 8000e78:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	69ba      	ldr	r2, [r7, #24]
 8000e7e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	685b      	ldr	r3, [r3, #4]
 8000e84:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	f000 80b4 	beq.w	8000ff6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e8e:	2300      	movs	r3, #0
 8000e90:	60fb      	str	r3, [r7, #12]
 8000e92:	4b60      	ldr	r3, [pc, #384]	@ (8001014 <HAL_GPIO_Init+0x30c>)
 8000e94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e96:	4a5f      	ldr	r2, [pc, #380]	@ (8001014 <HAL_GPIO_Init+0x30c>)
 8000e98:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e9c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e9e:	4b5d      	ldr	r3, [pc, #372]	@ (8001014 <HAL_GPIO_Init+0x30c>)
 8000ea0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ea2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ea6:	60fb      	str	r3, [r7, #12]
 8000ea8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000eaa:	4a5b      	ldr	r2, [pc, #364]	@ (8001018 <HAL_GPIO_Init+0x310>)
 8000eac:	69fb      	ldr	r3, [r7, #28]
 8000eae:	089b      	lsrs	r3, r3, #2
 8000eb0:	3302      	adds	r3, #2
 8000eb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000eb8:	69fb      	ldr	r3, [r7, #28]
 8000eba:	f003 0303 	and.w	r3, r3, #3
 8000ebe:	009b      	lsls	r3, r3, #2
 8000ec0:	220f      	movs	r2, #15
 8000ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec6:	43db      	mvns	r3, r3
 8000ec8:	69ba      	ldr	r2, [r7, #24]
 8000eca:	4013      	ands	r3, r2
 8000ecc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	4a52      	ldr	r2, [pc, #328]	@ (800101c <HAL_GPIO_Init+0x314>)
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	d02b      	beq.n	8000f2e <HAL_GPIO_Init+0x226>
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	4a51      	ldr	r2, [pc, #324]	@ (8001020 <HAL_GPIO_Init+0x318>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d025      	beq.n	8000f2a <HAL_GPIO_Init+0x222>
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	4a50      	ldr	r2, [pc, #320]	@ (8001024 <HAL_GPIO_Init+0x31c>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d01f      	beq.n	8000f26 <HAL_GPIO_Init+0x21e>
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	4a4f      	ldr	r2, [pc, #316]	@ (8001028 <HAL_GPIO_Init+0x320>)
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d019      	beq.n	8000f22 <HAL_GPIO_Init+0x21a>
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	4a4e      	ldr	r2, [pc, #312]	@ (800102c <HAL_GPIO_Init+0x324>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d013      	beq.n	8000f1e <HAL_GPIO_Init+0x216>
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	4a4d      	ldr	r2, [pc, #308]	@ (8001030 <HAL_GPIO_Init+0x328>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d00d      	beq.n	8000f1a <HAL_GPIO_Init+0x212>
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	4a4c      	ldr	r2, [pc, #304]	@ (8001034 <HAL_GPIO_Init+0x32c>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d007      	beq.n	8000f16 <HAL_GPIO_Init+0x20e>
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	4a4b      	ldr	r2, [pc, #300]	@ (8001038 <HAL_GPIO_Init+0x330>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d101      	bne.n	8000f12 <HAL_GPIO_Init+0x20a>
 8000f0e:	2307      	movs	r3, #7
 8000f10:	e00e      	b.n	8000f30 <HAL_GPIO_Init+0x228>
 8000f12:	2308      	movs	r3, #8
 8000f14:	e00c      	b.n	8000f30 <HAL_GPIO_Init+0x228>
 8000f16:	2306      	movs	r3, #6
 8000f18:	e00a      	b.n	8000f30 <HAL_GPIO_Init+0x228>
 8000f1a:	2305      	movs	r3, #5
 8000f1c:	e008      	b.n	8000f30 <HAL_GPIO_Init+0x228>
 8000f1e:	2304      	movs	r3, #4
 8000f20:	e006      	b.n	8000f30 <HAL_GPIO_Init+0x228>
 8000f22:	2303      	movs	r3, #3
 8000f24:	e004      	b.n	8000f30 <HAL_GPIO_Init+0x228>
 8000f26:	2302      	movs	r3, #2
 8000f28:	e002      	b.n	8000f30 <HAL_GPIO_Init+0x228>
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	e000      	b.n	8000f30 <HAL_GPIO_Init+0x228>
 8000f2e:	2300      	movs	r3, #0
 8000f30:	69fa      	ldr	r2, [r7, #28]
 8000f32:	f002 0203 	and.w	r2, r2, #3
 8000f36:	0092      	lsls	r2, r2, #2
 8000f38:	4093      	lsls	r3, r2
 8000f3a:	69ba      	ldr	r2, [r7, #24]
 8000f3c:	4313      	orrs	r3, r2
 8000f3e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f40:	4935      	ldr	r1, [pc, #212]	@ (8001018 <HAL_GPIO_Init+0x310>)
 8000f42:	69fb      	ldr	r3, [r7, #28]
 8000f44:	089b      	lsrs	r3, r3, #2
 8000f46:	3302      	adds	r3, #2
 8000f48:	69ba      	ldr	r2, [r7, #24]
 8000f4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f4e:	4b3b      	ldr	r3, [pc, #236]	@ (800103c <HAL_GPIO_Init+0x334>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f54:	693b      	ldr	r3, [r7, #16]
 8000f56:	43db      	mvns	r3, r3
 8000f58:	69ba      	ldr	r2, [r7, #24]
 8000f5a:	4013      	ands	r3, r2
 8000f5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d003      	beq.n	8000f72 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000f6a:	69ba      	ldr	r2, [r7, #24]
 8000f6c:	693b      	ldr	r3, [r7, #16]
 8000f6e:	4313      	orrs	r3, r2
 8000f70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f72:	4a32      	ldr	r2, [pc, #200]	@ (800103c <HAL_GPIO_Init+0x334>)
 8000f74:	69bb      	ldr	r3, [r7, #24]
 8000f76:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000f78:	4b30      	ldr	r3, [pc, #192]	@ (800103c <HAL_GPIO_Init+0x334>)
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f7e:	693b      	ldr	r3, [r7, #16]
 8000f80:	43db      	mvns	r3, r3
 8000f82:	69ba      	ldr	r2, [r7, #24]
 8000f84:	4013      	ands	r3, r2
 8000f86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d003      	beq.n	8000f9c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000f94:	69ba      	ldr	r2, [r7, #24]
 8000f96:	693b      	ldr	r3, [r7, #16]
 8000f98:	4313      	orrs	r3, r2
 8000f9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f9c:	4a27      	ldr	r2, [pc, #156]	@ (800103c <HAL_GPIO_Init+0x334>)
 8000f9e:	69bb      	ldr	r3, [r7, #24]
 8000fa0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fa2:	4b26      	ldr	r3, [pc, #152]	@ (800103c <HAL_GPIO_Init+0x334>)
 8000fa4:	689b      	ldr	r3, [r3, #8]
 8000fa6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fa8:	693b      	ldr	r3, [r7, #16]
 8000faa:	43db      	mvns	r3, r3
 8000fac:	69ba      	ldr	r2, [r7, #24]
 8000fae:	4013      	ands	r3, r2
 8000fb0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d003      	beq.n	8000fc6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000fbe:	69ba      	ldr	r2, [r7, #24]
 8000fc0:	693b      	ldr	r3, [r7, #16]
 8000fc2:	4313      	orrs	r3, r2
 8000fc4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000fc6:	4a1d      	ldr	r2, [pc, #116]	@ (800103c <HAL_GPIO_Init+0x334>)
 8000fc8:	69bb      	ldr	r3, [r7, #24]
 8000fca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000fcc:	4b1b      	ldr	r3, [pc, #108]	@ (800103c <HAL_GPIO_Init+0x334>)
 8000fce:	68db      	ldr	r3, [r3, #12]
 8000fd0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fd2:	693b      	ldr	r3, [r7, #16]
 8000fd4:	43db      	mvns	r3, r3
 8000fd6:	69ba      	ldr	r2, [r7, #24]
 8000fd8:	4013      	ands	r3, r2
 8000fda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d003      	beq.n	8000ff0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000fe8:	69ba      	ldr	r2, [r7, #24]
 8000fea:	693b      	ldr	r3, [r7, #16]
 8000fec:	4313      	orrs	r3, r2
 8000fee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000ff0:	4a12      	ldr	r2, [pc, #72]	@ (800103c <HAL_GPIO_Init+0x334>)
 8000ff2:	69bb      	ldr	r3, [r7, #24]
 8000ff4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ff6:	69fb      	ldr	r3, [r7, #28]
 8000ff8:	3301      	adds	r3, #1
 8000ffa:	61fb      	str	r3, [r7, #28]
 8000ffc:	69fb      	ldr	r3, [r7, #28]
 8000ffe:	2b0f      	cmp	r3, #15
 8001000:	f67f ae90 	bls.w	8000d24 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001004:	bf00      	nop
 8001006:	bf00      	nop
 8001008:	3724      	adds	r7, #36	@ 0x24
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop
 8001014:	40023800 	.word	0x40023800
 8001018:	40013800 	.word	0x40013800
 800101c:	40020000 	.word	0x40020000
 8001020:	40020400 	.word	0x40020400
 8001024:	40020800 	.word	0x40020800
 8001028:	40020c00 	.word	0x40020c00
 800102c:	40021000 	.word	0x40021000
 8001030:	40021400 	.word	0x40021400
 8001034:	40021800 	.word	0x40021800
 8001038:	40021c00 	.word	0x40021c00
 800103c:	40013c00 	.word	0x40013c00

08001040 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001040:	b480      	push	{r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
 8001048:	460b      	mov	r3, r1
 800104a:	807b      	strh	r3, [r7, #2]
 800104c:	4613      	mov	r3, r2
 800104e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001050:	787b      	ldrb	r3, [r7, #1]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d003      	beq.n	800105e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001056:	887a      	ldrh	r2, [r7, #2]
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800105c:	e003      	b.n	8001066 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800105e:	887b      	ldrh	r3, [r7, #2]
 8001060:	041a      	lsls	r2, r3, #16
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	619a      	str	r2, [r3, #24]
}
 8001066:	bf00      	nop
 8001068:	370c      	adds	r7, #12
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
	...

08001074 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	4603      	mov	r3, r0
 800107c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800107e:	4b08      	ldr	r3, [pc, #32]	@ (80010a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001080:	695a      	ldr	r2, [r3, #20]
 8001082:	88fb      	ldrh	r3, [r7, #6]
 8001084:	4013      	ands	r3, r2
 8001086:	2b00      	cmp	r3, #0
 8001088:	d006      	beq.n	8001098 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800108a:	4a05      	ldr	r2, [pc, #20]	@ (80010a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800108c:	88fb      	ldrh	r3, [r7, #6]
 800108e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001090:	88fb      	ldrh	r3, [r7, #6]
 8001092:	4618      	mov	r0, r3
 8001094:	f7ff fba4 	bl	80007e0 <HAL_GPIO_EXTI_Callback>
  }
}
 8001098:	bf00      	nop
 800109a:	3708      	adds	r7, #8
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	40013c00 	.word	0x40013c00

080010a4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b086      	sub	sp, #24
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d101      	bne.n	80010b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80010b2:	2301      	movs	r3, #1
 80010b4:	e25e      	b.n	8001574 <HAL_RCC_OscConfig+0x4d0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f003 0301 	and.w	r3, r3, #1
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d075      	beq.n	80011ae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80010c2:	4b88      	ldr	r3, [pc, #544]	@ (80012e4 <HAL_RCC_OscConfig+0x240>)
 80010c4:	689b      	ldr	r3, [r3, #8]
 80010c6:	f003 030c 	and.w	r3, r3, #12
 80010ca:	2b04      	cmp	r3, #4
 80010cc:	d00c      	beq.n	80010e8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80010ce:	4b85      	ldr	r3, [pc, #532]	@ (80012e4 <HAL_RCC_OscConfig+0x240>)
 80010d0:	689b      	ldr	r3, [r3, #8]
 80010d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80010d6:	2b08      	cmp	r3, #8
 80010d8:	d112      	bne.n	8001100 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80010da:	4b82      	ldr	r3, [pc, #520]	@ (80012e4 <HAL_RCC_OscConfig+0x240>)
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80010e2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80010e6:	d10b      	bne.n	8001100 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010e8:	4b7e      	ldr	r3, [pc, #504]	@ (80012e4 <HAL_RCC_OscConfig+0x240>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d05b      	beq.n	80011ac <HAL_RCC_OscConfig+0x108>
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d157      	bne.n	80011ac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80010fc:	2301      	movs	r3, #1
 80010fe:	e239      	b.n	8001574 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001108:	d106      	bne.n	8001118 <HAL_RCC_OscConfig+0x74>
 800110a:	4b76      	ldr	r3, [pc, #472]	@ (80012e4 <HAL_RCC_OscConfig+0x240>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	4a75      	ldr	r2, [pc, #468]	@ (80012e4 <HAL_RCC_OscConfig+0x240>)
 8001110:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001114:	6013      	str	r3, [r2, #0]
 8001116:	e01d      	b.n	8001154 <HAL_RCC_OscConfig+0xb0>
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001120:	d10c      	bne.n	800113c <HAL_RCC_OscConfig+0x98>
 8001122:	4b70      	ldr	r3, [pc, #448]	@ (80012e4 <HAL_RCC_OscConfig+0x240>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4a6f      	ldr	r2, [pc, #444]	@ (80012e4 <HAL_RCC_OscConfig+0x240>)
 8001128:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800112c:	6013      	str	r3, [r2, #0]
 800112e:	4b6d      	ldr	r3, [pc, #436]	@ (80012e4 <HAL_RCC_OscConfig+0x240>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	4a6c      	ldr	r2, [pc, #432]	@ (80012e4 <HAL_RCC_OscConfig+0x240>)
 8001134:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001138:	6013      	str	r3, [r2, #0]
 800113a:	e00b      	b.n	8001154 <HAL_RCC_OscConfig+0xb0>
 800113c:	4b69      	ldr	r3, [pc, #420]	@ (80012e4 <HAL_RCC_OscConfig+0x240>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4a68      	ldr	r2, [pc, #416]	@ (80012e4 <HAL_RCC_OscConfig+0x240>)
 8001142:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001146:	6013      	str	r3, [r2, #0]
 8001148:	4b66      	ldr	r3, [pc, #408]	@ (80012e4 <HAL_RCC_OscConfig+0x240>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a65      	ldr	r2, [pc, #404]	@ (80012e4 <HAL_RCC_OscConfig+0x240>)
 800114e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001152:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d013      	beq.n	8001184 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800115c:	f7ff fce6 	bl	8000b2c <HAL_GetTick>
 8001160:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001162:	e008      	b.n	8001176 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001164:	f7ff fce2 	bl	8000b2c <HAL_GetTick>
 8001168:	4602      	mov	r2, r0
 800116a:	693b      	ldr	r3, [r7, #16]
 800116c:	1ad3      	subs	r3, r2, r3
 800116e:	2b64      	cmp	r3, #100	@ 0x64
 8001170:	d901      	bls.n	8001176 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001172:	2303      	movs	r3, #3
 8001174:	e1fe      	b.n	8001574 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001176:	4b5b      	ldr	r3, [pc, #364]	@ (80012e4 <HAL_RCC_OscConfig+0x240>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800117e:	2b00      	cmp	r3, #0
 8001180:	d0f0      	beq.n	8001164 <HAL_RCC_OscConfig+0xc0>
 8001182:	e014      	b.n	80011ae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001184:	f7ff fcd2 	bl	8000b2c <HAL_GetTick>
 8001188:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800118a:	e008      	b.n	800119e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800118c:	f7ff fcce 	bl	8000b2c <HAL_GetTick>
 8001190:	4602      	mov	r2, r0
 8001192:	693b      	ldr	r3, [r7, #16]
 8001194:	1ad3      	subs	r3, r2, r3
 8001196:	2b64      	cmp	r3, #100	@ 0x64
 8001198:	d901      	bls.n	800119e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800119a:	2303      	movs	r3, #3
 800119c:	e1ea      	b.n	8001574 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800119e:	4b51      	ldr	r3, [pc, #324]	@ (80012e4 <HAL_RCC_OscConfig+0x240>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d1f0      	bne.n	800118c <HAL_RCC_OscConfig+0xe8>
 80011aa:	e000      	b.n	80011ae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f003 0302 	and.w	r3, r3, #2
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d063      	beq.n	8001282 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80011ba:	4b4a      	ldr	r3, [pc, #296]	@ (80012e4 <HAL_RCC_OscConfig+0x240>)
 80011bc:	689b      	ldr	r3, [r3, #8]
 80011be:	f003 030c 	and.w	r3, r3, #12
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d00b      	beq.n	80011de <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80011c6:	4b47      	ldr	r3, [pc, #284]	@ (80012e4 <HAL_RCC_OscConfig+0x240>)
 80011c8:	689b      	ldr	r3, [r3, #8]
 80011ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80011ce:	2b08      	cmp	r3, #8
 80011d0:	d11c      	bne.n	800120c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80011d2:	4b44      	ldr	r3, [pc, #272]	@ (80012e4 <HAL_RCC_OscConfig+0x240>)
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d116      	bne.n	800120c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011de:	4b41      	ldr	r3, [pc, #260]	@ (80012e4 <HAL_RCC_OscConfig+0x240>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f003 0302 	and.w	r3, r3, #2
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d005      	beq.n	80011f6 <HAL_RCC_OscConfig+0x152>
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	68db      	ldr	r3, [r3, #12]
 80011ee:	2b01      	cmp	r3, #1
 80011f0:	d001      	beq.n	80011f6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80011f2:	2301      	movs	r3, #1
 80011f4:	e1be      	b.n	8001574 <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011f6:	4b3b      	ldr	r3, [pc, #236]	@ (80012e4 <HAL_RCC_OscConfig+0x240>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	691b      	ldr	r3, [r3, #16]
 8001202:	00db      	lsls	r3, r3, #3
 8001204:	4937      	ldr	r1, [pc, #220]	@ (80012e4 <HAL_RCC_OscConfig+0x240>)
 8001206:	4313      	orrs	r3, r2
 8001208:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800120a:	e03a      	b.n	8001282 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	68db      	ldr	r3, [r3, #12]
 8001210:	2b00      	cmp	r3, #0
 8001212:	d020      	beq.n	8001256 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001214:	4b34      	ldr	r3, [pc, #208]	@ (80012e8 <HAL_RCC_OscConfig+0x244>)
 8001216:	2201      	movs	r2, #1
 8001218:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800121a:	f7ff fc87 	bl	8000b2c <HAL_GetTick>
 800121e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001220:	e008      	b.n	8001234 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001222:	f7ff fc83 	bl	8000b2c <HAL_GetTick>
 8001226:	4602      	mov	r2, r0
 8001228:	693b      	ldr	r3, [r7, #16]
 800122a:	1ad3      	subs	r3, r2, r3
 800122c:	2b02      	cmp	r3, #2
 800122e:	d901      	bls.n	8001234 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001230:	2303      	movs	r3, #3
 8001232:	e19f      	b.n	8001574 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001234:	4b2b      	ldr	r3, [pc, #172]	@ (80012e4 <HAL_RCC_OscConfig+0x240>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f003 0302 	and.w	r3, r3, #2
 800123c:	2b00      	cmp	r3, #0
 800123e:	d0f0      	beq.n	8001222 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001240:	4b28      	ldr	r3, [pc, #160]	@ (80012e4 <HAL_RCC_OscConfig+0x240>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	691b      	ldr	r3, [r3, #16]
 800124c:	00db      	lsls	r3, r3, #3
 800124e:	4925      	ldr	r1, [pc, #148]	@ (80012e4 <HAL_RCC_OscConfig+0x240>)
 8001250:	4313      	orrs	r3, r2
 8001252:	600b      	str	r3, [r1, #0]
 8001254:	e015      	b.n	8001282 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001256:	4b24      	ldr	r3, [pc, #144]	@ (80012e8 <HAL_RCC_OscConfig+0x244>)
 8001258:	2200      	movs	r2, #0
 800125a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800125c:	f7ff fc66 	bl	8000b2c <HAL_GetTick>
 8001260:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001262:	e008      	b.n	8001276 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001264:	f7ff fc62 	bl	8000b2c <HAL_GetTick>
 8001268:	4602      	mov	r2, r0
 800126a:	693b      	ldr	r3, [r7, #16]
 800126c:	1ad3      	subs	r3, r2, r3
 800126e:	2b02      	cmp	r3, #2
 8001270:	d901      	bls.n	8001276 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001272:	2303      	movs	r3, #3
 8001274:	e17e      	b.n	8001574 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001276:	4b1b      	ldr	r3, [pc, #108]	@ (80012e4 <HAL_RCC_OscConfig+0x240>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f003 0302 	and.w	r3, r3, #2
 800127e:	2b00      	cmp	r3, #0
 8001280:	d1f0      	bne.n	8001264 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f003 0308 	and.w	r3, r3, #8
 800128a:	2b00      	cmp	r3, #0
 800128c:	d036      	beq.n	80012fc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	695b      	ldr	r3, [r3, #20]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d016      	beq.n	80012c4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001296:	4b15      	ldr	r3, [pc, #84]	@ (80012ec <HAL_RCC_OscConfig+0x248>)
 8001298:	2201      	movs	r2, #1
 800129a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800129c:	f7ff fc46 	bl	8000b2c <HAL_GetTick>
 80012a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012a2:	e008      	b.n	80012b6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012a4:	f7ff fc42 	bl	8000b2c <HAL_GetTick>
 80012a8:	4602      	mov	r2, r0
 80012aa:	693b      	ldr	r3, [r7, #16]
 80012ac:	1ad3      	subs	r3, r2, r3
 80012ae:	2b02      	cmp	r3, #2
 80012b0:	d901      	bls.n	80012b6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80012b2:	2303      	movs	r3, #3
 80012b4:	e15e      	b.n	8001574 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012b6:	4b0b      	ldr	r3, [pc, #44]	@ (80012e4 <HAL_RCC_OscConfig+0x240>)
 80012b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80012ba:	f003 0302 	and.w	r3, r3, #2
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d0f0      	beq.n	80012a4 <HAL_RCC_OscConfig+0x200>
 80012c2:	e01b      	b.n	80012fc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012c4:	4b09      	ldr	r3, [pc, #36]	@ (80012ec <HAL_RCC_OscConfig+0x248>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012ca:	f7ff fc2f 	bl	8000b2c <HAL_GetTick>
 80012ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012d0:	e00e      	b.n	80012f0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012d2:	f7ff fc2b 	bl	8000b2c <HAL_GetTick>
 80012d6:	4602      	mov	r2, r0
 80012d8:	693b      	ldr	r3, [r7, #16]
 80012da:	1ad3      	subs	r3, r2, r3
 80012dc:	2b02      	cmp	r3, #2
 80012de:	d907      	bls.n	80012f0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80012e0:	2303      	movs	r3, #3
 80012e2:	e147      	b.n	8001574 <HAL_RCC_OscConfig+0x4d0>
 80012e4:	40023800 	.word	0x40023800
 80012e8:	42470000 	.word	0x42470000
 80012ec:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012f0:	4b88      	ldr	r3, [pc, #544]	@ (8001514 <HAL_RCC_OscConfig+0x470>)
 80012f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80012f4:	f003 0302 	and.w	r3, r3, #2
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d1ea      	bne.n	80012d2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f003 0304 	and.w	r3, r3, #4
 8001304:	2b00      	cmp	r3, #0
 8001306:	f000 8097 	beq.w	8001438 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800130a:	2300      	movs	r3, #0
 800130c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800130e:	4b81      	ldr	r3, [pc, #516]	@ (8001514 <HAL_RCC_OscConfig+0x470>)
 8001310:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001312:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001316:	2b00      	cmp	r3, #0
 8001318:	d10f      	bne.n	800133a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800131a:	2300      	movs	r3, #0
 800131c:	60bb      	str	r3, [r7, #8]
 800131e:	4b7d      	ldr	r3, [pc, #500]	@ (8001514 <HAL_RCC_OscConfig+0x470>)
 8001320:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001322:	4a7c      	ldr	r2, [pc, #496]	@ (8001514 <HAL_RCC_OscConfig+0x470>)
 8001324:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001328:	6413      	str	r3, [r2, #64]	@ 0x40
 800132a:	4b7a      	ldr	r3, [pc, #488]	@ (8001514 <HAL_RCC_OscConfig+0x470>)
 800132c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800132e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001332:	60bb      	str	r3, [r7, #8]
 8001334:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001336:	2301      	movs	r3, #1
 8001338:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800133a:	4b77      	ldr	r3, [pc, #476]	@ (8001518 <HAL_RCC_OscConfig+0x474>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001342:	2b00      	cmp	r3, #0
 8001344:	d118      	bne.n	8001378 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001346:	4b74      	ldr	r3, [pc, #464]	@ (8001518 <HAL_RCC_OscConfig+0x474>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4a73      	ldr	r2, [pc, #460]	@ (8001518 <HAL_RCC_OscConfig+0x474>)
 800134c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001350:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001352:	f7ff fbeb 	bl	8000b2c <HAL_GetTick>
 8001356:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001358:	e008      	b.n	800136c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800135a:	f7ff fbe7 	bl	8000b2c <HAL_GetTick>
 800135e:	4602      	mov	r2, r0
 8001360:	693b      	ldr	r3, [r7, #16]
 8001362:	1ad3      	subs	r3, r2, r3
 8001364:	2b02      	cmp	r3, #2
 8001366:	d901      	bls.n	800136c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001368:	2303      	movs	r3, #3
 800136a:	e103      	b.n	8001574 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800136c:	4b6a      	ldr	r3, [pc, #424]	@ (8001518 <HAL_RCC_OscConfig+0x474>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001374:	2b00      	cmp	r3, #0
 8001376:	d0f0      	beq.n	800135a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	689b      	ldr	r3, [r3, #8]
 800137c:	2b01      	cmp	r3, #1
 800137e:	d106      	bne.n	800138e <HAL_RCC_OscConfig+0x2ea>
 8001380:	4b64      	ldr	r3, [pc, #400]	@ (8001514 <HAL_RCC_OscConfig+0x470>)
 8001382:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001384:	4a63      	ldr	r2, [pc, #396]	@ (8001514 <HAL_RCC_OscConfig+0x470>)
 8001386:	f043 0301 	orr.w	r3, r3, #1
 800138a:	6713      	str	r3, [r2, #112]	@ 0x70
 800138c:	e01c      	b.n	80013c8 <HAL_RCC_OscConfig+0x324>
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	689b      	ldr	r3, [r3, #8]
 8001392:	2b05      	cmp	r3, #5
 8001394:	d10c      	bne.n	80013b0 <HAL_RCC_OscConfig+0x30c>
 8001396:	4b5f      	ldr	r3, [pc, #380]	@ (8001514 <HAL_RCC_OscConfig+0x470>)
 8001398:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800139a:	4a5e      	ldr	r2, [pc, #376]	@ (8001514 <HAL_RCC_OscConfig+0x470>)
 800139c:	f043 0304 	orr.w	r3, r3, #4
 80013a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80013a2:	4b5c      	ldr	r3, [pc, #368]	@ (8001514 <HAL_RCC_OscConfig+0x470>)
 80013a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013a6:	4a5b      	ldr	r2, [pc, #364]	@ (8001514 <HAL_RCC_OscConfig+0x470>)
 80013a8:	f043 0301 	orr.w	r3, r3, #1
 80013ac:	6713      	str	r3, [r2, #112]	@ 0x70
 80013ae:	e00b      	b.n	80013c8 <HAL_RCC_OscConfig+0x324>
 80013b0:	4b58      	ldr	r3, [pc, #352]	@ (8001514 <HAL_RCC_OscConfig+0x470>)
 80013b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013b4:	4a57      	ldr	r2, [pc, #348]	@ (8001514 <HAL_RCC_OscConfig+0x470>)
 80013b6:	f023 0301 	bic.w	r3, r3, #1
 80013ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80013bc:	4b55      	ldr	r3, [pc, #340]	@ (8001514 <HAL_RCC_OscConfig+0x470>)
 80013be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013c0:	4a54      	ldr	r2, [pc, #336]	@ (8001514 <HAL_RCC_OscConfig+0x470>)
 80013c2:	f023 0304 	bic.w	r3, r3, #4
 80013c6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	689b      	ldr	r3, [r3, #8]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d015      	beq.n	80013fc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013d0:	f7ff fbac 	bl	8000b2c <HAL_GetTick>
 80013d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013d6:	e00a      	b.n	80013ee <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013d8:	f7ff fba8 	bl	8000b2c <HAL_GetTick>
 80013dc:	4602      	mov	r2, r0
 80013de:	693b      	ldr	r3, [r7, #16]
 80013e0:	1ad3      	subs	r3, r2, r3
 80013e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d901      	bls.n	80013ee <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80013ea:	2303      	movs	r3, #3
 80013ec:	e0c2      	b.n	8001574 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013ee:	4b49      	ldr	r3, [pc, #292]	@ (8001514 <HAL_RCC_OscConfig+0x470>)
 80013f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013f2:	f003 0302 	and.w	r3, r3, #2
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d0ee      	beq.n	80013d8 <HAL_RCC_OscConfig+0x334>
 80013fa:	e014      	b.n	8001426 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013fc:	f7ff fb96 	bl	8000b2c <HAL_GetTick>
 8001400:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001402:	e00a      	b.n	800141a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001404:	f7ff fb92 	bl	8000b2c <HAL_GetTick>
 8001408:	4602      	mov	r2, r0
 800140a:	693b      	ldr	r3, [r7, #16]
 800140c:	1ad3      	subs	r3, r2, r3
 800140e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001412:	4293      	cmp	r3, r2
 8001414:	d901      	bls.n	800141a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001416:	2303      	movs	r3, #3
 8001418:	e0ac      	b.n	8001574 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800141a:	4b3e      	ldr	r3, [pc, #248]	@ (8001514 <HAL_RCC_OscConfig+0x470>)
 800141c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800141e:	f003 0302 	and.w	r3, r3, #2
 8001422:	2b00      	cmp	r3, #0
 8001424:	d1ee      	bne.n	8001404 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001426:	7dfb      	ldrb	r3, [r7, #23]
 8001428:	2b01      	cmp	r3, #1
 800142a:	d105      	bne.n	8001438 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800142c:	4b39      	ldr	r3, [pc, #228]	@ (8001514 <HAL_RCC_OscConfig+0x470>)
 800142e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001430:	4a38      	ldr	r2, [pc, #224]	@ (8001514 <HAL_RCC_OscConfig+0x470>)
 8001432:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001436:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	699b      	ldr	r3, [r3, #24]
 800143c:	2b00      	cmp	r3, #0
 800143e:	f000 8098 	beq.w	8001572 <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001442:	4b34      	ldr	r3, [pc, #208]	@ (8001514 <HAL_RCC_OscConfig+0x470>)
 8001444:	689b      	ldr	r3, [r3, #8]
 8001446:	f003 030c 	and.w	r3, r3, #12
 800144a:	2b08      	cmp	r3, #8
 800144c:	d05c      	beq.n	8001508 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	699b      	ldr	r3, [r3, #24]
 8001452:	2b02      	cmp	r3, #2
 8001454:	d141      	bne.n	80014da <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001456:	4b31      	ldr	r3, [pc, #196]	@ (800151c <HAL_RCC_OscConfig+0x478>)
 8001458:	2200      	movs	r2, #0
 800145a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800145c:	f7ff fb66 	bl	8000b2c <HAL_GetTick>
 8001460:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001462:	e008      	b.n	8001476 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001464:	f7ff fb62 	bl	8000b2c <HAL_GetTick>
 8001468:	4602      	mov	r2, r0
 800146a:	693b      	ldr	r3, [r7, #16]
 800146c:	1ad3      	subs	r3, r2, r3
 800146e:	2b02      	cmp	r3, #2
 8001470:	d901      	bls.n	8001476 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001472:	2303      	movs	r3, #3
 8001474:	e07e      	b.n	8001574 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001476:	4b27      	ldr	r3, [pc, #156]	@ (8001514 <HAL_RCC_OscConfig+0x470>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800147e:	2b00      	cmp	r3, #0
 8001480:	d1f0      	bne.n	8001464 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	69da      	ldr	r2, [r3, #28]
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6a1b      	ldr	r3, [r3, #32]
 800148a:	431a      	orrs	r2, r3
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001490:	019b      	lsls	r3, r3, #6
 8001492:	431a      	orrs	r2, r3
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001498:	085b      	lsrs	r3, r3, #1
 800149a:	3b01      	subs	r3, #1
 800149c:	041b      	lsls	r3, r3, #16
 800149e:	431a      	orrs	r2, r3
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014a4:	061b      	lsls	r3, r3, #24
 80014a6:	491b      	ldr	r1, [pc, #108]	@ (8001514 <HAL_RCC_OscConfig+0x470>)
 80014a8:	4313      	orrs	r3, r2
 80014aa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014ac:	4b1b      	ldr	r3, [pc, #108]	@ (800151c <HAL_RCC_OscConfig+0x478>)
 80014ae:	2201      	movs	r2, #1
 80014b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014b2:	f7ff fb3b 	bl	8000b2c <HAL_GetTick>
 80014b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014b8:	e008      	b.n	80014cc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014ba:	f7ff fb37 	bl	8000b2c <HAL_GetTick>
 80014be:	4602      	mov	r2, r0
 80014c0:	693b      	ldr	r3, [r7, #16]
 80014c2:	1ad3      	subs	r3, r2, r3
 80014c4:	2b02      	cmp	r3, #2
 80014c6:	d901      	bls.n	80014cc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80014c8:	2303      	movs	r3, #3
 80014ca:	e053      	b.n	8001574 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014cc:	4b11      	ldr	r3, [pc, #68]	@ (8001514 <HAL_RCC_OscConfig+0x470>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d0f0      	beq.n	80014ba <HAL_RCC_OscConfig+0x416>
 80014d8:	e04b      	b.n	8001572 <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014da:	4b10      	ldr	r3, [pc, #64]	@ (800151c <HAL_RCC_OscConfig+0x478>)
 80014dc:	2200      	movs	r2, #0
 80014de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014e0:	f7ff fb24 	bl	8000b2c <HAL_GetTick>
 80014e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014e6:	e008      	b.n	80014fa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014e8:	f7ff fb20 	bl	8000b2c <HAL_GetTick>
 80014ec:	4602      	mov	r2, r0
 80014ee:	693b      	ldr	r3, [r7, #16]
 80014f0:	1ad3      	subs	r3, r2, r3
 80014f2:	2b02      	cmp	r3, #2
 80014f4:	d901      	bls.n	80014fa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80014f6:	2303      	movs	r3, #3
 80014f8:	e03c      	b.n	8001574 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014fa:	4b06      	ldr	r3, [pc, #24]	@ (8001514 <HAL_RCC_OscConfig+0x470>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001502:	2b00      	cmp	r3, #0
 8001504:	d1f0      	bne.n	80014e8 <HAL_RCC_OscConfig+0x444>
 8001506:	e034      	b.n	8001572 <HAL_RCC_OscConfig+0x4ce>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	699b      	ldr	r3, [r3, #24]
 800150c:	2b01      	cmp	r3, #1
 800150e:	d107      	bne.n	8001520 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001510:	2301      	movs	r3, #1
 8001512:	e02f      	b.n	8001574 <HAL_RCC_OscConfig+0x4d0>
 8001514:	40023800 	.word	0x40023800
 8001518:	40007000 	.word	0x40007000
 800151c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001520:	4b16      	ldr	r3, [pc, #88]	@ (800157c <HAL_RCC_OscConfig+0x4d8>)
 8001522:	689b      	ldr	r3, [r3, #8]
 8001524:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	69db      	ldr	r3, [r3, #28]
 8001530:	429a      	cmp	r2, r3
 8001532:	d11c      	bne.n	800156e <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800153e:	429a      	cmp	r2, r3
 8001540:	d115      	bne.n	800156e <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001542:	68fa      	ldr	r2, [r7, #12]
 8001544:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001548:	4013      	ands	r3, r2
 800154a:	687a      	ldr	r2, [r7, #4]
 800154c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800154e:	4293      	cmp	r3, r2
 8001550:	d10d      	bne.n	800156e <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800155c:	429a      	cmp	r2, r3
 800155e:	d106      	bne.n	800156e <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800156a:	429a      	cmp	r2, r3
 800156c:	d001      	beq.n	8001572 <HAL_RCC_OscConfig+0x4ce>
        {
          return HAL_ERROR;
 800156e:	2301      	movs	r3, #1
 8001570:	e000      	b.n	8001574 <HAL_RCC_OscConfig+0x4d0>
        }
      }
    }
  }
  return HAL_OK;
 8001572:	2300      	movs	r3, #0
}
 8001574:	4618      	mov	r0, r3
 8001576:	3718      	adds	r7, #24
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	40023800 	.word	0x40023800

08001580 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b084      	sub	sp, #16
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
 8001588:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d101      	bne.n	8001594 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001590:	2301      	movs	r3, #1
 8001592:	e0cc      	b.n	800172e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001594:	4b68      	ldr	r3, [pc, #416]	@ (8001738 <HAL_RCC_ClockConfig+0x1b8>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f003 030f 	and.w	r3, r3, #15
 800159c:	683a      	ldr	r2, [r7, #0]
 800159e:	429a      	cmp	r2, r3
 80015a0:	d90c      	bls.n	80015bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015a2:	4b65      	ldr	r3, [pc, #404]	@ (8001738 <HAL_RCC_ClockConfig+0x1b8>)
 80015a4:	683a      	ldr	r2, [r7, #0]
 80015a6:	b2d2      	uxtb	r2, r2
 80015a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015aa:	4b63      	ldr	r3, [pc, #396]	@ (8001738 <HAL_RCC_ClockConfig+0x1b8>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f003 030f 	and.w	r3, r3, #15
 80015b2:	683a      	ldr	r2, [r7, #0]
 80015b4:	429a      	cmp	r2, r3
 80015b6:	d001      	beq.n	80015bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80015b8:	2301      	movs	r3, #1
 80015ba:	e0b8      	b.n	800172e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f003 0302 	and.w	r3, r3, #2
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d020      	beq.n	800160a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f003 0304 	and.w	r3, r3, #4
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d005      	beq.n	80015e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015d4:	4b59      	ldr	r3, [pc, #356]	@ (800173c <HAL_RCC_ClockConfig+0x1bc>)
 80015d6:	689b      	ldr	r3, [r3, #8]
 80015d8:	4a58      	ldr	r2, [pc, #352]	@ (800173c <HAL_RCC_ClockConfig+0x1bc>)
 80015da:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80015de:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f003 0308 	and.w	r3, r3, #8
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d005      	beq.n	80015f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80015ec:	4b53      	ldr	r3, [pc, #332]	@ (800173c <HAL_RCC_ClockConfig+0x1bc>)
 80015ee:	689b      	ldr	r3, [r3, #8]
 80015f0:	4a52      	ldr	r2, [pc, #328]	@ (800173c <HAL_RCC_ClockConfig+0x1bc>)
 80015f2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80015f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015f8:	4b50      	ldr	r3, [pc, #320]	@ (800173c <HAL_RCC_ClockConfig+0x1bc>)
 80015fa:	689b      	ldr	r3, [r3, #8]
 80015fc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	689b      	ldr	r3, [r3, #8]
 8001604:	494d      	ldr	r1, [pc, #308]	@ (800173c <HAL_RCC_ClockConfig+0x1bc>)
 8001606:	4313      	orrs	r3, r2
 8001608:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f003 0301 	and.w	r3, r3, #1
 8001612:	2b00      	cmp	r3, #0
 8001614:	d044      	beq.n	80016a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	2b01      	cmp	r3, #1
 800161c:	d107      	bne.n	800162e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800161e:	4b47      	ldr	r3, [pc, #284]	@ (800173c <HAL_RCC_ClockConfig+0x1bc>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001626:	2b00      	cmp	r3, #0
 8001628:	d119      	bne.n	800165e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800162a:	2301      	movs	r3, #1
 800162c:	e07f      	b.n	800172e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	2b02      	cmp	r3, #2
 8001634:	d003      	beq.n	800163e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800163a:	2b03      	cmp	r3, #3
 800163c:	d107      	bne.n	800164e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800163e:	4b3f      	ldr	r3, [pc, #252]	@ (800173c <HAL_RCC_ClockConfig+0x1bc>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001646:	2b00      	cmp	r3, #0
 8001648:	d109      	bne.n	800165e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800164a:	2301      	movs	r3, #1
 800164c:	e06f      	b.n	800172e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800164e:	4b3b      	ldr	r3, [pc, #236]	@ (800173c <HAL_RCC_ClockConfig+0x1bc>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f003 0302 	and.w	r3, r3, #2
 8001656:	2b00      	cmp	r3, #0
 8001658:	d101      	bne.n	800165e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800165a:	2301      	movs	r3, #1
 800165c:	e067      	b.n	800172e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800165e:	4b37      	ldr	r3, [pc, #220]	@ (800173c <HAL_RCC_ClockConfig+0x1bc>)
 8001660:	689b      	ldr	r3, [r3, #8]
 8001662:	f023 0203 	bic.w	r2, r3, #3
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	4934      	ldr	r1, [pc, #208]	@ (800173c <HAL_RCC_ClockConfig+0x1bc>)
 800166c:	4313      	orrs	r3, r2
 800166e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001670:	f7ff fa5c 	bl	8000b2c <HAL_GetTick>
 8001674:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001676:	e00a      	b.n	800168e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001678:	f7ff fa58 	bl	8000b2c <HAL_GetTick>
 800167c:	4602      	mov	r2, r0
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	1ad3      	subs	r3, r2, r3
 8001682:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001686:	4293      	cmp	r3, r2
 8001688:	d901      	bls.n	800168e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800168a:	2303      	movs	r3, #3
 800168c:	e04f      	b.n	800172e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800168e:	4b2b      	ldr	r3, [pc, #172]	@ (800173c <HAL_RCC_ClockConfig+0x1bc>)
 8001690:	689b      	ldr	r3, [r3, #8]
 8001692:	f003 020c 	and.w	r2, r3, #12
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	009b      	lsls	r3, r3, #2
 800169c:	429a      	cmp	r2, r3
 800169e:	d1eb      	bne.n	8001678 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80016a0:	4b25      	ldr	r3, [pc, #148]	@ (8001738 <HAL_RCC_ClockConfig+0x1b8>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f003 030f 	and.w	r3, r3, #15
 80016a8:	683a      	ldr	r2, [r7, #0]
 80016aa:	429a      	cmp	r2, r3
 80016ac:	d20c      	bcs.n	80016c8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016ae:	4b22      	ldr	r3, [pc, #136]	@ (8001738 <HAL_RCC_ClockConfig+0x1b8>)
 80016b0:	683a      	ldr	r2, [r7, #0]
 80016b2:	b2d2      	uxtb	r2, r2
 80016b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016b6:	4b20      	ldr	r3, [pc, #128]	@ (8001738 <HAL_RCC_ClockConfig+0x1b8>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f003 030f 	and.w	r3, r3, #15
 80016be:	683a      	ldr	r2, [r7, #0]
 80016c0:	429a      	cmp	r2, r3
 80016c2:	d001      	beq.n	80016c8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80016c4:	2301      	movs	r3, #1
 80016c6:	e032      	b.n	800172e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f003 0304 	and.w	r3, r3, #4
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d008      	beq.n	80016e6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016d4:	4b19      	ldr	r3, [pc, #100]	@ (800173c <HAL_RCC_ClockConfig+0x1bc>)
 80016d6:	689b      	ldr	r3, [r3, #8]
 80016d8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	68db      	ldr	r3, [r3, #12]
 80016e0:	4916      	ldr	r1, [pc, #88]	@ (800173c <HAL_RCC_ClockConfig+0x1bc>)
 80016e2:	4313      	orrs	r3, r2
 80016e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f003 0308 	and.w	r3, r3, #8
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d009      	beq.n	8001706 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80016f2:	4b12      	ldr	r3, [pc, #72]	@ (800173c <HAL_RCC_ClockConfig+0x1bc>)
 80016f4:	689b      	ldr	r3, [r3, #8]
 80016f6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	691b      	ldr	r3, [r3, #16]
 80016fe:	00db      	lsls	r3, r3, #3
 8001700:	490e      	ldr	r1, [pc, #56]	@ (800173c <HAL_RCC_ClockConfig+0x1bc>)
 8001702:	4313      	orrs	r3, r2
 8001704:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001706:	f000 f821 	bl	800174c <HAL_RCC_GetSysClockFreq>
 800170a:	4602      	mov	r2, r0
 800170c:	4b0b      	ldr	r3, [pc, #44]	@ (800173c <HAL_RCC_ClockConfig+0x1bc>)
 800170e:	689b      	ldr	r3, [r3, #8]
 8001710:	091b      	lsrs	r3, r3, #4
 8001712:	f003 030f 	and.w	r3, r3, #15
 8001716:	490a      	ldr	r1, [pc, #40]	@ (8001740 <HAL_RCC_ClockConfig+0x1c0>)
 8001718:	5ccb      	ldrb	r3, [r1, r3]
 800171a:	fa22 f303 	lsr.w	r3, r2, r3
 800171e:	4a09      	ldr	r2, [pc, #36]	@ (8001744 <HAL_RCC_ClockConfig+0x1c4>)
 8001720:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001722:	4b09      	ldr	r3, [pc, #36]	@ (8001748 <HAL_RCC_ClockConfig+0x1c8>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4618      	mov	r0, r3
 8001728:	f7ff f900 	bl	800092c <HAL_InitTick>

  return HAL_OK;
 800172c:	2300      	movs	r3, #0
}
 800172e:	4618      	mov	r0, r3
 8001730:	3710      	adds	r7, #16
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	40023c00 	.word	0x40023c00
 800173c:	40023800 	.word	0x40023800
 8001740:	0800508c 	.word	0x0800508c
 8001744:	20000000 	.word	0x20000000
 8001748:	20000004 	.word	0x20000004

0800174c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800174c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001750:	b094      	sub	sp, #80	@ 0x50
 8001752:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001754:	2300      	movs	r3, #0
 8001756:	647b      	str	r3, [r7, #68]	@ 0x44
 8001758:	2300      	movs	r3, #0
 800175a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800175c:	2300      	movs	r3, #0
 800175e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001760:	2300      	movs	r3, #0
 8001762:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001764:	4b79      	ldr	r3, [pc, #484]	@ (800194c <HAL_RCC_GetSysClockFreq+0x200>)
 8001766:	689b      	ldr	r3, [r3, #8]
 8001768:	f003 030c 	and.w	r3, r3, #12
 800176c:	2b08      	cmp	r3, #8
 800176e:	d00d      	beq.n	800178c <HAL_RCC_GetSysClockFreq+0x40>
 8001770:	2b08      	cmp	r3, #8
 8001772:	f200 80e1 	bhi.w	8001938 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001776:	2b00      	cmp	r3, #0
 8001778:	d002      	beq.n	8001780 <HAL_RCC_GetSysClockFreq+0x34>
 800177a:	2b04      	cmp	r3, #4
 800177c:	d003      	beq.n	8001786 <HAL_RCC_GetSysClockFreq+0x3a>
 800177e:	e0db      	b.n	8001938 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001780:	4b73      	ldr	r3, [pc, #460]	@ (8001950 <HAL_RCC_GetSysClockFreq+0x204>)
 8001782:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8001784:	e0db      	b.n	800193e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001786:	4b73      	ldr	r3, [pc, #460]	@ (8001954 <HAL_RCC_GetSysClockFreq+0x208>)
 8001788:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800178a:	e0d8      	b.n	800193e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800178c:	4b6f      	ldr	r3, [pc, #444]	@ (800194c <HAL_RCC_GetSysClockFreq+0x200>)
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001794:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001796:	4b6d      	ldr	r3, [pc, #436]	@ (800194c <HAL_RCC_GetSysClockFreq+0x200>)
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d063      	beq.n	800186a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017a2:	4b6a      	ldr	r3, [pc, #424]	@ (800194c <HAL_RCC_GetSysClockFreq+0x200>)
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	099b      	lsrs	r3, r3, #6
 80017a8:	2200      	movs	r2, #0
 80017aa:	63bb      	str	r3, [r7, #56]	@ 0x38
 80017ac:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80017ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80017b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80017b4:	633b      	str	r3, [r7, #48]	@ 0x30
 80017b6:	2300      	movs	r3, #0
 80017b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80017ba:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80017be:	4622      	mov	r2, r4
 80017c0:	462b      	mov	r3, r5
 80017c2:	f04f 0000 	mov.w	r0, #0
 80017c6:	f04f 0100 	mov.w	r1, #0
 80017ca:	0159      	lsls	r1, r3, #5
 80017cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80017d0:	0150      	lsls	r0, r2, #5
 80017d2:	4602      	mov	r2, r0
 80017d4:	460b      	mov	r3, r1
 80017d6:	4621      	mov	r1, r4
 80017d8:	1a51      	subs	r1, r2, r1
 80017da:	6139      	str	r1, [r7, #16]
 80017dc:	4629      	mov	r1, r5
 80017de:	eb63 0301 	sbc.w	r3, r3, r1
 80017e2:	617b      	str	r3, [r7, #20]
 80017e4:	f04f 0200 	mov.w	r2, #0
 80017e8:	f04f 0300 	mov.w	r3, #0
 80017ec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80017f0:	4659      	mov	r1, fp
 80017f2:	018b      	lsls	r3, r1, #6
 80017f4:	4651      	mov	r1, sl
 80017f6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80017fa:	4651      	mov	r1, sl
 80017fc:	018a      	lsls	r2, r1, #6
 80017fe:	4651      	mov	r1, sl
 8001800:	ebb2 0801 	subs.w	r8, r2, r1
 8001804:	4659      	mov	r1, fp
 8001806:	eb63 0901 	sbc.w	r9, r3, r1
 800180a:	f04f 0200 	mov.w	r2, #0
 800180e:	f04f 0300 	mov.w	r3, #0
 8001812:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001816:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800181a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800181e:	4690      	mov	r8, r2
 8001820:	4699      	mov	r9, r3
 8001822:	4623      	mov	r3, r4
 8001824:	eb18 0303 	adds.w	r3, r8, r3
 8001828:	60bb      	str	r3, [r7, #8]
 800182a:	462b      	mov	r3, r5
 800182c:	eb49 0303 	adc.w	r3, r9, r3
 8001830:	60fb      	str	r3, [r7, #12]
 8001832:	f04f 0200 	mov.w	r2, #0
 8001836:	f04f 0300 	mov.w	r3, #0
 800183a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800183e:	4629      	mov	r1, r5
 8001840:	024b      	lsls	r3, r1, #9
 8001842:	4621      	mov	r1, r4
 8001844:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001848:	4621      	mov	r1, r4
 800184a:	024a      	lsls	r2, r1, #9
 800184c:	4610      	mov	r0, r2
 800184e:	4619      	mov	r1, r3
 8001850:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001852:	2200      	movs	r2, #0
 8001854:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001856:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001858:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800185c:	f7fe fd02 	bl	8000264 <__aeabi_uldivmod>
 8001860:	4602      	mov	r2, r0
 8001862:	460b      	mov	r3, r1
 8001864:	4613      	mov	r3, r2
 8001866:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001868:	e058      	b.n	800191c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800186a:	4b38      	ldr	r3, [pc, #224]	@ (800194c <HAL_RCC_GetSysClockFreq+0x200>)
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	099b      	lsrs	r3, r3, #6
 8001870:	2200      	movs	r2, #0
 8001872:	4618      	mov	r0, r3
 8001874:	4611      	mov	r1, r2
 8001876:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800187a:	623b      	str	r3, [r7, #32]
 800187c:	2300      	movs	r3, #0
 800187e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001880:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001884:	4642      	mov	r2, r8
 8001886:	464b      	mov	r3, r9
 8001888:	f04f 0000 	mov.w	r0, #0
 800188c:	f04f 0100 	mov.w	r1, #0
 8001890:	0159      	lsls	r1, r3, #5
 8001892:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001896:	0150      	lsls	r0, r2, #5
 8001898:	4602      	mov	r2, r0
 800189a:	460b      	mov	r3, r1
 800189c:	4641      	mov	r1, r8
 800189e:	ebb2 0a01 	subs.w	sl, r2, r1
 80018a2:	4649      	mov	r1, r9
 80018a4:	eb63 0b01 	sbc.w	fp, r3, r1
 80018a8:	f04f 0200 	mov.w	r2, #0
 80018ac:	f04f 0300 	mov.w	r3, #0
 80018b0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80018b4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80018b8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80018bc:	ebb2 040a 	subs.w	r4, r2, sl
 80018c0:	eb63 050b 	sbc.w	r5, r3, fp
 80018c4:	f04f 0200 	mov.w	r2, #0
 80018c8:	f04f 0300 	mov.w	r3, #0
 80018cc:	00eb      	lsls	r3, r5, #3
 80018ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80018d2:	00e2      	lsls	r2, r4, #3
 80018d4:	4614      	mov	r4, r2
 80018d6:	461d      	mov	r5, r3
 80018d8:	4643      	mov	r3, r8
 80018da:	18e3      	adds	r3, r4, r3
 80018dc:	603b      	str	r3, [r7, #0]
 80018de:	464b      	mov	r3, r9
 80018e0:	eb45 0303 	adc.w	r3, r5, r3
 80018e4:	607b      	str	r3, [r7, #4]
 80018e6:	f04f 0200 	mov.w	r2, #0
 80018ea:	f04f 0300 	mov.w	r3, #0
 80018ee:	e9d7 4500 	ldrd	r4, r5, [r7]
 80018f2:	4629      	mov	r1, r5
 80018f4:	028b      	lsls	r3, r1, #10
 80018f6:	4621      	mov	r1, r4
 80018f8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80018fc:	4621      	mov	r1, r4
 80018fe:	028a      	lsls	r2, r1, #10
 8001900:	4610      	mov	r0, r2
 8001902:	4619      	mov	r1, r3
 8001904:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001906:	2200      	movs	r2, #0
 8001908:	61bb      	str	r3, [r7, #24]
 800190a:	61fa      	str	r2, [r7, #28]
 800190c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001910:	f7fe fca8 	bl	8000264 <__aeabi_uldivmod>
 8001914:	4602      	mov	r2, r0
 8001916:	460b      	mov	r3, r1
 8001918:	4613      	mov	r3, r2
 800191a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800191c:	4b0b      	ldr	r3, [pc, #44]	@ (800194c <HAL_RCC_GetSysClockFreq+0x200>)
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	0c1b      	lsrs	r3, r3, #16
 8001922:	f003 0303 	and.w	r3, r3, #3
 8001926:	3301      	adds	r3, #1
 8001928:	005b      	lsls	r3, r3, #1
 800192a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 800192c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800192e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001930:	fbb2 f3f3 	udiv	r3, r2, r3
 8001934:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001936:	e002      	b.n	800193e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001938:	4b05      	ldr	r3, [pc, #20]	@ (8001950 <HAL_RCC_GetSysClockFreq+0x204>)
 800193a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800193c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800193e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001940:	4618      	mov	r0, r3
 8001942:	3750      	adds	r7, #80	@ 0x50
 8001944:	46bd      	mov	sp, r7
 8001946:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800194a:	bf00      	nop
 800194c:	40023800 	.word	0x40023800
 8001950:	00f42400 	.word	0x00f42400
 8001954:	007a1200 	.word	0x007a1200

08001958 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800195c:	4b03      	ldr	r3, [pc, #12]	@ (800196c <HAL_RCC_GetHCLKFreq+0x14>)
 800195e:	681b      	ldr	r3, [r3, #0]
}
 8001960:	4618      	mov	r0, r3
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr
 800196a:	bf00      	nop
 800196c:	20000000 	.word	0x20000000

08001970 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001974:	f7ff fff0 	bl	8001958 <HAL_RCC_GetHCLKFreq>
 8001978:	4602      	mov	r2, r0
 800197a:	4b05      	ldr	r3, [pc, #20]	@ (8001990 <HAL_RCC_GetPCLK1Freq+0x20>)
 800197c:	689b      	ldr	r3, [r3, #8]
 800197e:	0a9b      	lsrs	r3, r3, #10
 8001980:	f003 0307 	and.w	r3, r3, #7
 8001984:	4903      	ldr	r1, [pc, #12]	@ (8001994 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001986:	5ccb      	ldrb	r3, [r1, r3]
 8001988:	fa22 f303 	lsr.w	r3, r2, r3
}
 800198c:	4618      	mov	r0, r3
 800198e:	bd80      	pop	{r7, pc}
 8001990:	40023800 	.word	0x40023800
 8001994:	0800509c 	.word	0x0800509c

08001998 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800199c:	f7ff ffdc 	bl	8001958 <HAL_RCC_GetHCLKFreq>
 80019a0:	4602      	mov	r2, r0
 80019a2:	4b05      	ldr	r3, [pc, #20]	@ (80019b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80019a4:	689b      	ldr	r3, [r3, #8]
 80019a6:	0b5b      	lsrs	r3, r3, #13
 80019a8:	f003 0307 	and.w	r3, r3, #7
 80019ac:	4903      	ldr	r1, [pc, #12]	@ (80019bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80019ae:	5ccb      	ldrb	r3, [r1, r3]
 80019b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	40023800 	.word	0x40023800
 80019bc:	0800509c 	.word	0x0800509c

080019c0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b083      	sub	sp, #12
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
 80019c8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	220f      	movs	r2, #15
 80019ce:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80019d0:	4b12      	ldr	r3, [pc, #72]	@ (8001a1c <HAL_RCC_GetClockConfig+0x5c>)
 80019d2:	689b      	ldr	r3, [r3, #8]
 80019d4:	f003 0203 	and.w	r2, r3, #3
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80019dc:	4b0f      	ldr	r3, [pc, #60]	@ (8001a1c <HAL_RCC_GetClockConfig+0x5c>)
 80019de:	689b      	ldr	r3, [r3, #8]
 80019e0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80019e8:	4b0c      	ldr	r3, [pc, #48]	@ (8001a1c <HAL_RCC_GetClockConfig+0x5c>)
 80019ea:	689b      	ldr	r3, [r3, #8]
 80019ec:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80019f4:	4b09      	ldr	r3, [pc, #36]	@ (8001a1c <HAL_RCC_GetClockConfig+0x5c>)
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	08db      	lsrs	r3, r3, #3
 80019fa:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001a02:	4b07      	ldr	r3, [pc, #28]	@ (8001a20 <HAL_RCC_GetClockConfig+0x60>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f003 020f 	and.w	r2, r3, #15
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	601a      	str	r2, [r3, #0]
}
 8001a0e:	bf00      	nop
 8001a10:	370c      	adds	r7, #12
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr
 8001a1a:	bf00      	nop
 8001a1c:	40023800 	.word	0x40023800
 8001a20:	40023c00 	.word	0x40023c00

08001a24 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b082      	sub	sp, #8
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d101      	bne.n	8001a36 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001a32:	2301      	movs	r3, #1
 8001a34:	e01d      	b.n	8001a72 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001a3c:	b2db      	uxtb	r3, r3
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d106      	bne.n	8001a50 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2200      	movs	r2, #0
 8001a46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001a4a:	6878      	ldr	r0, [r7, #4]
 8001a4c:	f000 f815 	bl	8001a7a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2202      	movs	r2, #2
 8001a54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681a      	ldr	r2, [r3, #0]
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	3304      	adds	r3, #4
 8001a60:	4619      	mov	r1, r3
 8001a62:	4610      	mov	r0, r2
 8001a64:	f000 f968 	bl	8001d38 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001a70:	2300      	movs	r3, #0
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	3708      	adds	r7, #8
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}

08001a7a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001a7a:	b480      	push	{r7}
 8001a7c:	b083      	sub	sp, #12
 8001a7e:	af00      	add	r7, sp, #0
 8001a80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001a82:	bf00      	nop
 8001a84:	370c      	adds	r7, #12
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr

08001a8e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001a8e:	b480      	push	{r7}
 8001a90:	b085      	sub	sp, #20
 8001a92:	af00      	add	r7, sp, #0
 8001a94:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	68da      	ldr	r2, [r3, #12]
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f042 0201 	orr.w	r2, r2, #1
 8001aa4:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	f003 0307 	and.w	r3, r3, #7
 8001ab0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	2b06      	cmp	r3, #6
 8001ab6:	d007      	beq.n	8001ac8 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	681a      	ldr	r2, [r3, #0]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f042 0201 	orr.w	r2, r2, #1
 8001ac6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001ac8:	2300      	movs	r3, #0
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	3714      	adds	r7, #20
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr

08001ad6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001ad6:	b580      	push	{r7, lr}
 8001ad8:	b082      	sub	sp, #8
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	691b      	ldr	r3, [r3, #16]
 8001ae4:	f003 0302 	and.w	r3, r3, #2
 8001ae8:	2b02      	cmp	r3, #2
 8001aea:	d122      	bne.n	8001b32 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	68db      	ldr	r3, [r3, #12]
 8001af2:	f003 0302 	and.w	r3, r3, #2
 8001af6:	2b02      	cmp	r3, #2
 8001af8:	d11b      	bne.n	8001b32 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f06f 0202 	mvn.w	r2, #2
 8001b02:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2201      	movs	r2, #1
 8001b08:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	699b      	ldr	r3, [r3, #24]
 8001b10:	f003 0303 	and.w	r3, r3, #3
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d003      	beq.n	8001b20 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001b18:	6878      	ldr	r0, [r7, #4]
 8001b1a:	f000 f8ee 	bl	8001cfa <HAL_TIM_IC_CaptureCallback>
 8001b1e:	e005      	b.n	8001b2c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b20:	6878      	ldr	r0, [r7, #4]
 8001b22:	f000 f8e0 	bl	8001ce6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b26:	6878      	ldr	r0, [r7, #4]
 8001b28:	f000 f8f1 	bl	8001d0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2200      	movs	r2, #0
 8001b30:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	691b      	ldr	r3, [r3, #16]
 8001b38:	f003 0304 	and.w	r3, r3, #4
 8001b3c:	2b04      	cmp	r3, #4
 8001b3e:	d122      	bne.n	8001b86 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	68db      	ldr	r3, [r3, #12]
 8001b46:	f003 0304 	and.w	r3, r3, #4
 8001b4a:	2b04      	cmp	r3, #4
 8001b4c:	d11b      	bne.n	8001b86 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f06f 0204 	mvn.w	r2, #4
 8001b56:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2202      	movs	r2, #2
 8001b5c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	699b      	ldr	r3, [r3, #24]
 8001b64:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d003      	beq.n	8001b74 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b6c:	6878      	ldr	r0, [r7, #4]
 8001b6e:	f000 f8c4 	bl	8001cfa <HAL_TIM_IC_CaptureCallback>
 8001b72:	e005      	b.n	8001b80 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b74:	6878      	ldr	r0, [r7, #4]
 8001b76:	f000 f8b6 	bl	8001ce6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b7a:	6878      	ldr	r0, [r7, #4]
 8001b7c:	f000 f8c7 	bl	8001d0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2200      	movs	r2, #0
 8001b84:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	691b      	ldr	r3, [r3, #16]
 8001b8c:	f003 0308 	and.w	r3, r3, #8
 8001b90:	2b08      	cmp	r3, #8
 8001b92:	d122      	bne.n	8001bda <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	68db      	ldr	r3, [r3, #12]
 8001b9a:	f003 0308 	and.w	r3, r3, #8
 8001b9e:	2b08      	cmp	r3, #8
 8001ba0:	d11b      	bne.n	8001bda <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f06f 0208 	mvn.w	r2, #8
 8001baa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2204      	movs	r2, #4
 8001bb0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	69db      	ldr	r3, [r3, #28]
 8001bb8:	f003 0303 	and.w	r3, r3, #3
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d003      	beq.n	8001bc8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001bc0:	6878      	ldr	r0, [r7, #4]
 8001bc2:	f000 f89a 	bl	8001cfa <HAL_TIM_IC_CaptureCallback>
 8001bc6:	e005      	b.n	8001bd4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bc8:	6878      	ldr	r0, [r7, #4]
 8001bca:	f000 f88c 	bl	8001ce6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bce:	6878      	ldr	r0, [r7, #4]
 8001bd0:	f000 f89d 	bl	8001d0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	691b      	ldr	r3, [r3, #16]
 8001be0:	f003 0310 	and.w	r3, r3, #16
 8001be4:	2b10      	cmp	r3, #16
 8001be6:	d122      	bne.n	8001c2e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	68db      	ldr	r3, [r3, #12]
 8001bee:	f003 0310 	and.w	r3, r3, #16
 8001bf2:	2b10      	cmp	r3, #16
 8001bf4:	d11b      	bne.n	8001c2e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f06f 0210 	mvn.w	r2, #16
 8001bfe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2208      	movs	r2, #8
 8001c04:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	69db      	ldr	r3, [r3, #28]
 8001c0c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d003      	beq.n	8001c1c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c14:	6878      	ldr	r0, [r7, #4]
 8001c16:	f000 f870 	bl	8001cfa <HAL_TIM_IC_CaptureCallback>
 8001c1a:	e005      	b.n	8001c28 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c1c:	6878      	ldr	r0, [r7, #4]
 8001c1e:	f000 f862 	bl	8001ce6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c22:	6878      	ldr	r0, [r7, #4]
 8001c24:	f000 f873 	bl	8001d0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	691b      	ldr	r3, [r3, #16]
 8001c34:	f003 0301 	and.w	r3, r3, #1
 8001c38:	2b01      	cmp	r3, #1
 8001c3a:	d10e      	bne.n	8001c5a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	68db      	ldr	r3, [r3, #12]
 8001c42:	f003 0301 	and.w	r3, r3, #1
 8001c46:	2b01      	cmp	r3, #1
 8001c48:	d107      	bne.n	8001c5a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f06f 0201 	mvn.w	r2, #1
 8001c52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001c54:	6878      	ldr	r0, [r7, #4]
 8001c56:	f7fe fddf 	bl	8000818 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	691b      	ldr	r3, [r3, #16]
 8001c60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c64:	2b80      	cmp	r3, #128	@ 0x80
 8001c66:	d10e      	bne.n	8001c86 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	68db      	ldr	r3, [r3, #12]
 8001c6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c72:	2b80      	cmp	r3, #128	@ 0x80
 8001c74:	d107      	bne.n	8001c86 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001c7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001c80:	6878      	ldr	r0, [r7, #4]
 8001c82:	f000 f903 	bl	8001e8c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	691b      	ldr	r3, [r3, #16]
 8001c8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c90:	2b40      	cmp	r3, #64	@ 0x40
 8001c92:	d10e      	bne.n	8001cb2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	68db      	ldr	r3, [r3, #12]
 8001c9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c9e:	2b40      	cmp	r3, #64	@ 0x40
 8001ca0:	d107      	bne.n	8001cb2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001caa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001cac:	6878      	ldr	r0, [r7, #4]
 8001cae:	f000 f838 	bl	8001d22 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	691b      	ldr	r3, [r3, #16]
 8001cb8:	f003 0320 	and.w	r3, r3, #32
 8001cbc:	2b20      	cmp	r3, #32
 8001cbe:	d10e      	bne.n	8001cde <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	68db      	ldr	r3, [r3, #12]
 8001cc6:	f003 0320 	and.w	r3, r3, #32
 8001cca:	2b20      	cmp	r3, #32
 8001ccc:	d107      	bne.n	8001cde <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f06f 0220 	mvn.w	r2, #32
 8001cd6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001cd8:	6878      	ldr	r0, [r7, #4]
 8001cda:	f000 f8cd 	bl	8001e78 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001cde:	bf00      	nop
 8001ce0:	3708      	adds	r7, #8
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}

08001ce6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ce6:	b480      	push	{r7}
 8001ce8:	b083      	sub	sp, #12
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001cee:	bf00      	nop
 8001cf0:	370c      	adds	r7, #12
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr

08001cfa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001cfa:	b480      	push	{r7}
 8001cfc:	b083      	sub	sp, #12
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001d02:	bf00      	nop
 8001d04:	370c      	adds	r7, #12
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr

08001d0e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001d0e:	b480      	push	{r7}
 8001d10:	b083      	sub	sp, #12
 8001d12:	af00      	add	r7, sp, #0
 8001d14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001d16:	bf00      	nop
 8001d18:	370c      	adds	r7, #12
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr

08001d22 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001d22:	b480      	push	{r7}
 8001d24:	b083      	sub	sp, #12
 8001d26:	af00      	add	r7, sp, #0
 8001d28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001d2a:	bf00      	nop
 8001d2c:	370c      	adds	r7, #12
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr
	...

08001d38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b085      	sub	sp, #20
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
 8001d40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	4a40      	ldr	r2, [pc, #256]	@ (8001e4c <TIM_Base_SetConfig+0x114>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d013      	beq.n	8001d78 <TIM_Base_SetConfig+0x40>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d56:	d00f      	beq.n	8001d78 <TIM_Base_SetConfig+0x40>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	4a3d      	ldr	r2, [pc, #244]	@ (8001e50 <TIM_Base_SetConfig+0x118>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d00b      	beq.n	8001d78 <TIM_Base_SetConfig+0x40>
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	4a3c      	ldr	r2, [pc, #240]	@ (8001e54 <TIM_Base_SetConfig+0x11c>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d007      	beq.n	8001d78 <TIM_Base_SetConfig+0x40>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	4a3b      	ldr	r2, [pc, #236]	@ (8001e58 <TIM_Base_SetConfig+0x120>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d003      	beq.n	8001d78 <TIM_Base_SetConfig+0x40>
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	4a3a      	ldr	r2, [pc, #232]	@ (8001e5c <TIM_Base_SetConfig+0x124>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d108      	bne.n	8001d8a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001d7e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	68fa      	ldr	r2, [r7, #12]
 8001d86:	4313      	orrs	r3, r2
 8001d88:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	4a2f      	ldr	r2, [pc, #188]	@ (8001e4c <TIM_Base_SetConfig+0x114>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d02b      	beq.n	8001dea <TIM_Base_SetConfig+0xb2>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d98:	d027      	beq.n	8001dea <TIM_Base_SetConfig+0xb2>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	4a2c      	ldr	r2, [pc, #176]	@ (8001e50 <TIM_Base_SetConfig+0x118>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d023      	beq.n	8001dea <TIM_Base_SetConfig+0xb2>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	4a2b      	ldr	r2, [pc, #172]	@ (8001e54 <TIM_Base_SetConfig+0x11c>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d01f      	beq.n	8001dea <TIM_Base_SetConfig+0xb2>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	4a2a      	ldr	r2, [pc, #168]	@ (8001e58 <TIM_Base_SetConfig+0x120>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d01b      	beq.n	8001dea <TIM_Base_SetConfig+0xb2>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	4a29      	ldr	r2, [pc, #164]	@ (8001e5c <TIM_Base_SetConfig+0x124>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d017      	beq.n	8001dea <TIM_Base_SetConfig+0xb2>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	4a28      	ldr	r2, [pc, #160]	@ (8001e60 <TIM_Base_SetConfig+0x128>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d013      	beq.n	8001dea <TIM_Base_SetConfig+0xb2>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	4a27      	ldr	r2, [pc, #156]	@ (8001e64 <TIM_Base_SetConfig+0x12c>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d00f      	beq.n	8001dea <TIM_Base_SetConfig+0xb2>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	4a26      	ldr	r2, [pc, #152]	@ (8001e68 <TIM_Base_SetConfig+0x130>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d00b      	beq.n	8001dea <TIM_Base_SetConfig+0xb2>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	4a25      	ldr	r2, [pc, #148]	@ (8001e6c <TIM_Base_SetConfig+0x134>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d007      	beq.n	8001dea <TIM_Base_SetConfig+0xb2>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	4a24      	ldr	r2, [pc, #144]	@ (8001e70 <TIM_Base_SetConfig+0x138>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d003      	beq.n	8001dea <TIM_Base_SetConfig+0xb2>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	4a23      	ldr	r2, [pc, #140]	@ (8001e74 <TIM_Base_SetConfig+0x13c>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d108      	bne.n	8001dfc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001df0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	68db      	ldr	r3, [r3, #12]
 8001df6:	68fa      	ldr	r2, [r7, #12]
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	695b      	ldr	r3, [r3, #20]
 8001e06:	4313      	orrs	r3, r2
 8001e08:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	68fa      	ldr	r2, [r7, #12]
 8001e0e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	689a      	ldr	r2, [r3, #8]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	681a      	ldr	r2, [r3, #0]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	4a0a      	ldr	r2, [pc, #40]	@ (8001e4c <TIM_Base_SetConfig+0x114>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d003      	beq.n	8001e30 <TIM_Base_SetConfig+0xf8>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	4a0c      	ldr	r2, [pc, #48]	@ (8001e5c <TIM_Base_SetConfig+0x124>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d103      	bne.n	8001e38 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	691a      	ldr	r2, [r3, #16]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	615a      	str	r2, [r3, #20]
}
 8001e3e:	bf00      	nop
 8001e40:	3714      	adds	r7, #20
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr
 8001e4a:	bf00      	nop
 8001e4c:	40010000 	.word	0x40010000
 8001e50:	40000400 	.word	0x40000400
 8001e54:	40000800 	.word	0x40000800
 8001e58:	40000c00 	.word	0x40000c00
 8001e5c:	40010400 	.word	0x40010400
 8001e60:	40014000 	.word	0x40014000
 8001e64:	40014400 	.word	0x40014400
 8001e68:	40014800 	.word	0x40014800
 8001e6c:	40001800 	.word	0x40001800
 8001e70:	40001c00 	.word	0x40001c00
 8001e74:	40002000 	.word	0x40002000

08001e78 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b083      	sub	sp, #12
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001e80:	bf00      	nop
 8001e82:	370c      	adds	r7, #12
 8001e84:	46bd      	mov	sp, r7
 8001e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8a:	4770      	bx	lr

08001e8c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b083      	sub	sp, #12
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001e94:	bf00      	nop
 8001e96:	370c      	adds	r7, #12
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9e:	4770      	bx	lr

08001ea0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b082      	sub	sp, #8
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d101      	bne.n	8001eb2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e03f      	b.n	8001f32 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8001eb8:	b2db      	uxtb	r3, r3
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d106      	bne.n	8001ecc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001ec6:	6878      	ldr	r0, [r7, #4]
 8001ec8:	f7fe fce8 	bl	800089c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2224      	movs	r2, #36	@ 0x24
 8001ed0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	68da      	ldr	r2, [r3, #12]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001ee2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001ee4:	6878      	ldr	r0, [r7, #4]
 8001ee6:	f000 f829 	bl	8001f3c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	691a      	ldr	r2, [r3, #16]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001ef8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	695a      	ldr	r2, [r3, #20]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001f08:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	68da      	ldr	r2, [r3, #12]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001f18:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	63da      	str	r2, [r3, #60]	@ 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2220      	movs	r2, #32
 8001f24:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2220      	movs	r2, #32
 8001f2c:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

  return HAL_OK;
 8001f30:	2300      	movs	r3, #0
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	3708      	adds	r7, #8
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}
	...

08001f3c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001f3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001f40:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	f8c7 01fc 	str.w	r0, [r7, #508]	@ 0x1fc
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001f4a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	691b      	ldr	r3, [r3, #16]
 8001f52:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8001f56:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8001f5a:	68d9      	ldr	r1, [r3, #12]
 8001f5c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8001f60:	681a      	ldr	r2, [r3, #0]
 8001f62:	ea40 0301 	orr.w	r3, r0, r1
 8001f66:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001f68:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8001f6c:	689a      	ldr	r2, [r3, #8]
 8001f6e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8001f72:	691b      	ldr	r3, [r3, #16]
 8001f74:	431a      	orrs	r2, r3
 8001f76:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8001f7a:	695b      	ldr	r3, [r3, #20]
 8001f7c:	431a      	orrs	r2, r3
 8001f7e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8001f82:	69db      	ldr	r3, [r3, #28]
 8001f84:	4313      	orrs	r3, r2
 8001f86:	f8c7 3204 	str.w	r3, [r7, #516]	@ 0x204
  MODIFY_REG(huart->Instance->CR1,
 8001f8a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	68db      	ldr	r3, [r3, #12]
 8001f92:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8001f96:	f021 010c 	bic.w	r1, r1, #12
 8001f9a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8001f9e:	681a      	ldr	r2, [r3, #0]
 8001fa0:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
 8001fa4:	430b      	orrs	r3, r1
 8001fa6:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001fa8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	695b      	ldr	r3, [r3, #20]
 8001fb0:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8001fb4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8001fb8:	6999      	ldr	r1, [r3, #24]
 8001fba:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	ea40 0301 	orr.w	r3, r0, r1
 8001fc4:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001fc6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8001fca:	69db      	ldr	r3, [r3, #28]
 8001fcc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001fd0:	f040 824a 	bne.w	8002468 <UART_SetConfig+0x52c>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001fd4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8001fd8:	681a      	ldr	r2, [r3, #0]
 8001fda:	4b96      	ldr	r3, [pc, #600]	@ (8002234 <UART_SetConfig+0x2f8>)
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	d006      	beq.n	8001fee <UART_SetConfig+0xb2>
 8001fe0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8001fe4:	681a      	ldr	r2, [r3, #0]
 8001fe6:	4b94      	ldr	r3, [pc, #592]	@ (8002238 <UART_SetConfig+0x2fc>)
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	f040 8129 	bne.w	8002240 <UART_SetConfig+0x304>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001fee:	f7ff fcd3 	bl	8001998 <HAL_RCC_GetPCLK2Freq>
 8001ff2:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001ff6:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
 8002000:	f8c7 21f4 	str.w	r2, [r7, #500]	@ 0x1f4
 8002004:	e9d7 457c 	ldrd	r4, r5, [r7, #496]	@ 0x1f0
 8002008:	4622      	mov	r2, r4
 800200a:	462b      	mov	r3, r5
 800200c:	1891      	adds	r1, r2, r2
 800200e:	f8c7 10d0 	str.w	r1, [r7, #208]	@ 0xd0
 8002012:	415b      	adcs	r3, r3
 8002014:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8002018:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	@ 0xd0
 800201c:	4621      	mov	r1, r4
 800201e:	1851      	adds	r1, r2, r1
 8002020:	f8c7 10c8 	str.w	r1, [r7, #200]	@ 0xc8
 8002024:	4629      	mov	r1, r5
 8002026:	414b      	adcs	r3, r1
 8002028:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800202c:	f04f 0200 	mov.w	r2, #0
 8002030:	f04f 0300 	mov.w	r3, #0
 8002034:	e9d7 8932 	ldrd	r8, r9, [r7, #200]	@ 0xc8
 8002038:	4649      	mov	r1, r9
 800203a:	00cb      	lsls	r3, r1, #3
 800203c:	4641      	mov	r1, r8
 800203e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002042:	4641      	mov	r1, r8
 8002044:	00ca      	lsls	r2, r1, #3
 8002046:	4610      	mov	r0, r2
 8002048:	4619      	mov	r1, r3
 800204a:	4603      	mov	r3, r0
 800204c:	4622      	mov	r2, r4
 800204e:	189b      	adds	r3, r3, r2
 8002050:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 8002054:	462b      	mov	r3, r5
 8002056:	460a      	mov	r2, r1
 8002058:	eb42 0303 	adc.w	r3, r2, r3
 800205c:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
 8002060:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	2200      	movs	r2, #0
 8002068:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 800206c:	f8c7 21e4 	str.w	r2, [r7, #484]	@ 0x1e4
 8002070:	e9d7 1278 	ldrd	r1, r2, [r7, #480]	@ 0x1e0
 8002074:	460b      	mov	r3, r1
 8002076:	18db      	adds	r3, r3, r3
 8002078:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800207c:	4613      	mov	r3, r2
 800207e:	eb42 0303 	adc.w	r3, r2, r3
 8002082:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002086:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	@ 0xc0
 800208a:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	@ 0x1e8
 800208e:	f7fe f8e9 	bl	8000264 <__aeabi_uldivmod>
 8002092:	4602      	mov	r2, r0
 8002094:	460b      	mov	r3, r1
 8002096:	4b69      	ldr	r3, [pc, #420]	@ (800223c <UART_SetConfig+0x300>)
 8002098:	fba3 2302 	umull	r2, r3, r3, r2
 800209c:	095b      	lsrs	r3, r3, #5
 800209e:	011c      	lsls	r4, r3, #4
 80020a0:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80020a4:	2200      	movs	r2, #0
 80020a6:	f8c7 31d8 	str.w	r3, [r7, #472]	@ 0x1d8
 80020aa:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 80020ae:	e9d7 8976 	ldrd	r8, r9, [r7, #472]	@ 0x1d8
 80020b2:	4642      	mov	r2, r8
 80020b4:	464b      	mov	r3, r9
 80020b6:	1891      	adds	r1, r2, r2
 80020b8:	f8c7 10b8 	str.w	r1, [r7, #184]	@ 0xb8
 80020bc:	415b      	adcs	r3, r3
 80020be:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80020c2:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	@ 0xb8
 80020c6:	4641      	mov	r1, r8
 80020c8:	1851      	adds	r1, r2, r1
 80020ca:	f8c7 10b0 	str.w	r1, [r7, #176]	@ 0xb0
 80020ce:	4649      	mov	r1, r9
 80020d0:	414b      	adcs	r3, r1
 80020d2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80020d6:	f04f 0200 	mov.w	r2, #0
 80020da:	f04f 0300 	mov.w	r3, #0
 80020de:	e9d7 ab2c 	ldrd	sl, fp, [r7, #176]	@ 0xb0
 80020e2:	4659      	mov	r1, fp
 80020e4:	00cb      	lsls	r3, r1, #3
 80020e6:	4651      	mov	r1, sl
 80020e8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80020ec:	4651      	mov	r1, sl
 80020ee:	00ca      	lsls	r2, r1, #3
 80020f0:	4610      	mov	r0, r2
 80020f2:	4619      	mov	r1, r3
 80020f4:	4603      	mov	r3, r0
 80020f6:	4642      	mov	r2, r8
 80020f8:	189b      	adds	r3, r3, r2
 80020fa:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
 80020fe:	464b      	mov	r3, r9
 8002100:	460a      	mov	r2, r1
 8002102:	eb42 0303 	adc.w	r3, r2, r3
 8002106:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
 800210a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	2200      	movs	r2, #0
 8002112:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8002116:	f8c7 21cc 	str.w	r2, [r7, #460]	@ 0x1cc
 800211a:	e9d7 1272 	ldrd	r1, r2, [r7, #456]	@ 0x1c8
 800211e:	460b      	mov	r3, r1
 8002120:	18db      	adds	r3, r3, r3
 8002122:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002126:	4613      	mov	r3, r2
 8002128:	eb42 0303 	adc.w	r3, r2, r3
 800212c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002130:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	@ 0xa8
 8002134:	e9d7 0174 	ldrd	r0, r1, [r7, #464]	@ 0x1d0
 8002138:	f7fe f894 	bl	8000264 <__aeabi_uldivmod>
 800213c:	4602      	mov	r2, r0
 800213e:	460b      	mov	r3, r1
 8002140:	4611      	mov	r1, r2
 8002142:	4b3e      	ldr	r3, [pc, #248]	@ (800223c <UART_SetConfig+0x300>)
 8002144:	fba3 2301 	umull	r2, r3, r3, r1
 8002148:	095b      	lsrs	r3, r3, #5
 800214a:	2264      	movs	r2, #100	@ 0x64
 800214c:	fb02 f303 	mul.w	r3, r2, r3
 8002150:	1acb      	subs	r3, r1, r3
 8002152:	00db      	lsls	r3, r3, #3
 8002154:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002158:	4b38      	ldr	r3, [pc, #224]	@ (800223c <UART_SetConfig+0x300>)
 800215a:	fba3 2302 	umull	r2, r3, r3, r2
 800215e:	095b      	lsrs	r3, r3, #5
 8002160:	005b      	lsls	r3, r3, #1
 8002162:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002166:	441c      	add	r4, r3
 8002168:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800216c:	2200      	movs	r2, #0
 800216e:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8002172:	f8c7 21c4 	str.w	r2, [r7, #452]	@ 0x1c4
 8002176:	e9d7 8970 	ldrd	r8, r9, [r7, #448]	@ 0x1c0
 800217a:	4642      	mov	r2, r8
 800217c:	464b      	mov	r3, r9
 800217e:	1891      	adds	r1, r2, r2
 8002180:	f8c7 10a0 	str.w	r1, [r7, #160]	@ 0xa0
 8002184:	415b      	adcs	r3, r3
 8002186:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800218a:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 800218e:	4641      	mov	r1, r8
 8002190:	1851      	adds	r1, r2, r1
 8002192:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
 8002196:	4649      	mov	r1, r9
 8002198:	414b      	adcs	r3, r1
 800219a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800219e:	f04f 0200 	mov.w	r2, #0
 80021a2:	f04f 0300 	mov.w	r3, #0
 80021a6:	e9d7 ab26 	ldrd	sl, fp, [r7, #152]	@ 0x98
 80021aa:	4659      	mov	r1, fp
 80021ac:	00cb      	lsls	r3, r1, #3
 80021ae:	4651      	mov	r1, sl
 80021b0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80021b4:	4651      	mov	r1, sl
 80021b6:	00ca      	lsls	r2, r1, #3
 80021b8:	4610      	mov	r0, r2
 80021ba:	4619      	mov	r1, r3
 80021bc:	4603      	mov	r3, r0
 80021be:	4642      	mov	r2, r8
 80021c0:	189b      	adds	r3, r3, r2
 80021c2:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
 80021c6:	464b      	mov	r3, r9
 80021c8:	460a      	mov	r2, r1
 80021ca:	eb42 0303 	adc.w	r3, r2, r3
 80021ce:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 80021d2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	2200      	movs	r2, #0
 80021da:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
 80021de:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
 80021e2:	e9d7 126c 	ldrd	r1, r2, [r7, #432]	@ 0x1b0
 80021e6:	460b      	mov	r3, r1
 80021e8:	18db      	adds	r3, r3, r3
 80021ea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80021ee:	4613      	mov	r3, r2
 80021f0:	eb42 0303 	adc.w	r3, r2, r3
 80021f4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80021f8:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 80021fc:	e9d7 016e 	ldrd	r0, r1, [r7, #440]	@ 0x1b8
 8002200:	f7fe f830 	bl	8000264 <__aeabi_uldivmod>
 8002204:	4602      	mov	r2, r0
 8002206:	460b      	mov	r3, r1
 8002208:	4b0c      	ldr	r3, [pc, #48]	@ (800223c <UART_SetConfig+0x300>)
 800220a:	fba3 1302 	umull	r1, r3, r3, r2
 800220e:	095b      	lsrs	r3, r3, #5
 8002210:	2164      	movs	r1, #100	@ 0x64
 8002212:	fb01 f303 	mul.w	r3, r1, r3
 8002216:	1ad3      	subs	r3, r2, r3
 8002218:	00db      	lsls	r3, r3, #3
 800221a:	3332      	adds	r3, #50	@ 0x32
 800221c:	4a07      	ldr	r2, [pc, #28]	@ (800223c <UART_SetConfig+0x300>)
 800221e:	fba2 2303 	umull	r2, r3, r2, r3
 8002222:	095b      	lsrs	r3, r3, #5
 8002224:	f003 0207 	and.w	r2, r3, #7
 8002228:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4422      	add	r2, r4
 8002230:	609a      	str	r2, [r3, #8]
 8002232:	e34a      	b.n	80028ca <UART_SetConfig+0x98e>
 8002234:	40011000 	.word	0x40011000
 8002238:	40011400 	.word	0x40011400
 800223c:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002240:	f7ff fb96 	bl	8001970 <HAL_RCC_GetPCLK1Freq>
 8002244:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002248:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800224c:	2200      	movs	r2, #0
 800224e:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8002252:	f8c7 21ac 	str.w	r2, [r7, #428]	@ 0x1ac
 8002256:	e9d7 456a 	ldrd	r4, r5, [r7, #424]	@ 0x1a8
 800225a:	4622      	mov	r2, r4
 800225c:	462b      	mov	r3, r5
 800225e:	1891      	adds	r1, r2, r2
 8002260:	f8c7 1088 	str.w	r1, [r7, #136]	@ 0x88
 8002264:	415b      	adcs	r3, r3
 8002266:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800226a:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800226e:	4621      	mov	r1, r4
 8002270:	eb12 0a01 	adds.w	sl, r2, r1
 8002274:	4629      	mov	r1, r5
 8002276:	eb43 0b01 	adc.w	fp, r3, r1
 800227a:	f04f 0200 	mov.w	r2, #0
 800227e:	f04f 0300 	mov.w	r3, #0
 8002282:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002286:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800228a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800228e:	4692      	mov	sl, r2
 8002290:	469b      	mov	fp, r3
 8002292:	4623      	mov	r3, r4
 8002294:	eb1a 0303 	adds.w	r3, sl, r3
 8002298:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 800229c:	462b      	mov	r3, r5
 800229e:	eb4b 0303 	adc.w	r3, fp, r3
 80022a2:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 80022a6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	2200      	movs	r2, #0
 80022ae:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
 80022b2:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 80022b6:	e9d7 1266 	ldrd	r1, r2, [r7, #408]	@ 0x198
 80022ba:	460b      	mov	r3, r1
 80022bc:	18db      	adds	r3, r3, r3
 80022be:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80022c2:	4613      	mov	r3, r2
 80022c4:	eb42 0303 	adc.w	r3, r2, r3
 80022c8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80022cc:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 80022d0:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	@ 0x1a0
 80022d4:	f7fd ffc6 	bl	8000264 <__aeabi_uldivmod>
 80022d8:	4602      	mov	r2, r0
 80022da:	460b      	mov	r3, r1
 80022dc:	4b61      	ldr	r3, [pc, #388]	@ (8002464 <UART_SetConfig+0x528>)
 80022de:	fba3 2302 	umull	r2, r3, r3, r2
 80022e2:	095b      	lsrs	r3, r3, #5
 80022e4:	011c      	lsls	r4, r3, #4
 80022e6:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80022ea:	2200      	movs	r2, #0
 80022ec:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
 80022f0:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
 80022f4:	e9d7 8964 	ldrd	r8, r9, [r7, #400]	@ 0x190
 80022f8:	4642      	mov	r2, r8
 80022fa:	464b      	mov	r3, r9
 80022fc:	1891      	adds	r1, r2, r2
 80022fe:	67b9      	str	r1, [r7, #120]	@ 0x78
 8002300:	415b      	adcs	r3, r3
 8002302:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002304:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 8002308:	4641      	mov	r1, r8
 800230a:	1851      	adds	r1, r2, r1
 800230c:	6739      	str	r1, [r7, #112]	@ 0x70
 800230e:	4649      	mov	r1, r9
 8002310:	414b      	adcs	r3, r1
 8002312:	677b      	str	r3, [r7, #116]	@ 0x74
 8002314:	f04f 0200 	mov.w	r2, #0
 8002318:	f04f 0300 	mov.w	r3, #0
 800231c:	e9d7 ab1c 	ldrd	sl, fp, [r7, #112]	@ 0x70
 8002320:	4659      	mov	r1, fp
 8002322:	00cb      	lsls	r3, r1, #3
 8002324:	4651      	mov	r1, sl
 8002326:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800232a:	4651      	mov	r1, sl
 800232c:	00ca      	lsls	r2, r1, #3
 800232e:	4610      	mov	r0, r2
 8002330:	4619      	mov	r1, r3
 8002332:	4603      	mov	r3, r0
 8002334:	4642      	mov	r2, r8
 8002336:	189b      	adds	r3, r3, r2
 8002338:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 800233c:	464b      	mov	r3, r9
 800233e:	460a      	mov	r2, r1
 8002340:	eb42 0303 	adc.w	r3, r2, r3
 8002344:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
 8002348:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	2200      	movs	r2, #0
 8002350:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8002354:	f8c7 2184 	str.w	r2, [r7, #388]	@ 0x184
 8002358:	e9d7 1260 	ldrd	r1, r2, [r7, #384]	@ 0x180
 800235c:	460b      	mov	r3, r1
 800235e:	18db      	adds	r3, r3, r3
 8002360:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002362:	4613      	mov	r3, r2
 8002364:	eb42 0303 	adc.w	r3, r2, r3
 8002368:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800236a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800236e:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 8002372:	f7fd ff77 	bl	8000264 <__aeabi_uldivmod>
 8002376:	4602      	mov	r2, r0
 8002378:	460b      	mov	r3, r1
 800237a:	4611      	mov	r1, r2
 800237c:	4b39      	ldr	r3, [pc, #228]	@ (8002464 <UART_SetConfig+0x528>)
 800237e:	fba3 2301 	umull	r2, r3, r3, r1
 8002382:	095b      	lsrs	r3, r3, #5
 8002384:	2264      	movs	r2, #100	@ 0x64
 8002386:	fb02 f303 	mul.w	r3, r2, r3
 800238a:	1acb      	subs	r3, r1, r3
 800238c:	00db      	lsls	r3, r3, #3
 800238e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002392:	4b34      	ldr	r3, [pc, #208]	@ (8002464 <UART_SetConfig+0x528>)
 8002394:	fba3 2302 	umull	r2, r3, r3, r2
 8002398:	095b      	lsrs	r3, r3, #5
 800239a:	005b      	lsls	r3, r3, #1
 800239c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80023a0:	441c      	add	r4, r3
 80023a2:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80023a6:	2200      	movs	r2, #0
 80023a8:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
 80023ac:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 80023b0:	e9d7 895e 	ldrd	r8, r9, [r7, #376]	@ 0x178
 80023b4:	4642      	mov	r2, r8
 80023b6:	464b      	mov	r3, r9
 80023b8:	1891      	adds	r1, r2, r2
 80023ba:	6639      	str	r1, [r7, #96]	@ 0x60
 80023bc:	415b      	adcs	r3, r3
 80023be:	667b      	str	r3, [r7, #100]	@ 0x64
 80023c0:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 80023c4:	4641      	mov	r1, r8
 80023c6:	1851      	adds	r1, r2, r1
 80023c8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80023ca:	4649      	mov	r1, r9
 80023cc:	414b      	adcs	r3, r1
 80023ce:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80023d0:	f04f 0200 	mov.w	r2, #0
 80023d4:	f04f 0300 	mov.w	r3, #0
 80023d8:	e9d7 ab16 	ldrd	sl, fp, [r7, #88]	@ 0x58
 80023dc:	4659      	mov	r1, fp
 80023de:	00cb      	lsls	r3, r1, #3
 80023e0:	4651      	mov	r1, sl
 80023e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80023e6:	4651      	mov	r1, sl
 80023e8:	00ca      	lsls	r2, r1, #3
 80023ea:	4610      	mov	r0, r2
 80023ec:	4619      	mov	r1, r3
 80023ee:	4603      	mov	r3, r0
 80023f0:	4642      	mov	r2, r8
 80023f2:	189b      	adds	r3, r3, r2
 80023f4:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
 80023f8:	464b      	mov	r3, r9
 80023fa:	460a      	mov	r2, r1
 80023fc:	eb42 0303 	adc.w	r3, r2, r3
 8002400:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
 8002404:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	2200      	movs	r2, #0
 800240c:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
 8002410:	f8c7 216c 	str.w	r2, [r7, #364]	@ 0x16c
 8002414:	e9d7 125a 	ldrd	r1, r2, [r7, #360]	@ 0x168
 8002418:	460b      	mov	r3, r1
 800241a:	18db      	adds	r3, r3, r3
 800241c:	653b      	str	r3, [r7, #80]	@ 0x50
 800241e:	4613      	mov	r3, r2
 8002420:	eb42 0303 	adc.w	r3, r2, r3
 8002424:	657b      	str	r3, [r7, #84]	@ 0x54
 8002426:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800242a:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	@ 0x170
 800242e:	f7fd ff19 	bl	8000264 <__aeabi_uldivmod>
 8002432:	4602      	mov	r2, r0
 8002434:	460b      	mov	r3, r1
 8002436:	4b0b      	ldr	r3, [pc, #44]	@ (8002464 <UART_SetConfig+0x528>)
 8002438:	fba3 1302 	umull	r1, r3, r3, r2
 800243c:	095b      	lsrs	r3, r3, #5
 800243e:	2164      	movs	r1, #100	@ 0x64
 8002440:	fb01 f303 	mul.w	r3, r1, r3
 8002444:	1ad3      	subs	r3, r2, r3
 8002446:	00db      	lsls	r3, r3, #3
 8002448:	3332      	adds	r3, #50	@ 0x32
 800244a:	4a06      	ldr	r2, [pc, #24]	@ (8002464 <UART_SetConfig+0x528>)
 800244c:	fba2 2303 	umull	r2, r3, r2, r3
 8002450:	095b      	lsrs	r3, r3, #5
 8002452:	f003 0207 	and.w	r2, r3, #7
 8002456:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4422      	add	r2, r4
 800245e:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8002460:	e233      	b.n	80028ca <UART_SetConfig+0x98e>
 8002462:	bf00      	nop
 8002464:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002468:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800246c:	681a      	ldr	r2, [r3, #0]
 800246e:	4b8d      	ldr	r3, [pc, #564]	@ (80026a4 <UART_SetConfig+0x768>)
 8002470:	429a      	cmp	r2, r3
 8002472:	d006      	beq.n	8002482 <UART_SetConfig+0x546>
 8002474:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	4b8b      	ldr	r3, [pc, #556]	@ (80026a8 <UART_SetConfig+0x76c>)
 800247c:	429a      	cmp	r2, r3
 800247e:	f040 8117 	bne.w	80026b0 <UART_SetConfig+0x774>
      pclk = HAL_RCC_GetPCLK2Freq();
 8002482:	f7ff fa89 	bl	8001998 <HAL_RCC_GetPCLK2Freq>
 8002486:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800248a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800248e:	2200      	movs	r2, #0
 8002490:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
 8002494:	f8c7 2164 	str.w	r2, [r7, #356]	@ 0x164
 8002498:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	@ 0x160
 800249c:	4622      	mov	r2, r4
 800249e:	462b      	mov	r3, r5
 80024a0:	1891      	adds	r1, r2, r2
 80024a2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80024a4:	415b      	adcs	r3, r3
 80024a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80024a8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80024ac:	4621      	mov	r1, r4
 80024ae:	eb12 0801 	adds.w	r8, r2, r1
 80024b2:	4629      	mov	r1, r5
 80024b4:	eb43 0901 	adc.w	r9, r3, r1
 80024b8:	f04f 0200 	mov.w	r2, #0
 80024bc:	f04f 0300 	mov.w	r3, #0
 80024c0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80024c4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80024c8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80024cc:	4690      	mov	r8, r2
 80024ce:	4699      	mov	r9, r3
 80024d0:	4623      	mov	r3, r4
 80024d2:	eb18 0303 	adds.w	r3, r8, r3
 80024d6:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 80024da:	462b      	mov	r3, r5
 80024dc:	eb49 0303 	adc.w	r3, r9, r3
 80024e0:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
 80024e4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	2200      	movs	r2, #0
 80024ec:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 80024f0:	f8c7 2154 	str.w	r2, [r7, #340]	@ 0x154
 80024f4:	f04f 0200 	mov.w	r2, #0
 80024f8:	f04f 0300 	mov.w	r3, #0
 80024fc:	e9d7 4554 	ldrd	r4, r5, [r7, #336]	@ 0x150
 8002500:	4629      	mov	r1, r5
 8002502:	008b      	lsls	r3, r1, #2
 8002504:	4621      	mov	r1, r4
 8002506:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800250a:	4621      	mov	r1, r4
 800250c:	008a      	lsls	r2, r1, #2
 800250e:	e9d7 0156 	ldrd	r0, r1, [r7, #344]	@ 0x158
 8002512:	f7fd fea7 	bl	8000264 <__aeabi_uldivmod>
 8002516:	4602      	mov	r2, r0
 8002518:	460b      	mov	r3, r1
 800251a:	4b64      	ldr	r3, [pc, #400]	@ (80026ac <UART_SetConfig+0x770>)
 800251c:	fba3 2302 	umull	r2, r3, r3, r2
 8002520:	095b      	lsrs	r3, r3, #5
 8002522:	011c      	lsls	r4, r3, #4
 8002524:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002528:	2200      	movs	r2, #0
 800252a:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
 800252e:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8002532:	e9d7 8952 	ldrd	r8, r9, [r7, #328]	@ 0x148
 8002536:	4642      	mov	r2, r8
 8002538:	464b      	mov	r3, r9
 800253a:	1891      	adds	r1, r2, r2
 800253c:	6439      	str	r1, [r7, #64]	@ 0x40
 800253e:	415b      	adcs	r3, r3
 8002540:	647b      	str	r3, [r7, #68]	@ 0x44
 8002542:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002546:	4641      	mov	r1, r8
 8002548:	1851      	adds	r1, r2, r1
 800254a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800254c:	4649      	mov	r1, r9
 800254e:	414b      	adcs	r3, r1
 8002550:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002552:	f04f 0200 	mov.w	r2, #0
 8002556:	f04f 0300 	mov.w	r3, #0
 800255a:	e9d7 ab0e 	ldrd	sl, fp, [r7, #56]	@ 0x38
 800255e:	4659      	mov	r1, fp
 8002560:	00cb      	lsls	r3, r1, #3
 8002562:	4651      	mov	r1, sl
 8002564:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002568:	4651      	mov	r1, sl
 800256a:	00ca      	lsls	r2, r1, #3
 800256c:	4610      	mov	r0, r2
 800256e:	4619      	mov	r1, r3
 8002570:	4603      	mov	r3, r0
 8002572:	4642      	mov	r2, r8
 8002574:	189b      	adds	r3, r3, r2
 8002576:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 800257a:	464b      	mov	r3, r9
 800257c:	460a      	mov	r2, r1
 800257e:	eb42 0303 	adc.w	r3, r2, r3
 8002582:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 8002586:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	2200      	movs	r2, #0
 800258e:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8002592:	f8c7 213c 	str.w	r2, [r7, #316]	@ 0x13c
 8002596:	f04f 0200 	mov.w	r2, #0
 800259a:	f04f 0300 	mov.w	r3, #0
 800259e:	e9d7 894e 	ldrd	r8, r9, [r7, #312]	@ 0x138
 80025a2:	4649      	mov	r1, r9
 80025a4:	008b      	lsls	r3, r1, #2
 80025a6:	4641      	mov	r1, r8
 80025a8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80025ac:	4641      	mov	r1, r8
 80025ae:	008a      	lsls	r2, r1, #2
 80025b0:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	@ 0x140
 80025b4:	f7fd fe56 	bl	8000264 <__aeabi_uldivmod>
 80025b8:	4602      	mov	r2, r0
 80025ba:	460b      	mov	r3, r1
 80025bc:	4611      	mov	r1, r2
 80025be:	4b3b      	ldr	r3, [pc, #236]	@ (80026ac <UART_SetConfig+0x770>)
 80025c0:	fba3 2301 	umull	r2, r3, r3, r1
 80025c4:	095b      	lsrs	r3, r3, #5
 80025c6:	2264      	movs	r2, #100	@ 0x64
 80025c8:	fb02 f303 	mul.w	r3, r2, r3
 80025cc:	1acb      	subs	r3, r1, r3
 80025ce:	011b      	lsls	r3, r3, #4
 80025d0:	3332      	adds	r3, #50	@ 0x32
 80025d2:	4a36      	ldr	r2, [pc, #216]	@ (80026ac <UART_SetConfig+0x770>)
 80025d4:	fba2 2303 	umull	r2, r3, r2, r3
 80025d8:	095b      	lsrs	r3, r3, #5
 80025da:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80025de:	441c      	add	r4, r3
 80025e0:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80025e4:	2200      	movs	r2, #0
 80025e6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 80025ea:	f8c7 2134 	str.w	r2, [r7, #308]	@ 0x134
 80025ee:	e9d7 894c 	ldrd	r8, r9, [r7, #304]	@ 0x130
 80025f2:	4642      	mov	r2, r8
 80025f4:	464b      	mov	r3, r9
 80025f6:	1891      	adds	r1, r2, r2
 80025f8:	6339      	str	r1, [r7, #48]	@ 0x30
 80025fa:	415b      	adcs	r3, r3
 80025fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80025fe:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002602:	4641      	mov	r1, r8
 8002604:	1851      	adds	r1, r2, r1
 8002606:	62b9      	str	r1, [r7, #40]	@ 0x28
 8002608:	4649      	mov	r1, r9
 800260a:	414b      	adcs	r3, r1
 800260c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800260e:	f04f 0200 	mov.w	r2, #0
 8002612:	f04f 0300 	mov.w	r3, #0
 8002616:	e9d7 ab0a 	ldrd	sl, fp, [r7, #40]	@ 0x28
 800261a:	4659      	mov	r1, fp
 800261c:	00cb      	lsls	r3, r1, #3
 800261e:	4651      	mov	r1, sl
 8002620:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002624:	4651      	mov	r1, sl
 8002626:	00ca      	lsls	r2, r1, #3
 8002628:	4610      	mov	r0, r2
 800262a:	4619      	mov	r1, r3
 800262c:	4603      	mov	r3, r0
 800262e:	4642      	mov	r2, r8
 8002630:	189b      	adds	r3, r3, r2
 8002632:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8002636:	464b      	mov	r3, r9
 8002638:	460a      	mov	r2, r1
 800263a:	eb42 0303 	adc.w	r3, r2, r3
 800263e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8002642:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	2200      	movs	r2, #0
 800264a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 800264e:	f8c7 2124 	str.w	r2, [r7, #292]	@ 0x124
 8002652:	f04f 0200 	mov.w	r2, #0
 8002656:	f04f 0300 	mov.w	r3, #0
 800265a:	e9d7 8948 	ldrd	r8, r9, [r7, #288]	@ 0x120
 800265e:	4649      	mov	r1, r9
 8002660:	008b      	lsls	r3, r1, #2
 8002662:	4641      	mov	r1, r8
 8002664:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002668:	4641      	mov	r1, r8
 800266a:	008a      	lsls	r2, r1, #2
 800266c:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	@ 0x128
 8002670:	f7fd fdf8 	bl	8000264 <__aeabi_uldivmod>
 8002674:	4602      	mov	r2, r0
 8002676:	460b      	mov	r3, r1
 8002678:	4b0c      	ldr	r3, [pc, #48]	@ (80026ac <UART_SetConfig+0x770>)
 800267a:	fba3 1302 	umull	r1, r3, r3, r2
 800267e:	095b      	lsrs	r3, r3, #5
 8002680:	2164      	movs	r1, #100	@ 0x64
 8002682:	fb01 f303 	mul.w	r3, r1, r3
 8002686:	1ad3      	subs	r3, r2, r3
 8002688:	011b      	lsls	r3, r3, #4
 800268a:	3332      	adds	r3, #50	@ 0x32
 800268c:	4a07      	ldr	r2, [pc, #28]	@ (80026ac <UART_SetConfig+0x770>)
 800268e:	fba2 2303 	umull	r2, r3, r2, r3
 8002692:	095b      	lsrs	r3, r3, #5
 8002694:	f003 020f 	and.w	r2, r3, #15
 8002698:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4422      	add	r2, r4
 80026a0:	609a      	str	r2, [r3, #8]
 80026a2:	e112      	b.n	80028ca <UART_SetConfig+0x98e>
 80026a4:	40011000 	.word	0x40011000
 80026a8:	40011400 	.word	0x40011400
 80026ac:	51eb851f 	.word	0x51eb851f
      pclk = HAL_RCC_GetPCLK1Freq();
 80026b0:	f7ff f95e 	bl	8001970 <HAL_RCC_GetPCLK1Freq>
 80026b4:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80026b8:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80026bc:	2200      	movs	r2, #0
 80026be:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 80026c2:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 80026c6:	e9d7 8946 	ldrd	r8, r9, [r7, #280]	@ 0x118
 80026ca:	4642      	mov	r2, r8
 80026cc:	464b      	mov	r3, r9
 80026ce:	1891      	adds	r1, r2, r2
 80026d0:	6239      	str	r1, [r7, #32]
 80026d2:	415b      	adcs	r3, r3
 80026d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80026d6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80026da:	4641      	mov	r1, r8
 80026dc:	1854      	adds	r4, r2, r1
 80026de:	4649      	mov	r1, r9
 80026e0:	eb43 0501 	adc.w	r5, r3, r1
 80026e4:	f04f 0200 	mov.w	r2, #0
 80026e8:	f04f 0300 	mov.w	r3, #0
 80026ec:	00eb      	lsls	r3, r5, #3
 80026ee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80026f2:	00e2      	lsls	r2, r4, #3
 80026f4:	4614      	mov	r4, r2
 80026f6:	461d      	mov	r5, r3
 80026f8:	4643      	mov	r3, r8
 80026fa:	18e3      	adds	r3, r4, r3
 80026fc:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8002700:	464b      	mov	r3, r9
 8002702:	eb45 0303 	adc.w	r3, r5, r3
 8002706:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 800270a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	2200      	movs	r2, #0
 8002712:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8002716:	f8c7 210c 	str.w	r2, [r7, #268]	@ 0x10c
 800271a:	f04f 0200 	mov.w	r2, #0
 800271e:	f04f 0300 	mov.w	r3, #0
 8002722:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	@ 0x108
 8002726:	4629      	mov	r1, r5
 8002728:	008b      	lsls	r3, r1, #2
 800272a:	4621      	mov	r1, r4
 800272c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002730:	4621      	mov	r1, r4
 8002732:	008a      	lsls	r2, r1, #2
 8002734:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
 8002738:	f7fd fd94 	bl	8000264 <__aeabi_uldivmod>
 800273c:	4602      	mov	r2, r0
 800273e:	460b      	mov	r3, r1
 8002740:	4b65      	ldr	r3, [pc, #404]	@ (80028d8 <UART_SetConfig+0x99c>)
 8002742:	fba3 2302 	umull	r2, r3, r3, r2
 8002746:	095b      	lsrs	r3, r3, #5
 8002748:	011c      	lsls	r4, r3, #4
 800274a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800274e:	2200      	movs	r2, #0
 8002750:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8002754:	f8c7 2104 	str.w	r2, [r7, #260]	@ 0x104
 8002758:	e9d7 8940 	ldrd	r8, r9, [r7, #256]	@ 0x100
 800275c:	4642      	mov	r2, r8
 800275e:	464b      	mov	r3, r9
 8002760:	1891      	adds	r1, r2, r2
 8002762:	61b9      	str	r1, [r7, #24]
 8002764:	415b      	adcs	r3, r3
 8002766:	61fb      	str	r3, [r7, #28]
 8002768:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800276c:	4641      	mov	r1, r8
 800276e:	1851      	adds	r1, r2, r1
 8002770:	6139      	str	r1, [r7, #16]
 8002772:	4649      	mov	r1, r9
 8002774:	414b      	adcs	r3, r1
 8002776:	617b      	str	r3, [r7, #20]
 8002778:	f04f 0200 	mov.w	r2, #0
 800277c:	f04f 0300 	mov.w	r3, #0
 8002780:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002784:	4659      	mov	r1, fp
 8002786:	00cb      	lsls	r3, r1, #3
 8002788:	4651      	mov	r1, sl
 800278a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800278e:	4651      	mov	r1, sl
 8002790:	00ca      	lsls	r2, r1, #3
 8002792:	4610      	mov	r0, r2
 8002794:	4619      	mov	r1, r3
 8002796:	4603      	mov	r3, r0
 8002798:	4642      	mov	r2, r8
 800279a:	189b      	adds	r3, r3, r2
 800279c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80027a0:	464b      	mov	r3, r9
 80027a2:	460a      	mov	r2, r1
 80027a4:	eb42 0303 	adc.w	r3, r2, r3
 80027a8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80027ac:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	2200      	movs	r2, #0
 80027b4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80027b8:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 80027bc:	f04f 0200 	mov.w	r2, #0
 80027c0:	f04f 0300 	mov.w	r3, #0
 80027c4:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	@ 0xf0
 80027c8:	4649      	mov	r1, r9
 80027ca:	008b      	lsls	r3, r1, #2
 80027cc:	4641      	mov	r1, r8
 80027ce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80027d2:	4641      	mov	r1, r8
 80027d4:	008a      	lsls	r2, r1, #2
 80027d6:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	@ 0xf8
 80027da:	f7fd fd43 	bl	8000264 <__aeabi_uldivmod>
 80027de:	4602      	mov	r2, r0
 80027e0:	460b      	mov	r3, r1
 80027e2:	4611      	mov	r1, r2
 80027e4:	4b3c      	ldr	r3, [pc, #240]	@ (80028d8 <UART_SetConfig+0x99c>)
 80027e6:	fba3 2301 	umull	r2, r3, r3, r1
 80027ea:	095b      	lsrs	r3, r3, #5
 80027ec:	2264      	movs	r2, #100	@ 0x64
 80027ee:	fb02 f303 	mul.w	r3, r2, r3
 80027f2:	1acb      	subs	r3, r1, r3
 80027f4:	011b      	lsls	r3, r3, #4
 80027f6:	3332      	adds	r3, #50	@ 0x32
 80027f8:	4a37      	ldr	r2, [pc, #220]	@ (80028d8 <UART_SetConfig+0x99c>)
 80027fa:	fba2 2303 	umull	r2, r3, r2, r3
 80027fe:	095b      	lsrs	r3, r3, #5
 8002800:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002804:	441c      	add	r4, r3
 8002806:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800280a:	2200      	movs	r2, #0
 800280c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002810:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002814:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 8002818:	4642      	mov	r2, r8
 800281a:	464b      	mov	r3, r9
 800281c:	1891      	adds	r1, r2, r2
 800281e:	60b9      	str	r1, [r7, #8]
 8002820:	415b      	adcs	r3, r3
 8002822:	60fb      	str	r3, [r7, #12]
 8002824:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002828:	4641      	mov	r1, r8
 800282a:	1851      	adds	r1, r2, r1
 800282c:	6039      	str	r1, [r7, #0]
 800282e:	4649      	mov	r1, r9
 8002830:	414b      	adcs	r3, r1
 8002832:	607b      	str	r3, [r7, #4]
 8002834:	f04f 0200 	mov.w	r2, #0
 8002838:	f04f 0300 	mov.w	r3, #0
 800283c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002840:	4659      	mov	r1, fp
 8002842:	00cb      	lsls	r3, r1, #3
 8002844:	4651      	mov	r1, sl
 8002846:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800284a:	4651      	mov	r1, sl
 800284c:	00ca      	lsls	r2, r1, #3
 800284e:	4610      	mov	r0, r2
 8002850:	4619      	mov	r1, r3
 8002852:	4603      	mov	r3, r0
 8002854:	4642      	mov	r2, r8
 8002856:	189b      	adds	r3, r3, r2
 8002858:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800285c:	464b      	mov	r3, r9
 800285e:	460a      	mov	r2, r1
 8002860:	eb42 0303 	adc.w	r3, r2, r3
 8002864:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002868:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	2200      	movs	r2, #0
 8002870:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002874:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002878:	f04f 0200 	mov.w	r2, #0
 800287c:	f04f 0300 	mov.w	r3, #0
 8002880:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	@ 0xd8
 8002884:	4649      	mov	r1, r9
 8002886:	008b      	lsls	r3, r1, #2
 8002888:	4641      	mov	r1, r8
 800288a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800288e:	4641      	mov	r1, r8
 8002890:	008a      	lsls	r2, r1, #2
 8002892:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002896:	f7fd fce5 	bl	8000264 <__aeabi_uldivmod>
 800289a:	4602      	mov	r2, r0
 800289c:	460b      	mov	r3, r1
 800289e:	4b0e      	ldr	r3, [pc, #56]	@ (80028d8 <UART_SetConfig+0x99c>)
 80028a0:	fba3 1302 	umull	r1, r3, r3, r2
 80028a4:	095b      	lsrs	r3, r3, #5
 80028a6:	2164      	movs	r1, #100	@ 0x64
 80028a8:	fb01 f303 	mul.w	r3, r1, r3
 80028ac:	1ad3      	subs	r3, r2, r3
 80028ae:	011b      	lsls	r3, r3, #4
 80028b0:	3332      	adds	r3, #50	@ 0x32
 80028b2:	4a09      	ldr	r2, [pc, #36]	@ (80028d8 <UART_SetConfig+0x99c>)
 80028b4:	fba2 2303 	umull	r2, r3, r2, r3
 80028b8:	095b      	lsrs	r3, r3, #5
 80028ba:	f003 020f 	and.w	r2, r3, #15
 80028be:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4422      	add	r2, r4
 80028c6:	609a      	str	r2, [r3, #8]
}
 80028c8:	e7ff      	b.n	80028ca <UART_SetConfig+0x98e>
 80028ca:	bf00      	nop
 80028cc:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 80028d0:	46bd      	mov	sp, r7
 80028d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80028d6:	bf00      	nop
 80028d8:	51eb851f 	.word	0x51eb851f

080028dc <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80028dc:	b480      	push	{r7}
 80028de:	b083      	sub	sp, #12
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	f103 0208 	add.w	r2, r3, #8
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	f04f 32ff 	mov.w	r2, #4294967295
 80028f4:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	f103 0208 	add.w	r2, r3, #8
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	f103 0208 	add.w	r2, r3, #8
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2200      	movs	r2, #0
 800290e:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002910:	bf00      	nop
 8002912:	370c      	adds	r7, #12
 8002914:	46bd      	mov	sp, r7
 8002916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291a:	4770      	bx	lr

0800291c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800291c:	b480      	push	{r7}
 800291e:	b083      	sub	sp, #12
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2200      	movs	r2, #0
 8002928:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800292a:	bf00      	nop
 800292c:	370c      	adds	r7, #12
 800292e:	46bd      	mov	sp, r7
 8002930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002934:	4770      	bx	lr

08002936 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8002936:	b480      	push	{r7}
 8002938:	b085      	sub	sp, #20
 800293a:	af00      	add	r7, sp, #0
 800293c:	6078      	str	r0, [r7, #4]
 800293e:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	68fa      	ldr	r2, [r7, #12]
 800294a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	689a      	ldr	r2, [r3, #8]
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	683a      	ldr	r2, [r7, #0]
 800295a:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	683a      	ldr	r2, [r7, #0]
 8002960:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	687a      	ldr	r2, [r7, #4]
 8002966:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	1c5a      	adds	r2, r3, #1
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	601a      	str	r2, [r3, #0]
}
 8002972:	bf00      	nop
 8002974:	3714      	adds	r7, #20
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr

0800297e <uxListRemove>:
    ( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800297e:	b480      	push	{r7}
 8002980:	b085      	sub	sp, #20
 8002982:	af00      	add	r7, sp, #0
 8002984:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	691b      	ldr	r3, [r3, #16]
 800298a:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	687a      	ldr	r2, [r7, #4]
 8002992:	6892      	ldr	r2, [r2, #8]
 8002994:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	687a      	ldr	r2, [r7, #4]
 800299c:	6852      	ldr	r2, [r2, #4]
 800299e:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	687a      	ldr	r2, [r7, #4]
 80029a6:	429a      	cmp	r2, r3
 80029a8:	d103      	bne.n	80029b2 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	689a      	ldr	r2, [r3, #8]
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2200      	movs	r2, #0
 80029b6:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	1e5a      	subs	r2, r3, #1
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	3714      	adds	r7, #20
 80029ca:	46bd      	mov	sp, r7
 80029cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d0:	4770      	bx	lr

080029d2 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80029d2:	b580      	push	{r7, lr}
 80029d4:	b08c      	sub	sp, #48	@ 0x30
 80029d6:	af04      	add	r7, sp, #16
 80029d8:	60f8      	str	r0, [r7, #12]
 80029da:	60b9      	str	r1, [r7, #8]
 80029dc:	603b      	str	r3, [r7, #0]
 80029de:	4613      	mov	r3, r2
 80029e0:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80029e2:	88fb      	ldrh	r3, [r7, #6]
 80029e4:	009b      	lsls	r3, r3, #2
 80029e6:	4618      	mov	r0, r3
 80029e8:	f000 fee0 	bl	80037ac <pvPortMalloc>
 80029ec:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d00e      	beq.n	8002a12 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80029f4:	2058      	movs	r0, #88	@ 0x58
 80029f6:	f000 fed9 	bl	80037ac <pvPortMalloc>
 80029fa:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 80029fc:	69fb      	ldr	r3, [r7, #28]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d003      	beq.n	8002a0a <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8002a02:	69fb      	ldr	r3, [r7, #28]
 8002a04:	697a      	ldr	r2, [r7, #20]
 8002a06:	631a      	str	r2, [r3, #48]	@ 0x30
 8002a08:	e005      	b.n	8002a16 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8002a0a:	6978      	ldr	r0, [r7, #20]
 8002a0c:	f000 ffb0 	bl	8003970 <vPortFree>
 8002a10:	e001      	b.n	8002a16 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8002a12:	2300      	movs	r3, #0
 8002a14:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002a16:	69fb      	ldr	r3, [r7, #28]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d013      	beq.n	8002a44 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002a1c:	88fa      	ldrh	r2, [r7, #6]
 8002a1e:	2300      	movs	r3, #0
 8002a20:	9303      	str	r3, [sp, #12]
 8002a22:	69fb      	ldr	r3, [r7, #28]
 8002a24:	9302      	str	r3, [sp, #8]
 8002a26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a28:	9301      	str	r3, [sp, #4]
 8002a2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a2c:	9300      	str	r3, [sp, #0]
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	68b9      	ldr	r1, [r7, #8]
 8002a32:	68f8      	ldr	r0, [r7, #12]
 8002a34:	f000 f80e 	bl	8002a54 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002a38:	69f8      	ldr	r0, [r7, #28]
 8002a3a:	f000 f8a3 	bl	8002b84 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	61bb      	str	r3, [r7, #24]
 8002a42:	e002      	b.n	8002a4a <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002a44:	f04f 33ff 	mov.w	r3, #4294967295
 8002a48:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002a4a:	69bb      	ldr	r3, [r7, #24]
    }
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	3720      	adds	r7, #32
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bd80      	pop	{r7, pc}

08002a54 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b088      	sub	sp, #32
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	60f8      	str	r0, [r7, #12]
 8002a5c:	60b9      	str	r1, [r7, #8]
 8002a5e:	607a      	str	r2, [r7, #4]
 8002a60:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002a62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a64:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	009b      	lsls	r3, r3, #2
 8002a6a:	461a      	mov	r2, r3
 8002a6c:	21a5      	movs	r1, #165	@ 0xa5
 8002a6e:	f002 fa85 	bl	8004f7c <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002a72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a74:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002a7c:	3b01      	subs	r3, #1
 8002a7e:	009b      	lsls	r3, r3, #2
 8002a80:	4413      	add	r3, r2
 8002a82:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002a84:	69bb      	ldr	r3, [r7, #24]
 8002a86:	f023 0307 	bic.w	r3, r3, #7
 8002a8a:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002a8c:	69bb      	ldr	r3, [r7, #24]
 8002a8e:	f003 0307 	and.w	r3, r3, #7
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d00b      	beq.n	8002aae <prvInitialiseNewTask+0x5a>
        __asm volatile
 8002a96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a9a:	f383 8811 	msr	BASEPRI, r3
 8002a9e:	f3bf 8f6f 	isb	sy
 8002aa2:	f3bf 8f4f 	dsb	sy
 8002aa6:	617b      	str	r3, [r7, #20]
    }
 8002aa8:	bf00      	nop
 8002aaa:	bf00      	nop
 8002aac:	e7fd      	b.n	8002aaa <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d01f      	beq.n	8002af4 <prvInitialiseNewTask+0xa0>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	61fb      	str	r3, [r7, #28]
 8002ab8:	e012      	b.n	8002ae0 <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002aba:	68ba      	ldr	r2, [r7, #8]
 8002abc:	69fb      	ldr	r3, [r7, #28]
 8002abe:	4413      	add	r3, r2
 8002ac0:	7819      	ldrb	r1, [r3, #0]
 8002ac2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002ac4:	69fb      	ldr	r3, [r7, #28]
 8002ac6:	4413      	add	r3, r2
 8002ac8:	3334      	adds	r3, #52	@ 0x34
 8002aca:	460a      	mov	r2, r1
 8002acc:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002ace:	68ba      	ldr	r2, [r7, #8]
 8002ad0:	69fb      	ldr	r3, [r7, #28]
 8002ad2:	4413      	add	r3, r2
 8002ad4:	781b      	ldrb	r3, [r3, #0]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d006      	beq.n	8002ae8 <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002ada:	69fb      	ldr	r3, [r7, #28]
 8002adc:	3301      	adds	r3, #1
 8002ade:	61fb      	str	r3, [r7, #28]
 8002ae0:	69fb      	ldr	r3, [r7, #28]
 8002ae2:	2b09      	cmp	r3, #9
 8002ae4:	d9e9      	bls.n	8002aba <prvInitialiseNewTask+0x66>
 8002ae6:	e000      	b.n	8002aea <prvInitialiseNewTask+0x96>
            {
                break;
 8002ae8:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002aea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002aec:	2200      	movs	r2, #0
 8002aee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8002af2:	e003      	b.n	8002afc <prvInitialiseNewTask+0xa8>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002af4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002af6:	2200      	movs	r2, #0
 8002af8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002afc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002afe:	2b04      	cmp	r3, #4
 8002b00:	d901      	bls.n	8002b06 <prvInitialiseNewTask+0xb2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002b02:	2304      	movs	r3, #4
 8002b04:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002b06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b08:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002b0a:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8002b0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b0e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002b10:	649a      	str	r2, [r3, #72]	@ 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8002b12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b14:	2200      	movs	r2, #0
 8002b16:	64da      	str	r2, [r3, #76]	@ 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002b18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b1a:	3304      	adds	r3, #4
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f7ff fefd 	bl	800291c <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002b22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b24:	3318      	adds	r3, #24
 8002b26:	4618      	mov	r0, r3
 8002b28:	f7ff fef8 	bl	800291c <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002b2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b2e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002b30:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002b32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b34:	f1c3 0205 	rsb	r2, r3, #5
 8002b38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b3a:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002b3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b3e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002b40:	625a      	str	r2, [r3, #36]	@ 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8002b42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b44:	3350      	adds	r3, #80	@ 0x50
 8002b46:	2204      	movs	r2, #4
 8002b48:	2100      	movs	r1, #0
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f002 fa16 	bl	8004f7c <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8002b50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b52:	3354      	adds	r3, #84	@ 0x54
 8002b54:	2201      	movs	r2, #1
 8002b56:	2100      	movs	r1, #0
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f002 fa0f 	bl	8004f7c <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002b5e:	683a      	ldr	r2, [r7, #0]
 8002b60:	68f9      	ldr	r1, [r7, #12]
 8002b62:	69b8      	ldr	r0, [r7, #24]
 8002b64:	f000 fb80 	bl	8003268 <pxPortInitialiseStack>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b6c:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002b6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d002      	beq.n	8002b7a <prvInitialiseNewTask+0x126>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002b74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b76:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002b78:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002b7a:	bf00      	nop
 8002b7c:	3720      	adds	r7, #32
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}
	...

08002b84 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002b84:	b5b0      	push	{r4, r5, r7, lr}
 8002b86:	b084      	sub	sp, #16
 8002b88:	af02      	add	r7, sp, #8
 8002b8a:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002b8c:	f000 fd1e 	bl	80035cc <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002b90:	4b3b      	ldr	r3, [pc, #236]	@ (8002c80 <prvAddNewTaskToReadyList+0xfc>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	3301      	adds	r3, #1
 8002b96:	4a3a      	ldr	r2, [pc, #232]	@ (8002c80 <prvAddNewTaskToReadyList+0xfc>)
 8002b98:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002b9a:	4b3a      	ldr	r3, [pc, #232]	@ (8002c84 <prvAddNewTaskToReadyList+0x100>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d109      	bne.n	8002bb6 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002ba2:	4a38      	ldr	r2, [pc, #224]	@ (8002c84 <prvAddNewTaskToReadyList+0x100>)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002ba8:	4b35      	ldr	r3, [pc, #212]	@ (8002c80 <prvAddNewTaskToReadyList+0xfc>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	2b01      	cmp	r3, #1
 8002bae:	d110      	bne.n	8002bd2 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002bb0:	f000 fac0 	bl	8003134 <prvInitialiseTaskLists>
 8002bb4:	e00d      	b.n	8002bd2 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002bb6:	4b34      	ldr	r3, [pc, #208]	@ (8002c88 <prvAddNewTaskToReadyList+0x104>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d109      	bne.n	8002bd2 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002bbe:	4b31      	ldr	r3, [pc, #196]	@ (8002c84 <prvAddNewTaskToReadyList+0x100>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bc8:	429a      	cmp	r2, r3
 8002bca:	d802      	bhi.n	8002bd2 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002bcc:	4a2d      	ldr	r2, [pc, #180]	@ (8002c84 <prvAddNewTaskToReadyList+0x100>)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002bd2:	4b2e      	ldr	r3, [pc, #184]	@ (8002c8c <prvAddNewTaskToReadyList+0x108>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	3301      	adds	r3, #1
 8002bd8:	4a2c      	ldr	r2, [pc, #176]	@ (8002c8c <prvAddNewTaskToReadyList+0x108>)
 8002bda:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002bdc:	4b2b      	ldr	r3, [pc, #172]	@ (8002c8c <prvAddNewTaskToReadyList+0x108>)
 8002bde:	681a      	ldr	r2, [r3, #0]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	641a      	str	r2, [r3, #64]	@ 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d016      	beq.n	8002c18 <prvAddNewTaskToReadyList+0x94>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	4618      	mov	r0, r3
 8002bee:	f001 ffb7 	bl	8004b60 <SEGGER_SYSVIEW_OnTaskCreate>
 8002bf2:	6878      	ldr	r0, [r7, #4]
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c02:	461d      	mov	r5, r3
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	461c      	mov	r4, r3
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c0e:	1ae3      	subs	r3, r4, r3
 8002c10:	9300      	str	r3, [sp, #0]
 8002c12:	462b      	mov	r3, r5
 8002c14:	f000 ffcc 	bl	8003bb0 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f002 f824 	bl	8004c68 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c24:	2201      	movs	r2, #1
 8002c26:	409a      	lsls	r2, r3
 8002c28:	4b19      	ldr	r3, [pc, #100]	@ (8002c90 <prvAddNewTaskToReadyList+0x10c>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	4a18      	ldr	r2, [pc, #96]	@ (8002c90 <prvAddNewTaskToReadyList+0x10c>)
 8002c30:	6013      	str	r3, [r2, #0]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c36:	4613      	mov	r3, r2
 8002c38:	009b      	lsls	r3, r3, #2
 8002c3a:	4413      	add	r3, r2
 8002c3c:	009b      	lsls	r3, r3, #2
 8002c3e:	4a15      	ldr	r2, [pc, #84]	@ (8002c94 <prvAddNewTaskToReadyList+0x110>)
 8002c40:	441a      	add	r2, r3
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	3304      	adds	r3, #4
 8002c46:	4619      	mov	r1, r3
 8002c48:	4610      	mov	r0, r2
 8002c4a:	f7ff fe74 	bl	8002936 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002c4e:	f000 fcef 	bl	8003630 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002c52:	4b0d      	ldr	r3, [pc, #52]	@ (8002c88 <prvAddNewTaskToReadyList+0x104>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d00e      	beq.n	8002c78 <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002c5a:	4b0a      	ldr	r3, [pc, #40]	@ (8002c84 <prvAddNewTaskToReadyList+0x100>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c64:	429a      	cmp	r2, r3
 8002c66:	d207      	bcs.n	8002c78 <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8002c68:	4b0b      	ldr	r3, [pc, #44]	@ (8002c98 <prvAddNewTaskToReadyList+0x114>)
 8002c6a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002c6e:	601a      	str	r2, [r3, #0]
 8002c70:	f3bf 8f4f 	dsb	sy
 8002c74:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002c78:	bf00      	nop
 8002c7a:	3708      	adds	r7, #8
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bdb0      	pop	{r4, r5, r7, pc}
 8002c80:	20000190 	.word	0x20000190
 8002c84:	200000b8 	.word	0x200000b8
 8002c88:	2000019c 	.word	0x2000019c
 8002c8c:	200001ac 	.word	0x200001ac
 8002c90:	20000198 	.word	0x20000198
 8002c94:	200000bc 	.word	0x200000bc
 8002c98:	e000ed04 	.word	0xe000ed04

08002c9c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b086      	sub	sp, #24
 8002ca0:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8002ca2:	4b24      	ldr	r3, [pc, #144]	@ (8002d34 <vTaskStartScheduler+0x98>)
 8002ca4:	9301      	str	r3, [sp, #4]
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	9300      	str	r3, [sp, #0]
 8002caa:	2300      	movs	r3, #0
 8002cac:	2282      	movs	r2, #130	@ 0x82
 8002cae:	4922      	ldr	r1, [pc, #136]	@ (8002d38 <vTaskStartScheduler+0x9c>)
 8002cb0:	4822      	ldr	r0, [pc, #136]	@ (8002d3c <vTaskStartScheduler+0xa0>)
 8002cb2:	f7ff fe8e 	bl	80029d2 <xTaskCreate>
 8002cb6:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	2b01      	cmp	r3, #1
 8002cbc:	d124      	bne.n	8002d08 <vTaskStartScheduler+0x6c>
        __asm volatile
 8002cbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002cc2:	f383 8811 	msr	BASEPRI, r3
 8002cc6:	f3bf 8f6f 	isb	sy
 8002cca:	f3bf 8f4f 	dsb	sy
 8002cce:	60bb      	str	r3, [r7, #8]
    }
 8002cd0:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8002cd2:	4b1b      	ldr	r3, [pc, #108]	@ (8002d40 <vTaskStartScheduler+0xa4>)
 8002cd4:	f04f 32ff 	mov.w	r2, #4294967295
 8002cd8:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002cda:	4b1a      	ldr	r3, [pc, #104]	@ (8002d44 <vTaskStartScheduler+0xa8>)
 8002cdc:	2201      	movs	r2, #1
 8002cde:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002ce0:	4b19      	ldr	r3, [pc, #100]	@ (8002d48 <vTaskStartScheduler+0xac>)
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8002ce6:	4b19      	ldr	r3, [pc, #100]	@ (8002d4c <vTaskStartScheduler+0xb0>)
 8002ce8:	681a      	ldr	r2, [r3, #0]
 8002cea:	4b12      	ldr	r3, [pc, #72]	@ (8002d34 <vTaskStartScheduler+0x98>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	429a      	cmp	r2, r3
 8002cf0:	d102      	bne.n	8002cf8 <vTaskStartScheduler+0x5c>
 8002cf2:	f001 ff19 	bl	8004b28 <SEGGER_SYSVIEW_OnIdle>
 8002cf6:	e004      	b.n	8002d02 <vTaskStartScheduler+0x66>
 8002cf8:	4b14      	ldr	r3, [pc, #80]	@ (8002d4c <vTaskStartScheduler+0xb0>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f001 ff71 	bl	8004be4 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8002d02:	f000 fb3f 	bl	8003384 <xPortStartScheduler>
 8002d06:	e00f      	b.n	8002d28 <vTaskStartScheduler+0x8c>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d0e:	d10b      	bne.n	8002d28 <vTaskStartScheduler+0x8c>
        __asm volatile
 8002d10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d14:	f383 8811 	msr	BASEPRI, r3
 8002d18:	f3bf 8f6f 	isb	sy
 8002d1c:	f3bf 8f4f 	dsb	sy
 8002d20:	607b      	str	r3, [r7, #4]
    }
 8002d22:	bf00      	nop
 8002d24:	bf00      	nop
 8002d26:	e7fd      	b.n	8002d24 <vTaskStartScheduler+0x88>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002d28:	4b09      	ldr	r3, [pc, #36]	@ (8002d50 <vTaskStartScheduler+0xb4>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
}
 8002d2c:	bf00      	nop
 8002d2e:	3710      	adds	r7, #16
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}
 8002d34:	200001b4 	.word	0x200001b4
 8002d38:	08005014 	.word	0x08005014
 8002d3c:	08003105 	.word	0x08003105
 8002d40:	200001b0 	.word	0x200001b0
 8002d44:	2000019c 	.word	0x2000019c
 8002d48:	20000194 	.word	0x20000194
 8002d4c:	200000b8 	.word	0x200000b8
 8002d50:	2000000c 	.word	0x2000000c

08002d54 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002d54:	b480      	push	{r7}
 8002d56:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002d58:	4b04      	ldr	r3, [pc, #16]	@ (8002d6c <vTaskSuspendAll+0x18>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	3301      	adds	r3, #1
 8002d5e:	4a03      	ldr	r2, [pc, #12]	@ (8002d6c <vTaskSuspendAll+0x18>)
 8002d60:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002d62:	bf00      	nop
 8002d64:	46bd      	mov	sp, r7
 8002d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6a:	4770      	bx	lr
 8002d6c:	200001b8 	.word	0x200001b8

08002d70 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b084      	sub	sp, #16
 8002d74:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002d76:	2300      	movs	r3, #0
 8002d78:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002d7e:	4b44      	ldr	r3, [pc, #272]	@ (8002e90 <xTaskResumeAll+0x120>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d10b      	bne.n	8002d9e <xTaskResumeAll+0x2e>
        __asm volatile
 8002d86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d8a:	f383 8811 	msr	BASEPRI, r3
 8002d8e:	f3bf 8f6f 	isb	sy
 8002d92:	f3bf 8f4f 	dsb	sy
 8002d96:	603b      	str	r3, [r7, #0]
    }
 8002d98:	bf00      	nop
 8002d9a:	bf00      	nop
 8002d9c:	e7fd      	b.n	8002d9a <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002d9e:	f000 fc15 	bl	80035cc <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002da2:	4b3b      	ldr	r3, [pc, #236]	@ (8002e90 <xTaskResumeAll+0x120>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	3b01      	subs	r3, #1
 8002da8:	4a39      	ldr	r2, [pc, #228]	@ (8002e90 <xTaskResumeAll+0x120>)
 8002daa:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002dac:	4b38      	ldr	r3, [pc, #224]	@ (8002e90 <xTaskResumeAll+0x120>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d165      	bne.n	8002e80 <xTaskResumeAll+0x110>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002db4:	4b37      	ldr	r3, [pc, #220]	@ (8002e94 <xTaskResumeAll+0x124>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d061      	beq.n	8002e80 <xTaskResumeAll+0x110>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002dbc:	e032      	b.n	8002e24 <xTaskResumeAll+0xb4>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002dbe:	4b36      	ldr	r3, [pc, #216]	@ (8002e98 <xTaskResumeAll+0x128>)
 8002dc0:	68db      	ldr	r3, [r3, #12]
 8002dc2:	68db      	ldr	r3, [r3, #12]
 8002dc4:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	3318      	adds	r3, #24
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f7ff fdd7 	bl	800297e <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	3304      	adds	r3, #4
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f7ff fdd2 	bl	800297e <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f001 ff43 	bl	8004c68 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002de6:	2201      	movs	r2, #1
 8002de8:	409a      	lsls	r2, r3
 8002dea:	4b2c      	ldr	r3, [pc, #176]	@ (8002e9c <xTaskResumeAll+0x12c>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4313      	orrs	r3, r2
 8002df0:	4a2a      	ldr	r2, [pc, #168]	@ (8002e9c <xTaskResumeAll+0x12c>)
 8002df2:	6013      	str	r3, [r2, #0]
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002df8:	4613      	mov	r3, r2
 8002dfa:	009b      	lsls	r3, r3, #2
 8002dfc:	4413      	add	r3, r2
 8002dfe:	009b      	lsls	r3, r3, #2
 8002e00:	4a27      	ldr	r2, [pc, #156]	@ (8002ea0 <xTaskResumeAll+0x130>)
 8002e02:	441a      	add	r2, r3
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	3304      	adds	r3, #4
 8002e08:	4619      	mov	r1, r3
 8002e0a:	4610      	mov	r0, r2
 8002e0c:	f7ff fd93 	bl	8002936 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e14:	4b23      	ldr	r3, [pc, #140]	@ (8002ea4 <xTaskResumeAll+0x134>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e1a:	429a      	cmp	r2, r3
 8002e1c:	d302      	bcc.n	8002e24 <xTaskResumeAll+0xb4>
                    {
                        xYieldPending = pdTRUE;
 8002e1e:	4b22      	ldr	r3, [pc, #136]	@ (8002ea8 <xTaskResumeAll+0x138>)
 8002e20:	2201      	movs	r2, #1
 8002e22:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002e24:	4b1c      	ldr	r3, [pc, #112]	@ (8002e98 <xTaskResumeAll+0x128>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d1c8      	bne.n	8002dbe <xTaskResumeAll+0x4e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d001      	beq.n	8002e36 <xTaskResumeAll+0xc6>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002e32:	f000 f9fd 	bl	8003230 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002e36:	4b1d      	ldr	r3, [pc, #116]	@ (8002eac <xTaskResumeAll+0x13c>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d010      	beq.n	8002e64 <xTaskResumeAll+0xf4>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002e42:	f000 f837 	bl	8002eb4 <xTaskIncrementTick>
 8002e46:	4603      	mov	r3, r0
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d002      	beq.n	8002e52 <xTaskResumeAll+0xe2>
                            {
                                xYieldPending = pdTRUE;
 8002e4c:	4b16      	ldr	r3, [pc, #88]	@ (8002ea8 <xTaskResumeAll+0x138>)
 8002e4e:	2201      	movs	r2, #1
 8002e50:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	3b01      	subs	r3, #1
 8002e56:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d1f1      	bne.n	8002e42 <xTaskResumeAll+0xd2>

                        xPendedTicks = 0;
 8002e5e:	4b13      	ldr	r3, [pc, #76]	@ (8002eac <xTaskResumeAll+0x13c>)
 8002e60:	2200      	movs	r2, #0
 8002e62:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002e64:	4b10      	ldr	r3, [pc, #64]	@ (8002ea8 <xTaskResumeAll+0x138>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d009      	beq.n	8002e80 <xTaskResumeAll+0x110>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8002e70:	4b0f      	ldr	r3, [pc, #60]	@ (8002eb0 <xTaskResumeAll+0x140>)
 8002e72:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002e76:	601a      	str	r2, [r3, #0]
 8002e78:	f3bf 8f4f 	dsb	sy
 8002e7c:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8002e80:	f000 fbd6 	bl	8003630 <vPortExitCritical>

    return xAlreadyYielded;
 8002e84:	68bb      	ldr	r3, [r7, #8]
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	3710      	adds	r7, #16
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}
 8002e8e:	bf00      	nop
 8002e90:	200001b8 	.word	0x200001b8
 8002e94:	20000190 	.word	0x20000190
 8002e98:	20000150 	.word	0x20000150
 8002e9c:	20000198 	.word	0x20000198
 8002ea0:	200000bc 	.word	0x200000bc
 8002ea4:	200000b8 	.word	0x200000b8
 8002ea8:	200001a4 	.word	0x200001a4
 8002eac:	200001a0 	.word	0x200001a0
 8002eb0:	e000ed04 	.word	0xe000ed04

08002eb4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b086      	sub	sp, #24
 8002eb8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002ebe:	4b51      	ldr	r3, [pc, #324]	@ (8003004 <xTaskIncrementTick+0x150>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	f040 8093 	bne.w	8002fee <xTaskIncrementTick+0x13a>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002ec8:	4b4f      	ldr	r3, [pc, #316]	@ (8003008 <xTaskIncrementTick+0x154>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	3301      	adds	r3, #1
 8002ece:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002ed0:	4a4d      	ldr	r2, [pc, #308]	@ (8003008 <xTaskIncrementTick+0x154>)
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d121      	bne.n	8002f20 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 8002edc:	4b4b      	ldr	r3, [pc, #300]	@ (800300c <xTaskIncrementTick+0x158>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d00b      	beq.n	8002efe <xTaskIncrementTick+0x4a>
        __asm volatile
 8002ee6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002eea:	f383 8811 	msr	BASEPRI, r3
 8002eee:	f3bf 8f6f 	isb	sy
 8002ef2:	f3bf 8f4f 	dsb	sy
 8002ef6:	603b      	str	r3, [r7, #0]
    }
 8002ef8:	bf00      	nop
 8002efa:	bf00      	nop
 8002efc:	e7fd      	b.n	8002efa <xTaskIncrementTick+0x46>
 8002efe:	4b43      	ldr	r3, [pc, #268]	@ (800300c <xTaskIncrementTick+0x158>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	60fb      	str	r3, [r7, #12]
 8002f04:	4b42      	ldr	r3, [pc, #264]	@ (8003010 <xTaskIncrementTick+0x15c>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a40      	ldr	r2, [pc, #256]	@ (800300c <xTaskIncrementTick+0x158>)
 8002f0a:	6013      	str	r3, [r2, #0]
 8002f0c:	4a40      	ldr	r2, [pc, #256]	@ (8003010 <xTaskIncrementTick+0x15c>)
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	6013      	str	r3, [r2, #0]
 8002f12:	4b40      	ldr	r3, [pc, #256]	@ (8003014 <xTaskIncrementTick+0x160>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	3301      	adds	r3, #1
 8002f18:	4a3e      	ldr	r2, [pc, #248]	@ (8003014 <xTaskIncrementTick+0x160>)
 8002f1a:	6013      	str	r3, [r2, #0]
 8002f1c:	f000 f988 	bl	8003230 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002f20:	4b3d      	ldr	r3, [pc, #244]	@ (8003018 <xTaskIncrementTick+0x164>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	693a      	ldr	r2, [r7, #16]
 8002f26:	429a      	cmp	r2, r3
 8002f28:	d34c      	bcc.n	8002fc4 <xTaskIncrementTick+0x110>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002f2a:	4b38      	ldr	r3, [pc, #224]	@ (800300c <xTaskIncrementTick+0x158>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d104      	bne.n	8002f3e <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002f34:	4b38      	ldr	r3, [pc, #224]	@ (8003018 <xTaskIncrementTick+0x164>)
 8002f36:	f04f 32ff 	mov.w	r2, #4294967295
 8002f3a:	601a      	str	r2, [r3, #0]
                    break;
 8002f3c:	e042      	b.n	8002fc4 <xTaskIncrementTick+0x110>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002f3e:	4b33      	ldr	r3, [pc, #204]	@ (800300c <xTaskIncrementTick+0x158>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	68db      	ldr	r3, [r3, #12]
 8002f44:	68db      	ldr	r3, [r3, #12]
 8002f46:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8002f4e:	693a      	ldr	r2, [r7, #16]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	429a      	cmp	r2, r3
 8002f54:	d203      	bcs.n	8002f5e <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002f56:	4a30      	ldr	r2, [pc, #192]	@ (8003018 <xTaskIncrementTick+0x164>)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002f5c:	e032      	b.n	8002fc4 <xTaskIncrementTick+0x110>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	3304      	adds	r3, #4
 8002f62:	4618      	mov	r0, r3
 8002f64:	f7ff fd0b 	bl	800297e <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d004      	beq.n	8002f7a <xTaskIncrementTick+0xc6>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	3318      	adds	r3, #24
 8002f74:	4618      	mov	r0, r3
 8002f76:	f7ff fd02 	bl	800297e <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f001 fe73 	bl	8004c68 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f86:	2201      	movs	r2, #1
 8002f88:	409a      	lsls	r2, r3
 8002f8a:	4b24      	ldr	r3, [pc, #144]	@ (800301c <xTaskIncrementTick+0x168>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	4a22      	ldr	r2, [pc, #136]	@ (800301c <xTaskIncrementTick+0x168>)
 8002f92:	6013      	str	r3, [r2, #0]
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f98:	4613      	mov	r3, r2
 8002f9a:	009b      	lsls	r3, r3, #2
 8002f9c:	4413      	add	r3, r2
 8002f9e:	009b      	lsls	r3, r3, #2
 8002fa0:	4a1f      	ldr	r2, [pc, #124]	@ (8003020 <xTaskIncrementTick+0x16c>)
 8002fa2:	441a      	add	r2, r3
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	3304      	adds	r3, #4
 8002fa8:	4619      	mov	r1, r3
 8002faa:	4610      	mov	r0, r2
 8002fac:	f7ff fcc3 	bl	8002936 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002fb4:	4b1b      	ldr	r3, [pc, #108]	@ (8003024 <xTaskIncrementTick+0x170>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fba:	429a      	cmp	r2, r3
 8002fbc:	d3b5      	bcc.n	8002f2a <xTaskIncrementTick+0x76>
                            {
                                xSwitchRequired = pdTRUE;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002fc2:	e7b2      	b.n	8002f2a <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002fc4:	4b17      	ldr	r3, [pc, #92]	@ (8003024 <xTaskIncrementTick+0x170>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002fca:	4915      	ldr	r1, [pc, #84]	@ (8003020 <xTaskIncrementTick+0x16c>)
 8002fcc:	4613      	mov	r3, r2
 8002fce:	009b      	lsls	r3, r3, #2
 8002fd0:	4413      	add	r3, r2
 8002fd2:	009b      	lsls	r3, r3, #2
 8002fd4:	440b      	add	r3, r1
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	2b01      	cmp	r3, #1
 8002fda:	d901      	bls.n	8002fe0 <xTaskIncrementTick+0x12c>
                {
                    xSwitchRequired = pdTRUE;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8002fe0:	4b11      	ldr	r3, [pc, #68]	@ (8003028 <xTaskIncrementTick+0x174>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d007      	beq.n	8002ff8 <xTaskIncrementTick+0x144>
                {
                    xSwitchRequired = pdTRUE;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	617b      	str	r3, [r7, #20]
 8002fec:	e004      	b.n	8002ff8 <xTaskIncrementTick+0x144>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8002fee:	4b0f      	ldr	r3, [pc, #60]	@ (800302c <xTaskIncrementTick+0x178>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	3301      	adds	r3, #1
 8002ff4:	4a0d      	ldr	r2, [pc, #52]	@ (800302c <xTaskIncrementTick+0x178>)
 8002ff6:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8002ff8:	697b      	ldr	r3, [r7, #20]
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	3718      	adds	r7, #24
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}
 8003002:	bf00      	nop
 8003004:	200001b8 	.word	0x200001b8
 8003008:	20000194 	.word	0x20000194
 800300c:	20000148 	.word	0x20000148
 8003010:	2000014c 	.word	0x2000014c
 8003014:	200001a8 	.word	0x200001a8
 8003018:	200001b0 	.word	0x200001b0
 800301c:	20000198 	.word	0x20000198
 8003020:	200000bc 	.word	0x200000bc
 8003024:	200000b8 	.word	0x200000b8
 8003028:	200001a4 	.word	0x200001a4
 800302c:	200001a0 	.word	0x200001a0

08003030 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b086      	sub	sp, #24
 8003034:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003036:	4b2d      	ldr	r3, [pc, #180]	@ (80030ec <vTaskSwitchContext+0xbc>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d003      	beq.n	8003046 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800303e:	4b2c      	ldr	r3, [pc, #176]	@ (80030f0 <vTaskSwitchContext+0xc0>)
 8003040:	2201      	movs	r2, #1
 8003042:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8003044:	e04e      	b.n	80030e4 <vTaskSwitchContext+0xb4>
        xYieldPending = pdFALSE;
 8003046:	4b2a      	ldr	r3, [pc, #168]	@ (80030f0 <vTaskSwitchContext+0xc0>)
 8003048:	2200      	movs	r2, #0
 800304a:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800304c:	4b29      	ldr	r3, [pc, #164]	@ (80030f4 <vTaskSwitchContext+0xc4>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	fab3 f383 	clz	r3, r3
 8003058:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 800305a:	7afb      	ldrb	r3, [r7, #11]
 800305c:	f1c3 031f 	rsb	r3, r3, #31
 8003060:	617b      	str	r3, [r7, #20]
 8003062:	4925      	ldr	r1, [pc, #148]	@ (80030f8 <vTaskSwitchContext+0xc8>)
 8003064:	697a      	ldr	r2, [r7, #20]
 8003066:	4613      	mov	r3, r2
 8003068:	009b      	lsls	r3, r3, #2
 800306a:	4413      	add	r3, r2
 800306c:	009b      	lsls	r3, r3, #2
 800306e:	440b      	add	r3, r1
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d10b      	bne.n	800308e <vTaskSwitchContext+0x5e>
        __asm volatile
 8003076:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800307a:	f383 8811 	msr	BASEPRI, r3
 800307e:	f3bf 8f6f 	isb	sy
 8003082:	f3bf 8f4f 	dsb	sy
 8003086:	607b      	str	r3, [r7, #4]
    }
 8003088:	bf00      	nop
 800308a:	bf00      	nop
 800308c:	e7fd      	b.n	800308a <vTaskSwitchContext+0x5a>
 800308e:	697a      	ldr	r2, [r7, #20]
 8003090:	4613      	mov	r3, r2
 8003092:	009b      	lsls	r3, r3, #2
 8003094:	4413      	add	r3, r2
 8003096:	009b      	lsls	r3, r3, #2
 8003098:	4a17      	ldr	r2, [pc, #92]	@ (80030f8 <vTaskSwitchContext+0xc8>)
 800309a:	4413      	add	r3, r2
 800309c:	613b      	str	r3, [r7, #16]
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	685a      	ldr	r2, [r3, #4]
 80030a4:	693b      	ldr	r3, [r7, #16]
 80030a6:	605a      	str	r2, [r3, #4]
 80030a8:	693b      	ldr	r3, [r7, #16]
 80030aa:	685a      	ldr	r2, [r3, #4]
 80030ac:	693b      	ldr	r3, [r7, #16]
 80030ae:	3308      	adds	r3, #8
 80030b0:	429a      	cmp	r2, r3
 80030b2:	d104      	bne.n	80030be <vTaskSwitchContext+0x8e>
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	685a      	ldr	r2, [r3, #4]
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	605a      	str	r2, [r3, #4]
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	68db      	ldr	r3, [r3, #12]
 80030c4:	4a0d      	ldr	r2, [pc, #52]	@ (80030fc <vTaskSwitchContext+0xcc>)
 80030c6:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 80030c8:	4b0c      	ldr	r3, [pc, #48]	@ (80030fc <vTaskSwitchContext+0xcc>)
 80030ca:	681a      	ldr	r2, [r3, #0]
 80030cc:	4b0c      	ldr	r3, [pc, #48]	@ (8003100 <vTaskSwitchContext+0xd0>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	429a      	cmp	r2, r3
 80030d2:	d102      	bne.n	80030da <vTaskSwitchContext+0xaa>
 80030d4:	f001 fd28 	bl	8004b28 <SEGGER_SYSVIEW_OnIdle>
}
 80030d8:	e004      	b.n	80030e4 <vTaskSwitchContext+0xb4>
        traceTASK_SWITCHED_IN();
 80030da:	4b08      	ldr	r3, [pc, #32]	@ (80030fc <vTaskSwitchContext+0xcc>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4618      	mov	r0, r3
 80030e0:	f001 fd80 	bl	8004be4 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 80030e4:	bf00      	nop
 80030e6:	3718      	adds	r7, #24
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}
 80030ec:	200001b8 	.word	0x200001b8
 80030f0:	200001a4 	.word	0x200001a4
 80030f4:	20000198 	.word	0x20000198
 80030f8:	200000bc 	.word	0x200000bc
 80030fc:	200000b8 	.word	0x200000b8
 8003100:	200001b4 	.word	0x200001b4

08003104 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b082      	sub	sp, #8
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 800310c:	f000 f852 	bl	80031b4 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003110:	4b06      	ldr	r3, [pc, #24]	@ (800312c <prvIdleTask+0x28>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	2b01      	cmp	r3, #1
 8003116:	d9f9      	bls.n	800310c <prvIdleTask+0x8>
                {
                    taskYIELD();
 8003118:	4b05      	ldr	r3, [pc, #20]	@ (8003130 <prvIdleTask+0x2c>)
 800311a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800311e:	601a      	str	r2, [r3, #0]
 8003120:	f3bf 8f4f 	dsb	sy
 8003124:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8003128:	e7f0      	b.n	800310c <prvIdleTask+0x8>
 800312a:	bf00      	nop
 800312c:	200000bc 	.word	0x200000bc
 8003130:	e000ed04 	.word	0xe000ed04

08003134 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b082      	sub	sp, #8
 8003138:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800313a:	2300      	movs	r3, #0
 800313c:	607b      	str	r3, [r7, #4]
 800313e:	e00c      	b.n	800315a <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003140:	687a      	ldr	r2, [r7, #4]
 8003142:	4613      	mov	r3, r2
 8003144:	009b      	lsls	r3, r3, #2
 8003146:	4413      	add	r3, r2
 8003148:	009b      	lsls	r3, r3, #2
 800314a:	4a12      	ldr	r2, [pc, #72]	@ (8003194 <prvInitialiseTaskLists+0x60>)
 800314c:	4413      	add	r3, r2
 800314e:	4618      	mov	r0, r3
 8003150:	f7ff fbc4 	bl	80028dc <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	3301      	adds	r3, #1
 8003158:	607b      	str	r3, [r7, #4]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2b04      	cmp	r3, #4
 800315e:	d9ef      	bls.n	8003140 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003160:	480d      	ldr	r0, [pc, #52]	@ (8003198 <prvInitialiseTaskLists+0x64>)
 8003162:	f7ff fbbb 	bl	80028dc <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003166:	480d      	ldr	r0, [pc, #52]	@ (800319c <prvInitialiseTaskLists+0x68>)
 8003168:	f7ff fbb8 	bl	80028dc <vListInitialise>
    vListInitialise( &xPendingReadyList );
 800316c:	480c      	ldr	r0, [pc, #48]	@ (80031a0 <prvInitialiseTaskLists+0x6c>)
 800316e:	f7ff fbb5 	bl	80028dc <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8003172:	480c      	ldr	r0, [pc, #48]	@ (80031a4 <prvInitialiseTaskLists+0x70>)
 8003174:	f7ff fbb2 	bl	80028dc <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8003178:	480b      	ldr	r0, [pc, #44]	@ (80031a8 <prvInitialiseTaskLists+0x74>)
 800317a:	f7ff fbaf 	bl	80028dc <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800317e:	4b0b      	ldr	r3, [pc, #44]	@ (80031ac <prvInitialiseTaskLists+0x78>)
 8003180:	4a05      	ldr	r2, [pc, #20]	@ (8003198 <prvInitialiseTaskLists+0x64>)
 8003182:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003184:	4b0a      	ldr	r3, [pc, #40]	@ (80031b0 <prvInitialiseTaskLists+0x7c>)
 8003186:	4a05      	ldr	r2, [pc, #20]	@ (800319c <prvInitialiseTaskLists+0x68>)
 8003188:	601a      	str	r2, [r3, #0]
}
 800318a:	bf00      	nop
 800318c:	3708      	adds	r7, #8
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}
 8003192:	bf00      	nop
 8003194:	200000bc 	.word	0x200000bc
 8003198:	20000120 	.word	0x20000120
 800319c:	20000134 	.word	0x20000134
 80031a0:	20000150 	.word	0x20000150
 80031a4:	20000164 	.word	0x20000164
 80031a8:	2000017c 	.word	0x2000017c
 80031ac:	20000148 	.word	0x20000148
 80031b0:	2000014c 	.word	0x2000014c

080031b4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b082      	sub	sp, #8
 80031b8:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80031ba:	e019      	b.n	80031f0 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 80031bc:	f000 fa06 	bl	80035cc <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80031c0:	4b10      	ldr	r3, [pc, #64]	@ (8003204 <prvCheckTasksWaitingTermination+0x50>)
 80031c2:	68db      	ldr	r3, [r3, #12]
 80031c4:	68db      	ldr	r3, [r3, #12]
 80031c6:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	3304      	adds	r3, #4
 80031cc:	4618      	mov	r0, r3
 80031ce:	f7ff fbd6 	bl	800297e <uxListRemove>
                    --uxCurrentNumberOfTasks;
 80031d2:	4b0d      	ldr	r3, [pc, #52]	@ (8003208 <prvCheckTasksWaitingTermination+0x54>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	3b01      	subs	r3, #1
 80031d8:	4a0b      	ldr	r2, [pc, #44]	@ (8003208 <prvCheckTasksWaitingTermination+0x54>)
 80031da:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 80031dc:	4b0b      	ldr	r3, [pc, #44]	@ (800320c <prvCheckTasksWaitingTermination+0x58>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	3b01      	subs	r3, #1
 80031e2:	4a0a      	ldr	r2, [pc, #40]	@ (800320c <prvCheckTasksWaitingTermination+0x58>)
 80031e4:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 80031e6:	f000 fa23 	bl	8003630 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 80031ea:	6878      	ldr	r0, [r7, #4]
 80031ec:	f000 f810 	bl	8003210 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80031f0:	4b06      	ldr	r3, [pc, #24]	@ (800320c <prvCheckTasksWaitingTermination+0x58>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d1e1      	bne.n	80031bc <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 80031f8:	bf00      	nop
 80031fa:	bf00      	nop
 80031fc:	3708      	adds	r7, #8
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}
 8003202:	bf00      	nop
 8003204:	20000164 	.word	0x20000164
 8003208:	20000190 	.word	0x20000190
 800320c:	20000178 	.word	0x20000178

08003210 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003210:	b580      	push	{r7, lr}
 8003212:	b082      	sub	sp, #8
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800321c:	4618      	mov	r0, r3
 800321e:	f000 fba7 	bl	8003970 <vPortFree>
                vPortFree( pxTCB );
 8003222:	6878      	ldr	r0, [r7, #4]
 8003224:	f000 fba4 	bl	8003970 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003228:	bf00      	nop
 800322a:	3708      	adds	r7, #8
 800322c:	46bd      	mov	sp, r7
 800322e:	bd80      	pop	{r7, pc}

08003230 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003230:	b480      	push	{r7}
 8003232:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003234:	4b0a      	ldr	r3, [pc, #40]	@ (8003260 <prvResetNextTaskUnblockTime+0x30>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d104      	bne.n	8003248 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800323e:	4b09      	ldr	r3, [pc, #36]	@ (8003264 <prvResetNextTaskUnblockTime+0x34>)
 8003240:	f04f 32ff 	mov.w	r2, #4294967295
 8003244:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8003246:	e005      	b.n	8003254 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003248:	4b05      	ldr	r3, [pc, #20]	@ (8003260 <prvResetNextTaskUnblockTime+0x30>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	68db      	ldr	r3, [r3, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a04      	ldr	r2, [pc, #16]	@ (8003264 <prvResetNextTaskUnblockTime+0x34>)
 8003252:	6013      	str	r3, [r2, #0]
}
 8003254:	bf00      	nop
 8003256:	46bd      	mov	sp, r7
 8003258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325c:	4770      	bx	lr
 800325e:	bf00      	nop
 8003260:	20000148 	.word	0x20000148
 8003264:	200001b0 	.word	0x200001b0

08003268 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8003268:	b480      	push	{r7}
 800326a:	b085      	sub	sp, #20
 800326c:	af00      	add	r7, sp, #0
 800326e:	60f8      	str	r0, [r7, #12]
 8003270:	60b9      	str	r1, [r7, #8]
 8003272:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	3b04      	subs	r3, #4
 8003278:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003280:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	3b04      	subs	r3, #4
 8003286:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8003288:	68bb      	ldr	r3, [r7, #8]
 800328a:	f023 0201 	bic.w	r2, r3, #1
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	3b04      	subs	r3, #4
 8003296:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8003298:	4a0c      	ldr	r2, [pc, #48]	@ (80032cc <pxPortInitialiseStack+0x64>)
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	3b14      	subs	r3, #20
 80032a2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80032a4:	687a      	ldr	r2, [r7, #4]
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	3b04      	subs	r3, #4
 80032ae:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	f06f 0202 	mvn.w	r2, #2
 80032b6:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	3b20      	subs	r3, #32
 80032bc:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80032be:	68fb      	ldr	r3, [r7, #12]
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	3714      	adds	r7, #20
 80032c4:	46bd      	mov	sp, r7
 80032c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ca:	4770      	bx	lr
 80032cc:	080032d1 	.word	0x080032d1

080032d0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80032d0:	b480      	push	{r7}
 80032d2:	b085      	sub	sp, #20
 80032d4:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80032d6:	2300      	movs	r3, #0
 80032d8:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80032da:	4b13      	ldr	r3, [pc, #76]	@ (8003328 <prvTaskExitError+0x58>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032e2:	d00b      	beq.n	80032fc <prvTaskExitError+0x2c>
        __asm volatile
 80032e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032e8:	f383 8811 	msr	BASEPRI, r3
 80032ec:	f3bf 8f6f 	isb	sy
 80032f0:	f3bf 8f4f 	dsb	sy
 80032f4:	60fb      	str	r3, [r7, #12]
    }
 80032f6:	bf00      	nop
 80032f8:	bf00      	nop
 80032fa:	e7fd      	b.n	80032f8 <prvTaskExitError+0x28>
        __asm volatile
 80032fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003300:	f383 8811 	msr	BASEPRI, r3
 8003304:	f3bf 8f6f 	isb	sy
 8003308:	f3bf 8f4f 	dsb	sy
 800330c:	60bb      	str	r3, [r7, #8]
    }
 800330e:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8003310:	bf00      	nop
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d0fc      	beq.n	8003312 <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8003318:	bf00      	nop
 800331a:	bf00      	nop
 800331c:	3714      	adds	r7, #20
 800331e:	46bd      	mov	sp, r7
 8003320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003324:	4770      	bx	lr
 8003326:	bf00      	nop
 8003328:	20000010 	.word	0x20000010
 800332c:	00000000 	.word	0x00000000

08003330 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8003330:	4b07      	ldr	r3, [pc, #28]	@ (8003350 <pxCurrentTCBConst2>)
 8003332:	6819      	ldr	r1, [r3, #0]
 8003334:	6808      	ldr	r0, [r1, #0]
 8003336:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800333a:	f380 8809 	msr	PSP, r0
 800333e:	f3bf 8f6f 	isb	sy
 8003342:	f04f 0000 	mov.w	r0, #0
 8003346:	f380 8811 	msr	BASEPRI, r0
 800334a:	4770      	bx	lr
 800334c:	f3af 8000 	nop.w

08003350 <pxCurrentTCBConst2>:
 8003350:	200000b8 	.word	0x200000b8
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8003354:	bf00      	nop
 8003356:	bf00      	nop

08003358 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8003358:	4808      	ldr	r0, [pc, #32]	@ (800337c <prvPortStartFirstTask+0x24>)
 800335a:	6800      	ldr	r0, [r0, #0]
 800335c:	6800      	ldr	r0, [r0, #0]
 800335e:	f380 8808 	msr	MSP, r0
 8003362:	f04f 0000 	mov.w	r0, #0
 8003366:	f380 8814 	msr	CONTROL, r0
 800336a:	b662      	cpsie	i
 800336c:	b661      	cpsie	f
 800336e:	f3bf 8f4f 	dsb	sy
 8003372:	f3bf 8f6f 	isb	sy
 8003376:	df00      	svc	0
 8003378:	bf00      	nop
 800337a:	0000      	.short	0x0000
 800337c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8003380:	bf00      	nop
 8003382:	bf00      	nop

08003384 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b086      	sub	sp, #24
 8003388:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800338a:	4b47      	ldr	r3, [pc, #284]	@ (80034a8 <xPortStartScheduler+0x124>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a47      	ldr	r2, [pc, #284]	@ (80034ac <xPortStartScheduler+0x128>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d10b      	bne.n	80033ac <xPortStartScheduler+0x28>
        __asm volatile
 8003394:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003398:	f383 8811 	msr	BASEPRI, r3
 800339c:	f3bf 8f6f 	isb	sy
 80033a0:	f3bf 8f4f 	dsb	sy
 80033a4:	613b      	str	r3, [r7, #16]
    }
 80033a6:	bf00      	nop
 80033a8:	bf00      	nop
 80033aa:	e7fd      	b.n	80033a8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80033ac:	4b3e      	ldr	r3, [pc, #248]	@ (80034a8 <xPortStartScheduler+0x124>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a3f      	ldr	r2, [pc, #252]	@ (80034b0 <xPortStartScheduler+0x12c>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d10b      	bne.n	80033ce <xPortStartScheduler+0x4a>
        __asm volatile
 80033b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033ba:	f383 8811 	msr	BASEPRI, r3
 80033be:	f3bf 8f6f 	isb	sy
 80033c2:	f3bf 8f4f 	dsb	sy
 80033c6:	60fb      	str	r3, [r7, #12]
    }
 80033c8:	bf00      	nop
 80033ca:	bf00      	nop
 80033cc:	e7fd      	b.n	80033ca <xPortStartScheduler+0x46>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80033ce:	4b39      	ldr	r3, [pc, #228]	@ (80034b4 <xPortStartScheduler+0x130>)
 80033d0:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	781b      	ldrb	r3, [r3, #0]
 80033d6:	b2db      	uxtb	r3, r3
 80033d8:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80033da:	697b      	ldr	r3, [r7, #20]
 80033dc:	22ff      	movs	r2, #255	@ 0xff
 80033de:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	781b      	ldrb	r3, [r3, #0]
 80033e4:	b2db      	uxtb	r3, r3
 80033e6:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80033e8:	78fb      	ldrb	r3, [r7, #3]
 80033ea:	b2db      	uxtb	r3, r3
 80033ec:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80033f0:	b2da      	uxtb	r2, r3
 80033f2:	4b31      	ldr	r3, [pc, #196]	@ (80034b8 <xPortStartScheduler+0x134>)
 80033f4:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80033f6:	4b31      	ldr	r3, [pc, #196]	@ (80034bc <xPortStartScheduler+0x138>)
 80033f8:	2207      	movs	r2, #7
 80033fa:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80033fc:	e009      	b.n	8003412 <xPortStartScheduler+0x8e>
            {
                ulMaxPRIGROUPValue--;
 80033fe:	4b2f      	ldr	r3, [pc, #188]	@ (80034bc <xPortStartScheduler+0x138>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	3b01      	subs	r3, #1
 8003404:	4a2d      	ldr	r2, [pc, #180]	@ (80034bc <xPortStartScheduler+0x138>)
 8003406:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003408:	78fb      	ldrb	r3, [r7, #3]
 800340a:	b2db      	uxtb	r3, r3
 800340c:	005b      	lsls	r3, r3, #1
 800340e:	b2db      	uxtb	r3, r3
 8003410:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003412:	78fb      	ldrb	r3, [r7, #3]
 8003414:	b2db      	uxtb	r3, r3
 8003416:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800341a:	2b80      	cmp	r3, #128	@ 0x80
 800341c:	d0ef      	beq.n	80033fe <xPortStartScheduler+0x7a>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800341e:	4b27      	ldr	r3, [pc, #156]	@ (80034bc <xPortStartScheduler+0x138>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f1c3 0307 	rsb	r3, r3, #7
 8003426:	2b04      	cmp	r3, #4
 8003428:	d00b      	beq.n	8003442 <xPortStartScheduler+0xbe>
        __asm volatile
 800342a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800342e:	f383 8811 	msr	BASEPRI, r3
 8003432:	f3bf 8f6f 	isb	sy
 8003436:	f3bf 8f4f 	dsb	sy
 800343a:	60bb      	str	r3, [r7, #8]
    }
 800343c:	bf00      	nop
 800343e:	bf00      	nop
 8003440:	e7fd      	b.n	800343e <xPortStartScheduler+0xba>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003442:	4b1e      	ldr	r3, [pc, #120]	@ (80034bc <xPortStartScheduler+0x138>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	021b      	lsls	r3, r3, #8
 8003448:	4a1c      	ldr	r2, [pc, #112]	@ (80034bc <xPortStartScheduler+0x138>)
 800344a:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800344c:	4b1b      	ldr	r3, [pc, #108]	@ (80034bc <xPortStartScheduler+0x138>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003454:	4a19      	ldr	r2, [pc, #100]	@ (80034bc <xPortStartScheduler+0x138>)
 8003456:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	b2da      	uxtb	r2, r3
 800345c:	697b      	ldr	r3, [r7, #20]
 800345e:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8003460:	4b17      	ldr	r3, [pc, #92]	@ (80034c0 <xPortStartScheduler+0x13c>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a16      	ldr	r2, [pc, #88]	@ (80034c0 <xPortStartScheduler+0x13c>)
 8003466:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800346a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800346c:	4b14      	ldr	r3, [pc, #80]	@ (80034c0 <xPortStartScheduler+0x13c>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a13      	ldr	r2, [pc, #76]	@ (80034c0 <xPortStartScheduler+0x13c>)
 8003472:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8003476:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8003478:	f000 f968 	bl	800374c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 800347c:	4b11      	ldr	r3, [pc, #68]	@ (80034c4 <xPortStartScheduler+0x140>)
 800347e:	2200      	movs	r2, #0
 8003480:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8003482:	f000 f987 	bl	8003794 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003486:	4b10      	ldr	r3, [pc, #64]	@ (80034c8 <xPortStartScheduler+0x144>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a0f      	ldr	r2, [pc, #60]	@ (80034c8 <xPortStartScheduler+0x144>)
 800348c:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8003490:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8003492:	f7ff ff61 	bl	8003358 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8003496:	f7ff fdcb 	bl	8003030 <vTaskSwitchContext>
    prvTaskExitError();
 800349a:	f7ff ff19 	bl	80032d0 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 800349e:	2300      	movs	r3, #0
}
 80034a0:	4618      	mov	r0, r3
 80034a2:	3718      	adds	r7, #24
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bd80      	pop	{r7, pc}
 80034a8:	e000ed00 	.word	0xe000ed00
 80034ac:	410fc271 	.word	0x410fc271
 80034b0:	410fc270 	.word	0x410fc270
 80034b4:	e000e400 	.word	0xe000e400
 80034b8:	200001bc 	.word	0x200001bc
 80034bc:	200001c0 	.word	0x200001c0
 80034c0:	e000ed20 	.word	0xe000ed20
 80034c4:	20000010 	.word	0x20000010
 80034c8:	e000ef34 	.word	0xe000ef34

080034cc <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 80034cc:	b480      	push	{r7}
 80034ce:	b087      	sub	sp, #28
 80034d0:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80034d2:	4b38      	ldr	r3, [pc, #224]	@ (80035b4 <vInitPrioGroupValue+0xe8>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a38      	ldr	r2, [pc, #224]	@ (80035b8 <vInitPrioGroupValue+0xec>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d10b      	bne.n	80034f4 <vInitPrioGroupValue+0x28>
        __asm volatile
 80034dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034e0:	f383 8811 	msr	BASEPRI, r3
 80034e4:	f3bf 8f6f 	isb	sy
 80034e8:	f3bf 8f4f 	dsb	sy
 80034ec:	613b      	str	r3, [r7, #16]
    }
 80034ee:	bf00      	nop
 80034f0:	bf00      	nop
 80034f2:	e7fd      	b.n	80034f0 <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80034f4:	4b2f      	ldr	r3, [pc, #188]	@ (80035b4 <vInitPrioGroupValue+0xe8>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a30      	ldr	r2, [pc, #192]	@ (80035bc <vInitPrioGroupValue+0xf0>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d10b      	bne.n	8003516 <vInitPrioGroupValue+0x4a>
        __asm volatile
 80034fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003502:	f383 8811 	msr	BASEPRI, r3
 8003506:	f3bf 8f6f 	isb	sy
 800350a:	f3bf 8f4f 	dsb	sy
 800350e:	60fb      	str	r3, [r7, #12]
    }
 8003510:	bf00      	nop
 8003512:	bf00      	nop
 8003514:	e7fd      	b.n	8003512 <vInitPrioGroupValue+0x46>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003516:	4b2a      	ldr	r3, [pc, #168]	@ (80035c0 <vInitPrioGroupValue+0xf4>)
 8003518:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	781b      	ldrb	r3, [r3, #0]
 800351e:	b2db      	uxtb	r3, r3
 8003520:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	22ff      	movs	r2, #255	@ 0xff
 8003526:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003528:	697b      	ldr	r3, [r7, #20]
 800352a:	781b      	ldrb	r3, [r3, #0]
 800352c:	b2db      	uxtb	r3, r3
 800352e:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003530:	78fb      	ldrb	r3, [r7, #3]
 8003532:	b2db      	uxtb	r3, r3
 8003534:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003538:	b2da      	uxtb	r2, r3
 800353a:	4b22      	ldr	r3, [pc, #136]	@ (80035c4 <vInitPrioGroupValue+0xf8>)
 800353c:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800353e:	4b22      	ldr	r3, [pc, #136]	@ (80035c8 <vInitPrioGroupValue+0xfc>)
 8003540:	2207      	movs	r2, #7
 8003542:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003544:	e009      	b.n	800355a <vInitPrioGroupValue+0x8e>
            {
                ulMaxPRIGROUPValue--;
 8003546:	4b20      	ldr	r3, [pc, #128]	@ (80035c8 <vInitPrioGroupValue+0xfc>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	3b01      	subs	r3, #1
 800354c:	4a1e      	ldr	r2, [pc, #120]	@ (80035c8 <vInitPrioGroupValue+0xfc>)
 800354e:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003550:	78fb      	ldrb	r3, [r7, #3]
 8003552:	b2db      	uxtb	r3, r3
 8003554:	005b      	lsls	r3, r3, #1
 8003556:	b2db      	uxtb	r3, r3
 8003558:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800355a:	78fb      	ldrb	r3, [r7, #3]
 800355c:	b2db      	uxtb	r3, r3
 800355e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003562:	2b80      	cmp	r3, #128	@ 0x80
 8003564:	d0ef      	beq.n	8003546 <vInitPrioGroupValue+0x7a>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003566:	4b18      	ldr	r3, [pc, #96]	@ (80035c8 <vInitPrioGroupValue+0xfc>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f1c3 0307 	rsb	r3, r3, #7
 800356e:	2b04      	cmp	r3, #4
 8003570:	d00b      	beq.n	800358a <vInitPrioGroupValue+0xbe>
        __asm volatile
 8003572:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003576:	f383 8811 	msr	BASEPRI, r3
 800357a:	f3bf 8f6f 	isb	sy
 800357e:	f3bf 8f4f 	dsb	sy
 8003582:	60bb      	str	r3, [r7, #8]
    }
 8003584:	bf00      	nop
 8003586:	bf00      	nop
 8003588:	e7fd      	b.n	8003586 <vInitPrioGroupValue+0xba>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800358a:	4b0f      	ldr	r3, [pc, #60]	@ (80035c8 <vInitPrioGroupValue+0xfc>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	021b      	lsls	r3, r3, #8
 8003590:	4a0d      	ldr	r2, [pc, #52]	@ (80035c8 <vInitPrioGroupValue+0xfc>)
 8003592:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003594:	4b0c      	ldr	r3, [pc, #48]	@ (80035c8 <vInitPrioGroupValue+0xfc>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800359c:	4a0a      	ldr	r2, [pc, #40]	@ (80035c8 <vInitPrioGroupValue+0xfc>)
 800359e:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	b2da      	uxtb	r2, r3
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 80035a8:	bf00      	nop
 80035aa:	371c      	adds	r7, #28
 80035ac:	46bd      	mov	sp, r7
 80035ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b2:	4770      	bx	lr
 80035b4:	e000ed00 	.word	0xe000ed00
 80035b8:	410fc271 	.word	0x410fc271
 80035bc:	410fc270 	.word	0x410fc270
 80035c0:	e000e400 	.word	0xe000e400
 80035c4:	200001bc 	.word	0x200001bc
 80035c8:	200001c0 	.word	0x200001c0

080035cc <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80035cc:	b480      	push	{r7}
 80035ce:	b083      	sub	sp, #12
 80035d0:	af00      	add	r7, sp, #0
        __asm volatile
 80035d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035d6:	f383 8811 	msr	BASEPRI, r3
 80035da:	f3bf 8f6f 	isb	sy
 80035de:	f3bf 8f4f 	dsb	sy
 80035e2:	607b      	str	r3, [r7, #4]
    }
 80035e4:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80035e6:	4b10      	ldr	r3, [pc, #64]	@ (8003628 <vPortEnterCritical+0x5c>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	3301      	adds	r3, #1
 80035ec:	4a0e      	ldr	r2, [pc, #56]	@ (8003628 <vPortEnterCritical+0x5c>)
 80035ee:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80035f0:	4b0d      	ldr	r3, [pc, #52]	@ (8003628 <vPortEnterCritical+0x5c>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	2b01      	cmp	r3, #1
 80035f6:	d110      	bne.n	800361a <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80035f8:	4b0c      	ldr	r3, [pc, #48]	@ (800362c <vPortEnterCritical+0x60>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	b2db      	uxtb	r3, r3
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d00b      	beq.n	800361a <vPortEnterCritical+0x4e>
        __asm volatile
 8003602:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003606:	f383 8811 	msr	BASEPRI, r3
 800360a:	f3bf 8f6f 	isb	sy
 800360e:	f3bf 8f4f 	dsb	sy
 8003612:	603b      	str	r3, [r7, #0]
    }
 8003614:	bf00      	nop
 8003616:	bf00      	nop
 8003618:	e7fd      	b.n	8003616 <vPortEnterCritical+0x4a>
    }
}
 800361a:	bf00      	nop
 800361c:	370c      	adds	r7, #12
 800361e:	46bd      	mov	sp, r7
 8003620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003624:	4770      	bx	lr
 8003626:	bf00      	nop
 8003628:	20000010 	.word	0x20000010
 800362c:	e000ed04 	.word	0xe000ed04

08003630 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003630:	b480      	push	{r7}
 8003632:	b083      	sub	sp, #12
 8003634:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8003636:	4b12      	ldr	r3, [pc, #72]	@ (8003680 <vPortExitCritical+0x50>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d10b      	bne.n	8003656 <vPortExitCritical+0x26>
        __asm volatile
 800363e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003642:	f383 8811 	msr	BASEPRI, r3
 8003646:	f3bf 8f6f 	isb	sy
 800364a:	f3bf 8f4f 	dsb	sy
 800364e:	607b      	str	r3, [r7, #4]
    }
 8003650:	bf00      	nop
 8003652:	bf00      	nop
 8003654:	e7fd      	b.n	8003652 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8003656:	4b0a      	ldr	r3, [pc, #40]	@ (8003680 <vPortExitCritical+0x50>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	3b01      	subs	r3, #1
 800365c:	4a08      	ldr	r2, [pc, #32]	@ (8003680 <vPortExitCritical+0x50>)
 800365e:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8003660:	4b07      	ldr	r3, [pc, #28]	@ (8003680 <vPortExitCritical+0x50>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d105      	bne.n	8003674 <vPortExitCritical+0x44>
 8003668:	2300      	movs	r3, #0
 800366a:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8003672:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8003674:	bf00      	nop
 8003676:	370c      	adds	r7, #12
 8003678:	46bd      	mov	sp, r7
 800367a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367e:	4770      	bx	lr
 8003680:	20000010 	.word	0x20000010
	...

08003690 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8003690:	f3ef 8009 	mrs	r0, PSP
 8003694:	f3bf 8f6f 	isb	sy
 8003698:	4b15      	ldr	r3, [pc, #84]	@ (80036f0 <pxCurrentTCBConst>)
 800369a:	681a      	ldr	r2, [r3, #0]
 800369c:	f01e 0f10 	tst.w	lr, #16
 80036a0:	bf08      	it	eq
 80036a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80036a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036aa:	6010      	str	r0, [r2, #0]
 80036ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80036b0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80036b4:	f380 8811 	msr	BASEPRI, r0
 80036b8:	f3bf 8f4f 	dsb	sy
 80036bc:	f3bf 8f6f 	isb	sy
 80036c0:	f7ff fcb6 	bl	8003030 <vTaskSwitchContext>
 80036c4:	f04f 0000 	mov.w	r0, #0
 80036c8:	f380 8811 	msr	BASEPRI, r0
 80036cc:	bc09      	pop	{r0, r3}
 80036ce:	6819      	ldr	r1, [r3, #0]
 80036d0:	6808      	ldr	r0, [r1, #0]
 80036d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036d6:	f01e 0f10 	tst.w	lr, #16
 80036da:	bf08      	it	eq
 80036dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80036e0:	f380 8809 	msr	PSP, r0
 80036e4:	f3bf 8f6f 	isb	sy
 80036e8:	4770      	bx	lr
 80036ea:	bf00      	nop
 80036ec:	f3af 8000 	nop.w

080036f0 <pxCurrentTCBConst>:
 80036f0:	200000b8 	.word	0x200000b8
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80036f4:	bf00      	nop
 80036f6:	bf00      	nop

080036f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b082      	sub	sp, #8
 80036fc:	af00      	add	r7, sp, #0
        __asm volatile
 80036fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003702:	f383 8811 	msr	BASEPRI, r3
 8003706:	f3bf 8f6f 	isb	sy
 800370a:	f3bf 8f4f 	dsb	sy
 800370e:	607b      	str	r3, [r7, #4]
    }
 8003710:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8003712:	f001 f98f 	bl	8004a34 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8003716:	f7ff fbcd 	bl	8002eb4 <xTaskIncrementTick>
 800371a:	4603      	mov	r3, r0
 800371c:	2b00      	cmp	r3, #0
 800371e:	d006      	beq.n	800372e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8003720:	f001 f9e6 	bl	8004af0 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003724:	4b08      	ldr	r3, [pc, #32]	@ (8003748 <SysTick_Handler+0x50>)
 8003726:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800372a:	601a      	str	r2, [r3, #0]
 800372c:	e001      	b.n	8003732 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 800372e:	f001 f9c3 	bl	8004ab8 <SEGGER_SYSVIEW_RecordExitISR>
 8003732:	2300      	movs	r3, #0
 8003734:	603b      	str	r3, [r7, #0]
        __asm volatile
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	f383 8811 	msr	BASEPRI, r3
    }
 800373c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 800373e:	bf00      	nop
 8003740:	3708      	adds	r7, #8
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}
 8003746:	bf00      	nop
 8003748:	e000ed04 	.word	0xe000ed04

0800374c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800374c:	b480      	push	{r7}
 800374e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003750:	4b0b      	ldr	r3, [pc, #44]	@ (8003780 <vPortSetupTimerInterrupt+0x34>)
 8003752:	2200      	movs	r2, #0
 8003754:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003756:	4b0b      	ldr	r3, [pc, #44]	@ (8003784 <vPortSetupTimerInterrupt+0x38>)
 8003758:	2200      	movs	r2, #0
 800375a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800375c:	4b0a      	ldr	r3, [pc, #40]	@ (8003788 <vPortSetupTimerInterrupt+0x3c>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a0a      	ldr	r2, [pc, #40]	@ (800378c <vPortSetupTimerInterrupt+0x40>)
 8003762:	fba2 2303 	umull	r2, r3, r2, r3
 8003766:	099b      	lsrs	r3, r3, #6
 8003768:	4a09      	ldr	r2, [pc, #36]	@ (8003790 <vPortSetupTimerInterrupt+0x44>)
 800376a:	3b01      	subs	r3, #1
 800376c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800376e:	4b04      	ldr	r3, [pc, #16]	@ (8003780 <vPortSetupTimerInterrupt+0x34>)
 8003770:	2207      	movs	r2, #7
 8003772:	601a      	str	r2, [r3, #0]
}
 8003774:	bf00      	nop
 8003776:	46bd      	mov	sp, r7
 8003778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377c:	4770      	bx	lr
 800377e:	bf00      	nop
 8003780:	e000e010 	.word	0xe000e010
 8003784:	e000e018 	.word	0xe000e018
 8003788:	20000000 	.word	0x20000000
 800378c:	10624dd3 	.word	0x10624dd3
 8003790:	e000e014 	.word	0xe000e014

08003794 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8003794:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80037a4 <vPortEnableVFP+0x10>
 8003798:	6801      	ldr	r1, [r0, #0]
 800379a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800379e:	6001      	str	r1, [r0, #0]
 80037a0:	4770      	bx	lr
 80037a2:	0000      	.short	0x0000
 80037a4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80037a8:	bf00      	nop
 80037aa:	bf00      	nop

080037ac <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b08a      	sub	sp, #40	@ 0x28
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 80037b4:	2300      	movs	r3, #0
 80037b6:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 80037b8:	f7ff facc 	bl	8002d54 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80037bc:	4b66      	ldr	r3, [pc, #408]	@ (8003958 <pvPortMalloc+0x1ac>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d101      	bne.n	80037c8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80037c4:	f000 f938 	bl	8003a38 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80037c8:	4b64      	ldr	r3, [pc, #400]	@ (800395c <pvPortMalloc+0x1b0>)
 80037ca:	681a      	ldr	r2, [r3, #0]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	4013      	ands	r3, r2
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	f040 80a9 	bne.w	8003928 <pvPortMalloc+0x17c>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d02e      	beq.n	800383a <pvPortMalloc+0x8e>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 80037dc:	2208      	movs	r2, #8
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 80037e2:	687a      	ldr	r2, [r7, #4]
 80037e4:	429a      	cmp	r2, r3
 80037e6:	d228      	bcs.n	800383a <pvPortMalloc+0x8e>
            {
                xWantedSize += xHeapStructSize;
 80037e8:	2208      	movs	r2, #8
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	4413      	add	r3, r2
 80037ee:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	f003 0307 	and.w	r3, r3, #7
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d022      	beq.n	8003840 <pvPortMalloc+0x94>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	f023 0307 	bic.w	r3, r3, #7
 8003800:	3308      	adds	r3, #8
 8003802:	687a      	ldr	r2, [r7, #4]
 8003804:	429a      	cmp	r2, r3
 8003806:	d215      	bcs.n	8003834 <pvPortMalloc+0x88>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	f023 0307 	bic.w	r3, r3, #7
 800380e:	3308      	adds	r3, #8
 8003810:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	f003 0307 	and.w	r3, r3, #7
 8003818:	2b00      	cmp	r3, #0
 800381a:	d011      	beq.n	8003840 <pvPortMalloc+0x94>
        __asm volatile
 800381c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003820:	f383 8811 	msr	BASEPRI, r3
 8003824:	f3bf 8f6f 	isb	sy
 8003828:	f3bf 8f4f 	dsb	sy
 800382c:	617b      	str	r3, [r7, #20]
    }
 800382e:	bf00      	nop
 8003830:	bf00      	nop
 8003832:	e7fd      	b.n	8003830 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8003834:	2300      	movs	r3, #0
 8003836:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003838:	e002      	b.n	8003840 <pvPortMalloc+0x94>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 800383a:	2300      	movs	r3, #0
 800383c:	607b      	str	r3, [r7, #4]
 800383e:	e000      	b.n	8003842 <pvPortMalloc+0x96>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003840:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d06f      	beq.n	8003928 <pvPortMalloc+0x17c>
 8003848:	4b45      	ldr	r3, [pc, #276]	@ (8003960 <pvPortMalloc+0x1b4>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	687a      	ldr	r2, [r7, #4]
 800384e:	429a      	cmp	r2, r3
 8003850:	d86a      	bhi.n	8003928 <pvPortMalloc+0x17c>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8003852:	4b44      	ldr	r3, [pc, #272]	@ (8003964 <pvPortMalloc+0x1b8>)
 8003854:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8003856:	4b43      	ldr	r3, [pc, #268]	@ (8003964 <pvPortMalloc+0x1b8>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	627b      	str	r3, [r7, #36]	@ 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800385c:	e004      	b.n	8003868 <pvPortMalloc+0xbc>
                {
                    pxPreviousBlock = pxBlock;
 800385e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003860:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8003862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	627b      	str	r3, [r7, #36]	@ 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003868:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	687a      	ldr	r2, [r7, #4]
 800386e:	429a      	cmp	r2, r3
 8003870:	d903      	bls.n	800387a <pvPortMalloc+0xce>
 8003872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d1f1      	bne.n	800385e <pvPortMalloc+0xb2>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 800387a:	4b37      	ldr	r3, [pc, #220]	@ (8003958 <pvPortMalloc+0x1ac>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003880:	429a      	cmp	r2, r3
 8003882:	d051      	beq.n	8003928 <pvPortMalloc+0x17c>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003884:	6a3b      	ldr	r3, [r7, #32]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	2208      	movs	r2, #8
 800388a:	4413      	add	r3, r2
 800388c:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800388e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003890:	681a      	ldr	r2, [r3, #0]
 8003892:	6a3b      	ldr	r3, [r7, #32]
 8003894:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003898:	685a      	ldr	r2, [r3, #4]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	1ad2      	subs	r2, r2, r3
 800389e:	2308      	movs	r3, #8
 80038a0:	005b      	lsls	r3, r3, #1
 80038a2:	429a      	cmp	r2, r3
 80038a4:	d920      	bls.n	80038e8 <pvPortMalloc+0x13c>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80038a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	4413      	add	r3, r2
 80038ac:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80038ae:	69bb      	ldr	r3, [r7, #24]
 80038b0:	f003 0307 	and.w	r3, r3, #7
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d00b      	beq.n	80038d0 <pvPortMalloc+0x124>
        __asm volatile
 80038b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038bc:	f383 8811 	msr	BASEPRI, r3
 80038c0:	f3bf 8f6f 	isb	sy
 80038c4:	f3bf 8f4f 	dsb	sy
 80038c8:	613b      	str	r3, [r7, #16]
    }
 80038ca:	bf00      	nop
 80038cc:	bf00      	nop
 80038ce:	e7fd      	b.n	80038cc <pvPortMalloc+0x120>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80038d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038d2:	685a      	ldr	r2, [r3, #4]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	1ad2      	subs	r2, r2, r3
 80038d8:	69bb      	ldr	r3, [r7, #24]
 80038da:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80038dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038de:	687a      	ldr	r2, [r7, #4]
 80038e0:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80038e2:	69b8      	ldr	r0, [r7, #24]
 80038e4:	f000 f90a 	bl	8003afc <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80038e8:	4b1d      	ldr	r3, [pc, #116]	@ (8003960 <pvPortMalloc+0x1b4>)
 80038ea:	681a      	ldr	r2, [r3, #0]
 80038ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	1ad3      	subs	r3, r2, r3
 80038f2:	4a1b      	ldr	r2, [pc, #108]	@ (8003960 <pvPortMalloc+0x1b4>)
 80038f4:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80038f6:	4b1a      	ldr	r3, [pc, #104]	@ (8003960 <pvPortMalloc+0x1b4>)
 80038f8:	681a      	ldr	r2, [r3, #0]
 80038fa:	4b1b      	ldr	r3, [pc, #108]	@ (8003968 <pvPortMalloc+0x1bc>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	429a      	cmp	r2, r3
 8003900:	d203      	bcs.n	800390a <pvPortMalloc+0x15e>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003902:	4b17      	ldr	r3, [pc, #92]	@ (8003960 <pvPortMalloc+0x1b4>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a18      	ldr	r2, [pc, #96]	@ (8003968 <pvPortMalloc+0x1bc>)
 8003908:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 800390a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800390c:	685a      	ldr	r2, [r3, #4]
 800390e:	4b13      	ldr	r3, [pc, #76]	@ (800395c <pvPortMalloc+0x1b0>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	431a      	orrs	r2, r3
 8003914:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003916:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8003918:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800391a:	2200      	movs	r2, #0
 800391c:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800391e:	4b13      	ldr	r3, [pc, #76]	@ (800396c <pvPortMalloc+0x1c0>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	3301      	adds	r3, #1
 8003924:	4a11      	ldr	r2, [pc, #68]	@ (800396c <pvPortMalloc+0x1c0>)
 8003926:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8003928:	f7ff fa22 	bl	8002d70 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800392c:	69fb      	ldr	r3, [r7, #28]
 800392e:	f003 0307 	and.w	r3, r3, #7
 8003932:	2b00      	cmp	r3, #0
 8003934:	d00b      	beq.n	800394e <pvPortMalloc+0x1a2>
        __asm volatile
 8003936:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800393a:	f383 8811 	msr	BASEPRI, r3
 800393e:	f3bf 8f6f 	isb	sy
 8003942:	f3bf 8f4f 	dsb	sy
 8003946:	60fb      	str	r3, [r7, #12]
    }
 8003948:	bf00      	nop
 800394a:	bf00      	nop
 800394c:	e7fd      	b.n	800394a <pvPortMalloc+0x19e>
    return pvReturn;
 800394e:	69fb      	ldr	r3, [r7, #28]
}
 8003950:	4618      	mov	r0, r3
 8003952:	3728      	adds	r7, #40	@ 0x28
 8003954:	46bd      	mov	sp, r7
 8003956:	bd80      	pop	{r7, pc}
 8003958:	20012dcc 	.word	0x20012dcc
 800395c:	20012de0 	.word	0x20012de0
 8003960:	20012dd0 	.word	0x20012dd0
 8003964:	20012dc4 	.word	0x20012dc4
 8003968:	20012dd4 	.word	0x20012dd4
 800396c:	20012dd8 	.word	0x20012dd8

08003970 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b086      	sub	sp, #24
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d04f      	beq.n	8003a22 <vPortFree+0xb2>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8003982:	2308      	movs	r3, #8
 8003984:	425b      	negs	r3, r3
 8003986:	697a      	ldr	r2, [r7, #20]
 8003988:	4413      	add	r3, r2
 800398a:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003990:	693b      	ldr	r3, [r7, #16]
 8003992:	685a      	ldr	r2, [r3, #4]
 8003994:	4b25      	ldr	r3, [pc, #148]	@ (8003a2c <vPortFree+0xbc>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4013      	ands	r3, r2
 800399a:	2b00      	cmp	r3, #0
 800399c:	d10b      	bne.n	80039b6 <vPortFree+0x46>
        __asm volatile
 800399e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039a2:	f383 8811 	msr	BASEPRI, r3
 80039a6:	f3bf 8f6f 	isb	sy
 80039aa:	f3bf 8f4f 	dsb	sy
 80039ae:	60fb      	str	r3, [r7, #12]
    }
 80039b0:	bf00      	nop
 80039b2:	bf00      	nop
 80039b4:	e7fd      	b.n	80039b2 <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d00b      	beq.n	80039d6 <vPortFree+0x66>
        __asm volatile
 80039be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039c2:	f383 8811 	msr	BASEPRI, r3
 80039c6:	f3bf 8f6f 	isb	sy
 80039ca:	f3bf 8f4f 	dsb	sy
 80039ce:	60bb      	str	r3, [r7, #8]
    }
 80039d0:	bf00      	nop
 80039d2:	bf00      	nop
 80039d4:	e7fd      	b.n	80039d2 <vPortFree+0x62>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80039d6:	693b      	ldr	r3, [r7, #16]
 80039d8:	685a      	ldr	r2, [r3, #4]
 80039da:	4b14      	ldr	r3, [pc, #80]	@ (8003a2c <vPortFree+0xbc>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4013      	ands	r3, r2
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d01e      	beq.n	8003a22 <vPortFree+0xb2>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80039e4:	693b      	ldr	r3, [r7, #16]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d11a      	bne.n	8003a22 <vPortFree+0xb2>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80039ec:	693b      	ldr	r3, [r7, #16]
 80039ee:	685a      	ldr	r2, [r3, #4]
 80039f0:	4b0e      	ldr	r3, [pc, #56]	@ (8003a2c <vPortFree+0xbc>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	43db      	mvns	r3, r3
 80039f6:	401a      	ands	r2, r3
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 80039fc:	f7ff f9aa 	bl	8002d54 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8003a00:	693b      	ldr	r3, [r7, #16]
 8003a02:	685a      	ldr	r2, [r3, #4]
 8003a04:	4b0a      	ldr	r3, [pc, #40]	@ (8003a30 <vPortFree+0xc0>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4413      	add	r3, r2
 8003a0a:	4a09      	ldr	r2, [pc, #36]	@ (8003a30 <vPortFree+0xc0>)
 8003a0c:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003a0e:	6938      	ldr	r0, [r7, #16]
 8003a10:	f000 f874 	bl	8003afc <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8003a14:	4b07      	ldr	r3, [pc, #28]	@ (8003a34 <vPortFree+0xc4>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	3301      	adds	r3, #1
 8003a1a:	4a06      	ldr	r2, [pc, #24]	@ (8003a34 <vPortFree+0xc4>)
 8003a1c:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8003a1e:	f7ff f9a7 	bl	8002d70 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8003a22:	bf00      	nop
 8003a24:	3718      	adds	r7, #24
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}
 8003a2a:	bf00      	nop
 8003a2c:	20012de0 	.word	0x20012de0
 8003a30:	20012dd0 	.word	0x20012dd0
 8003a34:	20012ddc 	.word	0x20012ddc

08003a38 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b085      	sub	sp, #20
 8003a3c:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003a3e:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 8003a42:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8003a44:	4b27      	ldr	r3, [pc, #156]	@ (8003ae4 <prvHeapInit+0xac>)
 8003a46:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	f003 0307 	and.w	r3, r3, #7
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d00c      	beq.n	8003a6c <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	3307      	adds	r3, #7
 8003a56:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	f023 0307 	bic.w	r3, r3, #7
 8003a5e:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003a60:	68ba      	ldr	r2, [r7, #8]
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	1ad3      	subs	r3, r2, r3
 8003a66:	4a1f      	ldr	r2, [pc, #124]	@ (8003ae4 <prvHeapInit+0xac>)
 8003a68:	4413      	add	r3, r2
 8003a6a:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003a70:	4a1d      	ldr	r2, [pc, #116]	@ (8003ae8 <prvHeapInit+0xb0>)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8003a76:	4b1c      	ldr	r3, [pc, #112]	@ (8003ae8 <prvHeapInit+0xb0>)
 8003a78:	2200      	movs	r2, #0
 8003a7a:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	68ba      	ldr	r2, [r7, #8]
 8003a80:	4413      	add	r3, r2
 8003a82:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8003a84:	2208      	movs	r2, #8
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	1a9b      	subs	r3, r3, r2
 8003a8a:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	f023 0307 	bic.w	r3, r3, #7
 8003a92:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	4a15      	ldr	r2, [pc, #84]	@ (8003aec <prvHeapInit+0xb4>)
 8003a98:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8003a9a:	4b14      	ldr	r3, [pc, #80]	@ (8003aec <prvHeapInit+0xb4>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8003aa2:	4b12      	ldr	r3, [pc, #72]	@ (8003aec <prvHeapInit+0xb4>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	68fa      	ldr	r2, [r7, #12]
 8003ab2:	1ad2      	subs	r2, r2, r3
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003ab8:	4b0c      	ldr	r3, [pc, #48]	@ (8003aec <prvHeapInit+0xb4>)
 8003aba:	681a      	ldr	r2, [r3, #0]
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	4a0a      	ldr	r2, [pc, #40]	@ (8003af0 <prvHeapInit+0xb8>)
 8003ac6:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	4a09      	ldr	r2, [pc, #36]	@ (8003af4 <prvHeapInit+0xbc>)
 8003ace:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003ad0:	4b09      	ldr	r3, [pc, #36]	@ (8003af8 <prvHeapInit+0xc0>)
 8003ad2:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8003ad6:	601a      	str	r2, [r3, #0]
}
 8003ad8:	bf00      	nop
 8003ada:	3714      	adds	r7, #20
 8003adc:	46bd      	mov	sp, r7
 8003ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae2:	4770      	bx	lr
 8003ae4:	200001c4 	.word	0x200001c4
 8003ae8:	20012dc4 	.word	0x20012dc4
 8003aec:	20012dcc 	.word	0x20012dcc
 8003af0:	20012dd4 	.word	0x20012dd4
 8003af4:	20012dd0 	.word	0x20012dd0
 8003af8:	20012de0 	.word	0x20012de0

08003afc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8003afc:	b480      	push	{r7}
 8003afe:	b085      	sub	sp, #20
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003b04:	4b28      	ldr	r3, [pc, #160]	@ (8003ba8 <prvInsertBlockIntoFreeList+0xac>)
 8003b06:	60fb      	str	r3, [r7, #12]
 8003b08:	e002      	b.n	8003b10 <prvInsertBlockIntoFreeList+0x14>
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	60fb      	str	r3, [r7, #12]
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	687a      	ldr	r2, [r7, #4]
 8003b16:	429a      	cmp	r2, r3
 8003b18:	d8f7      	bhi.n	8003b0a <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	68ba      	ldr	r2, [r7, #8]
 8003b24:	4413      	add	r3, r2
 8003b26:	687a      	ldr	r2, [r7, #4]
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	d108      	bne.n	8003b3e <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	685a      	ldr	r2, [r3, #4]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	441a      	add	r2, r3
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	68ba      	ldr	r2, [r7, #8]
 8003b48:	441a      	add	r2, r3
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	429a      	cmp	r2, r3
 8003b50:	d118      	bne.n	8003b84 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681a      	ldr	r2, [r3, #0]
 8003b56:	4b15      	ldr	r3, [pc, #84]	@ (8003bac <prvInsertBlockIntoFreeList+0xb0>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	429a      	cmp	r2, r3
 8003b5c:	d00d      	beq.n	8003b7a <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	685a      	ldr	r2, [r3, #4]
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	441a      	add	r2, r3
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	681a      	ldr	r2, [r3, #0]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	601a      	str	r2, [r3, #0]
 8003b78:	e008      	b.n	8003b8c <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003b7a:	4b0c      	ldr	r3, [pc, #48]	@ (8003bac <prvInsertBlockIntoFreeList+0xb0>)
 8003b7c:	681a      	ldr	r2, [r3, #0]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	601a      	str	r2, [r3, #0]
 8003b82:	e003      	b.n	8003b8c <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8003b8c:	68fa      	ldr	r2, [r7, #12]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	429a      	cmp	r2, r3
 8003b92:	d002      	beq.n	8003b9a <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	687a      	ldr	r2, [r7, #4]
 8003b98:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003b9a:	bf00      	nop
 8003b9c:	3714      	adds	r7, #20
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba4:	4770      	bx	lr
 8003ba6:	bf00      	nop
 8003ba8:	20012dc4 	.word	0x20012dc4
 8003bac:	20012dcc 	.word	0x20012dcc

08003bb0 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b086      	sub	sp, #24
 8003bb4:	af02      	add	r7, sp, #8
 8003bb6:	60f8      	str	r0, [r7, #12]
 8003bb8:	60b9      	str	r1, [r7, #8]
 8003bba:	607a      	str	r2, [r7, #4]
 8003bbc:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8003bbe:	2205      	movs	r2, #5
 8003bc0:	492b      	ldr	r1, [pc, #172]	@ (8003c70 <SYSVIEW_AddTask+0xc0>)
 8003bc2:	68b8      	ldr	r0, [r7, #8]
 8003bc4:	f001 f9ca 	bl	8004f5c <memcmp>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d04b      	beq.n	8003c66 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8003bce:	4b29      	ldr	r3, [pc, #164]	@ (8003c74 <SYSVIEW_AddTask+0xc4>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	2b07      	cmp	r3, #7
 8003bd4:	d903      	bls.n	8003bde <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8003bd6:	4828      	ldr	r0, [pc, #160]	@ (8003c78 <SYSVIEW_AddTask+0xc8>)
 8003bd8:	f001 f964 	bl	8004ea4 <SEGGER_SYSVIEW_Warn>
    return;
 8003bdc:	e044      	b.n	8003c68 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8003bde:	4b25      	ldr	r3, [pc, #148]	@ (8003c74 <SYSVIEW_AddTask+0xc4>)
 8003be0:	681a      	ldr	r2, [r3, #0]
 8003be2:	4926      	ldr	r1, [pc, #152]	@ (8003c7c <SYSVIEW_AddTask+0xcc>)
 8003be4:	4613      	mov	r3, r2
 8003be6:	009b      	lsls	r3, r3, #2
 8003be8:	4413      	add	r3, r2
 8003bea:	009b      	lsls	r3, r3, #2
 8003bec:	440b      	add	r3, r1
 8003bee:	68fa      	ldr	r2, [r7, #12]
 8003bf0:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8003bf2:	4b20      	ldr	r3, [pc, #128]	@ (8003c74 <SYSVIEW_AddTask+0xc4>)
 8003bf4:	681a      	ldr	r2, [r3, #0]
 8003bf6:	4921      	ldr	r1, [pc, #132]	@ (8003c7c <SYSVIEW_AddTask+0xcc>)
 8003bf8:	4613      	mov	r3, r2
 8003bfa:	009b      	lsls	r3, r3, #2
 8003bfc:	4413      	add	r3, r2
 8003bfe:	009b      	lsls	r3, r3, #2
 8003c00:	440b      	add	r3, r1
 8003c02:	3304      	adds	r3, #4
 8003c04:	68ba      	ldr	r2, [r7, #8]
 8003c06:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8003c08:	4b1a      	ldr	r3, [pc, #104]	@ (8003c74 <SYSVIEW_AddTask+0xc4>)
 8003c0a:	681a      	ldr	r2, [r3, #0]
 8003c0c:	491b      	ldr	r1, [pc, #108]	@ (8003c7c <SYSVIEW_AddTask+0xcc>)
 8003c0e:	4613      	mov	r3, r2
 8003c10:	009b      	lsls	r3, r3, #2
 8003c12:	4413      	add	r3, r2
 8003c14:	009b      	lsls	r3, r3, #2
 8003c16:	440b      	add	r3, r1
 8003c18:	3308      	adds	r3, #8
 8003c1a:	687a      	ldr	r2, [r7, #4]
 8003c1c:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8003c1e:	4b15      	ldr	r3, [pc, #84]	@ (8003c74 <SYSVIEW_AddTask+0xc4>)
 8003c20:	681a      	ldr	r2, [r3, #0]
 8003c22:	4916      	ldr	r1, [pc, #88]	@ (8003c7c <SYSVIEW_AddTask+0xcc>)
 8003c24:	4613      	mov	r3, r2
 8003c26:	009b      	lsls	r3, r3, #2
 8003c28:	4413      	add	r3, r2
 8003c2a:	009b      	lsls	r3, r3, #2
 8003c2c:	440b      	add	r3, r1
 8003c2e:	330c      	adds	r3, #12
 8003c30:	683a      	ldr	r2, [r7, #0]
 8003c32:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8003c34:	4b0f      	ldr	r3, [pc, #60]	@ (8003c74 <SYSVIEW_AddTask+0xc4>)
 8003c36:	681a      	ldr	r2, [r3, #0]
 8003c38:	4910      	ldr	r1, [pc, #64]	@ (8003c7c <SYSVIEW_AddTask+0xcc>)
 8003c3a:	4613      	mov	r3, r2
 8003c3c:	009b      	lsls	r3, r3, #2
 8003c3e:	4413      	add	r3, r2
 8003c40:	009b      	lsls	r3, r3, #2
 8003c42:	440b      	add	r3, r1
 8003c44:	3310      	adds	r3, #16
 8003c46:	69ba      	ldr	r2, [r7, #24]
 8003c48:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8003c4a:	4b0a      	ldr	r3, [pc, #40]	@ (8003c74 <SYSVIEW_AddTask+0xc4>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	3301      	adds	r3, #1
 8003c50:	4a08      	ldr	r2, [pc, #32]	@ (8003c74 <SYSVIEW_AddTask+0xc4>)
 8003c52:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8003c54:	69bb      	ldr	r3, [r7, #24]
 8003c56:	9300      	str	r3, [sp, #0]
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	687a      	ldr	r2, [r7, #4]
 8003c5c:	68b9      	ldr	r1, [r7, #8]
 8003c5e:	68f8      	ldr	r0, [r7, #12]
 8003c60:	f000 f80e 	bl	8003c80 <SYSVIEW_SendTaskInfo>
 8003c64:	e000      	b.n	8003c68 <SYSVIEW_AddTask+0xb8>
    return;
 8003c66:	bf00      	nop

}
 8003c68:	3710      	adds	r7, #16
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bd80      	pop	{r7, pc}
 8003c6e:	bf00      	nop
 8003c70:	0800501c 	.word	0x0800501c
 8003c74:	20012e84 	.word	0x20012e84
 8003c78:	08005024 	.word	0x08005024
 8003c7c:	20012de4 	.word	0x20012de4

08003c80 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b08a      	sub	sp, #40	@ 0x28
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	60f8      	str	r0, [r7, #12]
 8003c88:	60b9      	str	r1, [r7, #8]
 8003c8a:	607a      	str	r2, [r7, #4]
 8003c8c:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8003c8e:	f107 0314 	add.w	r3, r7, #20
 8003c92:	2214      	movs	r2, #20
 8003c94:	2100      	movs	r1, #0
 8003c96:	4618      	mov	r0, r3
 8003c98:	f001 f970 	bl	8004f7c <memset>
  TaskInfo.TaskID     = TaskID;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8003cac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cae:	627b      	str	r3, [r7, #36]	@ 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8003cb0:	f107 0314 	add.w	r3, r7, #20
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	f000 fd93 	bl	80047e0 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8003cba:	bf00      	nop
 8003cbc:	3728      	adds	r7, #40	@ 0x28
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}
	...

08003cc4 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b084      	sub	sp, #16
 8003cc8:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 8003cca:	4b1e      	ldr	r3, [pc, #120]	@ (8003d44 <USART2_IRQHandler+0x80>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	f003 0320 	and.w	r3, r3, #32
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d011      	beq.n	8003cfe <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 8003cda:	4b1b      	ldr	r3, [pc, #108]	@ (8003d48 <USART2_IRQHandler+0x84>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	b2db      	uxtb	r3, r3
 8003ce0:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	f003 030b 	and.w	r3, r3, #11
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d108      	bne.n	8003cfe <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 8003cec:	4b17      	ldr	r3, [pc, #92]	@ (8003d4c <USART2_IRQHandler+0x88>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d004      	beq.n	8003cfe <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8003cf4:	4b15      	ldr	r3, [pc, #84]	@ (8003d4c <USART2_IRQHandler+0x88>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	79fa      	ldrb	r2, [r7, #7]
 8003cfa:	4610      	mov	r0, r2
 8003cfc:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d01a      	beq.n	8003d3e <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8003d08:	4b11      	ldr	r3, [pc, #68]	@ (8003d50 <USART2_IRQHandler+0x8c>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d015      	beq.n	8003d3c <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8003d10:	4b0f      	ldr	r3, [pc, #60]	@ (8003d50 <USART2_IRQHandler+0x8c>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	1dfa      	adds	r2, r7, #7
 8003d16:	4610      	mov	r0, r2
 8003d18:	4798      	blx	r3
 8003d1a:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d106      	bne.n	8003d30 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 8003d22:	4b0c      	ldr	r3, [pc, #48]	@ (8003d54 <USART2_IRQHandler+0x90>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a0b      	ldr	r2, [pc, #44]	@ (8003d54 <USART2_IRQHandler+0x90>)
 8003d28:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003d2c:	6013      	str	r3, [r2, #0]
 8003d2e:	e006      	b.n	8003d3e <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8003d30:	4b04      	ldr	r3, [pc, #16]	@ (8003d44 <USART2_IRQHandler+0x80>)
 8003d32:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 8003d34:	79fa      	ldrb	r2, [r7, #7]
 8003d36:	4b04      	ldr	r3, [pc, #16]	@ (8003d48 <USART2_IRQHandler+0x84>)
 8003d38:	601a      	str	r2, [r3, #0]
 8003d3a:	e000      	b.n	8003d3e <USART2_IRQHandler+0x7a>
      return;
 8003d3c:	bf00      	nop
    }
  }
}
 8003d3e:	3710      	adds	r7, #16
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bd80      	pop	{r7, pc}
 8003d44:	40004400 	.word	0x40004400
 8003d48:	40004404 	.word	0x40004404
 8003d4c:	20012e88 	.word	0x20012e88
 8003d50:	20012e8c 	.word	0x20012e8c
 8003d54:	4000440c 	.word	0x4000440c

08003d58 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 8003d58:	b480      	push	{r7}
 8003d5a:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 8003d5c:	4b05      	ldr	r3, [pc, #20]	@ (8003d74 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a04      	ldr	r2, [pc, #16]	@ (8003d74 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8003d62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003d66:	6013      	str	r3, [r2, #0]
}
 8003d68:	bf00      	nop
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d70:	4770      	bx	lr
 8003d72:	bf00      	nop
 8003d74:	4000440c 	.word	0x4000440c

08003d78 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8003d78:	b480      	push	{r7}
 8003d7a:	b083      	sub	sp, #12
 8003d7c:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8003d7e:	4b24      	ldr	r3, [pc, #144]	@ (8003e10 <_DoInit+0x98>)
 8003d80:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2203      	movs	r2, #3
 8003d86:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2203      	movs	r2, #3
 8003d8c:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	4a20      	ldr	r2, [pc, #128]	@ (8003e14 <_DoInit+0x9c>)
 8003d92:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	4a20      	ldr	r2, [pc, #128]	@ (8003e18 <_DoInit+0xa0>)
 8003d98:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003da0:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2200      	movs	r2, #0
 8003da6:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2200      	movs	r2, #0
 8003dac:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2200      	movs	r2, #0
 8003db2:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	4a17      	ldr	r2, [pc, #92]	@ (8003e14 <_DoInit+0x9c>)
 8003db8:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	4a17      	ldr	r2, [pc, #92]	@ (8003e1c <_DoInit+0xa4>)
 8003dbe:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2210      	movs	r2, #16
 8003dc4:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	675a      	str	r2, [r3, #116]	@ 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	3307      	adds	r3, #7
 8003ddc:	4a10      	ldr	r2, [pc, #64]	@ (8003e20 <_DoInit+0xa8>)
 8003dde:	6810      	ldr	r0, [r2, #0]
 8003de0:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8003de2:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	4a0e      	ldr	r2, [pc, #56]	@ (8003e24 <_DoInit+0xac>)
 8003dea:	6810      	ldr	r0, [r2, #0]
 8003dec:	6018      	str	r0, [r3, #0]
 8003dee:	8891      	ldrh	r1, [r2, #4]
 8003df0:	7992      	ldrb	r2, [r2, #6]
 8003df2:	8099      	strh	r1, [r3, #4]
 8003df4:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8003df6:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2220      	movs	r2, #32
 8003dfe:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8003e00:	f3bf 8f5f 	dmb	sy
}
 8003e04:	bf00      	nop
 8003e06:	370c      	adds	r7, #12
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0e:	4770      	bx	lr
 8003e10:	20012e90 	.word	0x20012e90
 8003e14:	08005074 	.word	0x08005074
 8003e18:	20012f38 	.word	0x20012f38
 8003e1c:	20013338 	.word	0x20013338
 8003e20:	08005080 	.word	0x08005080
 8003e24:	08005084 	.word	0x08005084

08003e28 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b08c      	sub	sp, #48	@ 0x30
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	60f8      	str	r0, [r7, #12]
 8003e30:	60b9      	str	r1, [r7, #8]
 8003e32:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8003e34:	4b3e      	ldr	r3, [pc, #248]	@ (8003f30 <SEGGER_RTT_ReadNoLock+0x108>)
 8003e36:	623b      	str	r3, [r7, #32]
 8003e38:	6a3b      	ldr	r3, [r7, #32]
 8003e3a:	781b      	ldrb	r3, [r3, #0]
 8003e3c:	b2db      	uxtb	r3, r3
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d101      	bne.n	8003e46 <SEGGER_RTT_ReadNoLock+0x1e>
 8003e42:	f7ff ff99 	bl	8003d78 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003e46:	68fa      	ldr	r2, [r7, #12]
 8003e48:	4613      	mov	r3, r2
 8003e4a:	005b      	lsls	r3, r3, #1
 8003e4c:	4413      	add	r3, r2
 8003e4e:	00db      	lsls	r3, r3, #3
 8003e50:	3360      	adds	r3, #96	@ 0x60
 8003e52:	4a37      	ldr	r2, [pc, #220]	@ (8003f30 <SEGGER_RTT_ReadNoLock+0x108>)
 8003e54:	4413      	add	r3, r2
 8003e56:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 8003e5c:	69fb      	ldr	r3, [r7, #28]
 8003e5e:	691b      	ldr	r3, [r3, #16]
 8003e60:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 8003e62:	69fb      	ldr	r3, [r7, #28]
 8003e64:	68db      	ldr	r3, [r3, #12]
 8003e66:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8003e68:	2300      	movs	r3, #0
 8003e6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8003e6c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003e6e:	69bb      	ldr	r3, [r7, #24]
 8003e70:	429a      	cmp	r2, r3
 8003e72:	d92b      	bls.n	8003ecc <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8003e74:	69fb      	ldr	r3, [r7, #28]
 8003e76:	689a      	ldr	r2, [r3, #8]
 8003e78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e7a:	1ad3      	subs	r3, r2, r3
 8003e7c:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003e7e:	697a      	ldr	r2, [r7, #20]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	4293      	cmp	r3, r2
 8003e84:	bf28      	it	cs
 8003e86:	4613      	movcs	r3, r2
 8003e88:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003e8a:	69fb      	ldr	r3, [r7, #28]
 8003e8c:	685a      	ldr	r2, [r3, #4]
 8003e8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e90:	4413      	add	r3, r2
 8003e92:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003e94:	697a      	ldr	r2, [r7, #20]
 8003e96:	6939      	ldr	r1, [r7, #16]
 8003e98:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003e9a:	f001 f89b 	bl	8004fd4 <memcpy>
    NumBytesRead += NumBytesRem;
 8003e9e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003ea0:	697b      	ldr	r3, [r7, #20]
 8003ea2:	4413      	add	r3, r2
 8003ea4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8003ea6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ea8:	697b      	ldr	r3, [r7, #20]
 8003eaa:	4413      	add	r3, r2
 8003eac:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8003eae:	687a      	ldr	r2, [r7, #4]
 8003eb0:	697b      	ldr	r3, [r7, #20]
 8003eb2:	1ad3      	subs	r3, r2, r3
 8003eb4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003eb6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003eb8:	697b      	ldr	r3, [r7, #20]
 8003eba:	4413      	add	r3, r2
 8003ebc:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8003ebe:	69fb      	ldr	r3, [r7, #28]
 8003ec0:	689b      	ldr	r3, [r3, #8]
 8003ec2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003ec4:	429a      	cmp	r2, r3
 8003ec6:	d101      	bne.n	8003ecc <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8003ec8:	2300      	movs	r3, #0
 8003eca:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8003ecc:	69ba      	ldr	r2, [r7, #24]
 8003ece:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ed0:	1ad3      	subs	r3, r2, r3
 8003ed2:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003ed4:	697a      	ldr	r2, [r7, #20]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	bf28      	it	cs
 8003edc:	4613      	movcs	r3, r2
 8003ede:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8003ee0:	697b      	ldr	r3, [r7, #20]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d019      	beq.n	8003f1a <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003ee6:	69fb      	ldr	r3, [r7, #28]
 8003ee8:	685a      	ldr	r2, [r3, #4]
 8003eea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003eec:	4413      	add	r3, r2
 8003eee:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003ef0:	697a      	ldr	r2, [r7, #20]
 8003ef2:	6939      	ldr	r1, [r7, #16]
 8003ef4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003ef6:	f001 f86d 	bl	8004fd4 <memcpy>
    NumBytesRead += NumBytesRem;
 8003efa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003efc:	697b      	ldr	r3, [r7, #20]
 8003efe:	4413      	add	r3, r2
 8003f00:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8003f02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f04:	697b      	ldr	r3, [r7, #20]
 8003f06:	4413      	add	r3, r2
 8003f08:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8003f0a:	687a      	ldr	r2, [r7, #4]
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	1ad3      	subs	r3, r2, r3
 8003f10:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003f12:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	4413      	add	r3, r2
 8003f18:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  if (NumBytesRead) {
 8003f1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d002      	beq.n	8003f26 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8003f20:	69fb      	ldr	r3, [r7, #28]
 8003f22:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003f24:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8003f26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8003f28:	4618      	mov	r0, r3
 8003f2a:	3730      	adds	r7, #48	@ 0x30
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bd80      	pop	{r7, pc}
 8003f30:	20012e90 	.word	0x20012e90

08003f34 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8003f34:	b480      	push	{r7}
 8003f36:	b087      	sub	sp, #28
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	60f8      	str	r0, [r7, #12]
 8003f3c:	60b9      	str	r1, [r7, #8]
 8003f3e:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8003f40:	2300      	movs	r3, #0
 8003f42:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8003f44:	e002      	b.n	8003f4c <_EncodeStr+0x18>
    Len++;
 8003f46:	693b      	ldr	r3, [r7, #16]
 8003f48:	3301      	adds	r3, #1
 8003f4a:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8003f4c:	68ba      	ldr	r2, [r7, #8]
 8003f4e:	693b      	ldr	r3, [r7, #16]
 8003f50:	4413      	add	r3, r2
 8003f52:	781b      	ldrb	r3, [r3, #0]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d1f6      	bne.n	8003f46 <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 8003f58:	693a      	ldr	r2, [r7, #16]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	429a      	cmp	r2, r3
 8003f5e:	d901      	bls.n	8003f64 <_EncodeStr+0x30>
    Len = Limit;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	2bfe      	cmp	r3, #254	@ 0xfe
 8003f68:	d806      	bhi.n	8003f78 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	1c5a      	adds	r2, r3, #1
 8003f6e:	60fa      	str	r2, [r7, #12]
 8003f70:	693a      	ldr	r2, [r7, #16]
 8003f72:	b2d2      	uxtb	r2, r2
 8003f74:	701a      	strb	r2, [r3, #0]
 8003f76:	e011      	b.n	8003f9c <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	1c5a      	adds	r2, r3, #1
 8003f7c:	60fa      	str	r2, [r7, #12]
 8003f7e:	22ff      	movs	r2, #255	@ 0xff
 8003f80:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	1c5a      	adds	r2, r3, #1
 8003f86:	60fa      	str	r2, [r7, #12]
 8003f88:	693a      	ldr	r2, [r7, #16]
 8003f8a:	b2d2      	uxtb	r2, r2
 8003f8c:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8003f8e:	693b      	ldr	r3, [r7, #16]
 8003f90:	0a19      	lsrs	r1, r3, #8
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	1c5a      	adds	r2, r3, #1
 8003f96:	60fa      	str	r2, [r7, #12]
 8003f98:	b2ca      	uxtb	r2, r1
 8003f9a:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8003fa0:	e00a      	b.n	8003fb8 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 8003fa2:	68ba      	ldr	r2, [r7, #8]
 8003fa4:	1c53      	adds	r3, r2, #1
 8003fa6:	60bb      	str	r3, [r7, #8]
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	1c59      	adds	r1, r3, #1
 8003fac:	60f9      	str	r1, [r7, #12]
 8003fae:	7812      	ldrb	r2, [r2, #0]
 8003fb0:	701a      	strb	r2, [r3, #0]
    n++;
 8003fb2:	697b      	ldr	r3, [r7, #20]
 8003fb4:	3301      	adds	r3, #1
 8003fb6:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8003fb8:	697a      	ldr	r2, [r7, #20]
 8003fba:	693b      	ldr	r3, [r7, #16]
 8003fbc:	429a      	cmp	r2, r3
 8003fbe:	d3f0      	bcc.n	8003fa2 <_EncodeStr+0x6e>
  }
  return pPayload;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
}
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	371c      	adds	r7, #28
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fcc:	4770      	bx	lr

08003fce <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8003fce:	b480      	push	{r7}
 8003fd0:	b083      	sub	sp, #12
 8003fd2:	af00      	add	r7, sp, #0
 8003fd4:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	3304      	adds	r3, #4
}
 8003fda:	4618      	mov	r0, r3
 8003fdc:	370c      	adds	r7, #12
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe4:	4770      	bx	lr
	...

08003fe8 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b082      	sub	sp, #8
 8003fec:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003fee:	4b35      	ldr	r3, [pc, #212]	@ (80040c4 <_HandleIncomingPacket+0xdc>)
 8003ff0:	7e1b      	ldrb	r3, [r3, #24]
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	1cfb      	adds	r3, r7, #3
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	4619      	mov	r1, r3
 8003ffa:	f7ff ff15 	bl	8003e28 <SEGGER_RTT_ReadNoLock>
 8003ffe:	4603      	mov	r3, r0
 8004000:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2b00      	cmp	r3, #0
 8004006:	dd59      	ble.n	80040bc <_HandleIncomingPacket+0xd4>
    switch (Cmd) {
 8004008:	78fb      	ldrb	r3, [r7, #3]
 800400a:	2b80      	cmp	r3, #128	@ 0x80
 800400c:	d032      	beq.n	8004074 <_HandleIncomingPacket+0x8c>
 800400e:	2b80      	cmp	r3, #128	@ 0x80
 8004010:	dc42      	bgt.n	8004098 <_HandleIncomingPacket+0xb0>
 8004012:	2b07      	cmp	r3, #7
 8004014:	dc16      	bgt.n	8004044 <_HandleIncomingPacket+0x5c>
 8004016:	2b00      	cmp	r3, #0
 8004018:	dd3e      	ble.n	8004098 <_HandleIncomingPacket+0xb0>
 800401a:	3b01      	subs	r3, #1
 800401c:	2b06      	cmp	r3, #6
 800401e:	d83b      	bhi.n	8004098 <_HandleIncomingPacket+0xb0>
 8004020:	a201      	add	r2, pc, #4	@ (adr r2, 8004028 <_HandleIncomingPacket+0x40>)
 8004022:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004026:	bf00      	nop
 8004028:	0800404b 	.word	0x0800404b
 800402c:	08004051 	.word	0x08004051
 8004030:	08004057 	.word	0x08004057
 8004034:	0800405d 	.word	0x0800405d
 8004038:	08004063 	.word	0x08004063
 800403c:	08004069 	.word	0x08004069
 8004040:	0800406f 	.word	0x0800406f
 8004044:	2b7f      	cmp	r3, #127	@ 0x7f
 8004046:	d034      	beq.n	80040b2 <_HandleIncomingPacket+0xca>
 8004048:	e026      	b.n	8004098 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 800404a:	f000 fa4d 	bl	80044e8 <SEGGER_SYSVIEW_Start>
      break;
 800404e:	e035      	b.n	80040bc <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8004050:	f000 fb06 	bl	8004660 <SEGGER_SYSVIEW_Stop>
      break;
 8004054:	e032      	b.n	80040bc <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8004056:	f000 fcbb 	bl	80049d0 <SEGGER_SYSVIEW_RecordSystime>
      break;
 800405a:	e02f      	b.n	80040bc <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 800405c:	f000 fca4 	bl	80049a8 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8004060:	e02c      	b.n	80040bc <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8004062:	f000 fb23 	bl	80046ac <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8004066:	e029      	b.n	80040bc <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8004068:	f000 fede 	bl	8004e28 <SEGGER_SYSVIEW_SendNumModules>
      break;
 800406c:	e026      	b.n	80040bc <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 800406e:	f000 febd 	bl	8004dec <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8004072:	e023      	b.n	80040bc <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004074:	4b13      	ldr	r3, [pc, #76]	@ (80040c4 <_HandleIncomingPacket+0xdc>)
 8004076:	7e1b      	ldrb	r3, [r3, #24]
 8004078:	4618      	mov	r0, r3
 800407a:	1cfb      	adds	r3, r7, #3
 800407c:	2201      	movs	r2, #1
 800407e:	4619      	mov	r1, r3
 8004080:	f7ff fed2 	bl	8003e28 <SEGGER_RTT_ReadNoLock>
 8004084:	4603      	mov	r3, r0
 8004086:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2b00      	cmp	r3, #0
 800408c:	dd13      	ble.n	80040b6 <_HandleIncomingPacket+0xce>
        SEGGER_SYSVIEW_SendModule(Cmd);
 800408e:	78fb      	ldrb	r3, [r7, #3]
 8004090:	4618      	mov	r0, r3
 8004092:	f000 fe2b 	bl	8004cec <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8004096:	e00e      	b.n	80040b6 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8004098:	78fb      	ldrb	r3, [r7, #3]
 800409a:	b25b      	sxtb	r3, r3
 800409c:	2b00      	cmp	r3, #0
 800409e:	da0c      	bge.n	80040ba <_HandleIncomingPacket+0xd2>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80040a0:	4b08      	ldr	r3, [pc, #32]	@ (80040c4 <_HandleIncomingPacket+0xdc>)
 80040a2:	7e1b      	ldrb	r3, [r3, #24]
 80040a4:	4618      	mov	r0, r3
 80040a6:	1cfb      	adds	r3, r7, #3
 80040a8:	2201      	movs	r2, #1
 80040aa:	4619      	mov	r1, r3
 80040ac:	f7ff febc 	bl	8003e28 <SEGGER_RTT_ReadNoLock>
      }
      break;
 80040b0:	e003      	b.n	80040ba <_HandleIncomingPacket+0xd2>
      break;
 80040b2:	bf00      	nop
 80040b4:	e002      	b.n	80040bc <_HandleIncomingPacket+0xd4>
      break;
 80040b6:	bf00      	nop
 80040b8:	e000      	b.n	80040bc <_HandleIncomingPacket+0xd4>
      break;
 80040ba:	bf00      	nop
    }
  }
}
 80040bc:	bf00      	nop
 80040be:	3708      	adds	r7, #8
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bd80      	pop	{r7, pc}
 80040c4:	20013348 	.word	0x20013348

080040c8 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b08c      	sub	sp, #48	@ 0x30
 80040cc:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 80040ce:	2301      	movs	r3, #1
 80040d0:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 80040d2:	1d3b      	adds	r3, r7, #4
 80040d4:	3301      	adds	r3, #1
 80040d6:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 80040d8:	69fb      	ldr	r3, [r7, #28]
 80040da:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80040dc:	4b32      	ldr	r3, [pc, #200]	@ (80041a8 <_TrySendOverflowPacket+0xe0>)
 80040de:	695b      	ldr	r3, [r3, #20]
 80040e0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80040e2:	e00b      	b.n	80040fc <_TrySendOverflowPacket+0x34>
 80040e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040e6:	b2da      	uxtb	r2, r3
 80040e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040ea:	1c59      	adds	r1, r3, #1
 80040ec:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80040ee:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80040f2:	b2d2      	uxtb	r2, r2
 80040f4:	701a      	strb	r2, [r3, #0]
 80040f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040f8:	09db      	lsrs	r3, r3, #7
 80040fa:	62bb      	str	r3, [r7, #40]	@ 0x28
 80040fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040fe:	2b7f      	cmp	r3, #127	@ 0x7f
 8004100:	d8f0      	bhi.n	80040e4 <_TrySendOverflowPacket+0x1c>
 8004102:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004104:	1c5a      	adds	r2, r3, #1
 8004106:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004108:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800410a:	b2d2      	uxtb	r2, r2
 800410c:	701a      	strb	r2, [r3, #0]
 800410e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004110:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004112:	4b26      	ldr	r3, [pc, #152]	@ (80041ac <_TrySendOverflowPacket+0xe4>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004118:	4b23      	ldr	r3, [pc, #140]	@ (80041a8 <_TrySendOverflowPacket+0xe0>)
 800411a:	68db      	ldr	r3, [r3, #12]
 800411c:	69ba      	ldr	r2, [r7, #24]
 800411e:	1ad3      	subs	r3, r2, r3
 8004120:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8004122:	69fb      	ldr	r3, [r7, #28]
 8004124:	627b      	str	r3, [r7, #36]	@ 0x24
 8004126:	697b      	ldr	r3, [r7, #20]
 8004128:	623b      	str	r3, [r7, #32]
 800412a:	e00b      	b.n	8004144 <_TrySendOverflowPacket+0x7c>
 800412c:	6a3b      	ldr	r3, [r7, #32]
 800412e:	b2da      	uxtb	r2, r3
 8004130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004132:	1c59      	adds	r1, r3, #1
 8004134:	6279      	str	r1, [r7, #36]	@ 0x24
 8004136:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800413a:	b2d2      	uxtb	r2, r2
 800413c:	701a      	strb	r2, [r3, #0]
 800413e:	6a3b      	ldr	r3, [r7, #32]
 8004140:	09db      	lsrs	r3, r3, #7
 8004142:	623b      	str	r3, [r7, #32]
 8004144:	6a3b      	ldr	r3, [r7, #32]
 8004146:	2b7f      	cmp	r3, #127	@ 0x7f
 8004148:	d8f0      	bhi.n	800412c <_TrySendOverflowPacket+0x64>
 800414a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800414c:	1c5a      	adds	r2, r3, #1
 800414e:	627a      	str	r2, [r7, #36]	@ 0x24
 8004150:	6a3a      	ldr	r2, [r7, #32]
 8004152:	b2d2      	uxtb	r2, r2
 8004154:	701a      	strb	r2, [r3, #0]
 8004156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004158:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 800415a:	4b13      	ldr	r3, [pc, #76]	@ (80041a8 <_TrySendOverflowPacket+0xe0>)
 800415c:	785b      	ldrb	r3, [r3, #1]
 800415e:	4618      	mov	r0, r3
 8004160:	1d3b      	adds	r3, r7, #4
 8004162:	69fa      	ldr	r2, [r7, #28]
 8004164:	1ad3      	subs	r3, r2, r3
 8004166:	461a      	mov	r2, r3
 8004168:	1d3b      	adds	r3, r7, #4
 800416a:	4619      	mov	r1, r3
 800416c:	f7fc f830 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004170:	4603      	mov	r3, r0
 8004172:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 8004174:	f7ff fdf0 	bl	8003d58 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8004178:	693b      	ldr	r3, [r7, #16]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d009      	beq.n	8004192 <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800417e:	4a0a      	ldr	r2, [pc, #40]	@ (80041a8 <_TrySendOverflowPacket+0xe0>)
 8004180:	69bb      	ldr	r3, [r7, #24]
 8004182:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8004184:	4b08      	ldr	r3, [pc, #32]	@ (80041a8 <_TrySendOverflowPacket+0xe0>)
 8004186:	781b      	ldrb	r3, [r3, #0]
 8004188:	3b01      	subs	r3, #1
 800418a:	b2da      	uxtb	r2, r3
 800418c:	4b06      	ldr	r3, [pc, #24]	@ (80041a8 <_TrySendOverflowPacket+0xe0>)
 800418e:	701a      	strb	r2, [r3, #0]
 8004190:	e004      	b.n	800419c <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8004192:	4b05      	ldr	r3, [pc, #20]	@ (80041a8 <_TrySendOverflowPacket+0xe0>)
 8004194:	695b      	ldr	r3, [r3, #20]
 8004196:	3301      	adds	r3, #1
 8004198:	4a03      	ldr	r2, [pc, #12]	@ (80041a8 <_TrySendOverflowPacket+0xe0>)
 800419a:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 800419c:	693b      	ldr	r3, [r7, #16]
}
 800419e:	4618      	mov	r0, r3
 80041a0:	3730      	adds	r7, #48	@ 0x30
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}
 80041a6:	bf00      	nop
 80041a8:	20013348 	.word	0x20013348
 80041ac:	e0001004 	.word	0xe0001004

080041b0 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b08a      	sub	sp, #40	@ 0x28
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	60f8      	str	r0, [r7, #12]
 80041b8:	60b9      	str	r1, [r7, #8]
 80041ba:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 80041bc:	4b6d      	ldr	r3, [pc, #436]	@ (8004374 <_SendPacket+0x1c4>)
 80041be:	781b      	ldrb	r3, [r3, #0]
 80041c0:	2b01      	cmp	r3, #1
 80041c2:	d010      	beq.n	80041e6 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 80041c4:	4b6b      	ldr	r3, [pc, #428]	@ (8004374 <_SendPacket+0x1c4>)
 80041c6:	781b      	ldrb	r3, [r3, #0]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	f000 80a5 	beq.w	8004318 <_SendPacket+0x168>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 80041ce:	4b69      	ldr	r3, [pc, #420]	@ (8004374 <_SendPacket+0x1c4>)
 80041d0:	781b      	ldrb	r3, [r3, #0]
 80041d2:	2b02      	cmp	r3, #2
 80041d4:	d109      	bne.n	80041ea <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 80041d6:	f7ff ff77 	bl	80040c8 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 80041da:	4b66      	ldr	r3, [pc, #408]	@ (8004374 <_SendPacket+0x1c4>)
 80041dc:	781b      	ldrb	r3, [r3, #0]
 80041de:	2b01      	cmp	r3, #1
 80041e0:	f040 809c 	bne.w	800431c <_SendPacket+0x16c>
      goto SendDone;
    }
  }
Send:
 80041e4:	e001      	b.n	80041ea <_SendPacket+0x3a>
    goto Send;
 80041e6:	bf00      	nop
 80041e8:	e000      	b.n	80041ec <_SendPacket+0x3c>
Send:
 80041ea:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2b1f      	cmp	r3, #31
 80041f0:	d809      	bhi.n	8004206 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 80041f2:	4b60      	ldr	r3, [pc, #384]	@ (8004374 <_SendPacket+0x1c4>)
 80041f4:	69da      	ldr	r2, [r3, #28]
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	fa22 f303 	lsr.w	r3, r2, r3
 80041fc:	f003 0301 	and.w	r3, r3, #1
 8004200:	2b00      	cmp	r3, #0
 8004202:	f040 808d 	bne.w	8004320 <_SendPacket+0x170>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2b17      	cmp	r3, #23
 800420a:	d807      	bhi.n	800421c <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	3b01      	subs	r3, #1
 8004210:	60fb      	str	r3, [r7, #12]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	b2da      	uxtb	r2, r3
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	701a      	strb	r2, [r3, #0]
 800421a:	e03d      	b.n	8004298 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 800421c:	68ba      	ldr	r2, [r7, #8]
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	1ad3      	subs	r3, r2, r3
 8004222:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8004224:	69fb      	ldr	r3, [r7, #28]
 8004226:	2b7f      	cmp	r3, #127	@ 0x7f
 8004228:	d912      	bls.n	8004250 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 800422a:	69fb      	ldr	r3, [r7, #28]
 800422c:	09da      	lsrs	r2, r3, #7
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	3b01      	subs	r3, #1
 8004232:	60fb      	str	r3, [r7, #12]
 8004234:	b2d2      	uxtb	r2, r2
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 800423a:	69fb      	ldr	r3, [r7, #28]
 800423c:	b2db      	uxtb	r3, r3
 800423e:	68fa      	ldr	r2, [r7, #12]
 8004240:	3a01      	subs	r2, #1
 8004242:	60fa      	str	r2, [r7, #12]
 8004244:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004248:	b2da      	uxtb	r2, r3
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	701a      	strb	r2, [r3, #0]
 800424e:	e006      	b.n	800425e <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	3b01      	subs	r3, #1
 8004254:	60fb      	str	r3, [r7, #12]
 8004256:	69fb      	ldr	r3, [r7, #28]
 8004258:	b2da      	uxtb	r2, r3
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2b7f      	cmp	r3, #127	@ 0x7f
 8004262:	d912      	bls.n	800428a <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	09da      	lsrs	r2, r3, #7
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	3b01      	subs	r3, #1
 800426c:	60fb      	str	r3, [r7, #12]
 800426e:	b2d2      	uxtb	r2, r2
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	b2db      	uxtb	r3, r3
 8004278:	68fa      	ldr	r2, [r7, #12]
 800427a:	3a01      	subs	r2, #1
 800427c:	60fa      	str	r2, [r7, #12]
 800427e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004282:	b2da      	uxtb	r2, r3
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	701a      	strb	r2, [r3, #0]
 8004288:	e006      	b.n	8004298 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	3b01      	subs	r3, #1
 800428e:	60fb      	str	r3, [r7, #12]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	b2da      	uxtb	r2, r3
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004298:	4b37      	ldr	r3, [pc, #220]	@ (8004378 <_SendPacket+0x1c8>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800429e:	4b35      	ldr	r3, [pc, #212]	@ (8004374 <_SendPacket+0x1c4>)
 80042a0:	68db      	ldr	r3, [r3, #12]
 80042a2:	69ba      	ldr	r2, [r7, #24]
 80042a4:	1ad3      	subs	r3, r2, r3
 80042a6:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	623b      	str	r3, [r7, #32]
 80042b0:	e00b      	b.n	80042ca <_SendPacket+0x11a>
 80042b2:	6a3b      	ldr	r3, [r7, #32]
 80042b4:	b2da      	uxtb	r2, r3
 80042b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042b8:	1c59      	adds	r1, r3, #1
 80042ba:	6279      	str	r1, [r7, #36]	@ 0x24
 80042bc:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80042c0:	b2d2      	uxtb	r2, r2
 80042c2:	701a      	strb	r2, [r3, #0]
 80042c4:	6a3b      	ldr	r3, [r7, #32]
 80042c6:	09db      	lsrs	r3, r3, #7
 80042c8:	623b      	str	r3, [r7, #32]
 80042ca:	6a3b      	ldr	r3, [r7, #32]
 80042cc:	2b7f      	cmp	r3, #127	@ 0x7f
 80042ce:	d8f0      	bhi.n	80042b2 <_SendPacket+0x102>
 80042d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042d2:	1c5a      	adds	r2, r3, #1
 80042d4:	627a      	str	r2, [r7, #36]	@ 0x24
 80042d6:	6a3a      	ldr	r2, [r7, #32]
 80042d8:	b2d2      	uxtb	r2, r2
 80042da:	701a      	strb	r2, [r3, #0]
 80042dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042de:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 80042e0:	4b24      	ldr	r3, [pc, #144]	@ (8004374 <_SendPacket+0x1c4>)
 80042e2:	785b      	ldrb	r3, [r3, #1]
 80042e4:	4618      	mov	r0, r3
 80042e6:	68ba      	ldr	r2, [r7, #8]
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	1ad3      	subs	r3, r2, r3
 80042ec:	461a      	mov	r2, r3
 80042ee:	68f9      	ldr	r1, [r7, #12]
 80042f0:	f7fb ff6e 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80042f4:	4603      	mov	r3, r0
 80042f6:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 80042f8:	f7ff fd2e 	bl	8003d58 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 80042fc:	693b      	ldr	r3, [r7, #16]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d003      	beq.n	800430a <_SendPacket+0x15a>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8004302:	4a1c      	ldr	r2, [pc, #112]	@ (8004374 <_SendPacket+0x1c4>)
 8004304:	69bb      	ldr	r3, [r7, #24]
 8004306:	60d3      	str	r3, [r2, #12]
 8004308:	e00b      	b.n	8004322 <_SendPacket+0x172>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 800430a:	4b1a      	ldr	r3, [pc, #104]	@ (8004374 <_SendPacket+0x1c4>)
 800430c:	781b      	ldrb	r3, [r3, #0]
 800430e:	3301      	adds	r3, #1
 8004310:	b2da      	uxtb	r2, r3
 8004312:	4b18      	ldr	r3, [pc, #96]	@ (8004374 <_SendPacket+0x1c4>)
 8004314:	701a      	strb	r2, [r3, #0]
 8004316:	e004      	b.n	8004322 <_SendPacket+0x172>
    goto SendDone;
 8004318:	bf00      	nop
 800431a:	e002      	b.n	8004322 <_SendPacket+0x172>
      goto SendDone;
 800431c:	bf00      	nop
 800431e:	e000      	b.n	8004322 <_SendPacket+0x172>
      goto SendDone;
 8004320:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8004322:	4b14      	ldr	r3, [pc, #80]	@ (8004374 <_SendPacket+0x1c4>)
 8004324:	7e1b      	ldrb	r3, [r3, #24]
 8004326:	4619      	mov	r1, r3
 8004328:	4a14      	ldr	r2, [pc, #80]	@ (800437c <_SendPacket+0x1cc>)
 800432a:	460b      	mov	r3, r1
 800432c:	005b      	lsls	r3, r3, #1
 800432e:	440b      	add	r3, r1
 8004330:	00db      	lsls	r3, r3, #3
 8004332:	4413      	add	r3, r2
 8004334:	336c      	adds	r3, #108	@ 0x6c
 8004336:	681a      	ldr	r2, [r3, #0]
 8004338:	4b0e      	ldr	r3, [pc, #56]	@ (8004374 <_SendPacket+0x1c4>)
 800433a:	7e1b      	ldrb	r3, [r3, #24]
 800433c:	4618      	mov	r0, r3
 800433e:	490f      	ldr	r1, [pc, #60]	@ (800437c <_SendPacket+0x1cc>)
 8004340:	4603      	mov	r3, r0
 8004342:	005b      	lsls	r3, r3, #1
 8004344:	4403      	add	r3, r0
 8004346:	00db      	lsls	r3, r3, #3
 8004348:	440b      	add	r3, r1
 800434a:	3370      	adds	r3, #112	@ 0x70
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	429a      	cmp	r2, r3
 8004350:	d00b      	beq.n	800436a <_SendPacket+0x1ba>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8004352:	4b08      	ldr	r3, [pc, #32]	@ (8004374 <_SendPacket+0x1c4>)
 8004354:	789b      	ldrb	r3, [r3, #2]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d107      	bne.n	800436a <_SendPacket+0x1ba>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800435a:	4b06      	ldr	r3, [pc, #24]	@ (8004374 <_SendPacket+0x1c4>)
 800435c:	2201      	movs	r2, #1
 800435e:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8004360:	f7ff fe42 	bl	8003fe8 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8004364:	4b03      	ldr	r3, [pc, #12]	@ (8004374 <_SendPacket+0x1c4>)
 8004366:	2200      	movs	r2, #0
 8004368:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 800436a:	bf00      	nop
 800436c:	3728      	adds	r7, #40	@ 0x28
 800436e:	46bd      	mov	sp, r7
 8004370:	bd80      	pop	{r7, pc}
 8004372:	bf00      	nop
 8004374:	20013348 	.word	0x20013348
 8004378:	e0001004 	.word	0xe0001004
 800437c:	20012e90 	.word	0x20012e90

08004380 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8004380:	b580      	push	{r7, lr}
 8004382:	b084      	sub	sp, #16
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004388:	f3ef 8311 	mrs	r3, BASEPRI
 800438c:	f04f 0120 	mov.w	r1, #32
 8004390:	f381 8811 	msr	BASEPRI, r1
 8004394:	60fb      	str	r3, [r7, #12]
 8004396:	4808      	ldr	r0, [pc, #32]	@ (80043b8 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8004398:	f7ff fe19 	bl	8003fce <_PreparePacket>
 800439c:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 800439e:	687a      	ldr	r2, [r7, #4]
 80043a0:	68b9      	ldr	r1, [r7, #8]
 80043a2:	68b8      	ldr	r0, [r7, #8]
 80043a4:	f7ff ff04 	bl	80041b0 <_SendPacket>
  RECORD_END();
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	f383 8811 	msr	BASEPRI, r3
}
 80043ae:	bf00      	nop
 80043b0:	3710      	adds	r7, #16
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}
 80043b6:	bf00      	nop
 80043b8:	20013378 	.word	0x20013378

080043bc <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 80043bc:	b580      	push	{r7, lr}
 80043be:	b088      	sub	sp, #32
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
 80043c4:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80043c6:	f3ef 8311 	mrs	r3, BASEPRI
 80043ca:	f04f 0120 	mov.w	r1, #32
 80043ce:	f381 8811 	msr	BASEPRI, r1
 80043d2:	617b      	str	r3, [r7, #20]
 80043d4:	4816      	ldr	r0, [pc, #88]	@ (8004430 <SEGGER_SYSVIEW_RecordU32+0x74>)
 80043d6:	f7ff fdfa 	bl	8003fce <_PreparePacket>
 80043da:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80043dc:	693b      	ldr	r3, [r7, #16]
 80043de:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	61fb      	str	r3, [r7, #28]
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	61bb      	str	r3, [r7, #24]
 80043e8:	e00b      	b.n	8004402 <SEGGER_SYSVIEW_RecordU32+0x46>
 80043ea:	69bb      	ldr	r3, [r7, #24]
 80043ec:	b2da      	uxtb	r2, r3
 80043ee:	69fb      	ldr	r3, [r7, #28]
 80043f0:	1c59      	adds	r1, r3, #1
 80043f2:	61f9      	str	r1, [r7, #28]
 80043f4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80043f8:	b2d2      	uxtb	r2, r2
 80043fa:	701a      	strb	r2, [r3, #0]
 80043fc:	69bb      	ldr	r3, [r7, #24]
 80043fe:	09db      	lsrs	r3, r3, #7
 8004400:	61bb      	str	r3, [r7, #24]
 8004402:	69bb      	ldr	r3, [r7, #24]
 8004404:	2b7f      	cmp	r3, #127	@ 0x7f
 8004406:	d8f0      	bhi.n	80043ea <SEGGER_SYSVIEW_RecordU32+0x2e>
 8004408:	69fb      	ldr	r3, [r7, #28]
 800440a:	1c5a      	adds	r2, r3, #1
 800440c:	61fa      	str	r2, [r7, #28]
 800440e:	69ba      	ldr	r2, [r7, #24]
 8004410:	b2d2      	uxtb	r2, r2
 8004412:	701a      	strb	r2, [r3, #0]
 8004414:	69fb      	ldr	r3, [r7, #28]
 8004416:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004418:	687a      	ldr	r2, [r7, #4]
 800441a:	68f9      	ldr	r1, [r7, #12]
 800441c:	6938      	ldr	r0, [r7, #16]
 800441e:	f7ff fec7 	bl	80041b0 <_SendPacket>
  RECORD_END();
 8004422:	697b      	ldr	r3, [r7, #20]
 8004424:	f383 8811 	msr	BASEPRI, r3
}
 8004428:	bf00      	nop
 800442a:	3720      	adds	r7, #32
 800442c:	46bd      	mov	sp, r7
 800442e:	bd80      	pop	{r7, pc}
 8004430:	20013378 	.word	0x20013378

08004434 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8004434:	b580      	push	{r7, lr}
 8004436:	b08c      	sub	sp, #48	@ 0x30
 8004438:	af00      	add	r7, sp, #0
 800443a:	60f8      	str	r0, [r7, #12]
 800443c:	60b9      	str	r1, [r7, #8]
 800443e:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004440:	f3ef 8311 	mrs	r3, BASEPRI
 8004444:	f04f 0120 	mov.w	r1, #32
 8004448:	f381 8811 	msr	BASEPRI, r1
 800444c:	61fb      	str	r3, [r7, #28]
 800444e:	4825      	ldr	r0, [pc, #148]	@ (80044e4 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8004450:	f7ff fdbd 	bl	8003fce <_PreparePacket>
 8004454:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8004456:	69bb      	ldr	r3, [r7, #24]
 8004458:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800445e:	68bb      	ldr	r3, [r7, #8]
 8004460:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004462:	e00b      	b.n	800447c <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8004464:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004466:	b2da      	uxtb	r2, r3
 8004468:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800446a:	1c59      	adds	r1, r3, #1
 800446c:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800446e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004472:	b2d2      	uxtb	r2, r2
 8004474:	701a      	strb	r2, [r3, #0]
 8004476:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004478:	09db      	lsrs	r3, r3, #7
 800447a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800447c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800447e:	2b7f      	cmp	r3, #127	@ 0x7f
 8004480:	d8f0      	bhi.n	8004464 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8004482:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004484:	1c5a      	adds	r2, r3, #1
 8004486:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004488:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800448a:	b2d2      	uxtb	r2, r2
 800448c:	701a      	strb	r2, [r3, #0]
 800448e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004490:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	627b      	str	r3, [r7, #36]	@ 0x24
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	623b      	str	r3, [r7, #32]
 800449a:	e00b      	b.n	80044b4 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 800449c:	6a3b      	ldr	r3, [r7, #32]
 800449e:	b2da      	uxtb	r2, r3
 80044a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044a2:	1c59      	adds	r1, r3, #1
 80044a4:	6279      	str	r1, [r7, #36]	@ 0x24
 80044a6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80044aa:	b2d2      	uxtb	r2, r2
 80044ac:	701a      	strb	r2, [r3, #0]
 80044ae:	6a3b      	ldr	r3, [r7, #32]
 80044b0:	09db      	lsrs	r3, r3, #7
 80044b2:	623b      	str	r3, [r7, #32]
 80044b4:	6a3b      	ldr	r3, [r7, #32]
 80044b6:	2b7f      	cmp	r3, #127	@ 0x7f
 80044b8:	d8f0      	bhi.n	800449c <SEGGER_SYSVIEW_RecordU32x2+0x68>
 80044ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044bc:	1c5a      	adds	r2, r3, #1
 80044be:	627a      	str	r2, [r7, #36]	@ 0x24
 80044c0:	6a3a      	ldr	r2, [r7, #32]
 80044c2:	b2d2      	uxtb	r2, r2
 80044c4:	701a      	strb	r2, [r3, #0]
 80044c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044c8:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80044ca:	68fa      	ldr	r2, [r7, #12]
 80044cc:	6979      	ldr	r1, [r7, #20]
 80044ce:	69b8      	ldr	r0, [r7, #24]
 80044d0:	f7ff fe6e 	bl	80041b0 <_SendPacket>
  RECORD_END();
 80044d4:	69fb      	ldr	r3, [r7, #28]
 80044d6:	f383 8811 	msr	BASEPRI, r3
}
 80044da:	bf00      	nop
 80044dc:	3730      	adds	r7, #48	@ 0x30
 80044de:	46bd      	mov	sp, r7
 80044e0:	bd80      	pop	{r7, pc}
 80044e2:	bf00      	nop
 80044e4:	20013378 	.word	0x20013378

080044e8 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b08c      	sub	sp, #48	@ 0x30
 80044ec:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 80044ee:	4b59      	ldr	r3, [pc, #356]	@ (8004654 <SEGGER_SYSVIEW_Start+0x16c>)
 80044f0:	2201      	movs	r2, #1
 80044f2:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 80044f4:	f3ef 8311 	mrs	r3, BASEPRI
 80044f8:	f04f 0120 	mov.w	r1, #32
 80044fc:	f381 8811 	msr	BASEPRI, r1
 8004500:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8004502:	4b54      	ldr	r3, [pc, #336]	@ (8004654 <SEGGER_SYSVIEW_Start+0x16c>)
 8004504:	785b      	ldrb	r3, [r3, #1]
 8004506:	220a      	movs	r2, #10
 8004508:	4953      	ldr	r1, [pc, #332]	@ (8004658 <SEGGER_SYSVIEW_Start+0x170>)
 800450a:	4618      	mov	r0, r3
 800450c:	f7fb fe60 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 8004516:	f7ff fc1f 	bl	8003d58 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 800451a:	200a      	movs	r0, #10
 800451c:	f7ff ff30 	bl	8004380 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004520:	f3ef 8311 	mrs	r3, BASEPRI
 8004524:	f04f 0120 	mov.w	r1, #32
 8004528:	f381 8811 	msr	BASEPRI, r1
 800452c:	60bb      	str	r3, [r7, #8]
 800452e:	484b      	ldr	r0, [pc, #300]	@ (800465c <SEGGER_SYSVIEW_Start+0x174>)
 8004530:	f7ff fd4d 	bl	8003fce <_PreparePacket>
 8004534:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800453e:	4b45      	ldr	r3, [pc, #276]	@ (8004654 <SEGGER_SYSVIEW_Start+0x16c>)
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004544:	e00b      	b.n	800455e <SEGGER_SYSVIEW_Start+0x76>
 8004546:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004548:	b2da      	uxtb	r2, r3
 800454a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800454c:	1c59      	adds	r1, r3, #1
 800454e:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8004550:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004554:	b2d2      	uxtb	r2, r2
 8004556:	701a      	strb	r2, [r3, #0]
 8004558:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800455a:	09db      	lsrs	r3, r3, #7
 800455c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800455e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004560:	2b7f      	cmp	r3, #127	@ 0x7f
 8004562:	d8f0      	bhi.n	8004546 <SEGGER_SYSVIEW_Start+0x5e>
 8004564:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004566:	1c5a      	adds	r2, r3, #1
 8004568:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800456a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800456c:	b2d2      	uxtb	r2, r2
 800456e:	701a      	strb	r2, [r3, #0]
 8004570:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004572:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	627b      	str	r3, [r7, #36]	@ 0x24
 8004578:	4b36      	ldr	r3, [pc, #216]	@ (8004654 <SEGGER_SYSVIEW_Start+0x16c>)
 800457a:	689b      	ldr	r3, [r3, #8]
 800457c:	623b      	str	r3, [r7, #32]
 800457e:	e00b      	b.n	8004598 <SEGGER_SYSVIEW_Start+0xb0>
 8004580:	6a3b      	ldr	r3, [r7, #32]
 8004582:	b2da      	uxtb	r2, r3
 8004584:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004586:	1c59      	adds	r1, r3, #1
 8004588:	6279      	str	r1, [r7, #36]	@ 0x24
 800458a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800458e:	b2d2      	uxtb	r2, r2
 8004590:	701a      	strb	r2, [r3, #0]
 8004592:	6a3b      	ldr	r3, [r7, #32]
 8004594:	09db      	lsrs	r3, r3, #7
 8004596:	623b      	str	r3, [r7, #32]
 8004598:	6a3b      	ldr	r3, [r7, #32]
 800459a:	2b7f      	cmp	r3, #127	@ 0x7f
 800459c:	d8f0      	bhi.n	8004580 <SEGGER_SYSVIEW_Start+0x98>
 800459e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045a0:	1c5a      	adds	r2, r3, #1
 80045a2:	627a      	str	r2, [r7, #36]	@ 0x24
 80045a4:	6a3a      	ldr	r2, [r7, #32]
 80045a6:	b2d2      	uxtb	r2, r2
 80045a8:	701a      	strb	r2, [r3, #0]
 80045aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045ac:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	61fb      	str	r3, [r7, #28]
 80045b2:	4b28      	ldr	r3, [pc, #160]	@ (8004654 <SEGGER_SYSVIEW_Start+0x16c>)
 80045b4:	691b      	ldr	r3, [r3, #16]
 80045b6:	61bb      	str	r3, [r7, #24]
 80045b8:	e00b      	b.n	80045d2 <SEGGER_SYSVIEW_Start+0xea>
 80045ba:	69bb      	ldr	r3, [r7, #24]
 80045bc:	b2da      	uxtb	r2, r3
 80045be:	69fb      	ldr	r3, [r7, #28]
 80045c0:	1c59      	adds	r1, r3, #1
 80045c2:	61f9      	str	r1, [r7, #28]
 80045c4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80045c8:	b2d2      	uxtb	r2, r2
 80045ca:	701a      	strb	r2, [r3, #0]
 80045cc:	69bb      	ldr	r3, [r7, #24]
 80045ce:	09db      	lsrs	r3, r3, #7
 80045d0:	61bb      	str	r3, [r7, #24]
 80045d2:	69bb      	ldr	r3, [r7, #24]
 80045d4:	2b7f      	cmp	r3, #127	@ 0x7f
 80045d6:	d8f0      	bhi.n	80045ba <SEGGER_SYSVIEW_Start+0xd2>
 80045d8:	69fb      	ldr	r3, [r7, #28]
 80045da:	1c5a      	adds	r2, r3, #1
 80045dc:	61fa      	str	r2, [r7, #28]
 80045de:	69ba      	ldr	r2, [r7, #24]
 80045e0:	b2d2      	uxtb	r2, r2
 80045e2:	701a      	strb	r2, [r3, #0]
 80045e4:	69fb      	ldr	r3, [r7, #28]
 80045e6:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	617b      	str	r3, [r7, #20]
 80045ec:	2300      	movs	r3, #0
 80045ee:	613b      	str	r3, [r7, #16]
 80045f0:	e00b      	b.n	800460a <SEGGER_SYSVIEW_Start+0x122>
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	b2da      	uxtb	r2, r3
 80045f6:	697b      	ldr	r3, [r7, #20]
 80045f8:	1c59      	adds	r1, r3, #1
 80045fa:	6179      	str	r1, [r7, #20]
 80045fc:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004600:	b2d2      	uxtb	r2, r2
 8004602:	701a      	strb	r2, [r3, #0]
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	09db      	lsrs	r3, r3, #7
 8004608:	613b      	str	r3, [r7, #16]
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	2b7f      	cmp	r3, #127	@ 0x7f
 800460e:	d8f0      	bhi.n	80045f2 <SEGGER_SYSVIEW_Start+0x10a>
 8004610:	697b      	ldr	r3, [r7, #20]
 8004612:	1c5a      	adds	r2, r3, #1
 8004614:	617a      	str	r2, [r7, #20]
 8004616:	693a      	ldr	r2, [r7, #16]
 8004618:	b2d2      	uxtb	r2, r2
 800461a:	701a      	strb	r2, [r3, #0]
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8004620:	2218      	movs	r2, #24
 8004622:	6839      	ldr	r1, [r7, #0]
 8004624:	6878      	ldr	r0, [r7, #4]
 8004626:	f7ff fdc3 	bl	80041b0 <_SendPacket>
      RECORD_END();
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8004630:	4b08      	ldr	r3, [pc, #32]	@ (8004654 <SEGGER_SYSVIEW_Start+0x16c>)
 8004632:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004634:	2b00      	cmp	r3, #0
 8004636:	d002      	beq.n	800463e <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8004638:	4b06      	ldr	r3, [pc, #24]	@ (8004654 <SEGGER_SYSVIEW_Start+0x16c>)
 800463a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800463c:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800463e:	f000 f9c7 	bl	80049d0 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8004642:	f000 f9b1 	bl	80049a8 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8004646:	f000 fbef 	bl	8004e28 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 800464a:	bf00      	nop
 800464c:	3730      	adds	r7, #48	@ 0x30
 800464e:	46bd      	mov	sp, r7
 8004650:	bd80      	pop	{r7, pc}
 8004652:	bf00      	nop
 8004654:	20013348 	.word	0x20013348
 8004658:	080050a4 	.word	0x080050a4
 800465c:	20013378 	.word	0x20013378

08004660 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8004660:	b580      	push	{r7, lr}
 8004662:	b082      	sub	sp, #8
 8004664:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004666:	f3ef 8311 	mrs	r3, BASEPRI
 800466a:	f04f 0120 	mov.w	r1, #32
 800466e:	f381 8811 	msr	BASEPRI, r1
 8004672:	607b      	str	r3, [r7, #4]
 8004674:	480b      	ldr	r0, [pc, #44]	@ (80046a4 <SEGGER_SYSVIEW_Stop+0x44>)
 8004676:	f7ff fcaa 	bl	8003fce <_PreparePacket>
 800467a:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 800467c:	4b0a      	ldr	r3, [pc, #40]	@ (80046a8 <SEGGER_SYSVIEW_Stop+0x48>)
 800467e:	781b      	ldrb	r3, [r3, #0]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d007      	beq.n	8004694 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8004684:	220b      	movs	r2, #11
 8004686:	6839      	ldr	r1, [r7, #0]
 8004688:	6838      	ldr	r0, [r7, #0]
 800468a:	f7ff fd91 	bl	80041b0 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800468e:	4b06      	ldr	r3, [pc, #24]	@ (80046a8 <SEGGER_SYSVIEW_Stop+0x48>)
 8004690:	2200      	movs	r2, #0
 8004692:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	f383 8811 	msr	BASEPRI, r3
}
 800469a:	bf00      	nop
 800469c:	3708      	adds	r7, #8
 800469e:	46bd      	mov	sp, r7
 80046a0:	bd80      	pop	{r7, pc}
 80046a2:	bf00      	nop
 80046a4:	20013378 	.word	0x20013378
 80046a8:	20013348 	.word	0x20013348

080046ac <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b08c      	sub	sp, #48	@ 0x30
 80046b0:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80046b2:	f3ef 8311 	mrs	r3, BASEPRI
 80046b6:	f04f 0120 	mov.w	r1, #32
 80046ba:	f381 8811 	msr	BASEPRI, r1
 80046be:	60fb      	str	r3, [r7, #12]
 80046c0:	4845      	ldr	r0, [pc, #276]	@ (80047d8 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 80046c2:	f7ff fc84 	bl	8003fce <_PreparePacket>
 80046c6:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80046d0:	4b42      	ldr	r3, [pc, #264]	@ (80047dc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80046d6:	e00b      	b.n	80046f0 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 80046d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046da:	b2da      	uxtb	r2, r3
 80046dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046de:	1c59      	adds	r1, r3, #1
 80046e0:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80046e2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80046e6:	b2d2      	uxtb	r2, r2
 80046e8:	701a      	strb	r2, [r3, #0]
 80046ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046ec:	09db      	lsrs	r3, r3, #7
 80046ee:	62bb      	str	r3, [r7, #40]	@ 0x28
 80046f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046f2:	2b7f      	cmp	r3, #127	@ 0x7f
 80046f4:	d8f0      	bhi.n	80046d8 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 80046f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046f8:	1c5a      	adds	r2, r3, #1
 80046fa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80046fc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80046fe:	b2d2      	uxtb	r2, r2
 8004700:	701a      	strb	r2, [r3, #0]
 8004702:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004704:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	627b      	str	r3, [r7, #36]	@ 0x24
 800470a:	4b34      	ldr	r3, [pc, #208]	@ (80047dc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800470c:	689b      	ldr	r3, [r3, #8]
 800470e:	623b      	str	r3, [r7, #32]
 8004710:	e00b      	b.n	800472a <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8004712:	6a3b      	ldr	r3, [r7, #32]
 8004714:	b2da      	uxtb	r2, r3
 8004716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004718:	1c59      	adds	r1, r3, #1
 800471a:	6279      	str	r1, [r7, #36]	@ 0x24
 800471c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004720:	b2d2      	uxtb	r2, r2
 8004722:	701a      	strb	r2, [r3, #0]
 8004724:	6a3b      	ldr	r3, [r7, #32]
 8004726:	09db      	lsrs	r3, r3, #7
 8004728:	623b      	str	r3, [r7, #32]
 800472a:	6a3b      	ldr	r3, [r7, #32]
 800472c:	2b7f      	cmp	r3, #127	@ 0x7f
 800472e:	d8f0      	bhi.n	8004712 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8004730:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004732:	1c5a      	adds	r2, r3, #1
 8004734:	627a      	str	r2, [r7, #36]	@ 0x24
 8004736:	6a3a      	ldr	r2, [r7, #32]
 8004738:	b2d2      	uxtb	r2, r2
 800473a:	701a      	strb	r2, [r3, #0]
 800473c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800473e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	61fb      	str	r3, [r7, #28]
 8004744:	4b25      	ldr	r3, [pc, #148]	@ (80047dc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004746:	691b      	ldr	r3, [r3, #16]
 8004748:	61bb      	str	r3, [r7, #24]
 800474a:	e00b      	b.n	8004764 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 800474c:	69bb      	ldr	r3, [r7, #24]
 800474e:	b2da      	uxtb	r2, r3
 8004750:	69fb      	ldr	r3, [r7, #28]
 8004752:	1c59      	adds	r1, r3, #1
 8004754:	61f9      	str	r1, [r7, #28]
 8004756:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800475a:	b2d2      	uxtb	r2, r2
 800475c:	701a      	strb	r2, [r3, #0]
 800475e:	69bb      	ldr	r3, [r7, #24]
 8004760:	09db      	lsrs	r3, r3, #7
 8004762:	61bb      	str	r3, [r7, #24]
 8004764:	69bb      	ldr	r3, [r7, #24]
 8004766:	2b7f      	cmp	r3, #127	@ 0x7f
 8004768:	d8f0      	bhi.n	800474c <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800476a:	69fb      	ldr	r3, [r7, #28]
 800476c:	1c5a      	adds	r2, r3, #1
 800476e:	61fa      	str	r2, [r7, #28]
 8004770:	69ba      	ldr	r2, [r7, #24]
 8004772:	b2d2      	uxtb	r2, r2
 8004774:	701a      	strb	r2, [r3, #0]
 8004776:	69fb      	ldr	r3, [r7, #28]
 8004778:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	617b      	str	r3, [r7, #20]
 800477e:	2300      	movs	r3, #0
 8004780:	613b      	str	r3, [r7, #16]
 8004782:	e00b      	b.n	800479c <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8004784:	693b      	ldr	r3, [r7, #16]
 8004786:	b2da      	uxtb	r2, r3
 8004788:	697b      	ldr	r3, [r7, #20]
 800478a:	1c59      	adds	r1, r3, #1
 800478c:	6179      	str	r1, [r7, #20]
 800478e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004792:	b2d2      	uxtb	r2, r2
 8004794:	701a      	strb	r2, [r3, #0]
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	09db      	lsrs	r3, r3, #7
 800479a:	613b      	str	r3, [r7, #16]
 800479c:	693b      	ldr	r3, [r7, #16]
 800479e:	2b7f      	cmp	r3, #127	@ 0x7f
 80047a0:	d8f0      	bhi.n	8004784 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 80047a2:	697b      	ldr	r3, [r7, #20]
 80047a4:	1c5a      	adds	r2, r3, #1
 80047a6:	617a      	str	r2, [r7, #20]
 80047a8:	693a      	ldr	r2, [r7, #16]
 80047aa:	b2d2      	uxtb	r2, r2
 80047ac:	701a      	strb	r2, [r3, #0]
 80047ae:	697b      	ldr	r3, [r7, #20]
 80047b0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80047b2:	2218      	movs	r2, #24
 80047b4:	6879      	ldr	r1, [r7, #4]
 80047b6:	68b8      	ldr	r0, [r7, #8]
 80047b8:	f7ff fcfa 	bl	80041b0 <_SendPacket>
  RECORD_END();
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 80047c2:	4b06      	ldr	r3, [pc, #24]	@ (80047dc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80047c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d002      	beq.n	80047d0 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 80047ca:	4b04      	ldr	r3, [pc, #16]	@ (80047dc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80047cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047ce:	4798      	blx	r3
  }
}
 80047d0:	bf00      	nop
 80047d2:	3730      	adds	r7, #48	@ 0x30
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bd80      	pop	{r7, pc}
 80047d8:	20013378 	.word	0x20013378
 80047dc:	20013348 	.word	0x20013348

080047e0 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b092      	sub	sp, #72	@ 0x48
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 80047e8:	f3ef 8311 	mrs	r3, BASEPRI
 80047ec:	f04f 0120 	mov.w	r1, #32
 80047f0:	f381 8811 	msr	BASEPRI, r1
 80047f4:	617b      	str	r3, [r7, #20]
 80047f6:	486a      	ldr	r0, [pc, #424]	@ (80049a0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 80047f8:	f7ff fbe9 	bl	8003fce <_PreparePacket>
 80047fc:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80047fe:	693b      	ldr	r3, [r7, #16]
 8004800:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	647b      	str	r3, [r7, #68]	@ 0x44
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681a      	ldr	r2, [r3, #0]
 800480a:	4b66      	ldr	r3, [pc, #408]	@ (80049a4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800480c:	691b      	ldr	r3, [r3, #16]
 800480e:	1ad3      	subs	r3, r2, r3
 8004810:	643b      	str	r3, [r7, #64]	@ 0x40
 8004812:	e00b      	b.n	800482c <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8004814:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004816:	b2da      	uxtb	r2, r3
 8004818:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800481a:	1c59      	adds	r1, r3, #1
 800481c:	6479      	str	r1, [r7, #68]	@ 0x44
 800481e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004822:	b2d2      	uxtb	r2, r2
 8004824:	701a      	strb	r2, [r3, #0]
 8004826:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004828:	09db      	lsrs	r3, r3, #7
 800482a:	643b      	str	r3, [r7, #64]	@ 0x40
 800482c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800482e:	2b7f      	cmp	r3, #127	@ 0x7f
 8004830:	d8f0      	bhi.n	8004814 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8004832:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004834:	1c5a      	adds	r2, r3, #1
 8004836:	647a      	str	r2, [r7, #68]	@ 0x44
 8004838:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800483a:	b2d2      	uxtb	r2, r2
 800483c:	701a      	strb	r2, [r3, #0]
 800483e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004840:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	689b      	ldr	r3, [r3, #8]
 800484a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800484c:	e00b      	b.n	8004866 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 800484e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004850:	b2da      	uxtb	r2, r3
 8004852:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004854:	1c59      	adds	r1, r3, #1
 8004856:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8004858:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800485c:	b2d2      	uxtb	r2, r2
 800485e:	701a      	strb	r2, [r3, #0]
 8004860:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004862:	09db      	lsrs	r3, r3, #7
 8004864:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004866:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004868:	2b7f      	cmp	r3, #127	@ 0x7f
 800486a:	d8f0      	bhi.n	800484e <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 800486c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800486e:	1c5a      	adds	r2, r3, #1
 8004870:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004872:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004874:	b2d2      	uxtb	r2, r2
 8004876:	701a      	strb	r2, [r3, #0]
 8004878:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800487a:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	2220      	movs	r2, #32
 8004882:	4619      	mov	r1, r3
 8004884:	68f8      	ldr	r0, [r7, #12]
 8004886:	f7ff fb55 	bl	8003f34 <_EncodeStr>
 800488a:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 800488c:	2209      	movs	r2, #9
 800488e:	68f9      	ldr	r1, [r7, #12]
 8004890:	6938      	ldr	r0, [r7, #16]
 8004892:	f7ff fc8d 	bl	80041b0 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	637b      	str	r3, [r7, #52]	@ 0x34
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681a      	ldr	r2, [r3, #0]
 80048a2:	4b40      	ldr	r3, [pc, #256]	@ (80049a4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80048a4:	691b      	ldr	r3, [r3, #16]
 80048a6:	1ad3      	subs	r3, r2, r3
 80048a8:	633b      	str	r3, [r7, #48]	@ 0x30
 80048aa:	e00b      	b.n	80048c4 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 80048ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048ae:	b2da      	uxtb	r2, r3
 80048b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048b2:	1c59      	adds	r1, r3, #1
 80048b4:	6379      	str	r1, [r7, #52]	@ 0x34
 80048b6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80048ba:	b2d2      	uxtb	r2, r2
 80048bc:	701a      	strb	r2, [r3, #0]
 80048be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048c0:	09db      	lsrs	r3, r3, #7
 80048c2:	633b      	str	r3, [r7, #48]	@ 0x30
 80048c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048c6:	2b7f      	cmp	r3, #127	@ 0x7f
 80048c8:	d8f0      	bhi.n	80048ac <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 80048ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048cc:	1c5a      	adds	r2, r3, #1
 80048ce:	637a      	str	r2, [r7, #52]	@ 0x34
 80048d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80048d2:	b2d2      	uxtb	r2, r2
 80048d4:	701a      	strb	r2, [r3, #0]
 80048d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048d8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	68db      	ldr	r3, [r3, #12]
 80048e2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80048e4:	e00b      	b.n	80048fe <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 80048e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048e8:	b2da      	uxtb	r2, r3
 80048ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048ec:	1c59      	adds	r1, r3, #1
 80048ee:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80048f0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80048f4:	b2d2      	uxtb	r2, r2
 80048f6:	701a      	strb	r2, [r3, #0]
 80048f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048fa:	09db      	lsrs	r3, r3, #7
 80048fc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80048fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004900:	2b7f      	cmp	r3, #127	@ 0x7f
 8004902:	d8f0      	bhi.n	80048e6 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8004904:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004906:	1c5a      	adds	r2, r3, #1
 8004908:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800490a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800490c:	b2d2      	uxtb	r2, r2
 800490e:	701a      	strb	r2, [r3, #0]
 8004910:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004912:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	627b      	str	r3, [r7, #36]	@ 0x24
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	691b      	ldr	r3, [r3, #16]
 800491c:	623b      	str	r3, [r7, #32]
 800491e:	e00b      	b.n	8004938 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8004920:	6a3b      	ldr	r3, [r7, #32]
 8004922:	b2da      	uxtb	r2, r3
 8004924:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004926:	1c59      	adds	r1, r3, #1
 8004928:	6279      	str	r1, [r7, #36]	@ 0x24
 800492a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800492e:	b2d2      	uxtb	r2, r2
 8004930:	701a      	strb	r2, [r3, #0]
 8004932:	6a3b      	ldr	r3, [r7, #32]
 8004934:	09db      	lsrs	r3, r3, #7
 8004936:	623b      	str	r3, [r7, #32]
 8004938:	6a3b      	ldr	r3, [r7, #32]
 800493a:	2b7f      	cmp	r3, #127	@ 0x7f
 800493c:	d8f0      	bhi.n	8004920 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 800493e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004940:	1c5a      	adds	r2, r3, #1
 8004942:	627a      	str	r2, [r7, #36]	@ 0x24
 8004944:	6a3a      	ldr	r2, [r7, #32]
 8004946:	b2d2      	uxtb	r2, r2
 8004948:	701a      	strb	r2, [r3, #0]
 800494a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800494c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	61fb      	str	r3, [r7, #28]
 8004952:	2300      	movs	r3, #0
 8004954:	61bb      	str	r3, [r7, #24]
 8004956:	e00b      	b.n	8004970 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8004958:	69bb      	ldr	r3, [r7, #24]
 800495a:	b2da      	uxtb	r2, r3
 800495c:	69fb      	ldr	r3, [r7, #28]
 800495e:	1c59      	adds	r1, r3, #1
 8004960:	61f9      	str	r1, [r7, #28]
 8004962:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004966:	b2d2      	uxtb	r2, r2
 8004968:	701a      	strb	r2, [r3, #0]
 800496a:	69bb      	ldr	r3, [r7, #24]
 800496c:	09db      	lsrs	r3, r3, #7
 800496e:	61bb      	str	r3, [r7, #24]
 8004970:	69bb      	ldr	r3, [r7, #24]
 8004972:	2b7f      	cmp	r3, #127	@ 0x7f
 8004974:	d8f0      	bhi.n	8004958 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8004976:	69fb      	ldr	r3, [r7, #28]
 8004978:	1c5a      	adds	r2, r3, #1
 800497a:	61fa      	str	r2, [r7, #28]
 800497c:	69ba      	ldr	r2, [r7, #24]
 800497e:	b2d2      	uxtb	r2, r2
 8004980:	701a      	strb	r2, [r3, #0]
 8004982:	69fb      	ldr	r3, [r7, #28]
 8004984:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8004986:	2215      	movs	r2, #21
 8004988:	68f9      	ldr	r1, [r7, #12]
 800498a:	6938      	ldr	r0, [r7, #16]
 800498c:	f7ff fc10 	bl	80041b0 <_SendPacket>
  RECORD_END();
 8004990:	697b      	ldr	r3, [r7, #20]
 8004992:	f383 8811 	msr	BASEPRI, r3
}
 8004996:	bf00      	nop
 8004998:	3748      	adds	r7, #72	@ 0x48
 800499a:	46bd      	mov	sp, r7
 800499c:	bd80      	pop	{r7, pc}
 800499e:	bf00      	nop
 80049a0:	20013378 	.word	0x20013378
 80049a4:	20013348 	.word	0x20013348

080049a8 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 80049a8:	b580      	push	{r7, lr}
 80049aa:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 80049ac:	4b07      	ldr	r3, [pc, #28]	@ (80049cc <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80049ae:	6a1b      	ldr	r3, [r3, #32]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d008      	beq.n	80049c6 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 80049b4:	4b05      	ldr	r3, [pc, #20]	@ (80049cc <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80049b6:	6a1b      	ldr	r3, [r3, #32]
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d003      	beq.n	80049c6 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 80049be:	4b03      	ldr	r3, [pc, #12]	@ (80049cc <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80049c0:	6a1b      	ldr	r3, [r3, #32]
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	4798      	blx	r3
  }
}
 80049c6:	bf00      	nop
 80049c8:	bd80      	pop	{r7, pc}
 80049ca:	bf00      	nop
 80049cc:	20013348 	.word	0x20013348

080049d0 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 80049d0:	b590      	push	{r4, r7, lr}
 80049d2:	b083      	sub	sp, #12
 80049d4:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 80049d6:	4b15      	ldr	r3, [pc, #84]	@ (8004a2c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80049d8:	6a1b      	ldr	r3, [r3, #32]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d01a      	beq.n	8004a14 <SEGGER_SYSVIEW_RecordSystime+0x44>
 80049de:	4b13      	ldr	r3, [pc, #76]	@ (8004a2c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80049e0:	6a1b      	ldr	r3, [r3, #32]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d015      	beq.n	8004a14 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 80049e8:	4b10      	ldr	r3, [pc, #64]	@ (8004a2c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80049ea:	6a1b      	ldr	r3, [r3, #32]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4798      	blx	r3
 80049f0:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80049f4:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 80049f6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80049fa:	f04f 0200 	mov.w	r2, #0
 80049fe:	f04f 0300 	mov.w	r3, #0
 8004a02:	000a      	movs	r2, r1
 8004a04:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8004a06:	4613      	mov	r3, r2
 8004a08:	461a      	mov	r2, r3
 8004a0a:	4621      	mov	r1, r4
 8004a0c:	200d      	movs	r0, #13
 8004a0e:	f7ff fd11 	bl	8004434 <SEGGER_SYSVIEW_RecordU32x2>
 8004a12:	e006      	b.n	8004a22 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8004a14:	4b06      	ldr	r3, [pc, #24]	@ (8004a30 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4619      	mov	r1, r3
 8004a1a:	200c      	movs	r0, #12
 8004a1c:	f7ff fcce 	bl	80043bc <SEGGER_SYSVIEW_RecordU32>
  }
}
 8004a20:	bf00      	nop
 8004a22:	bf00      	nop
 8004a24:	370c      	adds	r7, #12
 8004a26:	46bd      	mov	sp, r7
 8004a28:	bd90      	pop	{r4, r7, pc}
 8004a2a:	bf00      	nop
 8004a2c:	20013348 	.word	0x20013348
 8004a30:	e0001004 	.word	0xe0001004

08004a34 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b086      	sub	sp, #24
 8004a38:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004a3a:	f3ef 8311 	mrs	r3, BASEPRI
 8004a3e:	f04f 0120 	mov.w	r1, #32
 8004a42:	f381 8811 	msr	BASEPRI, r1
 8004a46:	60fb      	str	r3, [r7, #12]
 8004a48:	4819      	ldr	r0, [pc, #100]	@ (8004ab0 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8004a4a:	f7ff fac0 	bl	8003fce <_PreparePacket>
 8004a4e:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8004a54:	4b17      	ldr	r3, [pc, #92]	@ (8004ab4 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a5c:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	617b      	str	r3, [r7, #20]
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	613b      	str	r3, [r7, #16]
 8004a66:	e00b      	b.n	8004a80 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8004a68:	693b      	ldr	r3, [r7, #16]
 8004a6a:	b2da      	uxtb	r2, r3
 8004a6c:	697b      	ldr	r3, [r7, #20]
 8004a6e:	1c59      	adds	r1, r3, #1
 8004a70:	6179      	str	r1, [r7, #20]
 8004a72:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004a76:	b2d2      	uxtb	r2, r2
 8004a78:	701a      	strb	r2, [r3, #0]
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	09db      	lsrs	r3, r3, #7
 8004a7e:	613b      	str	r3, [r7, #16]
 8004a80:	693b      	ldr	r3, [r7, #16]
 8004a82:	2b7f      	cmp	r3, #127	@ 0x7f
 8004a84:	d8f0      	bhi.n	8004a68 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8004a86:	697b      	ldr	r3, [r7, #20]
 8004a88:	1c5a      	adds	r2, r3, #1
 8004a8a:	617a      	str	r2, [r7, #20]
 8004a8c:	693a      	ldr	r2, [r7, #16]
 8004a8e:	b2d2      	uxtb	r2, r2
 8004a90:	701a      	strb	r2, [r3, #0]
 8004a92:	697b      	ldr	r3, [r7, #20]
 8004a94:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8004a96:	2202      	movs	r2, #2
 8004a98:	6879      	ldr	r1, [r7, #4]
 8004a9a:	68b8      	ldr	r0, [r7, #8]
 8004a9c:	f7ff fb88 	bl	80041b0 <_SendPacket>
  RECORD_END();
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	f383 8811 	msr	BASEPRI, r3
}
 8004aa6:	bf00      	nop
 8004aa8:	3718      	adds	r7, #24
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bd80      	pop	{r7, pc}
 8004aae:	bf00      	nop
 8004ab0:	20013378 	.word	0x20013378
 8004ab4:	e000ed04 	.word	0xe000ed04

08004ab8 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b082      	sub	sp, #8
 8004abc:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004abe:	f3ef 8311 	mrs	r3, BASEPRI
 8004ac2:	f04f 0120 	mov.w	r1, #32
 8004ac6:	f381 8811 	msr	BASEPRI, r1
 8004aca:	607b      	str	r3, [r7, #4]
 8004acc:	4807      	ldr	r0, [pc, #28]	@ (8004aec <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8004ace:	f7ff fa7e 	bl	8003fce <_PreparePacket>
 8004ad2:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8004ad4:	2203      	movs	r2, #3
 8004ad6:	6839      	ldr	r1, [r7, #0]
 8004ad8:	6838      	ldr	r0, [r7, #0]
 8004ada:	f7ff fb69 	bl	80041b0 <_SendPacket>
  RECORD_END();
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	f383 8811 	msr	BASEPRI, r3
}
 8004ae4:	bf00      	nop
 8004ae6:	3708      	adds	r7, #8
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	bd80      	pop	{r7, pc}
 8004aec:	20013378 	.word	0x20013378

08004af0 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b082      	sub	sp, #8
 8004af4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004af6:	f3ef 8311 	mrs	r3, BASEPRI
 8004afa:	f04f 0120 	mov.w	r1, #32
 8004afe:	f381 8811 	msr	BASEPRI, r1
 8004b02:	607b      	str	r3, [r7, #4]
 8004b04:	4807      	ldr	r0, [pc, #28]	@ (8004b24 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8004b06:	f7ff fa62 	bl	8003fce <_PreparePacket>
 8004b0a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8004b0c:	2212      	movs	r2, #18
 8004b0e:	6839      	ldr	r1, [r7, #0]
 8004b10:	6838      	ldr	r0, [r7, #0]
 8004b12:	f7ff fb4d 	bl	80041b0 <_SendPacket>
  RECORD_END();
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	f383 8811 	msr	BASEPRI, r3
}
 8004b1c:	bf00      	nop
 8004b1e:	3708      	adds	r7, #8
 8004b20:	46bd      	mov	sp, r7
 8004b22:	bd80      	pop	{r7, pc}
 8004b24:	20013378 	.word	0x20013378

08004b28 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b082      	sub	sp, #8
 8004b2c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004b2e:	f3ef 8311 	mrs	r3, BASEPRI
 8004b32:	f04f 0120 	mov.w	r1, #32
 8004b36:	f381 8811 	msr	BASEPRI, r1
 8004b3a:	607b      	str	r3, [r7, #4]
 8004b3c:	4807      	ldr	r0, [pc, #28]	@ (8004b5c <SEGGER_SYSVIEW_OnIdle+0x34>)
 8004b3e:	f7ff fa46 	bl	8003fce <_PreparePacket>
 8004b42:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8004b44:	2211      	movs	r2, #17
 8004b46:	6839      	ldr	r1, [r7, #0]
 8004b48:	6838      	ldr	r0, [r7, #0]
 8004b4a:	f7ff fb31 	bl	80041b0 <_SendPacket>
  RECORD_END();
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	f383 8811 	msr	BASEPRI, r3
}
 8004b54:	bf00      	nop
 8004b56:	3708      	adds	r7, #8
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	bd80      	pop	{r7, pc}
 8004b5c:	20013378 	.word	0x20013378

08004b60 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b088      	sub	sp, #32
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004b68:	f3ef 8311 	mrs	r3, BASEPRI
 8004b6c:	f04f 0120 	mov.w	r1, #32
 8004b70:	f381 8811 	msr	BASEPRI, r1
 8004b74:	617b      	str	r3, [r7, #20]
 8004b76:	4819      	ldr	r0, [pc, #100]	@ (8004bdc <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8004b78:	f7ff fa29 	bl	8003fce <_PreparePacket>
 8004b7c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004b7e:	693b      	ldr	r3, [r7, #16]
 8004b80:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004b82:	4b17      	ldr	r3, [pc, #92]	@ (8004be0 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8004b84:	691b      	ldr	r3, [r3, #16]
 8004b86:	687a      	ldr	r2, [r7, #4]
 8004b88:	1ad3      	subs	r3, r2, r3
 8004b8a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	61fb      	str	r3, [r7, #28]
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	61bb      	str	r3, [r7, #24]
 8004b94:	e00b      	b.n	8004bae <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8004b96:	69bb      	ldr	r3, [r7, #24]
 8004b98:	b2da      	uxtb	r2, r3
 8004b9a:	69fb      	ldr	r3, [r7, #28]
 8004b9c:	1c59      	adds	r1, r3, #1
 8004b9e:	61f9      	str	r1, [r7, #28]
 8004ba0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004ba4:	b2d2      	uxtb	r2, r2
 8004ba6:	701a      	strb	r2, [r3, #0]
 8004ba8:	69bb      	ldr	r3, [r7, #24]
 8004baa:	09db      	lsrs	r3, r3, #7
 8004bac:	61bb      	str	r3, [r7, #24]
 8004bae:	69bb      	ldr	r3, [r7, #24]
 8004bb0:	2b7f      	cmp	r3, #127	@ 0x7f
 8004bb2:	d8f0      	bhi.n	8004b96 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8004bb4:	69fb      	ldr	r3, [r7, #28]
 8004bb6:	1c5a      	adds	r2, r3, #1
 8004bb8:	61fa      	str	r2, [r7, #28]
 8004bba:	69ba      	ldr	r2, [r7, #24]
 8004bbc:	b2d2      	uxtb	r2, r2
 8004bbe:	701a      	strb	r2, [r3, #0]
 8004bc0:	69fb      	ldr	r3, [r7, #28]
 8004bc2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8004bc4:	2208      	movs	r2, #8
 8004bc6:	68f9      	ldr	r1, [r7, #12]
 8004bc8:	6938      	ldr	r0, [r7, #16]
 8004bca:	f7ff faf1 	bl	80041b0 <_SendPacket>
  RECORD_END();
 8004bce:	697b      	ldr	r3, [r7, #20]
 8004bd0:	f383 8811 	msr	BASEPRI, r3
}
 8004bd4:	bf00      	nop
 8004bd6:	3720      	adds	r7, #32
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	bd80      	pop	{r7, pc}
 8004bdc:	20013378 	.word	0x20013378
 8004be0:	20013348 	.word	0x20013348

08004be4 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b088      	sub	sp, #32
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004bec:	f3ef 8311 	mrs	r3, BASEPRI
 8004bf0:	f04f 0120 	mov.w	r1, #32
 8004bf4:	f381 8811 	msr	BASEPRI, r1
 8004bf8:	617b      	str	r3, [r7, #20]
 8004bfa:	4819      	ldr	r0, [pc, #100]	@ (8004c60 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8004bfc:	f7ff f9e7 	bl	8003fce <_PreparePacket>
 8004c00:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004c02:	693b      	ldr	r3, [r7, #16]
 8004c04:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004c06:	4b17      	ldr	r3, [pc, #92]	@ (8004c64 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8004c08:	691b      	ldr	r3, [r3, #16]
 8004c0a:	687a      	ldr	r2, [r7, #4]
 8004c0c:	1ad3      	subs	r3, r2, r3
 8004c0e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	61fb      	str	r3, [r7, #28]
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	61bb      	str	r3, [r7, #24]
 8004c18:	e00b      	b.n	8004c32 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8004c1a:	69bb      	ldr	r3, [r7, #24]
 8004c1c:	b2da      	uxtb	r2, r3
 8004c1e:	69fb      	ldr	r3, [r7, #28]
 8004c20:	1c59      	adds	r1, r3, #1
 8004c22:	61f9      	str	r1, [r7, #28]
 8004c24:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004c28:	b2d2      	uxtb	r2, r2
 8004c2a:	701a      	strb	r2, [r3, #0]
 8004c2c:	69bb      	ldr	r3, [r7, #24]
 8004c2e:	09db      	lsrs	r3, r3, #7
 8004c30:	61bb      	str	r3, [r7, #24]
 8004c32:	69bb      	ldr	r3, [r7, #24]
 8004c34:	2b7f      	cmp	r3, #127	@ 0x7f
 8004c36:	d8f0      	bhi.n	8004c1a <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8004c38:	69fb      	ldr	r3, [r7, #28]
 8004c3a:	1c5a      	adds	r2, r3, #1
 8004c3c:	61fa      	str	r2, [r7, #28]
 8004c3e:	69ba      	ldr	r2, [r7, #24]
 8004c40:	b2d2      	uxtb	r2, r2
 8004c42:	701a      	strb	r2, [r3, #0]
 8004c44:	69fb      	ldr	r3, [r7, #28]
 8004c46:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8004c48:	2204      	movs	r2, #4
 8004c4a:	68f9      	ldr	r1, [r7, #12]
 8004c4c:	6938      	ldr	r0, [r7, #16]
 8004c4e:	f7ff faaf 	bl	80041b0 <_SendPacket>
  RECORD_END();
 8004c52:	697b      	ldr	r3, [r7, #20]
 8004c54:	f383 8811 	msr	BASEPRI, r3
}
 8004c58:	bf00      	nop
 8004c5a:	3720      	adds	r7, #32
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	bd80      	pop	{r7, pc}
 8004c60:	20013378 	.word	0x20013378
 8004c64:	20013348 	.word	0x20013348

08004c68 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b088      	sub	sp, #32
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004c70:	f3ef 8311 	mrs	r3, BASEPRI
 8004c74:	f04f 0120 	mov.w	r1, #32
 8004c78:	f381 8811 	msr	BASEPRI, r1
 8004c7c:	617b      	str	r3, [r7, #20]
 8004c7e:	4819      	ldr	r0, [pc, #100]	@ (8004ce4 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8004c80:	f7ff f9a5 	bl	8003fce <_PreparePacket>
 8004c84:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004c86:	693b      	ldr	r3, [r7, #16]
 8004c88:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004c8a:	4b17      	ldr	r3, [pc, #92]	@ (8004ce8 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8004c8c:	691b      	ldr	r3, [r3, #16]
 8004c8e:	687a      	ldr	r2, [r7, #4]
 8004c90:	1ad3      	subs	r3, r2, r3
 8004c92:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	61fb      	str	r3, [r7, #28]
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	61bb      	str	r3, [r7, #24]
 8004c9c:	e00b      	b.n	8004cb6 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8004c9e:	69bb      	ldr	r3, [r7, #24]
 8004ca0:	b2da      	uxtb	r2, r3
 8004ca2:	69fb      	ldr	r3, [r7, #28]
 8004ca4:	1c59      	adds	r1, r3, #1
 8004ca6:	61f9      	str	r1, [r7, #28]
 8004ca8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004cac:	b2d2      	uxtb	r2, r2
 8004cae:	701a      	strb	r2, [r3, #0]
 8004cb0:	69bb      	ldr	r3, [r7, #24]
 8004cb2:	09db      	lsrs	r3, r3, #7
 8004cb4:	61bb      	str	r3, [r7, #24]
 8004cb6:	69bb      	ldr	r3, [r7, #24]
 8004cb8:	2b7f      	cmp	r3, #127	@ 0x7f
 8004cba:	d8f0      	bhi.n	8004c9e <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8004cbc:	69fb      	ldr	r3, [r7, #28]
 8004cbe:	1c5a      	adds	r2, r3, #1
 8004cc0:	61fa      	str	r2, [r7, #28]
 8004cc2:	69ba      	ldr	r2, [r7, #24]
 8004cc4:	b2d2      	uxtb	r2, r2
 8004cc6:	701a      	strb	r2, [r3, #0]
 8004cc8:	69fb      	ldr	r3, [r7, #28]
 8004cca:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8004ccc:	2206      	movs	r2, #6
 8004cce:	68f9      	ldr	r1, [r7, #12]
 8004cd0:	6938      	ldr	r0, [r7, #16]
 8004cd2:	f7ff fa6d 	bl	80041b0 <_SendPacket>
  RECORD_END();
 8004cd6:	697b      	ldr	r3, [r7, #20]
 8004cd8:	f383 8811 	msr	BASEPRI, r3
}
 8004cdc:	bf00      	nop
 8004cde:	3720      	adds	r7, #32
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	bd80      	pop	{r7, pc}
 8004ce4:	20013378 	.word	0x20013378
 8004ce8:	20013348 	.word	0x20013348

08004cec <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b08c      	sub	sp, #48	@ 0x30
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8004cf6:	4b3b      	ldr	r3, [pc, #236]	@ (8004de4 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d06d      	beq.n	8004dda <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8004cfe:	4b39      	ldr	r3, [pc, #228]	@ (8004de4 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (n = 0; n < ModuleId; n++) {
 8004d04:	2300      	movs	r3, #0
 8004d06:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004d08:	e008      	b.n	8004d1c <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8004d0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d0c:	691b      	ldr	r3, [r3, #16]
 8004d0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (pModule == 0) {
 8004d10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d007      	beq.n	8004d26 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8004d16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d18:	3301      	adds	r3, #1
 8004d1a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004d1c:	79fb      	ldrb	r3, [r7, #7]
 8004d1e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004d20:	429a      	cmp	r2, r3
 8004d22:	d3f2      	bcc.n	8004d0a <SEGGER_SYSVIEW_SendModule+0x1e>
 8004d24:	e000      	b.n	8004d28 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8004d26:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8004d28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d055      	beq.n	8004dda <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004d2e:	f3ef 8311 	mrs	r3, BASEPRI
 8004d32:	f04f 0120 	mov.w	r1, #32
 8004d36:	f381 8811 	msr	BASEPRI, r1
 8004d3a:	617b      	str	r3, [r7, #20]
 8004d3c:	482a      	ldr	r0, [pc, #168]	@ (8004de8 <SEGGER_SYSVIEW_SendModule+0xfc>)
 8004d3e:	f7ff f946 	bl	8003fce <_PreparePacket>
 8004d42:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8004d44:	693b      	ldr	r3, [r7, #16]
 8004d46:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d4c:	79fb      	ldrb	r3, [r7, #7]
 8004d4e:	623b      	str	r3, [r7, #32]
 8004d50:	e00b      	b.n	8004d6a <SEGGER_SYSVIEW_SendModule+0x7e>
 8004d52:	6a3b      	ldr	r3, [r7, #32]
 8004d54:	b2da      	uxtb	r2, r3
 8004d56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d58:	1c59      	adds	r1, r3, #1
 8004d5a:	6279      	str	r1, [r7, #36]	@ 0x24
 8004d5c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004d60:	b2d2      	uxtb	r2, r2
 8004d62:	701a      	strb	r2, [r3, #0]
 8004d64:	6a3b      	ldr	r3, [r7, #32]
 8004d66:	09db      	lsrs	r3, r3, #7
 8004d68:	623b      	str	r3, [r7, #32]
 8004d6a:	6a3b      	ldr	r3, [r7, #32]
 8004d6c:	2b7f      	cmp	r3, #127	@ 0x7f
 8004d6e:	d8f0      	bhi.n	8004d52 <SEGGER_SYSVIEW_SendModule+0x66>
 8004d70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d72:	1c5a      	adds	r2, r3, #1
 8004d74:	627a      	str	r2, [r7, #36]	@ 0x24
 8004d76:	6a3a      	ldr	r2, [r7, #32]
 8004d78:	b2d2      	uxtb	r2, r2
 8004d7a:	701a      	strb	r2, [r3, #0]
 8004d7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d7e:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	61fb      	str	r3, [r7, #28]
 8004d84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d86:	689b      	ldr	r3, [r3, #8]
 8004d88:	61bb      	str	r3, [r7, #24]
 8004d8a:	e00b      	b.n	8004da4 <SEGGER_SYSVIEW_SendModule+0xb8>
 8004d8c:	69bb      	ldr	r3, [r7, #24]
 8004d8e:	b2da      	uxtb	r2, r3
 8004d90:	69fb      	ldr	r3, [r7, #28]
 8004d92:	1c59      	adds	r1, r3, #1
 8004d94:	61f9      	str	r1, [r7, #28]
 8004d96:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004d9a:	b2d2      	uxtb	r2, r2
 8004d9c:	701a      	strb	r2, [r3, #0]
 8004d9e:	69bb      	ldr	r3, [r7, #24]
 8004da0:	09db      	lsrs	r3, r3, #7
 8004da2:	61bb      	str	r3, [r7, #24]
 8004da4:	69bb      	ldr	r3, [r7, #24]
 8004da6:	2b7f      	cmp	r3, #127	@ 0x7f
 8004da8:	d8f0      	bhi.n	8004d8c <SEGGER_SYSVIEW_SendModule+0xa0>
 8004daa:	69fb      	ldr	r3, [r7, #28]
 8004dac:	1c5a      	adds	r2, r3, #1
 8004dae:	61fa      	str	r2, [r7, #28]
 8004db0:	69ba      	ldr	r2, [r7, #24]
 8004db2:	b2d2      	uxtb	r2, r2
 8004db4:	701a      	strb	r2, [r3, #0]
 8004db6:	69fb      	ldr	r3, [r7, #28]
 8004db8:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004dba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	2280      	movs	r2, #128	@ 0x80
 8004dc0:	4619      	mov	r1, r3
 8004dc2:	68f8      	ldr	r0, [r7, #12]
 8004dc4:	f7ff f8b6 	bl	8003f34 <_EncodeStr>
 8004dc8:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8004dca:	2216      	movs	r2, #22
 8004dcc:	68f9      	ldr	r1, [r7, #12]
 8004dce:	6938      	ldr	r0, [r7, #16]
 8004dd0:	f7ff f9ee 	bl	80041b0 <_SendPacket>
      RECORD_END();
 8004dd4:	697b      	ldr	r3, [r7, #20]
 8004dd6:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8004dda:	bf00      	nop
 8004ddc:	3730      	adds	r7, #48	@ 0x30
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bd80      	pop	{r7, pc}
 8004de2:	bf00      	nop
 8004de4:	20013370 	.word	0x20013370
 8004de8:	20013378 	.word	0x20013378

08004dec <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b082      	sub	sp, #8
 8004df0:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8004df2:	4b0c      	ldr	r3, [pc, #48]	@ (8004e24 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d00f      	beq.n	8004e1a <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8004dfa:	4b0a      	ldr	r3, [pc, #40]	@ (8004e24 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	68db      	ldr	r3, [r3, #12]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d002      	beq.n	8004e0e <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	68db      	ldr	r3, [r3, #12]
 8004e0c:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	691b      	ldr	r3, [r3, #16]
 8004e12:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d1f2      	bne.n	8004e00 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8004e1a:	bf00      	nop
 8004e1c:	3708      	adds	r7, #8
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd80      	pop	{r7, pc}
 8004e22:	bf00      	nop
 8004e24:	20013370 	.word	0x20013370

08004e28 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b086      	sub	sp, #24
 8004e2c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8004e2e:	f3ef 8311 	mrs	r3, BASEPRI
 8004e32:	f04f 0120 	mov.w	r1, #32
 8004e36:	f381 8811 	msr	BASEPRI, r1
 8004e3a:	60fb      	str	r3, [r7, #12]
 8004e3c:	4817      	ldr	r0, [pc, #92]	@ (8004e9c <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8004e3e:	f7ff f8c6 	bl	8003fce <_PreparePacket>
 8004e42:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	617b      	str	r3, [r7, #20]
 8004e4c:	4b14      	ldr	r3, [pc, #80]	@ (8004ea0 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8004e4e:	781b      	ldrb	r3, [r3, #0]
 8004e50:	613b      	str	r3, [r7, #16]
 8004e52:	e00b      	b.n	8004e6c <SEGGER_SYSVIEW_SendNumModules+0x44>
 8004e54:	693b      	ldr	r3, [r7, #16]
 8004e56:	b2da      	uxtb	r2, r3
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	1c59      	adds	r1, r3, #1
 8004e5c:	6179      	str	r1, [r7, #20]
 8004e5e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004e62:	b2d2      	uxtb	r2, r2
 8004e64:	701a      	strb	r2, [r3, #0]
 8004e66:	693b      	ldr	r3, [r7, #16]
 8004e68:	09db      	lsrs	r3, r3, #7
 8004e6a:	613b      	str	r3, [r7, #16]
 8004e6c:	693b      	ldr	r3, [r7, #16]
 8004e6e:	2b7f      	cmp	r3, #127	@ 0x7f
 8004e70:	d8f0      	bhi.n	8004e54 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8004e72:	697b      	ldr	r3, [r7, #20]
 8004e74:	1c5a      	adds	r2, r3, #1
 8004e76:	617a      	str	r2, [r7, #20]
 8004e78:	693a      	ldr	r2, [r7, #16]
 8004e7a:	b2d2      	uxtb	r2, r2
 8004e7c:	701a      	strb	r2, [r3, #0]
 8004e7e:	697b      	ldr	r3, [r7, #20]
 8004e80:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8004e82:	221b      	movs	r2, #27
 8004e84:	6879      	ldr	r1, [r7, #4]
 8004e86:	68b8      	ldr	r0, [r7, #8]
 8004e88:	f7ff f992 	bl	80041b0 <_SendPacket>
  RECORD_END();
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	f383 8811 	msr	BASEPRI, r3
}
 8004e92:	bf00      	nop
 8004e94:	3718      	adds	r7, #24
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bd80      	pop	{r7, pc}
 8004e9a:	bf00      	nop
 8004e9c:	20013378 	.word	0x20013378
 8004ea0:	20013374 	.word	0x20013374

08004ea4 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b08a      	sub	sp, #40	@ 0x28
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004eac:	f3ef 8311 	mrs	r3, BASEPRI
 8004eb0:	f04f 0120 	mov.w	r1, #32
 8004eb4:	f381 8811 	msr	BASEPRI, r1
 8004eb8:	617b      	str	r3, [r7, #20]
 8004eba:	4827      	ldr	r0, [pc, #156]	@ (8004f58 <SEGGER_SYSVIEW_Warn+0xb4>)
 8004ebc:	f7ff f887 	bl	8003fce <_PreparePacket>
 8004ec0:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004ec2:	2280      	movs	r2, #128	@ 0x80
 8004ec4:	6879      	ldr	r1, [r7, #4]
 8004ec6:	6938      	ldr	r0, [r7, #16]
 8004ec8:	f7ff f834 	bl	8003f34 <_EncodeStr>
 8004ecc:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	623b      	str	r3, [r7, #32]
 8004ed6:	e00b      	b.n	8004ef0 <SEGGER_SYSVIEW_Warn+0x4c>
 8004ed8:	6a3b      	ldr	r3, [r7, #32]
 8004eda:	b2da      	uxtb	r2, r3
 8004edc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ede:	1c59      	adds	r1, r3, #1
 8004ee0:	6279      	str	r1, [r7, #36]	@ 0x24
 8004ee2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004ee6:	b2d2      	uxtb	r2, r2
 8004ee8:	701a      	strb	r2, [r3, #0]
 8004eea:	6a3b      	ldr	r3, [r7, #32]
 8004eec:	09db      	lsrs	r3, r3, #7
 8004eee:	623b      	str	r3, [r7, #32]
 8004ef0:	6a3b      	ldr	r3, [r7, #32]
 8004ef2:	2b7f      	cmp	r3, #127	@ 0x7f
 8004ef4:	d8f0      	bhi.n	8004ed8 <SEGGER_SYSVIEW_Warn+0x34>
 8004ef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ef8:	1c5a      	adds	r2, r3, #1
 8004efa:	627a      	str	r2, [r7, #36]	@ 0x24
 8004efc:	6a3a      	ldr	r2, [r7, #32]
 8004efe:	b2d2      	uxtb	r2, r2
 8004f00:	701a      	strb	r2, [r3, #0]
 8004f02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f04:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	61fb      	str	r3, [r7, #28]
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	61bb      	str	r3, [r7, #24]
 8004f0e:	e00b      	b.n	8004f28 <SEGGER_SYSVIEW_Warn+0x84>
 8004f10:	69bb      	ldr	r3, [r7, #24]
 8004f12:	b2da      	uxtb	r2, r3
 8004f14:	69fb      	ldr	r3, [r7, #28]
 8004f16:	1c59      	adds	r1, r3, #1
 8004f18:	61f9      	str	r1, [r7, #28]
 8004f1a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004f1e:	b2d2      	uxtb	r2, r2
 8004f20:	701a      	strb	r2, [r3, #0]
 8004f22:	69bb      	ldr	r3, [r7, #24]
 8004f24:	09db      	lsrs	r3, r3, #7
 8004f26:	61bb      	str	r3, [r7, #24]
 8004f28:	69bb      	ldr	r3, [r7, #24]
 8004f2a:	2b7f      	cmp	r3, #127	@ 0x7f
 8004f2c:	d8f0      	bhi.n	8004f10 <SEGGER_SYSVIEW_Warn+0x6c>
 8004f2e:	69fb      	ldr	r3, [r7, #28]
 8004f30:	1c5a      	adds	r2, r3, #1
 8004f32:	61fa      	str	r2, [r7, #28]
 8004f34:	69ba      	ldr	r2, [r7, #24]
 8004f36:	b2d2      	uxtb	r2, r2
 8004f38:	701a      	strb	r2, [r3, #0]
 8004f3a:	69fb      	ldr	r3, [r7, #28]
 8004f3c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8004f3e:	221a      	movs	r2, #26
 8004f40:	68f9      	ldr	r1, [r7, #12]
 8004f42:	6938      	ldr	r0, [r7, #16]
 8004f44:	f7ff f934 	bl	80041b0 <_SendPacket>
  RECORD_END();
 8004f48:	697b      	ldr	r3, [r7, #20]
 8004f4a:	f383 8811 	msr	BASEPRI, r3
}
 8004f4e:	bf00      	nop
 8004f50:	3728      	adds	r7, #40	@ 0x28
 8004f52:	46bd      	mov	sp, r7
 8004f54:	bd80      	pop	{r7, pc}
 8004f56:	bf00      	nop
 8004f58:	20013378 	.word	0x20013378

08004f5c <memcmp>:
 8004f5c:	b510      	push	{r4, lr}
 8004f5e:	3901      	subs	r1, #1
 8004f60:	4402      	add	r2, r0
 8004f62:	4290      	cmp	r0, r2
 8004f64:	d101      	bne.n	8004f6a <memcmp+0xe>
 8004f66:	2000      	movs	r0, #0
 8004f68:	e005      	b.n	8004f76 <memcmp+0x1a>
 8004f6a:	7803      	ldrb	r3, [r0, #0]
 8004f6c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8004f70:	42a3      	cmp	r3, r4
 8004f72:	d001      	beq.n	8004f78 <memcmp+0x1c>
 8004f74:	1b18      	subs	r0, r3, r4
 8004f76:	bd10      	pop	{r4, pc}
 8004f78:	3001      	adds	r0, #1
 8004f7a:	e7f2      	b.n	8004f62 <memcmp+0x6>

08004f7c <memset>:
 8004f7c:	4402      	add	r2, r0
 8004f7e:	4603      	mov	r3, r0
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d100      	bne.n	8004f86 <memset+0xa>
 8004f84:	4770      	bx	lr
 8004f86:	f803 1b01 	strb.w	r1, [r3], #1
 8004f8a:	e7f9      	b.n	8004f80 <memset+0x4>

08004f8c <__libc_init_array>:
 8004f8c:	b570      	push	{r4, r5, r6, lr}
 8004f8e:	4d0d      	ldr	r5, [pc, #52]	@ (8004fc4 <__libc_init_array+0x38>)
 8004f90:	4c0d      	ldr	r4, [pc, #52]	@ (8004fc8 <__libc_init_array+0x3c>)
 8004f92:	1b64      	subs	r4, r4, r5
 8004f94:	10a4      	asrs	r4, r4, #2
 8004f96:	2600      	movs	r6, #0
 8004f98:	42a6      	cmp	r6, r4
 8004f9a:	d109      	bne.n	8004fb0 <__libc_init_array+0x24>
 8004f9c:	4d0b      	ldr	r5, [pc, #44]	@ (8004fcc <__libc_init_array+0x40>)
 8004f9e:	4c0c      	ldr	r4, [pc, #48]	@ (8004fd0 <__libc_init_array+0x44>)
 8004fa0:	f000 f826 	bl	8004ff0 <_init>
 8004fa4:	1b64      	subs	r4, r4, r5
 8004fa6:	10a4      	asrs	r4, r4, #2
 8004fa8:	2600      	movs	r6, #0
 8004faa:	42a6      	cmp	r6, r4
 8004fac:	d105      	bne.n	8004fba <__libc_init_array+0x2e>
 8004fae:	bd70      	pop	{r4, r5, r6, pc}
 8004fb0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fb4:	4798      	blx	r3
 8004fb6:	3601      	adds	r6, #1
 8004fb8:	e7ee      	b.n	8004f98 <__libc_init_array+0xc>
 8004fba:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fbe:	4798      	blx	r3
 8004fc0:	3601      	adds	r6, #1
 8004fc2:	e7f2      	b.n	8004faa <__libc_init_array+0x1e>
 8004fc4:	080050b8 	.word	0x080050b8
 8004fc8:	080050b8 	.word	0x080050b8
 8004fcc:	080050b8 	.word	0x080050b8
 8004fd0:	080050bc 	.word	0x080050bc

08004fd4 <memcpy>:
 8004fd4:	440a      	add	r2, r1
 8004fd6:	4291      	cmp	r1, r2
 8004fd8:	f100 33ff 	add.w	r3, r0, #4294967295
 8004fdc:	d100      	bne.n	8004fe0 <memcpy+0xc>
 8004fde:	4770      	bx	lr
 8004fe0:	b510      	push	{r4, lr}
 8004fe2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004fe6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004fea:	4291      	cmp	r1, r2
 8004fec:	d1f9      	bne.n	8004fe2 <memcpy+0xe>
 8004fee:	bd10      	pop	{r4, pc}

08004ff0 <_init>:
 8004ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ff2:	bf00      	nop
 8004ff4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ff6:	bc08      	pop	{r3}
 8004ff8:	469e      	mov	lr, r3
 8004ffa:	4770      	bx	lr

08004ffc <_fini>:
 8004ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ffe:	bf00      	nop
 8005000:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005002:	bc08      	pop	{r3}
 8005004:	469e      	mov	lr, r3
 8005006:	4770      	bx	lr
