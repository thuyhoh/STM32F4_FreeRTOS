
001Tasks.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006184  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000018c  08006314  08006314  00007314  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080064a0  080064a0  0000806c  2**0
                  CONTENTS
  4 .ARM          00000008  080064a0  080064a0  000074a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080064a8  080064a8  0000806c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080064a8  080064a8  000074a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080064ac  080064ac  000074ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  080064b0  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00014558  2000006c  0800651c  0000806c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200145c4  0800651c  000085c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000806c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010909  00000000  00000000  0000809c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ae6  00000000  00000000  000189a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010e8  00000000  00000000  0001b490  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cde  00000000  00000000  0001c578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002332f  00000000  00000000  0001d256  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012af6  00000000  00000000  00040585  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d4a46  00000000  00000000  0005307b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00127ac1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b20  00000000  00000000  00127b04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a4  00000000  00000000  0012c624  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080062fc 	.word	0x080062fc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	080062fc 	.word	0x080062fc

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	@ 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	20012ea4 	.word	0x20012ea4
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b96a 	b.w	80005fc <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9d08      	ldr	r5, [sp, #32]
 8000346:	460c      	mov	r4, r1
 8000348:	2b00      	cmp	r3, #0
 800034a:	d14e      	bne.n	80003ea <__udivmoddi4+0xaa>
 800034c:	4694      	mov	ip, r2
 800034e:	458c      	cmp	ip, r1
 8000350:	4686      	mov	lr, r0
 8000352:	fab2 f282 	clz	r2, r2
 8000356:	d962      	bls.n	800041e <__udivmoddi4+0xde>
 8000358:	b14a      	cbz	r2, 800036e <__udivmoddi4+0x2e>
 800035a:	f1c2 0320 	rsb	r3, r2, #32
 800035e:	4091      	lsls	r1, r2
 8000360:	fa20 f303 	lsr.w	r3, r0, r3
 8000364:	fa0c fc02 	lsl.w	ip, ip, r2
 8000368:	4319      	orrs	r1, r3
 800036a:	fa00 fe02 	lsl.w	lr, r0, r2
 800036e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000372:	fa1f f68c 	uxth.w	r6, ip
 8000376:	fbb1 f4f7 	udiv	r4, r1, r7
 800037a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800037e:	fb07 1114 	mls	r1, r7, r4, r1
 8000382:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000386:	fb04 f106 	mul.w	r1, r4, r6
 800038a:	4299      	cmp	r1, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x64>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f104 30ff 	add.w	r0, r4, #4294967295
 8000396:	f080 8112 	bcs.w	80005be <__udivmoddi4+0x27e>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 810f 	bls.w	80005be <__udivmoddi4+0x27e>
 80003a0:	3c02      	subs	r4, #2
 80003a2:	4463      	add	r3, ip
 80003a4:	1a59      	subs	r1, r3, r1
 80003a6:	fa1f f38e 	uxth.w	r3, lr
 80003aa:	fbb1 f0f7 	udiv	r0, r1, r7
 80003ae:	fb07 1110 	mls	r1, r7, r0, r1
 80003b2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b6:	fb00 f606 	mul.w	r6, r0, r6
 80003ba:	429e      	cmp	r6, r3
 80003bc:	d90a      	bls.n	80003d4 <__udivmoddi4+0x94>
 80003be:	eb1c 0303 	adds.w	r3, ip, r3
 80003c2:	f100 31ff 	add.w	r1, r0, #4294967295
 80003c6:	f080 80fc 	bcs.w	80005c2 <__udivmoddi4+0x282>
 80003ca:	429e      	cmp	r6, r3
 80003cc:	f240 80f9 	bls.w	80005c2 <__udivmoddi4+0x282>
 80003d0:	4463      	add	r3, ip
 80003d2:	3802      	subs	r0, #2
 80003d4:	1b9b      	subs	r3, r3, r6
 80003d6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003da:	2100      	movs	r1, #0
 80003dc:	b11d      	cbz	r5, 80003e6 <__udivmoddi4+0xa6>
 80003de:	40d3      	lsrs	r3, r2
 80003e0:	2200      	movs	r2, #0
 80003e2:	e9c5 3200 	strd	r3, r2, [r5]
 80003e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d905      	bls.n	80003fa <__udivmoddi4+0xba>
 80003ee:	b10d      	cbz	r5, 80003f4 <__udivmoddi4+0xb4>
 80003f0:	e9c5 0100 	strd	r0, r1, [r5]
 80003f4:	2100      	movs	r1, #0
 80003f6:	4608      	mov	r0, r1
 80003f8:	e7f5      	b.n	80003e6 <__udivmoddi4+0xa6>
 80003fa:	fab3 f183 	clz	r1, r3
 80003fe:	2900      	cmp	r1, #0
 8000400:	d146      	bne.n	8000490 <__udivmoddi4+0x150>
 8000402:	42a3      	cmp	r3, r4
 8000404:	d302      	bcc.n	800040c <__udivmoddi4+0xcc>
 8000406:	4290      	cmp	r0, r2
 8000408:	f0c0 80f0 	bcc.w	80005ec <__udivmoddi4+0x2ac>
 800040c:	1a86      	subs	r6, r0, r2
 800040e:	eb64 0303 	sbc.w	r3, r4, r3
 8000412:	2001      	movs	r0, #1
 8000414:	2d00      	cmp	r5, #0
 8000416:	d0e6      	beq.n	80003e6 <__udivmoddi4+0xa6>
 8000418:	e9c5 6300 	strd	r6, r3, [r5]
 800041c:	e7e3      	b.n	80003e6 <__udivmoddi4+0xa6>
 800041e:	2a00      	cmp	r2, #0
 8000420:	f040 8090 	bne.w	8000544 <__udivmoddi4+0x204>
 8000424:	eba1 040c 	sub.w	r4, r1, ip
 8000428:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800042c:	fa1f f78c 	uxth.w	r7, ip
 8000430:	2101      	movs	r1, #1
 8000432:	fbb4 f6f8 	udiv	r6, r4, r8
 8000436:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800043a:	fb08 4416 	mls	r4, r8, r6, r4
 800043e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000442:	fb07 f006 	mul.w	r0, r7, r6
 8000446:	4298      	cmp	r0, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x11c>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000452:	d202      	bcs.n	800045a <__udivmoddi4+0x11a>
 8000454:	4298      	cmp	r0, r3
 8000456:	f200 80cd 	bhi.w	80005f4 <__udivmoddi4+0x2b4>
 800045a:	4626      	mov	r6, r4
 800045c:	1a1c      	subs	r4, r3, r0
 800045e:	fa1f f38e 	uxth.w	r3, lr
 8000462:	fbb4 f0f8 	udiv	r0, r4, r8
 8000466:	fb08 4410 	mls	r4, r8, r0, r4
 800046a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800046e:	fb00 f707 	mul.w	r7, r0, r7
 8000472:	429f      	cmp	r7, r3
 8000474:	d908      	bls.n	8000488 <__udivmoddi4+0x148>
 8000476:	eb1c 0303 	adds.w	r3, ip, r3
 800047a:	f100 34ff 	add.w	r4, r0, #4294967295
 800047e:	d202      	bcs.n	8000486 <__udivmoddi4+0x146>
 8000480:	429f      	cmp	r7, r3
 8000482:	f200 80b0 	bhi.w	80005e6 <__udivmoddi4+0x2a6>
 8000486:	4620      	mov	r0, r4
 8000488:	1bdb      	subs	r3, r3, r7
 800048a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800048e:	e7a5      	b.n	80003dc <__udivmoddi4+0x9c>
 8000490:	f1c1 0620 	rsb	r6, r1, #32
 8000494:	408b      	lsls	r3, r1
 8000496:	fa22 f706 	lsr.w	r7, r2, r6
 800049a:	431f      	orrs	r7, r3
 800049c:	fa20 fc06 	lsr.w	ip, r0, r6
 80004a0:	fa04 f301 	lsl.w	r3, r4, r1
 80004a4:	ea43 030c 	orr.w	r3, r3, ip
 80004a8:	40f4      	lsrs	r4, r6
 80004aa:	fa00 f801 	lsl.w	r8, r0, r1
 80004ae:	0c38      	lsrs	r0, r7, #16
 80004b0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80004b4:	fbb4 fef0 	udiv	lr, r4, r0
 80004b8:	fa1f fc87 	uxth.w	ip, r7
 80004bc:	fb00 441e 	mls	r4, r0, lr, r4
 80004c0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c4:	fb0e f90c 	mul.w	r9, lr, ip
 80004c8:	45a1      	cmp	r9, r4
 80004ca:	fa02 f201 	lsl.w	r2, r2, r1
 80004ce:	d90a      	bls.n	80004e6 <__udivmoddi4+0x1a6>
 80004d0:	193c      	adds	r4, r7, r4
 80004d2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004d6:	f080 8084 	bcs.w	80005e2 <__udivmoddi4+0x2a2>
 80004da:	45a1      	cmp	r9, r4
 80004dc:	f240 8081 	bls.w	80005e2 <__udivmoddi4+0x2a2>
 80004e0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004e4:	443c      	add	r4, r7
 80004e6:	eba4 0409 	sub.w	r4, r4, r9
 80004ea:	fa1f f983 	uxth.w	r9, r3
 80004ee:	fbb4 f3f0 	udiv	r3, r4, r0
 80004f2:	fb00 4413 	mls	r4, r0, r3, r4
 80004f6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004fa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004fe:	45a4      	cmp	ip, r4
 8000500:	d907      	bls.n	8000512 <__udivmoddi4+0x1d2>
 8000502:	193c      	adds	r4, r7, r4
 8000504:	f103 30ff 	add.w	r0, r3, #4294967295
 8000508:	d267      	bcs.n	80005da <__udivmoddi4+0x29a>
 800050a:	45a4      	cmp	ip, r4
 800050c:	d965      	bls.n	80005da <__udivmoddi4+0x29a>
 800050e:	3b02      	subs	r3, #2
 8000510:	443c      	add	r4, r7
 8000512:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000516:	fba0 9302 	umull	r9, r3, r0, r2
 800051a:	eba4 040c 	sub.w	r4, r4, ip
 800051e:	429c      	cmp	r4, r3
 8000520:	46ce      	mov	lr, r9
 8000522:	469c      	mov	ip, r3
 8000524:	d351      	bcc.n	80005ca <__udivmoddi4+0x28a>
 8000526:	d04e      	beq.n	80005c6 <__udivmoddi4+0x286>
 8000528:	b155      	cbz	r5, 8000540 <__udivmoddi4+0x200>
 800052a:	ebb8 030e 	subs.w	r3, r8, lr
 800052e:	eb64 040c 	sbc.w	r4, r4, ip
 8000532:	fa04 f606 	lsl.w	r6, r4, r6
 8000536:	40cb      	lsrs	r3, r1
 8000538:	431e      	orrs	r6, r3
 800053a:	40cc      	lsrs	r4, r1
 800053c:	e9c5 6400 	strd	r6, r4, [r5]
 8000540:	2100      	movs	r1, #0
 8000542:	e750      	b.n	80003e6 <__udivmoddi4+0xa6>
 8000544:	f1c2 0320 	rsb	r3, r2, #32
 8000548:	fa20 f103 	lsr.w	r1, r0, r3
 800054c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000550:	fa24 f303 	lsr.w	r3, r4, r3
 8000554:	4094      	lsls	r4, r2
 8000556:	430c      	orrs	r4, r1
 8000558:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800055c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000560:	fa1f f78c 	uxth.w	r7, ip
 8000564:	fbb3 f0f8 	udiv	r0, r3, r8
 8000568:	fb08 3110 	mls	r1, r8, r0, r3
 800056c:	0c23      	lsrs	r3, r4, #16
 800056e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000572:	fb00 f107 	mul.w	r1, r0, r7
 8000576:	4299      	cmp	r1, r3
 8000578:	d908      	bls.n	800058c <__udivmoddi4+0x24c>
 800057a:	eb1c 0303 	adds.w	r3, ip, r3
 800057e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000582:	d22c      	bcs.n	80005de <__udivmoddi4+0x29e>
 8000584:	4299      	cmp	r1, r3
 8000586:	d92a      	bls.n	80005de <__udivmoddi4+0x29e>
 8000588:	3802      	subs	r0, #2
 800058a:	4463      	add	r3, ip
 800058c:	1a5b      	subs	r3, r3, r1
 800058e:	b2a4      	uxth	r4, r4
 8000590:	fbb3 f1f8 	udiv	r1, r3, r8
 8000594:	fb08 3311 	mls	r3, r8, r1, r3
 8000598:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800059c:	fb01 f307 	mul.w	r3, r1, r7
 80005a0:	42a3      	cmp	r3, r4
 80005a2:	d908      	bls.n	80005b6 <__udivmoddi4+0x276>
 80005a4:	eb1c 0404 	adds.w	r4, ip, r4
 80005a8:	f101 36ff 	add.w	r6, r1, #4294967295
 80005ac:	d213      	bcs.n	80005d6 <__udivmoddi4+0x296>
 80005ae:	42a3      	cmp	r3, r4
 80005b0:	d911      	bls.n	80005d6 <__udivmoddi4+0x296>
 80005b2:	3902      	subs	r1, #2
 80005b4:	4464      	add	r4, ip
 80005b6:	1ae4      	subs	r4, r4, r3
 80005b8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80005bc:	e739      	b.n	8000432 <__udivmoddi4+0xf2>
 80005be:	4604      	mov	r4, r0
 80005c0:	e6f0      	b.n	80003a4 <__udivmoddi4+0x64>
 80005c2:	4608      	mov	r0, r1
 80005c4:	e706      	b.n	80003d4 <__udivmoddi4+0x94>
 80005c6:	45c8      	cmp	r8, r9
 80005c8:	d2ae      	bcs.n	8000528 <__udivmoddi4+0x1e8>
 80005ca:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ce:	eb63 0c07 	sbc.w	ip, r3, r7
 80005d2:	3801      	subs	r0, #1
 80005d4:	e7a8      	b.n	8000528 <__udivmoddi4+0x1e8>
 80005d6:	4631      	mov	r1, r6
 80005d8:	e7ed      	b.n	80005b6 <__udivmoddi4+0x276>
 80005da:	4603      	mov	r3, r0
 80005dc:	e799      	b.n	8000512 <__udivmoddi4+0x1d2>
 80005de:	4630      	mov	r0, r6
 80005e0:	e7d4      	b.n	800058c <__udivmoddi4+0x24c>
 80005e2:	46d6      	mov	lr, sl
 80005e4:	e77f      	b.n	80004e6 <__udivmoddi4+0x1a6>
 80005e6:	4463      	add	r3, ip
 80005e8:	3802      	subs	r0, #2
 80005ea:	e74d      	b.n	8000488 <__udivmoddi4+0x148>
 80005ec:	4606      	mov	r6, r0
 80005ee:	4623      	mov	r3, r4
 80005f0:	4608      	mov	r0, r1
 80005f2:	e70f      	b.n	8000414 <__udivmoddi4+0xd4>
 80005f4:	3e02      	subs	r6, #2
 80005f6:	4463      	add	r3, ip
 80005f8:	e730      	b.n	800045c <__udivmoddi4+0x11c>
 80005fa:	bf00      	nop

080005fc <__aeabi_idiv0>:
 80005fc:	4770      	bx	lr
 80005fe:	bf00      	nop

08000600 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b088      	sub	sp, #32
 8000604:	af02      	add	r7, sp, #8
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000606:	f000 fb65 	bl	8000cd4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800060a:	f000 f859 	bl	80006c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800060e:	f000 f8c1 	bl	8000794 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */


  //Enable the CYCCNT counter.
  DWT_CTRL |= ( 1 << 0);
 8000612:	4b23      	ldr	r3, [pc, #140]	@ (80006a0 <main+0xa0>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	4a22      	ldr	r2, [pc, #136]	@ (80006a0 <main+0xa0>)
 8000618:	f043 0301 	orr.w	r3, r3, #1
 800061c:	6013      	str	r3, [r2, #0]

  SEGGER_UART_init(500000);
 800061e:	4821      	ldr	r0, [pc, #132]	@ (80006a4 <main+0xa4>)
 8000620:	f003 f8bc 	bl	800379c <SEGGER_UART_init>

  SEGGER_SYSVIEW_Conf();
 8000624:	f002 fee4 	bl	80033f0 <SEGGER_SYSVIEW_Conf>

  SEGGER_SYSVIEW_Start();
 8000628:	f004 fbfc 	bl	8004e24 <SEGGER_SYSVIEW_Start>

  status = xTaskCreate(task1_handler, "Task-1", 200, "Hello world from Task-1", 2, &task1_handle);
 800062c:	f107 0308 	add.w	r3, r7, #8
 8000630:	9301      	str	r3, [sp, #4]
 8000632:	2302      	movs	r3, #2
 8000634:	9300      	str	r3, [sp, #0]
 8000636:	4b1c      	ldr	r3, [pc, #112]	@ (80006a8 <main+0xa8>)
 8000638:	22c8      	movs	r2, #200	@ 0xc8
 800063a:	491c      	ldr	r1, [pc, #112]	@ (80006ac <main+0xac>)
 800063c:	481c      	ldr	r0, [pc, #112]	@ (80006b0 <main+0xb0>)
 800063e:	f001 fd88 	bl	8002152 <xTaskCreate>
 8000642:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 8000644:	697b      	ldr	r3, [r7, #20]
 8000646:	2b01      	cmp	r3, #1
 8000648:	d00b      	beq.n	8000662 <main+0x62>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 800064a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800064e:	f383 8811 	msr	BASEPRI, r3
 8000652:	f3bf 8f6f 	isb	sy
 8000656:	f3bf 8f4f 	dsb	sy
 800065a:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 800065c:	bf00      	nop
 800065e:	bf00      	nop
 8000660:	e7fd      	b.n	800065e <main+0x5e>

  status = xTaskCreate(task2_handler, "Task-2", 200, "Hello world from Task-2", 2, &task2_handle);
 8000662:	1d3b      	adds	r3, r7, #4
 8000664:	9301      	str	r3, [sp, #4]
 8000666:	2302      	movs	r3, #2
 8000668:	9300      	str	r3, [sp, #0]
 800066a:	4b12      	ldr	r3, [pc, #72]	@ (80006b4 <main+0xb4>)
 800066c:	22c8      	movs	r2, #200	@ 0xc8
 800066e:	4912      	ldr	r1, [pc, #72]	@ (80006b8 <main+0xb8>)
 8000670:	4812      	ldr	r0, [pc, #72]	@ (80006bc <main+0xbc>)
 8000672:	f001 fd6e 	bl	8002152 <xTaskCreate>
 8000676:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 8000678:	697b      	ldr	r3, [r7, #20]
 800067a:	2b01      	cmp	r3, #1
 800067c:	d00b      	beq.n	8000696 <main+0x96>
        __asm volatile
 800067e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000682:	f383 8811 	msr	BASEPRI, r3
 8000686:	f3bf 8f6f 	isb	sy
 800068a:	f3bf 8f4f 	dsb	sy
 800068e:	60fb      	str	r3, [r7, #12]
    }
 8000690:	bf00      	nop
 8000692:	bf00      	nop
 8000694:	e7fd      	b.n	8000692 <main+0x92>

  //start the freeRTOS scheduler
  vTaskStartScheduler();
 8000696:	f001 fec1 	bl	800241c <vTaskStartScheduler>
 
 

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800069a:	bf00      	nop
 800069c:	e7fd      	b.n	800069a <main+0x9a>
 800069e:	bf00      	nop
 80006a0:	e0001000 	.word	0xe0001000
 80006a4:	0007a120 	.word	0x0007a120
 80006a8:	08006314 	.word	0x08006314
 80006ac:	0800632c 	.word	0x0800632c
 80006b0:	08000a55 	.word	0x08000a55
 80006b4:	08006334 	.word	0x08006334
 80006b8:	0800634c 	.word	0x0800634c
 80006bc:	08000a91 	.word	0x08000a91

080006c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b094      	sub	sp, #80	@ 0x50
 80006c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006c6:	f107 0320 	add.w	r3, r7, #32
 80006ca:	2230      	movs	r2, #48	@ 0x30
 80006cc:	2100      	movs	r1, #0
 80006ce:	4618      	mov	r0, r3
 80006d0:	f005 f98c 	bl	80059ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d4:	f107 030c 	add.w	r3, r7, #12
 80006d8:	2200      	movs	r2, #0
 80006da:	601a      	str	r2, [r3, #0]
 80006dc:	605a      	str	r2, [r3, #4]
 80006de:	609a      	str	r2, [r3, #8]
 80006e0:	60da      	str	r2, [r3, #12]
 80006e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006e4:	2300      	movs	r3, #0
 80006e6:	60bb      	str	r3, [r7, #8]
 80006e8:	4b28      	ldr	r3, [pc, #160]	@ (800078c <SystemClock_Config+0xcc>)
 80006ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006ec:	4a27      	ldr	r2, [pc, #156]	@ (800078c <SystemClock_Config+0xcc>)
 80006ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006f2:	6413      	str	r3, [r2, #64]	@ 0x40
 80006f4:	4b25      	ldr	r3, [pc, #148]	@ (800078c <SystemClock_Config+0xcc>)
 80006f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006fc:	60bb      	str	r3, [r7, #8]
 80006fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000700:	2300      	movs	r3, #0
 8000702:	607b      	str	r3, [r7, #4]
 8000704:	4b22      	ldr	r3, [pc, #136]	@ (8000790 <SystemClock_Config+0xd0>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	4a21      	ldr	r2, [pc, #132]	@ (8000790 <SystemClock_Config+0xd0>)
 800070a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800070e:	6013      	str	r3, [r2, #0]
 8000710:	4b1f      	ldr	r3, [pc, #124]	@ (8000790 <SystemClock_Config+0xd0>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000718:	607b      	str	r3, [r7, #4]
 800071a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800071c:	2302      	movs	r3, #2
 800071e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000720:	2301      	movs	r3, #1
 8000722:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000724:	2310      	movs	r3, #16
 8000726:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000728:	2302      	movs	r3, #2
 800072a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800072c:	2300      	movs	r3, #0
 800072e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000730:	2308      	movs	r3, #8
 8000732:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000734:	23a8      	movs	r3, #168	@ 0xa8
 8000736:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000738:	2302      	movs	r3, #2
 800073a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800073c:	2307      	movs	r3, #7
 800073e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000740:	f107 0320 	add.w	r3, r7, #32
 8000744:	4618      	mov	r0, r3
 8000746:	f000 fd9f 	bl	8001288 <HAL_RCC_OscConfig>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000750:	f000 f9ce 	bl	8000af0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000754:	230f      	movs	r3, #15
 8000756:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000758:	2302      	movs	r3, #2
 800075a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800075c:	2300      	movs	r3, #0
 800075e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000760:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000764:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000766:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800076a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800076c:	f107 030c 	add.w	r3, r7, #12
 8000770:	2105      	movs	r1, #5
 8000772:	4618      	mov	r0, r3
 8000774:	f000 fff6 	bl	8001764 <HAL_RCC_ClockConfig>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800077e:	f000 f9b7 	bl	8000af0 <Error_Handler>
  }
}
 8000782:	bf00      	nop
 8000784:	3750      	adds	r7, #80	@ 0x50
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	40023800 	.word	0x40023800
 8000790:	40007000 	.word	0x40007000

08000794 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b08c      	sub	sp, #48	@ 0x30
 8000798:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800079a:	f107 031c 	add.w	r3, r7, #28
 800079e:	2200      	movs	r2, #0
 80007a0:	601a      	str	r2, [r3, #0]
 80007a2:	605a      	str	r2, [r3, #4]
 80007a4:	609a      	str	r2, [r3, #8]
 80007a6:	60da      	str	r2, [r3, #12]
 80007a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007aa:	2300      	movs	r3, #0
 80007ac:	61bb      	str	r3, [r7, #24]
 80007ae:	4ba1      	ldr	r3, [pc, #644]	@ (8000a34 <MX_GPIO_Init+0x2a0>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007b2:	4aa0      	ldr	r2, [pc, #640]	@ (8000a34 <MX_GPIO_Init+0x2a0>)
 80007b4:	f043 0310 	orr.w	r3, r3, #16
 80007b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ba:	4b9e      	ldr	r3, [pc, #632]	@ (8000a34 <MX_GPIO_Init+0x2a0>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007be:	f003 0310 	and.w	r3, r3, #16
 80007c2:	61bb      	str	r3, [r7, #24]
 80007c4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007c6:	2300      	movs	r3, #0
 80007c8:	617b      	str	r3, [r7, #20]
 80007ca:	4b9a      	ldr	r3, [pc, #616]	@ (8000a34 <MX_GPIO_Init+0x2a0>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ce:	4a99      	ldr	r2, [pc, #612]	@ (8000a34 <MX_GPIO_Init+0x2a0>)
 80007d0:	f043 0304 	orr.w	r3, r3, #4
 80007d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007d6:	4b97      	ldr	r3, [pc, #604]	@ (8000a34 <MX_GPIO_Init+0x2a0>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007da:	f003 0304 	and.w	r3, r3, #4
 80007de:	617b      	str	r3, [r7, #20]
 80007e0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007e2:	2300      	movs	r3, #0
 80007e4:	613b      	str	r3, [r7, #16]
 80007e6:	4b93      	ldr	r3, [pc, #588]	@ (8000a34 <MX_GPIO_Init+0x2a0>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ea:	4a92      	ldr	r2, [pc, #584]	@ (8000a34 <MX_GPIO_Init+0x2a0>)
 80007ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007f2:	4b90      	ldr	r3, [pc, #576]	@ (8000a34 <MX_GPIO_Init+0x2a0>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007fa:	613b      	str	r3, [r7, #16]
 80007fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007fe:	2300      	movs	r3, #0
 8000800:	60fb      	str	r3, [r7, #12]
 8000802:	4b8c      	ldr	r3, [pc, #560]	@ (8000a34 <MX_GPIO_Init+0x2a0>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000806:	4a8b      	ldr	r2, [pc, #556]	@ (8000a34 <MX_GPIO_Init+0x2a0>)
 8000808:	f043 0301 	orr.w	r3, r3, #1
 800080c:	6313      	str	r3, [r2, #48]	@ 0x30
 800080e:	4b89      	ldr	r3, [pc, #548]	@ (8000a34 <MX_GPIO_Init+0x2a0>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000812:	f003 0301 	and.w	r3, r3, #1
 8000816:	60fb      	str	r3, [r7, #12]
 8000818:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800081a:	2300      	movs	r3, #0
 800081c:	60bb      	str	r3, [r7, #8]
 800081e:	4b85      	ldr	r3, [pc, #532]	@ (8000a34 <MX_GPIO_Init+0x2a0>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000822:	4a84      	ldr	r2, [pc, #528]	@ (8000a34 <MX_GPIO_Init+0x2a0>)
 8000824:	f043 0302 	orr.w	r3, r3, #2
 8000828:	6313      	str	r3, [r2, #48]	@ 0x30
 800082a:	4b82      	ldr	r3, [pc, #520]	@ (8000a34 <MX_GPIO_Init+0x2a0>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082e:	f003 0302 	and.w	r3, r3, #2
 8000832:	60bb      	str	r3, [r7, #8]
 8000834:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000836:	2300      	movs	r3, #0
 8000838:	607b      	str	r3, [r7, #4]
 800083a:	4b7e      	ldr	r3, [pc, #504]	@ (8000a34 <MX_GPIO_Init+0x2a0>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083e:	4a7d      	ldr	r2, [pc, #500]	@ (8000a34 <MX_GPIO_Init+0x2a0>)
 8000840:	f043 0308 	orr.w	r3, r3, #8
 8000844:	6313      	str	r3, [r2, #48]	@ 0x30
 8000846:	4b7b      	ldr	r3, [pc, #492]	@ (8000a34 <MX_GPIO_Init+0x2a0>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084a:	f003 0308 	and.w	r3, r3, #8
 800084e:	607b      	str	r3, [r7, #4]
 8000850:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000852:	2200      	movs	r2, #0
 8000854:	2108      	movs	r1, #8
 8000856:	4878      	ldr	r0, [pc, #480]	@ (8000a38 <MX_GPIO_Init+0x2a4>)
 8000858:	f000 fcfc 	bl	8001254 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800085c:	2201      	movs	r2, #1
 800085e:	2101      	movs	r1, #1
 8000860:	4876      	ldr	r0, [pc, #472]	@ (8000a3c <MX_GPIO_Init+0x2a8>)
 8000862:	f000 fcf7 	bl	8001254 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 8000866:	2200      	movs	r2, #0
 8000868:	f24f 0110 	movw	r1, #61456	@ 0xf010
 800086c:	4874      	ldr	r0, [pc, #464]	@ (8000a40 <MX_GPIO_Init+0x2ac>)
 800086e:	f000 fcf1 	bl	8001254 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000872:	2308      	movs	r3, #8
 8000874:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000876:	2301      	movs	r3, #1
 8000878:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087a:	2300      	movs	r3, #0
 800087c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800087e:	2300      	movs	r3, #0
 8000880:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000882:	f107 031c 	add.w	r3, r7, #28
 8000886:	4619      	mov	r1, r3
 8000888:	486b      	ldr	r0, [pc, #428]	@ (8000a38 <MX_GPIO_Init+0x2a4>)
 800088a:	f000 fb47 	bl	8000f1c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800088e:	2301      	movs	r3, #1
 8000890:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000892:	2301      	movs	r3, #1
 8000894:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000896:	2300      	movs	r3, #0
 8000898:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800089a:	2300      	movs	r3, #0
 800089c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800089e:	f107 031c 	add.w	r3, r7, #28
 80008a2:	4619      	mov	r1, r3
 80008a4:	4865      	ldr	r0, [pc, #404]	@ (8000a3c <MX_GPIO_Init+0x2a8>)
 80008a6:	f000 fb39 	bl	8000f1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80008aa:	2308      	movs	r3, #8
 80008ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ae:	2302      	movs	r3, #2
 80008b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b2:	2300      	movs	r3, #0
 80008b4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b6:	2300      	movs	r3, #0
 80008b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008ba:	2305      	movs	r3, #5
 80008bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80008be:	f107 031c 	add.w	r3, r7, #28
 80008c2:	4619      	mov	r1, r3
 80008c4:	485d      	ldr	r0, [pc, #372]	@ (8000a3c <MX_GPIO_Init+0x2a8>)
 80008c6:	f000 fb29 	bl	8000f1c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008ca:	2301      	movs	r3, #1
 80008cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008ce:	4b5d      	ldr	r3, [pc, #372]	@ (8000a44 <MX_GPIO_Init+0x2b0>)
 80008d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d2:	2300      	movs	r3, #0
 80008d4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008d6:	f107 031c 	add.w	r3, r7, #28
 80008da:	4619      	mov	r1, r3
 80008dc:	485a      	ldr	r0, [pc, #360]	@ (8000a48 <MX_GPIO_Init+0x2b4>)
 80008de:	f000 fb1d 	bl	8000f1c <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80008e2:	2310      	movs	r3, #16
 80008e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e6:	2302      	movs	r3, #2
 80008e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ea:	2300      	movs	r3, #0
 80008ec:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ee:	2300      	movs	r3, #0
 80008f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80008f2:	2306      	movs	r3, #6
 80008f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80008f6:	f107 031c 	add.w	r3, r7, #28
 80008fa:	4619      	mov	r1, r3
 80008fc:	4852      	ldr	r0, [pc, #328]	@ (8000a48 <MX_GPIO_Init+0x2b4>)
 80008fe:	f000 fb0d 	bl	8000f1c <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000902:	23e0      	movs	r3, #224	@ 0xe0
 8000904:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000906:	2302      	movs	r3, #2
 8000908:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090a:	2300      	movs	r3, #0
 800090c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090e:	2300      	movs	r3, #0
 8000910:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000912:	2305      	movs	r3, #5
 8000914:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000916:	f107 031c 	add.w	r3, r7, #28
 800091a:	4619      	mov	r1, r3
 800091c:	484a      	ldr	r0, [pc, #296]	@ (8000a48 <MX_GPIO_Init+0x2b4>)
 800091e:	f000 fafd 	bl	8000f1c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000922:	2304      	movs	r3, #4
 8000924:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000926:	2300      	movs	r3, #0
 8000928:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092a:	2300      	movs	r3, #0
 800092c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800092e:	f107 031c 	add.w	r3, r7, #28
 8000932:	4619      	mov	r1, r3
 8000934:	4845      	ldr	r0, [pc, #276]	@ (8000a4c <MX_GPIO_Init+0x2b8>)
 8000936:	f000 faf1 	bl	8000f1c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 800093a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800093e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000940:	2302      	movs	r3, #2
 8000942:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000944:	2300      	movs	r3, #0
 8000946:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000948:	2300      	movs	r3, #0
 800094a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800094c:	2305      	movs	r3, #5
 800094e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000950:	f107 031c 	add.w	r3, r7, #28
 8000954:	4619      	mov	r1, r3
 8000956:	483d      	ldr	r0, [pc, #244]	@ (8000a4c <MX_GPIO_Init+0x2b8>)
 8000958:	f000 fae0 	bl	8000f1c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin 
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 800095c:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8000960:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000962:	2301      	movs	r3, #1
 8000964:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000966:	2300      	movs	r3, #0
 8000968:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800096a:	2300      	movs	r3, #0
 800096c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800096e:	f107 031c 	add.w	r3, r7, #28
 8000972:	4619      	mov	r1, r3
 8000974:	4832      	ldr	r0, [pc, #200]	@ (8000a40 <MX_GPIO_Init+0x2ac>)
 8000976:	f000 fad1 	bl	8000f1c <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 800097a:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 800097e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000980:	2302      	movs	r3, #2
 8000982:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000984:	2300      	movs	r3, #0
 8000986:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000988:	2300      	movs	r3, #0
 800098a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800098c:	2306      	movs	r3, #6
 800098e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000990:	f107 031c 	add.w	r3, r7, #28
 8000994:	4619      	mov	r1, r3
 8000996:	4829      	ldr	r0, [pc, #164]	@ (8000a3c <MX_GPIO_Init+0x2a8>)
 8000998:	f000 fac0 	bl	8000f1c <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800099c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80009a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009a2:	2300      	movs	r3, #0
 80009a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a6:	2300      	movs	r3, #0
 80009a8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80009aa:	f107 031c 	add.w	r3, r7, #28
 80009ae:	4619      	mov	r1, r3
 80009b0:	4825      	ldr	r0, [pc, #148]	@ (8000a48 <MX_GPIO_Init+0x2b4>)
 80009b2:	f000 fab3 	bl	8000f1c <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80009b6:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80009ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009bc:	2302      	movs	r3, #2
 80009be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c0:	2300      	movs	r3, #0
 80009c2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c4:	2300      	movs	r3, #0
 80009c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80009c8:	230a      	movs	r3, #10
 80009ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009cc:	f107 031c 	add.w	r3, r7, #28
 80009d0:	4619      	mov	r1, r3
 80009d2:	481d      	ldr	r0, [pc, #116]	@ (8000a48 <MX_GPIO_Init+0x2b4>)
 80009d4:	f000 faa2 	bl	8000f1c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80009d8:	2320      	movs	r3, #32
 80009da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009dc:	2300      	movs	r3, #0
 80009de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e0:	2300      	movs	r3, #0
 80009e2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009e4:	f107 031c 	add.w	r3, r7, #28
 80009e8:	4619      	mov	r1, r3
 80009ea:	4815      	ldr	r0, [pc, #84]	@ (8000a40 <MX_GPIO_Init+0x2ac>)
 80009ec:	f000 fa96 	bl	8000f1c <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80009f0:	f44f 7310 	mov.w	r3, #576	@ 0x240
 80009f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009f6:	2312      	movs	r3, #18
 80009f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009fa:	2301      	movs	r3, #1
 80009fc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009fe:	2300      	movs	r3, #0
 8000a00:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a02:	2304      	movs	r3, #4
 8000a04:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a06:	f107 031c 	add.w	r3, r7, #28
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	480f      	ldr	r0, [pc, #60]	@ (8000a4c <MX_GPIO_Init+0x2b8>)
 8000a0e:	f000 fa85 	bl	8000f1c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000a12:	2302      	movs	r3, #2
 8000a14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a16:	4b0e      	ldr	r3, [pc, #56]	@ (8000a50 <MX_GPIO_Init+0x2bc>)
 8000a18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000a1e:	f107 031c 	add.w	r3, r7, #28
 8000a22:	4619      	mov	r1, r3
 8000a24:	4804      	ldr	r0, [pc, #16]	@ (8000a38 <MX_GPIO_Init+0x2a4>)
 8000a26:	f000 fa79 	bl	8000f1c <HAL_GPIO_Init>

}
 8000a2a:	bf00      	nop
 8000a2c:	3730      	adds	r7, #48	@ 0x30
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	40023800 	.word	0x40023800
 8000a38:	40021000 	.word	0x40021000
 8000a3c:	40020800 	.word	0x40020800
 8000a40:	40020c00 	.word	0x40020c00
 8000a44:	10110000 	.word	0x10110000
 8000a48:	40020000 	.word	0x40020000
 8000a4c:	40020400 	.word	0x40020400
 8000a50:	10120000 	.word	0x10120000

08000a54 <task1_handler>:

/* USER CODE BEGIN 4 */

static void task1_handler(void* parameters)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b09c      	sub	sp, #112	@ 0x70
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]

	char msg[100];

	while(1)
	{
		snprintf(msg,100,"%s\n", (char*)parameters);
 8000a5c:	f107 000c 	add.w	r0, r7, #12
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	4a09      	ldr	r2, [pc, #36]	@ (8000a88 <task1_handler+0x34>)
 8000a64:	2164      	movs	r1, #100	@ 0x64
 8000a66:	f004 ff7d 	bl	8005964 <sniprintf>
		SEGGER_SYSVIEW_PrintfTarget(msg);
 8000a6a:	f107 030c 	add.w	r3, r7, #12
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f004 feda 	bl	8005828 <SEGGER_SYSVIEW_PrintfTarget>
		taskYIELD();
 8000a74:	4b05      	ldr	r3, [pc, #20]	@ (8000a8c <task1_handler+0x38>)
 8000a76:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000a7a:	601a      	str	r2, [r3, #0]
 8000a7c:	f3bf 8f4f 	dsb	sy
 8000a80:	f3bf 8f6f 	isb	sy
		snprintf(msg,100,"%s\n", (char*)parameters);
 8000a84:	bf00      	nop
 8000a86:	e7e9      	b.n	8000a5c <task1_handler+0x8>
 8000a88:	08006354 	.word	0x08006354
 8000a8c:	e000ed04 	.word	0xe000ed04

08000a90 <task2_handler>:

}


static void task2_handler(void* parameters)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b09c      	sub	sp, #112	@ 0x70
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
	char msg[100];
	while(1)
	{
		snprintf(msg,100,"%s\n", (char*)parameters);
 8000a98:	f107 000c 	add.w	r0, r7, #12
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	4a09      	ldr	r2, [pc, #36]	@ (8000ac4 <task2_handler+0x34>)
 8000aa0:	2164      	movs	r1, #100	@ 0x64
 8000aa2:	f004 ff5f 	bl	8005964 <sniprintf>
		SEGGER_SYSVIEW_PrintfTarget(msg);
 8000aa6:	f107 030c 	add.w	r3, r7, #12
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f004 febc 	bl	8005828 <SEGGER_SYSVIEW_PrintfTarget>
		taskYIELD();
 8000ab0:	4b05      	ldr	r3, [pc, #20]	@ (8000ac8 <task2_handler+0x38>)
 8000ab2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000ab6:	601a      	str	r2, [r3, #0]
 8000ab8:	f3bf 8f4f 	dsb	sy
 8000abc:	f3bf 8f6f 	isb	sy
		snprintf(msg,100,"%s\n", (char*)parameters);
 8000ac0:	bf00      	nop
 8000ac2:	e7e9      	b.n	8000a98 <task2_handler+0x8>
 8000ac4:	08006354 	.word	0x08006354
 8000ac8:	e000ed04 	.word	0xe000ed04

08000acc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b082      	sub	sp, #8
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4a04      	ldr	r2, [pc, #16]	@ (8000aec <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ada:	4293      	cmp	r3, r2
 8000adc:	d101      	bne.n	8000ae2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000ade:	f000 f91b 	bl	8000d18 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ae2:	bf00      	nop
 8000ae4:	3708      	adds	r7, #8
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	40001000 	.word	0x40001000

08000af0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000af4:	bf00      	nop
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr
	...

08000b00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b082      	sub	sp, #8
 8000b04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b06:	2300      	movs	r3, #0
 8000b08:	607b      	str	r3, [r7, #4]
 8000b0a:	4b10      	ldr	r3, [pc, #64]	@ (8000b4c <HAL_MspInit+0x4c>)
 8000b0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b0e:	4a0f      	ldr	r2, [pc, #60]	@ (8000b4c <HAL_MspInit+0x4c>)
 8000b10:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b14:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b16:	4b0d      	ldr	r3, [pc, #52]	@ (8000b4c <HAL_MspInit+0x4c>)
 8000b18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b1a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b1e:	607b      	str	r3, [r7, #4]
 8000b20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b22:	2300      	movs	r3, #0
 8000b24:	603b      	str	r3, [r7, #0]
 8000b26:	4b09      	ldr	r3, [pc, #36]	@ (8000b4c <HAL_MspInit+0x4c>)
 8000b28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b2a:	4a08      	ldr	r2, [pc, #32]	@ (8000b4c <HAL_MspInit+0x4c>)
 8000b2c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b30:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b32:	4b06      	ldr	r3, [pc, #24]	@ (8000b4c <HAL_MspInit+0x4c>)
 8000b34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b3a:	603b      	str	r3, [r7, #0]
 8000b3c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  vInitPrioGroupValue();
 8000b3e:	f002 f895 	bl	8002c6c <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 8000b42:	bf00      	nop
 8000b44:	3708      	adds	r7, #8
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	40023800 	.word	0x40023800

08000b50 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b08c      	sub	sp, #48	@ 0x30
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8000b60:	2200      	movs	r2, #0
 8000b62:	6879      	ldr	r1, [r7, #4]
 8000b64:	2036      	movs	r0, #54	@ 0x36
 8000b66:	f000 f9af 	bl	8000ec8 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 8000b6a:	2036      	movs	r0, #54	@ 0x36
 8000b6c:	f000 f9c8 	bl	8000f00 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000b70:	2300      	movs	r3, #0
 8000b72:	60fb      	str	r3, [r7, #12]
 8000b74:	4b1f      	ldr	r3, [pc, #124]	@ (8000bf4 <HAL_InitTick+0xa4>)
 8000b76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b78:	4a1e      	ldr	r2, [pc, #120]	@ (8000bf4 <HAL_InitTick+0xa4>)
 8000b7a:	f043 0310 	orr.w	r3, r3, #16
 8000b7e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b80:	4b1c      	ldr	r3, [pc, #112]	@ (8000bf4 <HAL_InitTick+0xa4>)
 8000b82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b84:	f003 0310 	and.w	r3, r3, #16
 8000b88:	60fb      	str	r3, [r7, #12]
 8000b8a:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b8c:	f107 0210 	add.w	r2, r7, #16
 8000b90:	f107 0314 	add.w	r3, r7, #20
 8000b94:	4611      	mov	r1, r2
 8000b96:	4618      	mov	r0, r3
 8000b98:	f000 fff0 	bl	8001b7c <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000b9c:	f000 ffda 	bl	8001b54 <HAL_RCC_GetPCLK1Freq>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	005b      	lsls	r3, r3, #1
 8000ba4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000ba6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ba8:	4a13      	ldr	r2, [pc, #76]	@ (8000bf8 <HAL_InitTick+0xa8>)
 8000baa:	fba2 2303 	umull	r2, r3, r2, r3
 8000bae:	0c9b      	lsrs	r3, r3, #18
 8000bb0:	3b01      	subs	r3, #1
 8000bb2:	62bb      	str	r3, [r7, #40]	@ 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000bb4:	4b11      	ldr	r3, [pc, #68]	@ (8000bfc <HAL_InitTick+0xac>)
 8000bb6:	4a12      	ldr	r2, [pc, #72]	@ (8000c00 <HAL_InitTick+0xb0>)
 8000bb8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8000bba:	4b10      	ldr	r3, [pc, #64]	@ (8000bfc <HAL_InitTick+0xac>)
 8000bbc:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000bc0:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000bc2:	4a0e      	ldr	r2, [pc, #56]	@ (8000bfc <HAL_InitTick+0xac>)
 8000bc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000bc6:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000bc8:	4b0c      	ldr	r3, [pc, #48]	@ (8000bfc <HAL_InitTick+0xac>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bce:	4b0b      	ldr	r3, [pc, #44]	@ (8000bfc <HAL_InitTick+0xac>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000bd4:	4809      	ldr	r0, [pc, #36]	@ (8000bfc <HAL_InitTick+0xac>)
 8000bd6:	f001 f803 	bl	8001be0 <HAL_TIM_Base_Init>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d104      	bne.n	8000bea <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000be0:	4806      	ldr	r0, [pc, #24]	@ (8000bfc <HAL_InitTick+0xac>)
 8000be2:	f001 f832 	bl	8001c4a <HAL_TIM_Base_Start_IT>
 8000be6:	4603      	mov	r3, r0
 8000be8:	e000      	b.n	8000bec <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8000bea:	2301      	movs	r3, #1
}
 8000bec:	4618      	mov	r0, r3
 8000bee:	3730      	adds	r7, #48	@ 0x30
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	40023800 	.word	0x40023800
 8000bf8:	431bde83 	.word	0x431bde83
 8000bfc:	20000088 	.word	0x20000088
 8000c00:	40001000 	.word	0x40001000

08000c04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000c08:	bf00      	nop
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr

08000c12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c12:	b480      	push	{r7}
 8000c14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c16:	bf00      	nop
 8000c18:	e7fd      	b.n	8000c16 <HardFault_Handler+0x4>

08000c1a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c1a:	b480      	push	{r7}
 8000c1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c1e:	bf00      	nop
 8000c20:	e7fd      	b.n	8000c1e <MemManage_Handler+0x4>

08000c22 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c22:	b480      	push	{r7}
 8000c24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c26:	bf00      	nop
 8000c28:	e7fd      	b.n	8000c26 <BusFault_Handler+0x4>

08000c2a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c2a:	b480      	push	{r7}
 8000c2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c2e:	bf00      	nop
 8000c30:	e7fd      	b.n	8000c2e <UsageFault_Handler+0x4>

08000c32 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c32:	b480      	push	{r7}
 8000c34:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c36:	bf00      	nop
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3e:	4770      	bx	lr

08000c40 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000c44:	4802      	ldr	r0, [pc, #8]	@ (8000c50 <TIM6_DAC_IRQHandler+0x10>)
 8000c46:	f001 f824 	bl	8001c92 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000c4a:	bf00      	nop
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	20000088 	.word	0x20000088

08000c54 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c58:	4b08      	ldr	r3, [pc, #32]	@ (8000c7c <SystemInit+0x28>)
 8000c5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c5e:	4a07      	ldr	r2, [pc, #28]	@ (8000c7c <SystemInit+0x28>)
 8000c60:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c64:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000c68:	4b04      	ldr	r3, [pc, #16]	@ (8000c7c <SystemInit+0x28>)
 8000c6a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000c6e:	609a      	str	r2, [r3, #8]
#endif
}
 8000c70:	bf00      	nop
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr
 8000c7a:	bf00      	nop
 8000c7c:	e000ed00 	.word	0xe000ed00

08000c80 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c80:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000cb8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000c84:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000c86:	e003      	b.n	8000c90 <LoopCopyDataInit>

08000c88 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000c88:	4b0c      	ldr	r3, [pc, #48]	@ (8000cbc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000c8a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000c8c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000c8e:	3104      	adds	r1, #4

08000c90 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000c90:	480b      	ldr	r0, [pc, #44]	@ (8000cc0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000c92:	4b0c      	ldr	r3, [pc, #48]	@ (8000cc4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000c94:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000c96:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000c98:	d3f6      	bcc.n	8000c88 <CopyDataInit>
  ldr  r2, =_sbss
 8000c9a:	4a0b      	ldr	r2, [pc, #44]	@ (8000cc8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000c9c:	e002      	b.n	8000ca4 <LoopFillZerobss>

08000c9e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000c9e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000ca0:	f842 3b04 	str.w	r3, [r2], #4

08000ca4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000ca4:	4b09      	ldr	r3, [pc, #36]	@ (8000ccc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000ca6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000ca8:	d3f9      	bcc.n	8000c9e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000caa:	f7ff ffd3 	bl	8000c54 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cae:	f004 fea5 	bl	80059fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cb2:	f7ff fca5 	bl	8000600 <main>
  bx  lr    
 8000cb6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000cb8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000cbc:	080064b0 	.word	0x080064b0
  ldr  r0, =_sdata
 8000cc0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000cc4:	2000006c 	.word	0x2000006c
  ldr  r2, =_sbss
 8000cc8:	2000006c 	.word	0x2000006c
  ldr  r3, = _ebss
 8000ccc:	200145c4 	.word	0x200145c4

08000cd0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cd0:	e7fe      	b.n	8000cd0 <ADC_IRQHandler>
	...

08000cd4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cd8:	4b0e      	ldr	r3, [pc, #56]	@ (8000d14 <HAL_Init+0x40>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4a0d      	ldr	r2, [pc, #52]	@ (8000d14 <HAL_Init+0x40>)
 8000cde:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000ce2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ce4:	4b0b      	ldr	r3, [pc, #44]	@ (8000d14 <HAL_Init+0x40>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4a0a      	ldr	r2, [pc, #40]	@ (8000d14 <HAL_Init+0x40>)
 8000cea:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000cee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cf0:	4b08      	ldr	r3, [pc, #32]	@ (8000d14 <HAL_Init+0x40>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	4a07      	ldr	r2, [pc, #28]	@ (8000d14 <HAL_Init+0x40>)
 8000cf6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000cfa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cfc:	2003      	movs	r0, #3
 8000cfe:	f000 f8d8 	bl	8000eb2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d02:	2000      	movs	r0, #0
 8000d04:	f7ff ff24 	bl	8000b50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d08:	f7ff fefa 	bl	8000b00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d0c:	2300      	movs	r3, #0
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	40023c00 	.word	0x40023c00

08000d18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d1c:	4b06      	ldr	r3, [pc, #24]	@ (8000d38 <HAL_IncTick+0x20>)
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	461a      	mov	r2, r3
 8000d22:	4b06      	ldr	r3, [pc, #24]	@ (8000d3c <HAL_IncTick+0x24>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	4413      	add	r3, r2
 8000d28:	4a04      	ldr	r2, [pc, #16]	@ (8000d3c <HAL_IncTick+0x24>)
 8000d2a:	6013      	str	r3, [r2, #0]
}
 8000d2c:	bf00      	nop
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr
 8000d36:	bf00      	nop
 8000d38:	20000008 	.word	0x20000008
 8000d3c:	200000c8 	.word	0x200000c8

08000d40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  return uwTick;
 8000d44:	4b03      	ldr	r3, [pc, #12]	@ (8000d54 <HAL_GetTick+0x14>)
 8000d46:	681b      	ldr	r3, [r3, #0]
}
 8000d48:	4618      	mov	r0, r3
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop
 8000d54:	200000c8 	.word	0x200000c8

08000d58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b085      	sub	sp, #20
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	f003 0307 	and.w	r3, r3, #7
 8000d66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d68:	4b0c      	ldr	r3, [pc, #48]	@ (8000d9c <__NVIC_SetPriorityGrouping+0x44>)
 8000d6a:	68db      	ldr	r3, [r3, #12]
 8000d6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d6e:	68ba      	ldr	r2, [r7, #8]
 8000d70:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d74:	4013      	ands	r3, r2
 8000d76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d7c:	68bb      	ldr	r3, [r7, #8]
 8000d7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d80:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d84:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d8a:	4a04      	ldr	r2, [pc, #16]	@ (8000d9c <__NVIC_SetPriorityGrouping+0x44>)
 8000d8c:	68bb      	ldr	r3, [r7, #8]
 8000d8e:	60d3      	str	r3, [r2, #12]
}
 8000d90:	bf00      	nop
 8000d92:	3714      	adds	r7, #20
 8000d94:	46bd      	mov	sp, r7
 8000d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9a:	4770      	bx	lr
 8000d9c:	e000ed00 	.word	0xe000ed00

08000da0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000da4:	4b04      	ldr	r3, [pc, #16]	@ (8000db8 <__NVIC_GetPriorityGrouping+0x18>)
 8000da6:	68db      	ldr	r3, [r3, #12]
 8000da8:	0a1b      	lsrs	r3, r3, #8
 8000daa:	f003 0307 	and.w	r3, r3, #7
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr
 8000db8:	e000ed00 	.word	0xe000ed00

08000dbc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b083      	sub	sp, #12
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	db0b      	blt.n	8000de6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dce:	79fb      	ldrb	r3, [r7, #7]
 8000dd0:	f003 021f 	and.w	r2, r3, #31
 8000dd4:	4907      	ldr	r1, [pc, #28]	@ (8000df4 <__NVIC_EnableIRQ+0x38>)
 8000dd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dda:	095b      	lsrs	r3, r3, #5
 8000ddc:	2001      	movs	r0, #1
 8000dde:	fa00 f202 	lsl.w	r2, r0, r2
 8000de2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000de6:	bf00      	nop
 8000de8:	370c      	adds	r7, #12
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	e000e100 	.word	0xe000e100

08000df8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b083      	sub	sp, #12
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	4603      	mov	r3, r0
 8000e00:	6039      	str	r1, [r7, #0]
 8000e02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	db0a      	blt.n	8000e22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	b2da      	uxtb	r2, r3
 8000e10:	490c      	ldr	r1, [pc, #48]	@ (8000e44 <__NVIC_SetPriority+0x4c>)
 8000e12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e16:	0112      	lsls	r2, r2, #4
 8000e18:	b2d2      	uxtb	r2, r2
 8000e1a:	440b      	add	r3, r1
 8000e1c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e20:	e00a      	b.n	8000e38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	b2da      	uxtb	r2, r3
 8000e26:	4908      	ldr	r1, [pc, #32]	@ (8000e48 <__NVIC_SetPriority+0x50>)
 8000e28:	79fb      	ldrb	r3, [r7, #7]
 8000e2a:	f003 030f 	and.w	r3, r3, #15
 8000e2e:	3b04      	subs	r3, #4
 8000e30:	0112      	lsls	r2, r2, #4
 8000e32:	b2d2      	uxtb	r2, r2
 8000e34:	440b      	add	r3, r1
 8000e36:	761a      	strb	r2, [r3, #24]
}
 8000e38:	bf00      	nop
 8000e3a:	370c      	adds	r7, #12
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e42:	4770      	bx	lr
 8000e44:	e000e100 	.word	0xe000e100
 8000e48:	e000ed00 	.word	0xe000ed00

08000e4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b089      	sub	sp, #36	@ 0x24
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	60f8      	str	r0, [r7, #12]
 8000e54:	60b9      	str	r1, [r7, #8]
 8000e56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	f003 0307 	and.w	r3, r3, #7
 8000e5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e60:	69fb      	ldr	r3, [r7, #28]
 8000e62:	f1c3 0307 	rsb	r3, r3, #7
 8000e66:	2b04      	cmp	r3, #4
 8000e68:	bf28      	it	cs
 8000e6a:	2304      	movcs	r3, #4
 8000e6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e6e:	69fb      	ldr	r3, [r7, #28]
 8000e70:	3304      	adds	r3, #4
 8000e72:	2b06      	cmp	r3, #6
 8000e74:	d902      	bls.n	8000e7c <NVIC_EncodePriority+0x30>
 8000e76:	69fb      	ldr	r3, [r7, #28]
 8000e78:	3b03      	subs	r3, #3
 8000e7a:	e000      	b.n	8000e7e <NVIC_EncodePriority+0x32>
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e80:	f04f 32ff 	mov.w	r2, #4294967295
 8000e84:	69bb      	ldr	r3, [r7, #24]
 8000e86:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8a:	43da      	mvns	r2, r3
 8000e8c:	68bb      	ldr	r3, [r7, #8]
 8000e8e:	401a      	ands	r2, r3
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e94:	f04f 31ff 	mov.w	r1, #4294967295
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e9e:	43d9      	mvns	r1, r3
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ea4:	4313      	orrs	r3, r2
         );
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	3724      	adds	r7, #36	@ 0x24
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr

08000eb2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eb2:	b580      	push	{r7, lr}
 8000eb4:	b082      	sub	sp, #8
 8000eb6:	af00      	add	r7, sp, #0
 8000eb8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000eba:	6878      	ldr	r0, [r7, #4]
 8000ebc:	f7ff ff4c 	bl	8000d58 <__NVIC_SetPriorityGrouping>
}
 8000ec0:	bf00      	nop
 8000ec2:	3708      	adds	r7, #8
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}

08000ec8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b086      	sub	sp, #24
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	4603      	mov	r3, r0
 8000ed0:	60b9      	str	r1, [r7, #8]
 8000ed2:	607a      	str	r2, [r7, #4]
 8000ed4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000eda:	f7ff ff61 	bl	8000da0 <__NVIC_GetPriorityGrouping>
 8000ede:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ee0:	687a      	ldr	r2, [r7, #4]
 8000ee2:	68b9      	ldr	r1, [r7, #8]
 8000ee4:	6978      	ldr	r0, [r7, #20]
 8000ee6:	f7ff ffb1 	bl	8000e4c <NVIC_EncodePriority>
 8000eea:	4602      	mov	r2, r0
 8000eec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ef0:	4611      	mov	r1, r2
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f7ff ff80 	bl	8000df8 <__NVIC_SetPriority>
}
 8000ef8:	bf00      	nop
 8000efa:	3718      	adds	r7, #24
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}

08000f00 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	4603      	mov	r3, r0
 8000f08:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f7ff ff54 	bl	8000dbc <__NVIC_EnableIRQ>
}
 8000f14:	bf00      	nop
 8000f16:	3708      	adds	r7, #8
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}

08000f1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b089      	sub	sp, #36	@ 0x24
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
 8000f24:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f26:	2300      	movs	r3, #0
 8000f28:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f32:	2300      	movs	r3, #0
 8000f34:	61fb      	str	r3, [r7, #28]
 8000f36:	e16b      	b.n	8001210 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f38:	2201      	movs	r2, #1
 8000f3a:	69fb      	ldr	r3, [r7, #28]
 8000f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f40:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	697a      	ldr	r2, [r7, #20]
 8000f48:	4013      	ands	r3, r2
 8000f4a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f4c:	693a      	ldr	r2, [r7, #16]
 8000f4e:	697b      	ldr	r3, [r7, #20]
 8000f50:	429a      	cmp	r2, r3
 8000f52:	f040 815a 	bne.w	800120a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	2b01      	cmp	r3, #1
 8000f5c:	d00b      	beq.n	8000f76 <HAL_GPIO_Init+0x5a>
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	2b02      	cmp	r3, #2
 8000f64:	d007      	beq.n	8000f76 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f6a:	2b11      	cmp	r3, #17
 8000f6c:	d003      	beq.n	8000f76 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	685b      	ldr	r3, [r3, #4]
 8000f72:	2b12      	cmp	r3, #18
 8000f74:	d130      	bne.n	8000fd8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	689b      	ldr	r3, [r3, #8]
 8000f7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f7c:	69fb      	ldr	r3, [r7, #28]
 8000f7e:	005b      	lsls	r3, r3, #1
 8000f80:	2203      	movs	r2, #3
 8000f82:	fa02 f303 	lsl.w	r3, r2, r3
 8000f86:	43db      	mvns	r3, r3
 8000f88:	69ba      	ldr	r2, [r7, #24]
 8000f8a:	4013      	ands	r3, r2
 8000f8c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	68da      	ldr	r2, [r3, #12]
 8000f92:	69fb      	ldr	r3, [r7, #28]
 8000f94:	005b      	lsls	r3, r3, #1
 8000f96:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9a:	69ba      	ldr	r2, [r7, #24]
 8000f9c:	4313      	orrs	r3, r2
 8000f9e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	69ba      	ldr	r2, [r7, #24]
 8000fa4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	685b      	ldr	r3, [r3, #4]
 8000faa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fac:	2201      	movs	r2, #1
 8000fae:	69fb      	ldr	r3, [r7, #28]
 8000fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb4:	43db      	mvns	r3, r3
 8000fb6:	69ba      	ldr	r2, [r7, #24]
 8000fb8:	4013      	ands	r3, r2
 8000fba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	091b      	lsrs	r3, r3, #4
 8000fc2:	f003 0201 	and.w	r2, r3, #1
 8000fc6:	69fb      	ldr	r3, [r7, #28]
 8000fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fcc:	69ba      	ldr	r2, [r7, #24]
 8000fce:	4313      	orrs	r3, r2
 8000fd0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	69ba      	ldr	r2, [r7, #24]
 8000fd6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	68db      	ldr	r3, [r3, #12]
 8000fdc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000fde:	69fb      	ldr	r3, [r7, #28]
 8000fe0:	005b      	lsls	r3, r3, #1
 8000fe2:	2203      	movs	r2, #3
 8000fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe8:	43db      	mvns	r3, r3
 8000fea:	69ba      	ldr	r2, [r7, #24]
 8000fec:	4013      	ands	r3, r2
 8000fee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	689a      	ldr	r2, [r3, #8]
 8000ff4:	69fb      	ldr	r3, [r7, #28]
 8000ff6:	005b      	lsls	r3, r3, #1
 8000ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffc:	69ba      	ldr	r2, [r7, #24]
 8000ffe:	4313      	orrs	r3, r2
 8001000:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	69ba      	ldr	r2, [r7, #24]
 8001006:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	2b02      	cmp	r3, #2
 800100e:	d003      	beq.n	8001018 <HAL_GPIO_Init+0xfc>
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	2b12      	cmp	r3, #18
 8001016:	d123      	bne.n	8001060 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001018:	69fb      	ldr	r3, [r7, #28]
 800101a:	08da      	lsrs	r2, r3, #3
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	3208      	adds	r2, #8
 8001020:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001024:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001026:	69fb      	ldr	r3, [r7, #28]
 8001028:	f003 0307 	and.w	r3, r3, #7
 800102c:	009b      	lsls	r3, r3, #2
 800102e:	220f      	movs	r2, #15
 8001030:	fa02 f303 	lsl.w	r3, r2, r3
 8001034:	43db      	mvns	r3, r3
 8001036:	69ba      	ldr	r2, [r7, #24]
 8001038:	4013      	ands	r3, r2
 800103a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	691a      	ldr	r2, [r3, #16]
 8001040:	69fb      	ldr	r3, [r7, #28]
 8001042:	f003 0307 	and.w	r3, r3, #7
 8001046:	009b      	lsls	r3, r3, #2
 8001048:	fa02 f303 	lsl.w	r3, r2, r3
 800104c:	69ba      	ldr	r2, [r7, #24]
 800104e:	4313      	orrs	r3, r2
 8001050:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	08da      	lsrs	r2, r3, #3
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	3208      	adds	r2, #8
 800105a:	69b9      	ldr	r1, [r7, #24]
 800105c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001066:	69fb      	ldr	r3, [r7, #28]
 8001068:	005b      	lsls	r3, r3, #1
 800106a:	2203      	movs	r2, #3
 800106c:	fa02 f303 	lsl.w	r3, r2, r3
 8001070:	43db      	mvns	r3, r3
 8001072:	69ba      	ldr	r2, [r7, #24]
 8001074:	4013      	ands	r3, r2
 8001076:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	f003 0203 	and.w	r2, r3, #3
 8001080:	69fb      	ldr	r3, [r7, #28]
 8001082:	005b      	lsls	r3, r3, #1
 8001084:	fa02 f303 	lsl.w	r3, r2, r3
 8001088:	69ba      	ldr	r2, [r7, #24]
 800108a:	4313      	orrs	r3, r2
 800108c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	69ba      	ldr	r2, [r7, #24]
 8001092:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800109c:	2b00      	cmp	r3, #0
 800109e:	f000 80b4 	beq.w	800120a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010a2:	2300      	movs	r3, #0
 80010a4:	60fb      	str	r3, [r7, #12]
 80010a6:	4b60      	ldr	r3, [pc, #384]	@ (8001228 <HAL_GPIO_Init+0x30c>)
 80010a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010aa:	4a5f      	ldr	r2, [pc, #380]	@ (8001228 <HAL_GPIO_Init+0x30c>)
 80010ac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80010b2:	4b5d      	ldr	r3, [pc, #372]	@ (8001228 <HAL_GPIO_Init+0x30c>)
 80010b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010ba:	60fb      	str	r3, [r7, #12]
 80010bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010be:	4a5b      	ldr	r2, [pc, #364]	@ (800122c <HAL_GPIO_Init+0x310>)
 80010c0:	69fb      	ldr	r3, [r7, #28]
 80010c2:	089b      	lsrs	r3, r3, #2
 80010c4:	3302      	adds	r3, #2
 80010c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010cc:	69fb      	ldr	r3, [r7, #28]
 80010ce:	f003 0303 	and.w	r3, r3, #3
 80010d2:	009b      	lsls	r3, r3, #2
 80010d4:	220f      	movs	r2, #15
 80010d6:	fa02 f303 	lsl.w	r3, r2, r3
 80010da:	43db      	mvns	r3, r3
 80010dc:	69ba      	ldr	r2, [r7, #24]
 80010de:	4013      	ands	r3, r2
 80010e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	4a52      	ldr	r2, [pc, #328]	@ (8001230 <HAL_GPIO_Init+0x314>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d02b      	beq.n	8001142 <HAL_GPIO_Init+0x226>
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	4a51      	ldr	r2, [pc, #324]	@ (8001234 <HAL_GPIO_Init+0x318>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d025      	beq.n	800113e <HAL_GPIO_Init+0x222>
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	4a50      	ldr	r2, [pc, #320]	@ (8001238 <HAL_GPIO_Init+0x31c>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d01f      	beq.n	800113a <HAL_GPIO_Init+0x21e>
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	4a4f      	ldr	r2, [pc, #316]	@ (800123c <HAL_GPIO_Init+0x320>)
 80010fe:	4293      	cmp	r3, r2
 8001100:	d019      	beq.n	8001136 <HAL_GPIO_Init+0x21a>
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	4a4e      	ldr	r2, [pc, #312]	@ (8001240 <HAL_GPIO_Init+0x324>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d013      	beq.n	8001132 <HAL_GPIO_Init+0x216>
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	4a4d      	ldr	r2, [pc, #308]	@ (8001244 <HAL_GPIO_Init+0x328>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d00d      	beq.n	800112e <HAL_GPIO_Init+0x212>
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	4a4c      	ldr	r2, [pc, #304]	@ (8001248 <HAL_GPIO_Init+0x32c>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d007      	beq.n	800112a <HAL_GPIO_Init+0x20e>
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	4a4b      	ldr	r2, [pc, #300]	@ (800124c <HAL_GPIO_Init+0x330>)
 800111e:	4293      	cmp	r3, r2
 8001120:	d101      	bne.n	8001126 <HAL_GPIO_Init+0x20a>
 8001122:	2307      	movs	r3, #7
 8001124:	e00e      	b.n	8001144 <HAL_GPIO_Init+0x228>
 8001126:	2308      	movs	r3, #8
 8001128:	e00c      	b.n	8001144 <HAL_GPIO_Init+0x228>
 800112a:	2306      	movs	r3, #6
 800112c:	e00a      	b.n	8001144 <HAL_GPIO_Init+0x228>
 800112e:	2305      	movs	r3, #5
 8001130:	e008      	b.n	8001144 <HAL_GPIO_Init+0x228>
 8001132:	2304      	movs	r3, #4
 8001134:	e006      	b.n	8001144 <HAL_GPIO_Init+0x228>
 8001136:	2303      	movs	r3, #3
 8001138:	e004      	b.n	8001144 <HAL_GPIO_Init+0x228>
 800113a:	2302      	movs	r3, #2
 800113c:	e002      	b.n	8001144 <HAL_GPIO_Init+0x228>
 800113e:	2301      	movs	r3, #1
 8001140:	e000      	b.n	8001144 <HAL_GPIO_Init+0x228>
 8001142:	2300      	movs	r3, #0
 8001144:	69fa      	ldr	r2, [r7, #28]
 8001146:	f002 0203 	and.w	r2, r2, #3
 800114a:	0092      	lsls	r2, r2, #2
 800114c:	4093      	lsls	r3, r2
 800114e:	69ba      	ldr	r2, [r7, #24]
 8001150:	4313      	orrs	r3, r2
 8001152:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001154:	4935      	ldr	r1, [pc, #212]	@ (800122c <HAL_GPIO_Init+0x310>)
 8001156:	69fb      	ldr	r3, [r7, #28]
 8001158:	089b      	lsrs	r3, r3, #2
 800115a:	3302      	adds	r3, #2
 800115c:	69ba      	ldr	r2, [r7, #24]
 800115e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001162:	4b3b      	ldr	r3, [pc, #236]	@ (8001250 <HAL_GPIO_Init+0x334>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001168:	693b      	ldr	r3, [r7, #16]
 800116a:	43db      	mvns	r3, r3
 800116c:	69ba      	ldr	r2, [r7, #24]
 800116e:	4013      	ands	r3, r2
 8001170:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800117a:	2b00      	cmp	r3, #0
 800117c:	d003      	beq.n	8001186 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800117e:	69ba      	ldr	r2, [r7, #24]
 8001180:	693b      	ldr	r3, [r7, #16]
 8001182:	4313      	orrs	r3, r2
 8001184:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001186:	4a32      	ldr	r2, [pc, #200]	@ (8001250 <HAL_GPIO_Init+0x334>)
 8001188:	69bb      	ldr	r3, [r7, #24]
 800118a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800118c:	4b30      	ldr	r3, [pc, #192]	@ (8001250 <HAL_GPIO_Init+0x334>)
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001192:	693b      	ldr	r3, [r7, #16]
 8001194:	43db      	mvns	r3, r3
 8001196:	69ba      	ldr	r2, [r7, #24]
 8001198:	4013      	ands	r3, r2
 800119a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d003      	beq.n	80011b0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80011a8:	69ba      	ldr	r2, [r7, #24]
 80011aa:	693b      	ldr	r3, [r7, #16]
 80011ac:	4313      	orrs	r3, r2
 80011ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011b0:	4a27      	ldr	r2, [pc, #156]	@ (8001250 <HAL_GPIO_Init+0x334>)
 80011b2:	69bb      	ldr	r3, [r7, #24]
 80011b4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011b6:	4b26      	ldr	r3, [pc, #152]	@ (8001250 <HAL_GPIO_Init+0x334>)
 80011b8:	689b      	ldr	r3, [r3, #8]
 80011ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011bc:	693b      	ldr	r3, [r7, #16]
 80011be:	43db      	mvns	r3, r3
 80011c0:	69ba      	ldr	r2, [r7, #24]
 80011c2:	4013      	ands	r3, r2
 80011c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d003      	beq.n	80011da <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80011d2:	69ba      	ldr	r2, [r7, #24]
 80011d4:	693b      	ldr	r3, [r7, #16]
 80011d6:	4313      	orrs	r3, r2
 80011d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011da:	4a1d      	ldr	r2, [pc, #116]	@ (8001250 <HAL_GPIO_Init+0x334>)
 80011dc:	69bb      	ldr	r3, [r7, #24]
 80011de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011e0:	4b1b      	ldr	r3, [pc, #108]	@ (8001250 <HAL_GPIO_Init+0x334>)
 80011e2:	68db      	ldr	r3, [r3, #12]
 80011e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011e6:	693b      	ldr	r3, [r7, #16]
 80011e8:	43db      	mvns	r3, r3
 80011ea:	69ba      	ldr	r2, [r7, #24]
 80011ec:	4013      	ands	r3, r2
 80011ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d003      	beq.n	8001204 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80011fc:	69ba      	ldr	r2, [r7, #24]
 80011fe:	693b      	ldr	r3, [r7, #16]
 8001200:	4313      	orrs	r3, r2
 8001202:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001204:	4a12      	ldr	r2, [pc, #72]	@ (8001250 <HAL_GPIO_Init+0x334>)
 8001206:	69bb      	ldr	r3, [r7, #24]
 8001208:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800120a:	69fb      	ldr	r3, [r7, #28]
 800120c:	3301      	adds	r3, #1
 800120e:	61fb      	str	r3, [r7, #28]
 8001210:	69fb      	ldr	r3, [r7, #28]
 8001212:	2b0f      	cmp	r3, #15
 8001214:	f67f ae90 	bls.w	8000f38 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001218:	bf00      	nop
 800121a:	bf00      	nop
 800121c:	3724      	adds	r7, #36	@ 0x24
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr
 8001226:	bf00      	nop
 8001228:	40023800 	.word	0x40023800
 800122c:	40013800 	.word	0x40013800
 8001230:	40020000 	.word	0x40020000
 8001234:	40020400 	.word	0x40020400
 8001238:	40020800 	.word	0x40020800
 800123c:	40020c00 	.word	0x40020c00
 8001240:	40021000 	.word	0x40021000
 8001244:	40021400 	.word	0x40021400
 8001248:	40021800 	.word	0x40021800
 800124c:	40021c00 	.word	0x40021c00
 8001250:	40013c00 	.word	0x40013c00

08001254 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001254:	b480      	push	{r7}
 8001256:	b083      	sub	sp, #12
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
 800125c:	460b      	mov	r3, r1
 800125e:	807b      	strh	r3, [r7, #2]
 8001260:	4613      	mov	r3, r2
 8001262:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001264:	787b      	ldrb	r3, [r7, #1]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d003      	beq.n	8001272 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800126a:	887a      	ldrh	r2, [r7, #2]
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001270:	e003      	b.n	800127a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001272:	887b      	ldrh	r3, [r7, #2]
 8001274:	041a      	lsls	r2, r3, #16
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	619a      	str	r2, [r3, #24]
}
 800127a:	bf00      	nop
 800127c:	370c      	adds	r7, #12
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr
	...

08001288 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b086      	sub	sp, #24
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d101      	bne.n	800129a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001296:	2301      	movs	r3, #1
 8001298:	e25e      	b.n	8001758 <HAL_RCC_OscConfig+0x4d0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f003 0301 	and.w	r3, r3, #1
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d075      	beq.n	8001392 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012a6:	4b88      	ldr	r3, [pc, #544]	@ (80014c8 <HAL_RCC_OscConfig+0x240>)
 80012a8:	689b      	ldr	r3, [r3, #8]
 80012aa:	f003 030c 	and.w	r3, r3, #12
 80012ae:	2b04      	cmp	r3, #4
 80012b0:	d00c      	beq.n	80012cc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012b2:	4b85      	ldr	r3, [pc, #532]	@ (80014c8 <HAL_RCC_OscConfig+0x240>)
 80012b4:	689b      	ldr	r3, [r3, #8]
 80012b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012ba:	2b08      	cmp	r3, #8
 80012bc:	d112      	bne.n	80012e4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012be:	4b82      	ldr	r3, [pc, #520]	@ (80014c8 <HAL_RCC_OscConfig+0x240>)
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80012c6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80012ca:	d10b      	bne.n	80012e4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012cc:	4b7e      	ldr	r3, [pc, #504]	@ (80014c8 <HAL_RCC_OscConfig+0x240>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d05b      	beq.n	8001390 <HAL_RCC_OscConfig+0x108>
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d157      	bne.n	8001390 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80012e0:	2301      	movs	r3, #1
 80012e2:	e239      	b.n	8001758 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80012ec:	d106      	bne.n	80012fc <HAL_RCC_OscConfig+0x74>
 80012ee:	4b76      	ldr	r3, [pc, #472]	@ (80014c8 <HAL_RCC_OscConfig+0x240>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	4a75      	ldr	r2, [pc, #468]	@ (80014c8 <HAL_RCC_OscConfig+0x240>)
 80012f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80012f8:	6013      	str	r3, [r2, #0]
 80012fa:	e01d      	b.n	8001338 <HAL_RCC_OscConfig+0xb0>
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001304:	d10c      	bne.n	8001320 <HAL_RCC_OscConfig+0x98>
 8001306:	4b70      	ldr	r3, [pc, #448]	@ (80014c8 <HAL_RCC_OscConfig+0x240>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4a6f      	ldr	r2, [pc, #444]	@ (80014c8 <HAL_RCC_OscConfig+0x240>)
 800130c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001310:	6013      	str	r3, [r2, #0]
 8001312:	4b6d      	ldr	r3, [pc, #436]	@ (80014c8 <HAL_RCC_OscConfig+0x240>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4a6c      	ldr	r2, [pc, #432]	@ (80014c8 <HAL_RCC_OscConfig+0x240>)
 8001318:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800131c:	6013      	str	r3, [r2, #0]
 800131e:	e00b      	b.n	8001338 <HAL_RCC_OscConfig+0xb0>
 8001320:	4b69      	ldr	r3, [pc, #420]	@ (80014c8 <HAL_RCC_OscConfig+0x240>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a68      	ldr	r2, [pc, #416]	@ (80014c8 <HAL_RCC_OscConfig+0x240>)
 8001326:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800132a:	6013      	str	r3, [r2, #0]
 800132c:	4b66      	ldr	r3, [pc, #408]	@ (80014c8 <HAL_RCC_OscConfig+0x240>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a65      	ldr	r2, [pc, #404]	@ (80014c8 <HAL_RCC_OscConfig+0x240>)
 8001332:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001336:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d013      	beq.n	8001368 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001340:	f7ff fcfe 	bl	8000d40 <HAL_GetTick>
 8001344:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001346:	e008      	b.n	800135a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001348:	f7ff fcfa 	bl	8000d40 <HAL_GetTick>
 800134c:	4602      	mov	r2, r0
 800134e:	693b      	ldr	r3, [r7, #16]
 8001350:	1ad3      	subs	r3, r2, r3
 8001352:	2b64      	cmp	r3, #100	@ 0x64
 8001354:	d901      	bls.n	800135a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001356:	2303      	movs	r3, #3
 8001358:	e1fe      	b.n	8001758 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800135a:	4b5b      	ldr	r3, [pc, #364]	@ (80014c8 <HAL_RCC_OscConfig+0x240>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001362:	2b00      	cmp	r3, #0
 8001364:	d0f0      	beq.n	8001348 <HAL_RCC_OscConfig+0xc0>
 8001366:	e014      	b.n	8001392 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001368:	f7ff fcea 	bl	8000d40 <HAL_GetTick>
 800136c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800136e:	e008      	b.n	8001382 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001370:	f7ff fce6 	bl	8000d40 <HAL_GetTick>
 8001374:	4602      	mov	r2, r0
 8001376:	693b      	ldr	r3, [r7, #16]
 8001378:	1ad3      	subs	r3, r2, r3
 800137a:	2b64      	cmp	r3, #100	@ 0x64
 800137c:	d901      	bls.n	8001382 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800137e:	2303      	movs	r3, #3
 8001380:	e1ea      	b.n	8001758 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001382:	4b51      	ldr	r3, [pc, #324]	@ (80014c8 <HAL_RCC_OscConfig+0x240>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800138a:	2b00      	cmp	r3, #0
 800138c:	d1f0      	bne.n	8001370 <HAL_RCC_OscConfig+0xe8>
 800138e:	e000      	b.n	8001392 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001390:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f003 0302 	and.w	r3, r3, #2
 800139a:	2b00      	cmp	r3, #0
 800139c:	d063      	beq.n	8001466 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800139e:	4b4a      	ldr	r3, [pc, #296]	@ (80014c8 <HAL_RCC_OscConfig+0x240>)
 80013a0:	689b      	ldr	r3, [r3, #8]
 80013a2:	f003 030c 	and.w	r3, r3, #12
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d00b      	beq.n	80013c2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013aa:	4b47      	ldr	r3, [pc, #284]	@ (80014c8 <HAL_RCC_OscConfig+0x240>)
 80013ac:	689b      	ldr	r3, [r3, #8]
 80013ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013b2:	2b08      	cmp	r3, #8
 80013b4:	d11c      	bne.n	80013f0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013b6:	4b44      	ldr	r3, [pc, #272]	@ (80014c8 <HAL_RCC_OscConfig+0x240>)
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d116      	bne.n	80013f0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013c2:	4b41      	ldr	r3, [pc, #260]	@ (80014c8 <HAL_RCC_OscConfig+0x240>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f003 0302 	and.w	r3, r3, #2
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d005      	beq.n	80013da <HAL_RCC_OscConfig+0x152>
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	68db      	ldr	r3, [r3, #12]
 80013d2:	2b01      	cmp	r3, #1
 80013d4:	d001      	beq.n	80013da <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80013d6:	2301      	movs	r3, #1
 80013d8:	e1be      	b.n	8001758 <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013da:	4b3b      	ldr	r3, [pc, #236]	@ (80014c8 <HAL_RCC_OscConfig+0x240>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	691b      	ldr	r3, [r3, #16]
 80013e6:	00db      	lsls	r3, r3, #3
 80013e8:	4937      	ldr	r1, [pc, #220]	@ (80014c8 <HAL_RCC_OscConfig+0x240>)
 80013ea:	4313      	orrs	r3, r2
 80013ec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013ee:	e03a      	b.n	8001466 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	68db      	ldr	r3, [r3, #12]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d020      	beq.n	800143a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013f8:	4b34      	ldr	r3, [pc, #208]	@ (80014cc <HAL_RCC_OscConfig+0x244>)
 80013fa:	2201      	movs	r2, #1
 80013fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013fe:	f7ff fc9f 	bl	8000d40 <HAL_GetTick>
 8001402:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001404:	e008      	b.n	8001418 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001406:	f7ff fc9b 	bl	8000d40 <HAL_GetTick>
 800140a:	4602      	mov	r2, r0
 800140c:	693b      	ldr	r3, [r7, #16]
 800140e:	1ad3      	subs	r3, r2, r3
 8001410:	2b02      	cmp	r3, #2
 8001412:	d901      	bls.n	8001418 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001414:	2303      	movs	r3, #3
 8001416:	e19f      	b.n	8001758 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001418:	4b2b      	ldr	r3, [pc, #172]	@ (80014c8 <HAL_RCC_OscConfig+0x240>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f003 0302 	and.w	r3, r3, #2
 8001420:	2b00      	cmp	r3, #0
 8001422:	d0f0      	beq.n	8001406 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001424:	4b28      	ldr	r3, [pc, #160]	@ (80014c8 <HAL_RCC_OscConfig+0x240>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	691b      	ldr	r3, [r3, #16]
 8001430:	00db      	lsls	r3, r3, #3
 8001432:	4925      	ldr	r1, [pc, #148]	@ (80014c8 <HAL_RCC_OscConfig+0x240>)
 8001434:	4313      	orrs	r3, r2
 8001436:	600b      	str	r3, [r1, #0]
 8001438:	e015      	b.n	8001466 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800143a:	4b24      	ldr	r3, [pc, #144]	@ (80014cc <HAL_RCC_OscConfig+0x244>)
 800143c:	2200      	movs	r2, #0
 800143e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001440:	f7ff fc7e 	bl	8000d40 <HAL_GetTick>
 8001444:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001446:	e008      	b.n	800145a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001448:	f7ff fc7a 	bl	8000d40 <HAL_GetTick>
 800144c:	4602      	mov	r2, r0
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	1ad3      	subs	r3, r2, r3
 8001452:	2b02      	cmp	r3, #2
 8001454:	d901      	bls.n	800145a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001456:	2303      	movs	r3, #3
 8001458:	e17e      	b.n	8001758 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800145a:	4b1b      	ldr	r3, [pc, #108]	@ (80014c8 <HAL_RCC_OscConfig+0x240>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f003 0302 	and.w	r3, r3, #2
 8001462:	2b00      	cmp	r3, #0
 8001464:	d1f0      	bne.n	8001448 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f003 0308 	and.w	r3, r3, #8
 800146e:	2b00      	cmp	r3, #0
 8001470:	d036      	beq.n	80014e0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	695b      	ldr	r3, [r3, #20]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d016      	beq.n	80014a8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800147a:	4b15      	ldr	r3, [pc, #84]	@ (80014d0 <HAL_RCC_OscConfig+0x248>)
 800147c:	2201      	movs	r2, #1
 800147e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001480:	f7ff fc5e 	bl	8000d40 <HAL_GetTick>
 8001484:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001486:	e008      	b.n	800149a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001488:	f7ff fc5a 	bl	8000d40 <HAL_GetTick>
 800148c:	4602      	mov	r2, r0
 800148e:	693b      	ldr	r3, [r7, #16]
 8001490:	1ad3      	subs	r3, r2, r3
 8001492:	2b02      	cmp	r3, #2
 8001494:	d901      	bls.n	800149a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001496:	2303      	movs	r3, #3
 8001498:	e15e      	b.n	8001758 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800149a:	4b0b      	ldr	r3, [pc, #44]	@ (80014c8 <HAL_RCC_OscConfig+0x240>)
 800149c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800149e:	f003 0302 	and.w	r3, r3, #2
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d0f0      	beq.n	8001488 <HAL_RCC_OscConfig+0x200>
 80014a6:	e01b      	b.n	80014e0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014a8:	4b09      	ldr	r3, [pc, #36]	@ (80014d0 <HAL_RCC_OscConfig+0x248>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014ae:	f7ff fc47 	bl	8000d40 <HAL_GetTick>
 80014b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014b4:	e00e      	b.n	80014d4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014b6:	f7ff fc43 	bl	8000d40 <HAL_GetTick>
 80014ba:	4602      	mov	r2, r0
 80014bc:	693b      	ldr	r3, [r7, #16]
 80014be:	1ad3      	subs	r3, r2, r3
 80014c0:	2b02      	cmp	r3, #2
 80014c2:	d907      	bls.n	80014d4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80014c4:	2303      	movs	r3, #3
 80014c6:	e147      	b.n	8001758 <HAL_RCC_OscConfig+0x4d0>
 80014c8:	40023800 	.word	0x40023800
 80014cc:	42470000 	.word	0x42470000
 80014d0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014d4:	4b88      	ldr	r3, [pc, #544]	@ (80016f8 <HAL_RCC_OscConfig+0x470>)
 80014d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80014d8:	f003 0302 	and.w	r3, r3, #2
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d1ea      	bne.n	80014b6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f003 0304 	and.w	r3, r3, #4
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	f000 8097 	beq.w	800161c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014ee:	2300      	movs	r3, #0
 80014f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014f2:	4b81      	ldr	r3, [pc, #516]	@ (80016f8 <HAL_RCC_OscConfig+0x470>)
 80014f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d10f      	bne.n	800151e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014fe:	2300      	movs	r3, #0
 8001500:	60bb      	str	r3, [r7, #8]
 8001502:	4b7d      	ldr	r3, [pc, #500]	@ (80016f8 <HAL_RCC_OscConfig+0x470>)
 8001504:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001506:	4a7c      	ldr	r2, [pc, #496]	@ (80016f8 <HAL_RCC_OscConfig+0x470>)
 8001508:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800150c:	6413      	str	r3, [r2, #64]	@ 0x40
 800150e:	4b7a      	ldr	r3, [pc, #488]	@ (80016f8 <HAL_RCC_OscConfig+0x470>)
 8001510:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001512:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001516:	60bb      	str	r3, [r7, #8]
 8001518:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800151a:	2301      	movs	r3, #1
 800151c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800151e:	4b77      	ldr	r3, [pc, #476]	@ (80016fc <HAL_RCC_OscConfig+0x474>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001526:	2b00      	cmp	r3, #0
 8001528:	d118      	bne.n	800155c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800152a:	4b74      	ldr	r3, [pc, #464]	@ (80016fc <HAL_RCC_OscConfig+0x474>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4a73      	ldr	r2, [pc, #460]	@ (80016fc <HAL_RCC_OscConfig+0x474>)
 8001530:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001534:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001536:	f7ff fc03 	bl	8000d40 <HAL_GetTick>
 800153a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800153c:	e008      	b.n	8001550 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800153e:	f7ff fbff 	bl	8000d40 <HAL_GetTick>
 8001542:	4602      	mov	r2, r0
 8001544:	693b      	ldr	r3, [r7, #16]
 8001546:	1ad3      	subs	r3, r2, r3
 8001548:	2b02      	cmp	r3, #2
 800154a:	d901      	bls.n	8001550 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800154c:	2303      	movs	r3, #3
 800154e:	e103      	b.n	8001758 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001550:	4b6a      	ldr	r3, [pc, #424]	@ (80016fc <HAL_RCC_OscConfig+0x474>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001558:	2b00      	cmp	r3, #0
 800155a:	d0f0      	beq.n	800153e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	689b      	ldr	r3, [r3, #8]
 8001560:	2b01      	cmp	r3, #1
 8001562:	d106      	bne.n	8001572 <HAL_RCC_OscConfig+0x2ea>
 8001564:	4b64      	ldr	r3, [pc, #400]	@ (80016f8 <HAL_RCC_OscConfig+0x470>)
 8001566:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001568:	4a63      	ldr	r2, [pc, #396]	@ (80016f8 <HAL_RCC_OscConfig+0x470>)
 800156a:	f043 0301 	orr.w	r3, r3, #1
 800156e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001570:	e01c      	b.n	80015ac <HAL_RCC_OscConfig+0x324>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	689b      	ldr	r3, [r3, #8]
 8001576:	2b05      	cmp	r3, #5
 8001578:	d10c      	bne.n	8001594 <HAL_RCC_OscConfig+0x30c>
 800157a:	4b5f      	ldr	r3, [pc, #380]	@ (80016f8 <HAL_RCC_OscConfig+0x470>)
 800157c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800157e:	4a5e      	ldr	r2, [pc, #376]	@ (80016f8 <HAL_RCC_OscConfig+0x470>)
 8001580:	f043 0304 	orr.w	r3, r3, #4
 8001584:	6713      	str	r3, [r2, #112]	@ 0x70
 8001586:	4b5c      	ldr	r3, [pc, #368]	@ (80016f8 <HAL_RCC_OscConfig+0x470>)
 8001588:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800158a:	4a5b      	ldr	r2, [pc, #364]	@ (80016f8 <HAL_RCC_OscConfig+0x470>)
 800158c:	f043 0301 	orr.w	r3, r3, #1
 8001590:	6713      	str	r3, [r2, #112]	@ 0x70
 8001592:	e00b      	b.n	80015ac <HAL_RCC_OscConfig+0x324>
 8001594:	4b58      	ldr	r3, [pc, #352]	@ (80016f8 <HAL_RCC_OscConfig+0x470>)
 8001596:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001598:	4a57      	ldr	r2, [pc, #348]	@ (80016f8 <HAL_RCC_OscConfig+0x470>)
 800159a:	f023 0301 	bic.w	r3, r3, #1
 800159e:	6713      	str	r3, [r2, #112]	@ 0x70
 80015a0:	4b55      	ldr	r3, [pc, #340]	@ (80016f8 <HAL_RCC_OscConfig+0x470>)
 80015a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015a4:	4a54      	ldr	r2, [pc, #336]	@ (80016f8 <HAL_RCC_OscConfig+0x470>)
 80015a6:	f023 0304 	bic.w	r3, r3, #4
 80015aa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	689b      	ldr	r3, [r3, #8]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d015      	beq.n	80015e0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015b4:	f7ff fbc4 	bl	8000d40 <HAL_GetTick>
 80015b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015ba:	e00a      	b.n	80015d2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015bc:	f7ff fbc0 	bl	8000d40 <HAL_GetTick>
 80015c0:	4602      	mov	r2, r0
 80015c2:	693b      	ldr	r3, [r7, #16]
 80015c4:	1ad3      	subs	r3, r2, r3
 80015c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d901      	bls.n	80015d2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80015ce:	2303      	movs	r3, #3
 80015d0:	e0c2      	b.n	8001758 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015d2:	4b49      	ldr	r3, [pc, #292]	@ (80016f8 <HAL_RCC_OscConfig+0x470>)
 80015d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015d6:	f003 0302 	and.w	r3, r3, #2
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d0ee      	beq.n	80015bc <HAL_RCC_OscConfig+0x334>
 80015de:	e014      	b.n	800160a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015e0:	f7ff fbae 	bl	8000d40 <HAL_GetTick>
 80015e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015e6:	e00a      	b.n	80015fe <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015e8:	f7ff fbaa 	bl	8000d40 <HAL_GetTick>
 80015ec:	4602      	mov	r2, r0
 80015ee:	693b      	ldr	r3, [r7, #16]
 80015f0:	1ad3      	subs	r3, r2, r3
 80015f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d901      	bls.n	80015fe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80015fa:	2303      	movs	r3, #3
 80015fc:	e0ac      	b.n	8001758 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015fe:	4b3e      	ldr	r3, [pc, #248]	@ (80016f8 <HAL_RCC_OscConfig+0x470>)
 8001600:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001602:	f003 0302 	and.w	r3, r3, #2
 8001606:	2b00      	cmp	r3, #0
 8001608:	d1ee      	bne.n	80015e8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800160a:	7dfb      	ldrb	r3, [r7, #23]
 800160c:	2b01      	cmp	r3, #1
 800160e:	d105      	bne.n	800161c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001610:	4b39      	ldr	r3, [pc, #228]	@ (80016f8 <HAL_RCC_OscConfig+0x470>)
 8001612:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001614:	4a38      	ldr	r2, [pc, #224]	@ (80016f8 <HAL_RCC_OscConfig+0x470>)
 8001616:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800161a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	699b      	ldr	r3, [r3, #24]
 8001620:	2b00      	cmp	r3, #0
 8001622:	f000 8098 	beq.w	8001756 <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001626:	4b34      	ldr	r3, [pc, #208]	@ (80016f8 <HAL_RCC_OscConfig+0x470>)
 8001628:	689b      	ldr	r3, [r3, #8]
 800162a:	f003 030c 	and.w	r3, r3, #12
 800162e:	2b08      	cmp	r3, #8
 8001630:	d05c      	beq.n	80016ec <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	699b      	ldr	r3, [r3, #24]
 8001636:	2b02      	cmp	r3, #2
 8001638:	d141      	bne.n	80016be <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800163a:	4b31      	ldr	r3, [pc, #196]	@ (8001700 <HAL_RCC_OscConfig+0x478>)
 800163c:	2200      	movs	r2, #0
 800163e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001640:	f7ff fb7e 	bl	8000d40 <HAL_GetTick>
 8001644:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001646:	e008      	b.n	800165a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001648:	f7ff fb7a 	bl	8000d40 <HAL_GetTick>
 800164c:	4602      	mov	r2, r0
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	1ad3      	subs	r3, r2, r3
 8001652:	2b02      	cmp	r3, #2
 8001654:	d901      	bls.n	800165a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001656:	2303      	movs	r3, #3
 8001658:	e07e      	b.n	8001758 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800165a:	4b27      	ldr	r3, [pc, #156]	@ (80016f8 <HAL_RCC_OscConfig+0x470>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001662:	2b00      	cmp	r3, #0
 8001664:	d1f0      	bne.n	8001648 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	69da      	ldr	r2, [r3, #28]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6a1b      	ldr	r3, [r3, #32]
 800166e:	431a      	orrs	r2, r3
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001674:	019b      	lsls	r3, r3, #6
 8001676:	431a      	orrs	r2, r3
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800167c:	085b      	lsrs	r3, r3, #1
 800167e:	3b01      	subs	r3, #1
 8001680:	041b      	lsls	r3, r3, #16
 8001682:	431a      	orrs	r2, r3
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001688:	061b      	lsls	r3, r3, #24
 800168a:	491b      	ldr	r1, [pc, #108]	@ (80016f8 <HAL_RCC_OscConfig+0x470>)
 800168c:	4313      	orrs	r3, r2
 800168e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001690:	4b1b      	ldr	r3, [pc, #108]	@ (8001700 <HAL_RCC_OscConfig+0x478>)
 8001692:	2201      	movs	r2, #1
 8001694:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001696:	f7ff fb53 	bl	8000d40 <HAL_GetTick>
 800169a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800169c:	e008      	b.n	80016b0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800169e:	f7ff fb4f 	bl	8000d40 <HAL_GetTick>
 80016a2:	4602      	mov	r2, r0
 80016a4:	693b      	ldr	r3, [r7, #16]
 80016a6:	1ad3      	subs	r3, r2, r3
 80016a8:	2b02      	cmp	r3, #2
 80016aa:	d901      	bls.n	80016b0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80016ac:	2303      	movs	r3, #3
 80016ae:	e053      	b.n	8001758 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016b0:	4b11      	ldr	r3, [pc, #68]	@ (80016f8 <HAL_RCC_OscConfig+0x470>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d0f0      	beq.n	800169e <HAL_RCC_OscConfig+0x416>
 80016bc:	e04b      	b.n	8001756 <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016be:	4b10      	ldr	r3, [pc, #64]	@ (8001700 <HAL_RCC_OscConfig+0x478>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016c4:	f7ff fb3c 	bl	8000d40 <HAL_GetTick>
 80016c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016ca:	e008      	b.n	80016de <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016cc:	f7ff fb38 	bl	8000d40 <HAL_GetTick>
 80016d0:	4602      	mov	r2, r0
 80016d2:	693b      	ldr	r3, [r7, #16]
 80016d4:	1ad3      	subs	r3, r2, r3
 80016d6:	2b02      	cmp	r3, #2
 80016d8:	d901      	bls.n	80016de <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80016da:	2303      	movs	r3, #3
 80016dc:	e03c      	b.n	8001758 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016de:	4b06      	ldr	r3, [pc, #24]	@ (80016f8 <HAL_RCC_OscConfig+0x470>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d1f0      	bne.n	80016cc <HAL_RCC_OscConfig+0x444>
 80016ea:	e034      	b.n	8001756 <HAL_RCC_OscConfig+0x4ce>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	699b      	ldr	r3, [r3, #24]
 80016f0:	2b01      	cmp	r3, #1
 80016f2:	d107      	bne.n	8001704 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80016f4:	2301      	movs	r3, #1
 80016f6:	e02f      	b.n	8001758 <HAL_RCC_OscConfig+0x4d0>
 80016f8:	40023800 	.word	0x40023800
 80016fc:	40007000 	.word	0x40007000
 8001700:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001704:	4b16      	ldr	r3, [pc, #88]	@ (8001760 <HAL_RCC_OscConfig+0x4d8>)
 8001706:	689b      	ldr	r3, [r3, #8]
 8001708:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	69db      	ldr	r3, [r3, #28]
 8001714:	429a      	cmp	r2, r3
 8001716:	d11c      	bne.n	8001752 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001722:	429a      	cmp	r2, r3
 8001724:	d115      	bne.n	8001752 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001726:	68fa      	ldr	r2, [r7, #12]
 8001728:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800172c:	4013      	ands	r3, r2
 800172e:	687a      	ldr	r2, [r7, #4]
 8001730:	6a52      	ldr	r2, [r2, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001732:	4293      	cmp	r3, r2
 8001734:	d10d      	bne.n	8001752 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001740:	429a      	cmp	r2, r3
 8001742:	d106      	bne.n	8001752 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800174e:	429a      	cmp	r2, r3
 8001750:	d001      	beq.n	8001756 <HAL_RCC_OscConfig+0x4ce>
        {
          return HAL_ERROR;
 8001752:	2301      	movs	r3, #1
 8001754:	e000      	b.n	8001758 <HAL_RCC_OscConfig+0x4d0>
        }
      }
    }
  }
  return HAL_OK;
 8001756:	2300      	movs	r3, #0
}
 8001758:	4618      	mov	r0, r3
 800175a:	3718      	adds	r7, #24
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}
 8001760:	40023800 	.word	0x40023800

08001764 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b084      	sub	sp, #16
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
 800176c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d101      	bne.n	8001778 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001774:	2301      	movs	r3, #1
 8001776:	e0cc      	b.n	8001912 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001778:	4b68      	ldr	r3, [pc, #416]	@ (800191c <HAL_RCC_ClockConfig+0x1b8>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f003 030f 	and.w	r3, r3, #15
 8001780:	683a      	ldr	r2, [r7, #0]
 8001782:	429a      	cmp	r2, r3
 8001784:	d90c      	bls.n	80017a0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001786:	4b65      	ldr	r3, [pc, #404]	@ (800191c <HAL_RCC_ClockConfig+0x1b8>)
 8001788:	683a      	ldr	r2, [r7, #0]
 800178a:	b2d2      	uxtb	r2, r2
 800178c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800178e:	4b63      	ldr	r3, [pc, #396]	@ (800191c <HAL_RCC_ClockConfig+0x1b8>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f003 030f 	and.w	r3, r3, #15
 8001796:	683a      	ldr	r2, [r7, #0]
 8001798:	429a      	cmp	r2, r3
 800179a:	d001      	beq.n	80017a0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800179c:	2301      	movs	r3, #1
 800179e:	e0b8      	b.n	8001912 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f003 0302 	and.w	r3, r3, #2
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d020      	beq.n	80017ee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f003 0304 	and.w	r3, r3, #4
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d005      	beq.n	80017c4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017b8:	4b59      	ldr	r3, [pc, #356]	@ (8001920 <HAL_RCC_ClockConfig+0x1bc>)
 80017ba:	689b      	ldr	r3, [r3, #8]
 80017bc:	4a58      	ldr	r2, [pc, #352]	@ (8001920 <HAL_RCC_ClockConfig+0x1bc>)
 80017be:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80017c2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f003 0308 	and.w	r3, r3, #8
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d005      	beq.n	80017dc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017d0:	4b53      	ldr	r3, [pc, #332]	@ (8001920 <HAL_RCC_ClockConfig+0x1bc>)
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	4a52      	ldr	r2, [pc, #328]	@ (8001920 <HAL_RCC_ClockConfig+0x1bc>)
 80017d6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80017da:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017dc:	4b50      	ldr	r3, [pc, #320]	@ (8001920 <HAL_RCC_ClockConfig+0x1bc>)
 80017de:	689b      	ldr	r3, [r3, #8]
 80017e0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	689b      	ldr	r3, [r3, #8]
 80017e8:	494d      	ldr	r1, [pc, #308]	@ (8001920 <HAL_RCC_ClockConfig+0x1bc>)
 80017ea:	4313      	orrs	r3, r2
 80017ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f003 0301 	and.w	r3, r3, #1
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d044      	beq.n	8001884 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	2b01      	cmp	r3, #1
 8001800:	d107      	bne.n	8001812 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001802:	4b47      	ldr	r3, [pc, #284]	@ (8001920 <HAL_RCC_ClockConfig+0x1bc>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800180a:	2b00      	cmp	r3, #0
 800180c:	d119      	bne.n	8001842 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	e07f      	b.n	8001912 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	2b02      	cmp	r3, #2
 8001818:	d003      	beq.n	8001822 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800181e:	2b03      	cmp	r3, #3
 8001820:	d107      	bne.n	8001832 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001822:	4b3f      	ldr	r3, [pc, #252]	@ (8001920 <HAL_RCC_ClockConfig+0x1bc>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800182a:	2b00      	cmp	r3, #0
 800182c:	d109      	bne.n	8001842 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800182e:	2301      	movs	r3, #1
 8001830:	e06f      	b.n	8001912 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001832:	4b3b      	ldr	r3, [pc, #236]	@ (8001920 <HAL_RCC_ClockConfig+0x1bc>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f003 0302 	and.w	r3, r3, #2
 800183a:	2b00      	cmp	r3, #0
 800183c:	d101      	bne.n	8001842 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800183e:	2301      	movs	r3, #1
 8001840:	e067      	b.n	8001912 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001842:	4b37      	ldr	r3, [pc, #220]	@ (8001920 <HAL_RCC_ClockConfig+0x1bc>)
 8001844:	689b      	ldr	r3, [r3, #8]
 8001846:	f023 0203 	bic.w	r2, r3, #3
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	4934      	ldr	r1, [pc, #208]	@ (8001920 <HAL_RCC_ClockConfig+0x1bc>)
 8001850:	4313      	orrs	r3, r2
 8001852:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001854:	f7ff fa74 	bl	8000d40 <HAL_GetTick>
 8001858:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800185a:	e00a      	b.n	8001872 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800185c:	f7ff fa70 	bl	8000d40 <HAL_GetTick>
 8001860:	4602      	mov	r2, r0
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	1ad3      	subs	r3, r2, r3
 8001866:	f241 3288 	movw	r2, #5000	@ 0x1388
 800186a:	4293      	cmp	r3, r2
 800186c:	d901      	bls.n	8001872 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800186e:	2303      	movs	r3, #3
 8001870:	e04f      	b.n	8001912 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001872:	4b2b      	ldr	r3, [pc, #172]	@ (8001920 <HAL_RCC_ClockConfig+0x1bc>)
 8001874:	689b      	ldr	r3, [r3, #8]
 8001876:	f003 020c 	and.w	r2, r3, #12
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	009b      	lsls	r3, r3, #2
 8001880:	429a      	cmp	r2, r3
 8001882:	d1eb      	bne.n	800185c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001884:	4b25      	ldr	r3, [pc, #148]	@ (800191c <HAL_RCC_ClockConfig+0x1b8>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f003 030f 	and.w	r3, r3, #15
 800188c:	683a      	ldr	r2, [r7, #0]
 800188e:	429a      	cmp	r2, r3
 8001890:	d20c      	bcs.n	80018ac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001892:	4b22      	ldr	r3, [pc, #136]	@ (800191c <HAL_RCC_ClockConfig+0x1b8>)
 8001894:	683a      	ldr	r2, [r7, #0]
 8001896:	b2d2      	uxtb	r2, r2
 8001898:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800189a:	4b20      	ldr	r3, [pc, #128]	@ (800191c <HAL_RCC_ClockConfig+0x1b8>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f003 030f 	and.w	r3, r3, #15
 80018a2:	683a      	ldr	r2, [r7, #0]
 80018a4:	429a      	cmp	r2, r3
 80018a6:	d001      	beq.n	80018ac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80018a8:	2301      	movs	r3, #1
 80018aa:	e032      	b.n	8001912 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f003 0304 	and.w	r3, r3, #4
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d008      	beq.n	80018ca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018b8:	4b19      	ldr	r3, [pc, #100]	@ (8001920 <HAL_RCC_ClockConfig+0x1bc>)
 80018ba:	689b      	ldr	r3, [r3, #8]
 80018bc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	68db      	ldr	r3, [r3, #12]
 80018c4:	4916      	ldr	r1, [pc, #88]	@ (8001920 <HAL_RCC_ClockConfig+0x1bc>)
 80018c6:	4313      	orrs	r3, r2
 80018c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f003 0308 	and.w	r3, r3, #8
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d009      	beq.n	80018ea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018d6:	4b12      	ldr	r3, [pc, #72]	@ (8001920 <HAL_RCC_ClockConfig+0x1bc>)
 80018d8:	689b      	ldr	r3, [r3, #8]
 80018da:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	691b      	ldr	r3, [r3, #16]
 80018e2:	00db      	lsls	r3, r3, #3
 80018e4:	490e      	ldr	r1, [pc, #56]	@ (8001920 <HAL_RCC_ClockConfig+0x1bc>)
 80018e6:	4313      	orrs	r3, r2
 80018e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80018ea:	f000 f821 	bl	8001930 <HAL_RCC_GetSysClockFreq>
 80018ee:	4602      	mov	r2, r0
 80018f0:	4b0b      	ldr	r3, [pc, #44]	@ (8001920 <HAL_RCC_ClockConfig+0x1bc>)
 80018f2:	689b      	ldr	r3, [r3, #8]
 80018f4:	091b      	lsrs	r3, r3, #4
 80018f6:	f003 030f 	and.w	r3, r3, #15
 80018fa:	490a      	ldr	r1, [pc, #40]	@ (8001924 <HAL_RCC_ClockConfig+0x1c0>)
 80018fc:	5ccb      	ldrb	r3, [r1, r3]
 80018fe:	fa22 f303 	lsr.w	r3, r2, r3
 8001902:	4a09      	ldr	r2, [pc, #36]	@ (8001928 <HAL_RCC_ClockConfig+0x1c4>)
 8001904:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001906:	4b09      	ldr	r3, [pc, #36]	@ (800192c <HAL_RCC_ClockConfig+0x1c8>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4618      	mov	r0, r3
 800190c:	f7ff f920 	bl	8000b50 <HAL_InitTick>

  return HAL_OK;
 8001910:	2300      	movs	r3, #0
}
 8001912:	4618      	mov	r0, r3
 8001914:	3710      	adds	r7, #16
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	40023c00 	.word	0x40023c00
 8001920:	40023800 	.word	0x40023800
 8001924:	0800642c 	.word	0x0800642c
 8001928:	20000000 	.word	0x20000000
 800192c:	20000004 	.word	0x20000004

08001930 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001930:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001934:	b094      	sub	sp, #80	@ 0x50
 8001936:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001938:	2300      	movs	r3, #0
 800193a:	647b      	str	r3, [r7, #68]	@ 0x44
 800193c:	2300      	movs	r3, #0
 800193e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001940:	2300      	movs	r3, #0
 8001942:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001944:	2300      	movs	r3, #0
 8001946:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001948:	4b79      	ldr	r3, [pc, #484]	@ (8001b30 <HAL_RCC_GetSysClockFreq+0x200>)
 800194a:	689b      	ldr	r3, [r3, #8]
 800194c:	f003 030c 	and.w	r3, r3, #12
 8001950:	2b08      	cmp	r3, #8
 8001952:	d00d      	beq.n	8001970 <HAL_RCC_GetSysClockFreq+0x40>
 8001954:	2b08      	cmp	r3, #8
 8001956:	f200 80e1 	bhi.w	8001b1c <HAL_RCC_GetSysClockFreq+0x1ec>
 800195a:	2b00      	cmp	r3, #0
 800195c:	d002      	beq.n	8001964 <HAL_RCC_GetSysClockFreq+0x34>
 800195e:	2b04      	cmp	r3, #4
 8001960:	d003      	beq.n	800196a <HAL_RCC_GetSysClockFreq+0x3a>
 8001962:	e0db      	b.n	8001b1c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001964:	4b73      	ldr	r3, [pc, #460]	@ (8001b34 <HAL_RCC_GetSysClockFreq+0x204>)
 8001966:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8001968:	e0db      	b.n	8001b22 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800196a:	4b73      	ldr	r3, [pc, #460]	@ (8001b38 <HAL_RCC_GetSysClockFreq+0x208>)
 800196c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800196e:	e0d8      	b.n	8001b22 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001970:	4b6f      	ldr	r3, [pc, #444]	@ (8001b30 <HAL_RCC_GetSysClockFreq+0x200>)
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001978:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800197a:	4b6d      	ldr	r3, [pc, #436]	@ (8001b30 <HAL_RCC_GetSysClockFreq+0x200>)
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001982:	2b00      	cmp	r3, #0
 8001984:	d063      	beq.n	8001a4e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001986:	4b6a      	ldr	r3, [pc, #424]	@ (8001b30 <HAL_RCC_GetSysClockFreq+0x200>)
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	099b      	lsrs	r3, r3, #6
 800198c:	2200      	movs	r2, #0
 800198e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001990:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001992:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001994:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001998:	633b      	str	r3, [r7, #48]	@ 0x30
 800199a:	2300      	movs	r3, #0
 800199c:	637b      	str	r3, [r7, #52]	@ 0x34
 800199e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80019a2:	4622      	mov	r2, r4
 80019a4:	462b      	mov	r3, r5
 80019a6:	f04f 0000 	mov.w	r0, #0
 80019aa:	f04f 0100 	mov.w	r1, #0
 80019ae:	0159      	lsls	r1, r3, #5
 80019b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80019b4:	0150      	lsls	r0, r2, #5
 80019b6:	4602      	mov	r2, r0
 80019b8:	460b      	mov	r3, r1
 80019ba:	4621      	mov	r1, r4
 80019bc:	1a51      	subs	r1, r2, r1
 80019be:	6139      	str	r1, [r7, #16]
 80019c0:	4629      	mov	r1, r5
 80019c2:	eb63 0301 	sbc.w	r3, r3, r1
 80019c6:	617b      	str	r3, [r7, #20]
 80019c8:	f04f 0200 	mov.w	r2, #0
 80019cc:	f04f 0300 	mov.w	r3, #0
 80019d0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80019d4:	4659      	mov	r1, fp
 80019d6:	018b      	lsls	r3, r1, #6
 80019d8:	4651      	mov	r1, sl
 80019da:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80019de:	4651      	mov	r1, sl
 80019e0:	018a      	lsls	r2, r1, #6
 80019e2:	4651      	mov	r1, sl
 80019e4:	ebb2 0801 	subs.w	r8, r2, r1
 80019e8:	4659      	mov	r1, fp
 80019ea:	eb63 0901 	sbc.w	r9, r3, r1
 80019ee:	f04f 0200 	mov.w	r2, #0
 80019f2:	f04f 0300 	mov.w	r3, #0
 80019f6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80019fa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80019fe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001a02:	4690      	mov	r8, r2
 8001a04:	4699      	mov	r9, r3
 8001a06:	4623      	mov	r3, r4
 8001a08:	eb18 0303 	adds.w	r3, r8, r3
 8001a0c:	60bb      	str	r3, [r7, #8]
 8001a0e:	462b      	mov	r3, r5
 8001a10:	eb49 0303 	adc.w	r3, r9, r3
 8001a14:	60fb      	str	r3, [r7, #12]
 8001a16:	f04f 0200 	mov.w	r2, #0
 8001a1a:	f04f 0300 	mov.w	r3, #0
 8001a1e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001a22:	4629      	mov	r1, r5
 8001a24:	024b      	lsls	r3, r1, #9
 8001a26:	4621      	mov	r1, r4
 8001a28:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001a2c:	4621      	mov	r1, r4
 8001a2e:	024a      	lsls	r2, r1, #9
 8001a30:	4610      	mov	r0, r2
 8001a32:	4619      	mov	r1, r3
 8001a34:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001a36:	2200      	movs	r2, #0
 8001a38:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001a3a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001a3c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001a40:	f7fe fc66 	bl	8000310 <__aeabi_uldivmod>
 8001a44:	4602      	mov	r2, r0
 8001a46:	460b      	mov	r3, r1
 8001a48:	4613      	mov	r3, r2
 8001a4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001a4c:	e058      	b.n	8001b00 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a4e:	4b38      	ldr	r3, [pc, #224]	@ (8001b30 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	099b      	lsrs	r3, r3, #6
 8001a54:	2200      	movs	r2, #0
 8001a56:	4618      	mov	r0, r3
 8001a58:	4611      	mov	r1, r2
 8001a5a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001a5e:	623b      	str	r3, [r7, #32]
 8001a60:	2300      	movs	r3, #0
 8001a62:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a64:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001a68:	4642      	mov	r2, r8
 8001a6a:	464b      	mov	r3, r9
 8001a6c:	f04f 0000 	mov.w	r0, #0
 8001a70:	f04f 0100 	mov.w	r1, #0
 8001a74:	0159      	lsls	r1, r3, #5
 8001a76:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a7a:	0150      	lsls	r0, r2, #5
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	460b      	mov	r3, r1
 8001a80:	4641      	mov	r1, r8
 8001a82:	ebb2 0a01 	subs.w	sl, r2, r1
 8001a86:	4649      	mov	r1, r9
 8001a88:	eb63 0b01 	sbc.w	fp, r3, r1
 8001a8c:	f04f 0200 	mov.w	r2, #0
 8001a90:	f04f 0300 	mov.w	r3, #0
 8001a94:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001a98:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001a9c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001aa0:	ebb2 040a 	subs.w	r4, r2, sl
 8001aa4:	eb63 050b 	sbc.w	r5, r3, fp
 8001aa8:	f04f 0200 	mov.w	r2, #0
 8001aac:	f04f 0300 	mov.w	r3, #0
 8001ab0:	00eb      	lsls	r3, r5, #3
 8001ab2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001ab6:	00e2      	lsls	r2, r4, #3
 8001ab8:	4614      	mov	r4, r2
 8001aba:	461d      	mov	r5, r3
 8001abc:	4643      	mov	r3, r8
 8001abe:	18e3      	adds	r3, r4, r3
 8001ac0:	603b      	str	r3, [r7, #0]
 8001ac2:	464b      	mov	r3, r9
 8001ac4:	eb45 0303 	adc.w	r3, r5, r3
 8001ac8:	607b      	str	r3, [r7, #4]
 8001aca:	f04f 0200 	mov.w	r2, #0
 8001ace:	f04f 0300 	mov.w	r3, #0
 8001ad2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001ad6:	4629      	mov	r1, r5
 8001ad8:	028b      	lsls	r3, r1, #10
 8001ada:	4621      	mov	r1, r4
 8001adc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001ae0:	4621      	mov	r1, r4
 8001ae2:	028a      	lsls	r2, r1, #10
 8001ae4:	4610      	mov	r0, r2
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001aea:	2200      	movs	r2, #0
 8001aec:	61bb      	str	r3, [r7, #24]
 8001aee:	61fa      	str	r2, [r7, #28]
 8001af0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001af4:	f7fe fc0c 	bl	8000310 <__aeabi_uldivmod>
 8001af8:	4602      	mov	r2, r0
 8001afa:	460b      	mov	r3, r1
 8001afc:	4613      	mov	r3, r2
 8001afe:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001b00:	4b0b      	ldr	r3, [pc, #44]	@ (8001b30 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	0c1b      	lsrs	r3, r3, #16
 8001b06:	f003 0303 	and.w	r3, r3, #3
 8001b0a:	3301      	adds	r3, #1
 8001b0c:	005b      	lsls	r3, r3, #1
 8001b0e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8001b10:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001b12:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001b14:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b18:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001b1a:	e002      	b.n	8001b22 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b1c:	4b05      	ldr	r3, [pc, #20]	@ (8001b34 <HAL_RCC_GetSysClockFreq+0x204>)
 8001b1e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001b20:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b22:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	3750      	adds	r7, #80	@ 0x50
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b2e:	bf00      	nop
 8001b30:	40023800 	.word	0x40023800
 8001b34:	00f42400 	.word	0x00f42400
 8001b38:	007a1200 	.word	0x007a1200

08001b3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b40:	4b03      	ldr	r3, [pc, #12]	@ (8001b50 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b42:	681b      	ldr	r3, [r3, #0]
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr
 8001b4e:	bf00      	nop
 8001b50:	20000000 	.word	0x20000000

08001b54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001b58:	f7ff fff0 	bl	8001b3c <HAL_RCC_GetHCLKFreq>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	4b05      	ldr	r3, [pc, #20]	@ (8001b74 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b60:	689b      	ldr	r3, [r3, #8]
 8001b62:	0a9b      	lsrs	r3, r3, #10
 8001b64:	f003 0307 	and.w	r3, r3, #7
 8001b68:	4903      	ldr	r1, [pc, #12]	@ (8001b78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b6a:	5ccb      	ldrb	r3, [r1, r3]
 8001b6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	40023800 	.word	0x40023800
 8001b78:	0800643c 	.word	0x0800643c

08001b7c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b083      	sub	sp, #12
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
 8001b84:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	220f      	movs	r2, #15
 8001b8a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001b8c:	4b12      	ldr	r3, [pc, #72]	@ (8001bd8 <HAL_RCC_GetClockConfig+0x5c>)
 8001b8e:	689b      	ldr	r3, [r3, #8]
 8001b90:	f003 0203 	and.w	r2, r3, #3
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001b98:	4b0f      	ldr	r3, [pc, #60]	@ (8001bd8 <HAL_RCC_GetClockConfig+0x5c>)
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001ba4:	4b0c      	ldr	r3, [pc, #48]	@ (8001bd8 <HAL_RCC_GetClockConfig+0x5c>)
 8001ba6:	689b      	ldr	r3, [r3, #8]
 8001ba8:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001bb0:	4b09      	ldr	r3, [pc, #36]	@ (8001bd8 <HAL_RCC_GetClockConfig+0x5c>)
 8001bb2:	689b      	ldr	r3, [r3, #8]
 8001bb4:	08db      	lsrs	r3, r3, #3
 8001bb6:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001bbe:	4b07      	ldr	r3, [pc, #28]	@ (8001bdc <HAL_RCC_GetClockConfig+0x60>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f003 020f 	and.w	r2, r3, #15
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	601a      	str	r2, [r3, #0]
}
 8001bca:	bf00      	nop
 8001bcc:	370c      	adds	r7, #12
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr
 8001bd6:	bf00      	nop
 8001bd8:	40023800 	.word	0x40023800
 8001bdc:	40023c00 	.word	0x40023c00

08001be0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b082      	sub	sp, #8
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d101      	bne.n	8001bf2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e01d      	b.n	8001c2e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001bf8:	b2db      	uxtb	r3, r3
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d106      	bne.n	8001c0c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2200      	movs	r2, #0
 8001c02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c06:	6878      	ldr	r0, [r7, #4]
 8001c08:	f000 f815 	bl	8001c36 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2202      	movs	r2, #2
 8001c10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	3304      	adds	r3, #4
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	4610      	mov	r0, r2
 8001c20:	f000 f968 	bl	8001ef4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2201      	movs	r2, #1
 8001c28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001c2c:	2300      	movs	r3, #0
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	3708      	adds	r7, #8
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}

08001c36 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001c36:	b480      	push	{r7}
 8001c38:	b083      	sub	sp, #12
 8001c3a:	af00      	add	r7, sp, #0
 8001c3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001c3e:	bf00      	nop
 8001c40:	370c      	adds	r7, #12
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr

08001c4a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001c4a:	b480      	push	{r7}
 8001c4c:	b085      	sub	sp, #20
 8001c4e:	af00      	add	r7, sp, #0
 8001c50:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	68da      	ldr	r2, [r3, #12]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f042 0201 	orr.w	r2, r2, #1
 8001c60:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	f003 0307 	and.w	r3, r3, #7
 8001c6c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	2b06      	cmp	r3, #6
 8001c72:	d007      	beq.n	8001c84 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	681a      	ldr	r2, [r3, #0]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f042 0201 	orr.w	r2, r2, #1
 8001c82:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001c84:	2300      	movs	r3, #0
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	3714      	adds	r7, #20
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr

08001c92 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001c92:	b580      	push	{r7, lr}
 8001c94:	b082      	sub	sp, #8
 8001c96:	af00      	add	r7, sp, #0
 8001c98:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	691b      	ldr	r3, [r3, #16]
 8001ca0:	f003 0302 	and.w	r3, r3, #2
 8001ca4:	2b02      	cmp	r3, #2
 8001ca6:	d122      	bne.n	8001cee <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	68db      	ldr	r3, [r3, #12]
 8001cae:	f003 0302 	and.w	r3, r3, #2
 8001cb2:	2b02      	cmp	r3, #2
 8001cb4:	d11b      	bne.n	8001cee <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f06f 0202 	mvn.w	r2, #2
 8001cbe:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	699b      	ldr	r3, [r3, #24]
 8001ccc:	f003 0303 	and.w	r3, r3, #3
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d003      	beq.n	8001cdc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001cd4:	6878      	ldr	r0, [r7, #4]
 8001cd6:	f000 f8ee 	bl	8001eb6 <HAL_TIM_IC_CaptureCallback>
 8001cda:	e005      	b.n	8001ce8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cdc:	6878      	ldr	r0, [r7, #4]
 8001cde:	f000 f8e0 	bl	8001ea2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ce2:	6878      	ldr	r0, [r7, #4]
 8001ce4:	f000 f8f1 	bl	8001eca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2200      	movs	r2, #0
 8001cec:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	691b      	ldr	r3, [r3, #16]
 8001cf4:	f003 0304 	and.w	r3, r3, #4
 8001cf8:	2b04      	cmp	r3, #4
 8001cfa:	d122      	bne.n	8001d42 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	68db      	ldr	r3, [r3, #12]
 8001d02:	f003 0304 	and.w	r3, r3, #4
 8001d06:	2b04      	cmp	r3, #4
 8001d08:	d11b      	bne.n	8001d42 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f06f 0204 	mvn.w	r2, #4
 8001d12:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2202      	movs	r2, #2
 8001d18:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	699b      	ldr	r3, [r3, #24]
 8001d20:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d003      	beq.n	8001d30 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d28:	6878      	ldr	r0, [r7, #4]
 8001d2a:	f000 f8c4 	bl	8001eb6 <HAL_TIM_IC_CaptureCallback>
 8001d2e:	e005      	b.n	8001d3c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d30:	6878      	ldr	r0, [r7, #4]
 8001d32:	f000 f8b6 	bl	8001ea2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d36:	6878      	ldr	r0, [r7, #4]
 8001d38:	f000 f8c7 	bl	8001eca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2200      	movs	r2, #0
 8001d40:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	691b      	ldr	r3, [r3, #16]
 8001d48:	f003 0308 	and.w	r3, r3, #8
 8001d4c:	2b08      	cmp	r3, #8
 8001d4e:	d122      	bne.n	8001d96 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	68db      	ldr	r3, [r3, #12]
 8001d56:	f003 0308 	and.w	r3, r3, #8
 8001d5a:	2b08      	cmp	r3, #8
 8001d5c:	d11b      	bne.n	8001d96 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f06f 0208 	mvn.w	r2, #8
 8001d66:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2204      	movs	r2, #4
 8001d6c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	69db      	ldr	r3, [r3, #28]
 8001d74:	f003 0303 	and.w	r3, r3, #3
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d003      	beq.n	8001d84 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d7c:	6878      	ldr	r0, [r7, #4]
 8001d7e:	f000 f89a 	bl	8001eb6 <HAL_TIM_IC_CaptureCallback>
 8001d82:	e005      	b.n	8001d90 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d84:	6878      	ldr	r0, [r7, #4]
 8001d86:	f000 f88c 	bl	8001ea2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	f000 f89d 	bl	8001eca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2200      	movs	r2, #0
 8001d94:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	691b      	ldr	r3, [r3, #16]
 8001d9c:	f003 0310 	and.w	r3, r3, #16
 8001da0:	2b10      	cmp	r3, #16
 8001da2:	d122      	bne.n	8001dea <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	68db      	ldr	r3, [r3, #12]
 8001daa:	f003 0310 	and.w	r3, r3, #16
 8001dae:	2b10      	cmp	r3, #16
 8001db0:	d11b      	bne.n	8001dea <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f06f 0210 	mvn.w	r2, #16
 8001dba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2208      	movs	r2, #8
 8001dc0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	69db      	ldr	r3, [r3, #28]
 8001dc8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d003      	beq.n	8001dd8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001dd0:	6878      	ldr	r0, [r7, #4]
 8001dd2:	f000 f870 	bl	8001eb6 <HAL_TIM_IC_CaptureCallback>
 8001dd6:	e005      	b.n	8001de4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dd8:	6878      	ldr	r0, [r7, #4]
 8001dda:	f000 f862 	bl	8001ea2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	f000 f873 	bl	8001eca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2200      	movs	r2, #0
 8001de8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	691b      	ldr	r3, [r3, #16]
 8001df0:	f003 0301 	and.w	r3, r3, #1
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d10e      	bne.n	8001e16 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	68db      	ldr	r3, [r3, #12]
 8001dfe:	f003 0301 	and.w	r3, r3, #1
 8001e02:	2b01      	cmp	r3, #1
 8001e04:	d107      	bne.n	8001e16 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f06f 0201 	mvn.w	r2, #1
 8001e0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001e10:	6878      	ldr	r0, [r7, #4]
 8001e12:	f7fe fe5b 	bl	8000acc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	691b      	ldr	r3, [r3, #16]
 8001e1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e20:	2b80      	cmp	r3, #128	@ 0x80
 8001e22:	d10e      	bne.n	8001e42 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	68db      	ldr	r3, [r3, #12]
 8001e2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e2e:	2b80      	cmp	r3, #128	@ 0x80
 8001e30:	d107      	bne.n	8001e42 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001e3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001e3c:	6878      	ldr	r0, [r7, #4]
 8001e3e:	f000 f903 	bl	8002048 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	691b      	ldr	r3, [r3, #16]
 8001e48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e4c:	2b40      	cmp	r3, #64	@ 0x40
 8001e4e:	d10e      	bne.n	8001e6e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	68db      	ldr	r3, [r3, #12]
 8001e56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e5a:	2b40      	cmp	r3, #64	@ 0x40
 8001e5c:	d107      	bne.n	8001e6e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001e66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001e68:	6878      	ldr	r0, [r7, #4]
 8001e6a:	f000 f838 	bl	8001ede <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	691b      	ldr	r3, [r3, #16]
 8001e74:	f003 0320 	and.w	r3, r3, #32
 8001e78:	2b20      	cmp	r3, #32
 8001e7a:	d10e      	bne.n	8001e9a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	68db      	ldr	r3, [r3, #12]
 8001e82:	f003 0320 	and.w	r3, r3, #32
 8001e86:	2b20      	cmp	r3, #32
 8001e88:	d107      	bne.n	8001e9a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f06f 0220 	mvn.w	r2, #32
 8001e92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001e94:	6878      	ldr	r0, [r7, #4]
 8001e96:	f000 f8cd 	bl	8002034 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001e9a:	bf00      	nop
 8001e9c:	3708      	adds	r7, #8
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}

08001ea2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ea2:	b480      	push	{r7}
 8001ea4:	b083      	sub	sp, #12
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001eaa:	bf00      	nop
 8001eac:	370c      	adds	r7, #12
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr

08001eb6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001eb6:	b480      	push	{r7}
 8001eb8:	b083      	sub	sp, #12
 8001eba:	af00      	add	r7, sp, #0
 8001ebc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001ebe:	bf00      	nop
 8001ec0:	370c      	adds	r7, #12
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr

08001eca <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001eca:	b480      	push	{r7}
 8001ecc:	b083      	sub	sp, #12
 8001ece:	af00      	add	r7, sp, #0
 8001ed0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001ed2:	bf00      	nop
 8001ed4:	370c      	adds	r7, #12
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr

08001ede <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001ede:	b480      	push	{r7}
 8001ee0:	b083      	sub	sp, #12
 8001ee2:	af00      	add	r7, sp, #0
 8001ee4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001ee6:	bf00      	nop
 8001ee8:	370c      	adds	r7, #12
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr
	...

08001ef4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b085      	sub	sp, #20
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
 8001efc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	4a40      	ldr	r2, [pc, #256]	@ (8002008 <TIM_Base_SetConfig+0x114>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d013      	beq.n	8001f34 <TIM_Base_SetConfig+0x40>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f12:	d00f      	beq.n	8001f34 <TIM_Base_SetConfig+0x40>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	4a3d      	ldr	r2, [pc, #244]	@ (800200c <TIM_Base_SetConfig+0x118>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d00b      	beq.n	8001f34 <TIM_Base_SetConfig+0x40>
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	4a3c      	ldr	r2, [pc, #240]	@ (8002010 <TIM_Base_SetConfig+0x11c>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d007      	beq.n	8001f34 <TIM_Base_SetConfig+0x40>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	4a3b      	ldr	r2, [pc, #236]	@ (8002014 <TIM_Base_SetConfig+0x120>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d003      	beq.n	8001f34 <TIM_Base_SetConfig+0x40>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	4a3a      	ldr	r2, [pc, #232]	@ (8002018 <TIM_Base_SetConfig+0x124>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d108      	bne.n	8001f46 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001f3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	68fa      	ldr	r2, [r7, #12]
 8001f42:	4313      	orrs	r3, r2
 8001f44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	4a2f      	ldr	r2, [pc, #188]	@ (8002008 <TIM_Base_SetConfig+0x114>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d02b      	beq.n	8001fa6 <TIM_Base_SetConfig+0xb2>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f54:	d027      	beq.n	8001fa6 <TIM_Base_SetConfig+0xb2>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	4a2c      	ldr	r2, [pc, #176]	@ (800200c <TIM_Base_SetConfig+0x118>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d023      	beq.n	8001fa6 <TIM_Base_SetConfig+0xb2>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	4a2b      	ldr	r2, [pc, #172]	@ (8002010 <TIM_Base_SetConfig+0x11c>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d01f      	beq.n	8001fa6 <TIM_Base_SetConfig+0xb2>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	4a2a      	ldr	r2, [pc, #168]	@ (8002014 <TIM_Base_SetConfig+0x120>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d01b      	beq.n	8001fa6 <TIM_Base_SetConfig+0xb2>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	4a29      	ldr	r2, [pc, #164]	@ (8002018 <TIM_Base_SetConfig+0x124>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d017      	beq.n	8001fa6 <TIM_Base_SetConfig+0xb2>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	4a28      	ldr	r2, [pc, #160]	@ (800201c <TIM_Base_SetConfig+0x128>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d013      	beq.n	8001fa6 <TIM_Base_SetConfig+0xb2>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	4a27      	ldr	r2, [pc, #156]	@ (8002020 <TIM_Base_SetConfig+0x12c>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d00f      	beq.n	8001fa6 <TIM_Base_SetConfig+0xb2>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	4a26      	ldr	r2, [pc, #152]	@ (8002024 <TIM_Base_SetConfig+0x130>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d00b      	beq.n	8001fa6 <TIM_Base_SetConfig+0xb2>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	4a25      	ldr	r2, [pc, #148]	@ (8002028 <TIM_Base_SetConfig+0x134>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d007      	beq.n	8001fa6 <TIM_Base_SetConfig+0xb2>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	4a24      	ldr	r2, [pc, #144]	@ (800202c <TIM_Base_SetConfig+0x138>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d003      	beq.n	8001fa6 <TIM_Base_SetConfig+0xb2>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	4a23      	ldr	r2, [pc, #140]	@ (8002030 <TIM_Base_SetConfig+0x13c>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d108      	bne.n	8001fb8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001fac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	68db      	ldr	r3, [r3, #12]
 8001fb2:	68fa      	ldr	r2, [r7, #12]
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	695b      	ldr	r3, [r3, #20]
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	68fa      	ldr	r2, [r7, #12]
 8001fca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	689a      	ldr	r2, [r3, #8]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	681a      	ldr	r2, [r3, #0]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	4a0a      	ldr	r2, [pc, #40]	@ (8002008 <TIM_Base_SetConfig+0x114>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d003      	beq.n	8001fec <TIM_Base_SetConfig+0xf8>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	4a0c      	ldr	r2, [pc, #48]	@ (8002018 <TIM_Base_SetConfig+0x124>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d103      	bne.n	8001ff4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	691a      	ldr	r2, [r3, #16]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	615a      	str	r2, [r3, #20]
}
 8001ffa:	bf00      	nop
 8001ffc:	3714      	adds	r7, #20
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr
 8002006:	bf00      	nop
 8002008:	40010000 	.word	0x40010000
 800200c:	40000400 	.word	0x40000400
 8002010:	40000800 	.word	0x40000800
 8002014:	40000c00 	.word	0x40000c00
 8002018:	40010400 	.word	0x40010400
 800201c:	40014000 	.word	0x40014000
 8002020:	40014400 	.word	0x40014400
 8002024:	40014800 	.word	0x40014800
 8002028:	40001800 	.word	0x40001800
 800202c:	40001c00 	.word	0x40001c00
 8002030:	40002000 	.word	0x40002000

08002034 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002034:	b480      	push	{r7}
 8002036:	b083      	sub	sp, #12
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800203c:	bf00      	nop
 800203e:	370c      	adds	r7, #12
 8002040:	46bd      	mov	sp, r7
 8002042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002046:	4770      	bx	lr

08002048 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002048:	b480      	push	{r7}
 800204a:	b083      	sub	sp, #12
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002050:	bf00      	nop
 8002052:	370c      	adds	r7, #12
 8002054:	46bd      	mov	sp, r7
 8002056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205a:	4770      	bx	lr

0800205c <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800205c:	b480      	push	{r7}
 800205e:	b083      	sub	sp, #12
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	f103 0208 	add.w	r2, r3, #8
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	f04f 32ff 	mov.w	r2, #4294967295
 8002074:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	f103 0208 	add.w	r2, r3, #8
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	f103 0208 	add.w	r2, r3, #8
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2200      	movs	r2, #0
 800208e:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002090:	bf00      	nop
 8002092:	370c      	adds	r7, #12
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr

0800209c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800209c:	b480      	push	{r7}
 800209e:	b083      	sub	sp, #12
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2200      	movs	r2, #0
 80020a8:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80020aa:	bf00      	nop
 80020ac:	370c      	adds	r7, #12
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr

080020b6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80020b6:	b480      	push	{r7}
 80020b8:	b085      	sub	sp, #20
 80020ba:	af00      	add	r7, sp, #0
 80020bc:	6078      	str	r0, [r7, #4]
 80020be:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	68fa      	ldr	r2, [r7, #12]
 80020ca:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	689a      	ldr	r2, [r3, #8]
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	683a      	ldr	r2, [r7, #0]
 80020da:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	683a      	ldr	r2, [r7, #0]
 80020e0:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	687a      	ldr	r2, [r7, #4]
 80020e6:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	1c5a      	adds	r2, r3, #1
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	601a      	str	r2, [r3, #0]
}
 80020f2:	bf00      	nop
 80020f4:	3714      	adds	r7, #20
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr

080020fe <uxListRemove>:
    ( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80020fe:	b480      	push	{r7}
 8002100:	b085      	sub	sp, #20
 8002102:	af00      	add	r7, sp, #0
 8002104:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	691b      	ldr	r3, [r3, #16]
 800210a:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	687a      	ldr	r2, [r7, #4]
 8002112:	6892      	ldr	r2, [r2, #8]
 8002114:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	687a      	ldr	r2, [r7, #4]
 800211c:	6852      	ldr	r2, [r2, #4]
 800211e:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	687a      	ldr	r2, [r7, #4]
 8002126:	429a      	cmp	r2, r3
 8002128:	d103      	bne.n	8002132 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	689a      	ldr	r2, [r3, #8]
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2200      	movs	r2, #0
 8002136:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	1e5a      	subs	r2, r3, #1
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
}
 8002146:	4618      	mov	r0, r3
 8002148:	3714      	adds	r7, #20
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr

08002152 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002152:	b580      	push	{r7, lr}
 8002154:	b08c      	sub	sp, #48	@ 0x30
 8002156:	af04      	add	r7, sp, #16
 8002158:	60f8      	str	r0, [r7, #12]
 800215a:	60b9      	str	r1, [r7, #8]
 800215c:	603b      	str	r3, [r7, #0]
 800215e:	4613      	mov	r3, r2
 8002160:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002162:	88fb      	ldrh	r3, [r7, #6]
 8002164:	009b      	lsls	r3, r3, #2
 8002166:	4618      	mov	r0, r3
 8002168:	f000 ff32 	bl	8002fd0 <pvPortMalloc>
 800216c:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d00e      	beq.n	8002192 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002174:	2058      	movs	r0, #88	@ 0x58
 8002176:	f000 ff2b 	bl	8002fd0 <pvPortMalloc>
 800217a:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 800217c:	69fb      	ldr	r3, [r7, #28]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d003      	beq.n	800218a <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8002182:	69fb      	ldr	r3, [r7, #28]
 8002184:	697a      	ldr	r2, [r7, #20]
 8002186:	631a      	str	r2, [r3, #48]	@ 0x30
 8002188:	e005      	b.n	8002196 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 800218a:	6978      	ldr	r0, [r7, #20]
 800218c:	f001 f802 	bl	8003194 <vPortFree>
 8002190:	e001      	b.n	8002196 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8002192:	2300      	movs	r3, #0
 8002194:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002196:	69fb      	ldr	r3, [r7, #28]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d013      	beq.n	80021c4 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800219c:	88fa      	ldrh	r2, [r7, #6]
 800219e:	2300      	movs	r3, #0
 80021a0:	9303      	str	r3, [sp, #12]
 80021a2:	69fb      	ldr	r3, [r7, #28]
 80021a4:	9302      	str	r3, [sp, #8]
 80021a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021a8:	9301      	str	r3, [sp, #4]
 80021aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021ac:	9300      	str	r3, [sp, #0]
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	68b9      	ldr	r1, [r7, #8]
 80021b2:	68f8      	ldr	r0, [r7, #12]
 80021b4:	f000 f80e 	bl	80021d4 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80021b8:	69f8      	ldr	r0, [r7, #28]
 80021ba:	f000 f8a3 	bl	8002304 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80021be:	2301      	movs	r3, #1
 80021c0:	61bb      	str	r3, [r7, #24]
 80021c2:	e002      	b.n	80021ca <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80021c4:	f04f 33ff 	mov.w	r3, #4294967295
 80021c8:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80021ca:	69bb      	ldr	r3, [r7, #24]
    }
 80021cc:	4618      	mov	r0, r3
 80021ce:	3720      	adds	r7, #32
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}

080021d4 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b088      	sub	sp, #32
 80021d8:	af00      	add	r7, sp, #0
 80021da:	60f8      	str	r0, [r7, #12]
 80021dc:	60b9      	str	r1, [r7, #8]
 80021de:	607a      	str	r2, [r7, #4]
 80021e0:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80021e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021e4:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	009b      	lsls	r3, r3, #2
 80021ea:	461a      	mov	r2, r3
 80021ec:	21a5      	movs	r1, #165	@ 0xa5
 80021ee:	f003 fbfd 	bl	80059ec <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80021f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021f4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80021fc:	3b01      	subs	r3, #1
 80021fe:	009b      	lsls	r3, r3, #2
 8002200:	4413      	add	r3, r2
 8002202:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002204:	69bb      	ldr	r3, [r7, #24]
 8002206:	f023 0307 	bic.w	r3, r3, #7
 800220a:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800220c:	69bb      	ldr	r3, [r7, #24]
 800220e:	f003 0307 	and.w	r3, r3, #7
 8002212:	2b00      	cmp	r3, #0
 8002214:	d00b      	beq.n	800222e <prvInitialiseNewTask+0x5a>
        __asm volatile
 8002216:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800221a:	f383 8811 	msr	BASEPRI, r3
 800221e:	f3bf 8f6f 	isb	sy
 8002222:	f3bf 8f4f 	dsb	sy
 8002226:	617b      	str	r3, [r7, #20]
    }
 8002228:	bf00      	nop
 800222a:	bf00      	nop
 800222c:	e7fd      	b.n	800222a <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800222e:	68bb      	ldr	r3, [r7, #8]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d01f      	beq.n	8002274 <prvInitialiseNewTask+0xa0>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002234:	2300      	movs	r3, #0
 8002236:	61fb      	str	r3, [r7, #28]
 8002238:	e012      	b.n	8002260 <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800223a:	68ba      	ldr	r2, [r7, #8]
 800223c:	69fb      	ldr	r3, [r7, #28]
 800223e:	4413      	add	r3, r2
 8002240:	7819      	ldrb	r1, [r3, #0]
 8002242:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002244:	69fb      	ldr	r3, [r7, #28]
 8002246:	4413      	add	r3, r2
 8002248:	3334      	adds	r3, #52	@ 0x34
 800224a:	460a      	mov	r2, r1
 800224c:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800224e:	68ba      	ldr	r2, [r7, #8]
 8002250:	69fb      	ldr	r3, [r7, #28]
 8002252:	4413      	add	r3, r2
 8002254:	781b      	ldrb	r3, [r3, #0]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d006      	beq.n	8002268 <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800225a:	69fb      	ldr	r3, [r7, #28]
 800225c:	3301      	adds	r3, #1
 800225e:	61fb      	str	r3, [r7, #28]
 8002260:	69fb      	ldr	r3, [r7, #28]
 8002262:	2b09      	cmp	r3, #9
 8002264:	d9e9      	bls.n	800223a <prvInitialiseNewTask+0x66>
 8002266:	e000      	b.n	800226a <prvInitialiseNewTask+0x96>
            {
                break;
 8002268:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800226a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800226c:	2200      	movs	r2, #0
 800226e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8002272:	e003      	b.n	800227c <prvInitialiseNewTask+0xa8>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002274:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002276:	2200      	movs	r2, #0
 8002278:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800227c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800227e:	2b04      	cmp	r3, #4
 8002280:	d901      	bls.n	8002286 <prvInitialiseNewTask+0xb2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002282:	2304      	movs	r3, #4
 8002284:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002286:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002288:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800228a:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 800228c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800228e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002290:	649a      	str	r2, [r3, #72]	@ 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8002292:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002294:	2200      	movs	r2, #0
 8002296:	64da      	str	r2, [r3, #76]	@ 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002298:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800229a:	3304      	adds	r3, #4
 800229c:	4618      	mov	r0, r3
 800229e:	f7ff fefd 	bl	800209c <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80022a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022a4:	3318      	adds	r3, #24
 80022a6:	4618      	mov	r0, r3
 80022a8:	f7ff fef8 	bl	800209c <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80022ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80022b0:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80022b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022b4:	f1c3 0205 	rsb	r2, r3, #5
 80022b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022ba:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80022bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80022c0:	625a      	str	r2, [r3, #36]	@ 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 80022c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022c4:	3350      	adds	r3, #80	@ 0x50
 80022c6:	2204      	movs	r2, #4
 80022c8:	2100      	movs	r1, #0
 80022ca:	4618      	mov	r0, r3
 80022cc:	f003 fb8e 	bl	80059ec <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 80022d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022d2:	3354      	adds	r3, #84	@ 0x54
 80022d4:	2201      	movs	r2, #1
 80022d6:	2100      	movs	r1, #0
 80022d8:	4618      	mov	r0, r3
 80022da:	f003 fb87 	bl	80059ec <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80022de:	683a      	ldr	r2, [r7, #0]
 80022e0:	68f9      	ldr	r1, [r7, #12]
 80022e2:	69b8      	ldr	r0, [r7, #24]
 80022e4:	f000 fb92 	bl	8002a0c <pxPortInitialiseStack>
 80022e8:	4602      	mov	r2, r0
 80022ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022ec:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80022ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d002      	beq.n	80022fa <prvInitialiseNewTask+0x126>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80022f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80022f8:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80022fa:	bf00      	nop
 80022fc:	3720      	adds	r7, #32
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}
	...

08002304 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002304:	b5b0      	push	{r4, r5, r7, lr}
 8002306:	b084      	sub	sp, #16
 8002308:	af02      	add	r7, sp, #8
 800230a:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 800230c:	f000 fd2e 	bl	8002d6c <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002310:	4b3b      	ldr	r3, [pc, #236]	@ (8002400 <prvAddNewTaskToReadyList+0xfc>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	3301      	adds	r3, #1
 8002316:	4a3a      	ldr	r2, [pc, #232]	@ (8002400 <prvAddNewTaskToReadyList+0xfc>)
 8002318:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800231a:	4b3a      	ldr	r3, [pc, #232]	@ (8002404 <prvAddNewTaskToReadyList+0x100>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d109      	bne.n	8002336 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002322:	4a38      	ldr	r2, [pc, #224]	@ (8002404 <prvAddNewTaskToReadyList+0x100>)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002328:	4b35      	ldr	r3, [pc, #212]	@ (8002400 <prvAddNewTaskToReadyList+0xfc>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	2b01      	cmp	r3, #1
 800232e:	d110      	bne.n	8002352 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002330:	f000 fad2 	bl	80028d8 <prvInitialiseTaskLists>
 8002334:	e00d      	b.n	8002352 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002336:	4b34      	ldr	r3, [pc, #208]	@ (8002408 <prvAddNewTaskToReadyList+0x104>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d109      	bne.n	8002352 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800233e:	4b31      	ldr	r3, [pc, #196]	@ (8002404 <prvAddNewTaskToReadyList+0x100>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002348:	429a      	cmp	r2, r3
 800234a:	d802      	bhi.n	8002352 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 800234c:	4a2d      	ldr	r2, [pc, #180]	@ (8002404 <prvAddNewTaskToReadyList+0x100>)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002352:	4b2e      	ldr	r3, [pc, #184]	@ (800240c <prvAddNewTaskToReadyList+0x108>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	3301      	adds	r3, #1
 8002358:	4a2c      	ldr	r2, [pc, #176]	@ (800240c <prvAddNewTaskToReadyList+0x108>)
 800235a:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 800235c:	4b2b      	ldr	r3, [pc, #172]	@ (800240c <prvAddNewTaskToReadyList+0x108>)
 800235e:	681a      	ldr	r2, [r3, #0]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	641a      	str	r2, [r3, #64]	@ 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d016      	beq.n	8002398 <prvAddNewTaskToReadyList+0x94>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	4618      	mov	r0, r3
 800236e:	f003 f8b9 	bl	80054e4 <SEGGER_SYSVIEW_OnTaskCreate>
 8002372:	6878      	ldr	r0, [r7, #4]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002382:	461d      	mov	r5, r3
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	461c      	mov	r4, r3
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800238e:	1ae3      	subs	r3, r4, r3
 8002390:	9300      	str	r3, [sp, #0]
 8002392:	462b      	mov	r3, r5
 8002394:	f001 f8ce 	bl	8003534 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	4618      	mov	r0, r3
 800239c:	f003 f926 	bl	80055ec <SEGGER_SYSVIEW_OnTaskStartReady>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023a4:	2201      	movs	r2, #1
 80023a6:	409a      	lsls	r2, r3
 80023a8:	4b19      	ldr	r3, [pc, #100]	@ (8002410 <prvAddNewTaskToReadyList+0x10c>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4313      	orrs	r3, r2
 80023ae:	4a18      	ldr	r2, [pc, #96]	@ (8002410 <prvAddNewTaskToReadyList+0x10c>)
 80023b0:	6013      	str	r3, [r2, #0]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80023b6:	4613      	mov	r3, r2
 80023b8:	009b      	lsls	r3, r3, #2
 80023ba:	4413      	add	r3, r2
 80023bc:	009b      	lsls	r3, r3, #2
 80023be:	4a15      	ldr	r2, [pc, #84]	@ (8002414 <prvAddNewTaskToReadyList+0x110>)
 80023c0:	441a      	add	r2, r3
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	3304      	adds	r3, #4
 80023c6:	4619      	mov	r1, r3
 80023c8:	4610      	mov	r0, r2
 80023ca:	f7ff fe74 	bl	80020b6 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80023ce:	f000 fcff 	bl	8002dd0 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80023d2:	4b0d      	ldr	r3, [pc, #52]	@ (8002408 <prvAddNewTaskToReadyList+0x104>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d00e      	beq.n	80023f8 <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80023da:	4b0a      	ldr	r3, [pc, #40]	@ (8002404 <prvAddNewTaskToReadyList+0x100>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023e4:	429a      	cmp	r2, r3
 80023e6:	d207      	bcs.n	80023f8 <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80023e8:	4b0b      	ldr	r3, [pc, #44]	@ (8002418 <prvAddNewTaskToReadyList+0x114>)
 80023ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80023ee:	601a      	str	r2, [r3, #0]
 80023f0:	f3bf 8f4f 	dsb	sy
 80023f4:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80023f8:	bf00      	nop
 80023fa:	3708      	adds	r7, #8
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bdb0      	pop	{r4, r5, r7, pc}
 8002400:	200001a4 	.word	0x200001a4
 8002404:	200000cc 	.word	0x200000cc
 8002408:	200001b0 	.word	0x200001b0
 800240c:	200001c0 	.word	0x200001c0
 8002410:	200001ac 	.word	0x200001ac
 8002414:	200000d0 	.word	0x200000d0
 8002418:	e000ed04 	.word	0xe000ed04

0800241c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b086      	sub	sp, #24
 8002420:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8002422:	4b24      	ldr	r3, [pc, #144]	@ (80024b4 <vTaskStartScheduler+0x98>)
 8002424:	9301      	str	r3, [sp, #4]
 8002426:	2300      	movs	r3, #0
 8002428:	9300      	str	r3, [sp, #0]
 800242a:	2300      	movs	r3, #0
 800242c:	2282      	movs	r2, #130	@ 0x82
 800242e:	4922      	ldr	r1, [pc, #136]	@ (80024b8 <vTaskStartScheduler+0x9c>)
 8002430:	4822      	ldr	r0, [pc, #136]	@ (80024bc <vTaskStartScheduler+0xa0>)
 8002432:	f7ff fe8e 	bl	8002152 <xTaskCreate>
 8002436:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	2b01      	cmp	r3, #1
 800243c:	d124      	bne.n	8002488 <vTaskStartScheduler+0x6c>
        __asm volatile
 800243e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002442:	f383 8811 	msr	BASEPRI, r3
 8002446:	f3bf 8f6f 	isb	sy
 800244a:	f3bf 8f4f 	dsb	sy
 800244e:	60bb      	str	r3, [r7, #8]
    }
 8002450:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8002452:	4b1b      	ldr	r3, [pc, #108]	@ (80024c0 <vTaskStartScheduler+0xa4>)
 8002454:	f04f 32ff 	mov.w	r2, #4294967295
 8002458:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800245a:	4b1a      	ldr	r3, [pc, #104]	@ (80024c4 <vTaskStartScheduler+0xa8>)
 800245c:	2201      	movs	r2, #1
 800245e:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002460:	4b19      	ldr	r3, [pc, #100]	@ (80024c8 <vTaskStartScheduler+0xac>)
 8002462:	2200      	movs	r2, #0
 8002464:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8002466:	4b19      	ldr	r3, [pc, #100]	@ (80024cc <vTaskStartScheduler+0xb0>)
 8002468:	681a      	ldr	r2, [r3, #0]
 800246a:	4b12      	ldr	r3, [pc, #72]	@ (80024b4 <vTaskStartScheduler+0x98>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	429a      	cmp	r2, r3
 8002470:	d102      	bne.n	8002478 <vTaskStartScheduler+0x5c>
 8002472:	f003 f81b 	bl	80054ac <SEGGER_SYSVIEW_OnIdle>
 8002476:	e004      	b.n	8002482 <vTaskStartScheduler+0x66>
 8002478:	4b14      	ldr	r3, [pc, #80]	@ (80024cc <vTaskStartScheduler+0xb0>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4618      	mov	r0, r3
 800247e:	f003 f873 	bl	8005568 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8002482:	f000 fb4f 	bl	8002b24 <xPortStartScheduler>
 8002486:	e00f      	b.n	80024a8 <vTaskStartScheduler+0x8c>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800248e:	d10b      	bne.n	80024a8 <vTaskStartScheduler+0x8c>
        __asm volatile
 8002490:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002494:	f383 8811 	msr	BASEPRI, r3
 8002498:	f3bf 8f6f 	isb	sy
 800249c:	f3bf 8f4f 	dsb	sy
 80024a0:	607b      	str	r3, [r7, #4]
    }
 80024a2:	bf00      	nop
 80024a4:	bf00      	nop
 80024a6:	e7fd      	b.n	80024a4 <vTaskStartScheduler+0x88>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80024a8:	4b09      	ldr	r3, [pc, #36]	@ (80024d0 <vTaskStartScheduler+0xb4>)
 80024aa:	681b      	ldr	r3, [r3, #0]
}
 80024ac:	bf00      	nop
 80024ae:	3710      	adds	r7, #16
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd80      	pop	{r7, pc}
 80024b4:	200001c8 	.word	0x200001c8
 80024b8:	08006358 	.word	0x08006358
 80024bc:	080028a9 	.word	0x080028a9
 80024c0:	200001c4 	.word	0x200001c4
 80024c4:	200001b0 	.word	0x200001b0
 80024c8:	200001a8 	.word	0x200001a8
 80024cc:	200000cc 	.word	0x200000cc
 80024d0:	2000000c 	.word	0x2000000c

080024d4 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80024d4:	b480      	push	{r7}
 80024d6:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80024d8:	4b04      	ldr	r3, [pc, #16]	@ (80024ec <vTaskSuspendAll+0x18>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	3301      	adds	r3, #1
 80024de:	4a03      	ldr	r2, [pc, #12]	@ (80024ec <vTaskSuspendAll+0x18>)
 80024e0:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80024e2:	bf00      	nop
 80024e4:	46bd      	mov	sp, r7
 80024e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ea:	4770      	bx	lr
 80024ec:	200001cc 	.word	0x200001cc

080024f0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b084      	sub	sp, #16
 80024f4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80024f6:	2300      	movs	r3, #0
 80024f8:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 80024fa:	2300      	movs	r3, #0
 80024fc:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80024fe:	4b44      	ldr	r3, [pc, #272]	@ (8002610 <xTaskResumeAll+0x120>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d10b      	bne.n	800251e <xTaskResumeAll+0x2e>
        __asm volatile
 8002506:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800250a:	f383 8811 	msr	BASEPRI, r3
 800250e:	f3bf 8f6f 	isb	sy
 8002512:	f3bf 8f4f 	dsb	sy
 8002516:	603b      	str	r3, [r7, #0]
    }
 8002518:	bf00      	nop
 800251a:	bf00      	nop
 800251c:	e7fd      	b.n	800251a <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 800251e:	f000 fc25 	bl	8002d6c <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002522:	4b3b      	ldr	r3, [pc, #236]	@ (8002610 <xTaskResumeAll+0x120>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	3b01      	subs	r3, #1
 8002528:	4a39      	ldr	r2, [pc, #228]	@ (8002610 <xTaskResumeAll+0x120>)
 800252a:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800252c:	4b38      	ldr	r3, [pc, #224]	@ (8002610 <xTaskResumeAll+0x120>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d165      	bne.n	8002600 <xTaskResumeAll+0x110>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002534:	4b37      	ldr	r3, [pc, #220]	@ (8002614 <xTaskResumeAll+0x124>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d061      	beq.n	8002600 <xTaskResumeAll+0x110>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800253c:	e032      	b.n	80025a4 <xTaskResumeAll+0xb4>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800253e:	4b36      	ldr	r3, [pc, #216]	@ (8002618 <xTaskResumeAll+0x128>)
 8002540:	68db      	ldr	r3, [r3, #12]
 8002542:	68db      	ldr	r3, [r3, #12]
 8002544:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	3318      	adds	r3, #24
 800254a:	4618      	mov	r0, r3
 800254c:	f7ff fdd7 	bl	80020fe <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	3304      	adds	r3, #4
 8002554:	4618      	mov	r0, r3
 8002556:	f7ff fdd2 	bl	80020fe <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	4618      	mov	r0, r3
 800255e:	f003 f845 	bl	80055ec <SEGGER_SYSVIEW_OnTaskStartReady>
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002566:	2201      	movs	r2, #1
 8002568:	409a      	lsls	r2, r3
 800256a:	4b2c      	ldr	r3, [pc, #176]	@ (800261c <xTaskResumeAll+0x12c>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4313      	orrs	r3, r2
 8002570:	4a2a      	ldr	r2, [pc, #168]	@ (800261c <xTaskResumeAll+0x12c>)
 8002572:	6013      	str	r3, [r2, #0]
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002578:	4613      	mov	r3, r2
 800257a:	009b      	lsls	r3, r3, #2
 800257c:	4413      	add	r3, r2
 800257e:	009b      	lsls	r3, r3, #2
 8002580:	4a27      	ldr	r2, [pc, #156]	@ (8002620 <xTaskResumeAll+0x130>)
 8002582:	441a      	add	r2, r3
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	3304      	adds	r3, #4
 8002588:	4619      	mov	r1, r3
 800258a:	4610      	mov	r0, r2
 800258c:	f7ff fd93 	bl	80020b6 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002594:	4b23      	ldr	r3, [pc, #140]	@ (8002624 <xTaskResumeAll+0x134>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800259a:	429a      	cmp	r2, r3
 800259c:	d302      	bcc.n	80025a4 <xTaskResumeAll+0xb4>
                    {
                        xYieldPending = pdTRUE;
 800259e:	4b22      	ldr	r3, [pc, #136]	@ (8002628 <xTaskResumeAll+0x138>)
 80025a0:	2201      	movs	r2, #1
 80025a2:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80025a4:	4b1c      	ldr	r3, [pc, #112]	@ (8002618 <xTaskResumeAll+0x128>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d1c8      	bne.n	800253e <xTaskResumeAll+0x4e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d001      	beq.n	80025b6 <xTaskResumeAll+0xc6>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80025b2:	f000 fa0f 	bl	80029d4 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80025b6:	4b1d      	ldr	r3, [pc, #116]	@ (800262c <xTaskResumeAll+0x13c>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d010      	beq.n	80025e4 <xTaskResumeAll+0xf4>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80025c2:	f000 f849 	bl	8002658 <xTaskIncrementTick>
 80025c6:	4603      	mov	r3, r0
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d002      	beq.n	80025d2 <xTaskResumeAll+0xe2>
                            {
                                xYieldPending = pdTRUE;
 80025cc:	4b16      	ldr	r3, [pc, #88]	@ (8002628 <xTaskResumeAll+0x138>)
 80025ce:	2201      	movs	r2, #1
 80025d0:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	3b01      	subs	r3, #1
 80025d6:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d1f1      	bne.n	80025c2 <xTaskResumeAll+0xd2>

                        xPendedTicks = 0;
 80025de:	4b13      	ldr	r3, [pc, #76]	@ (800262c <xTaskResumeAll+0x13c>)
 80025e0:	2200      	movs	r2, #0
 80025e2:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80025e4:	4b10      	ldr	r3, [pc, #64]	@ (8002628 <xTaskResumeAll+0x138>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d009      	beq.n	8002600 <xTaskResumeAll+0x110>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 80025ec:	2301      	movs	r3, #1
 80025ee:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 80025f0:	4b0f      	ldr	r3, [pc, #60]	@ (8002630 <xTaskResumeAll+0x140>)
 80025f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80025f6:	601a      	str	r2, [r3, #0]
 80025f8:	f3bf 8f4f 	dsb	sy
 80025fc:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8002600:	f000 fbe6 	bl	8002dd0 <vPortExitCritical>

    return xAlreadyYielded;
 8002604:	68bb      	ldr	r3, [r7, #8]
}
 8002606:	4618      	mov	r0, r3
 8002608:	3710      	adds	r7, #16
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}
 800260e:	bf00      	nop
 8002610:	200001cc 	.word	0x200001cc
 8002614:	200001a4 	.word	0x200001a4
 8002618:	20000164 	.word	0x20000164
 800261c:	200001ac 	.word	0x200001ac
 8002620:	200000d0 	.word	0x200000d0
 8002624:	200000cc 	.word	0x200000cc
 8002628:	200001b8 	.word	0x200001b8
 800262c:	200001b4 	.word	0x200001b4
 8002630:	e000ed04 	.word	0xe000ed04

08002634 <xTaskGetTickCountFromISR>:
    return xTicks;
}
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b082      	sub	sp, #8
 8002638:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800263a:	f000 fc87 	bl	8002f4c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800263e:	2300      	movs	r3, #0
 8002640:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8002642:	4b04      	ldr	r3, [pc, #16]	@ (8002654 <xTaskGetTickCountFromISR+0x20>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8002648:	683b      	ldr	r3, [r7, #0]
}
 800264a:	4618      	mov	r0, r3
 800264c:	3708      	adds	r7, #8
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}
 8002652:	bf00      	nop
 8002654:	200001a8 	.word	0x200001a8

08002658 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b086      	sub	sp, #24
 800265c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800265e:	2300      	movs	r3, #0
 8002660:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002662:	4b51      	ldr	r3, [pc, #324]	@ (80027a8 <xTaskIncrementTick+0x150>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	2b00      	cmp	r3, #0
 8002668:	f040 8093 	bne.w	8002792 <xTaskIncrementTick+0x13a>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800266c:	4b4f      	ldr	r3, [pc, #316]	@ (80027ac <xTaskIncrementTick+0x154>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	3301      	adds	r3, #1
 8002672:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002674:	4a4d      	ldr	r2, [pc, #308]	@ (80027ac <xTaskIncrementTick+0x154>)
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d121      	bne.n	80026c4 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 8002680:	4b4b      	ldr	r3, [pc, #300]	@ (80027b0 <xTaskIncrementTick+0x158>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d00b      	beq.n	80026a2 <xTaskIncrementTick+0x4a>
        __asm volatile
 800268a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800268e:	f383 8811 	msr	BASEPRI, r3
 8002692:	f3bf 8f6f 	isb	sy
 8002696:	f3bf 8f4f 	dsb	sy
 800269a:	603b      	str	r3, [r7, #0]
    }
 800269c:	bf00      	nop
 800269e:	bf00      	nop
 80026a0:	e7fd      	b.n	800269e <xTaskIncrementTick+0x46>
 80026a2:	4b43      	ldr	r3, [pc, #268]	@ (80027b0 <xTaskIncrementTick+0x158>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	60fb      	str	r3, [r7, #12]
 80026a8:	4b42      	ldr	r3, [pc, #264]	@ (80027b4 <xTaskIncrementTick+0x15c>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a40      	ldr	r2, [pc, #256]	@ (80027b0 <xTaskIncrementTick+0x158>)
 80026ae:	6013      	str	r3, [r2, #0]
 80026b0:	4a40      	ldr	r2, [pc, #256]	@ (80027b4 <xTaskIncrementTick+0x15c>)
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	6013      	str	r3, [r2, #0]
 80026b6:	4b40      	ldr	r3, [pc, #256]	@ (80027b8 <xTaskIncrementTick+0x160>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	3301      	adds	r3, #1
 80026bc:	4a3e      	ldr	r2, [pc, #248]	@ (80027b8 <xTaskIncrementTick+0x160>)
 80026be:	6013      	str	r3, [r2, #0]
 80026c0:	f000 f988 	bl	80029d4 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80026c4:	4b3d      	ldr	r3, [pc, #244]	@ (80027bc <xTaskIncrementTick+0x164>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	693a      	ldr	r2, [r7, #16]
 80026ca:	429a      	cmp	r2, r3
 80026cc:	d34c      	bcc.n	8002768 <xTaskIncrementTick+0x110>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80026ce:	4b38      	ldr	r3, [pc, #224]	@ (80027b0 <xTaskIncrementTick+0x158>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d104      	bne.n	80026e2 <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80026d8:	4b38      	ldr	r3, [pc, #224]	@ (80027bc <xTaskIncrementTick+0x164>)
 80026da:	f04f 32ff 	mov.w	r2, #4294967295
 80026de:	601a      	str	r2, [r3, #0]
                    break;
 80026e0:	e042      	b.n	8002768 <xTaskIncrementTick+0x110>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80026e2:	4b33      	ldr	r3, [pc, #204]	@ (80027b0 <xTaskIncrementTick+0x158>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	68db      	ldr	r3, [r3, #12]
 80026e8:	68db      	ldr	r3, [r3, #12]
 80026ea:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 80026f2:	693a      	ldr	r2, [r7, #16]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	429a      	cmp	r2, r3
 80026f8:	d203      	bcs.n	8002702 <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80026fa:	4a30      	ldr	r2, [pc, #192]	@ (80027bc <xTaskIncrementTick+0x164>)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002700:	e032      	b.n	8002768 <xTaskIncrementTick+0x110>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002702:	68bb      	ldr	r3, [r7, #8]
 8002704:	3304      	adds	r3, #4
 8002706:	4618      	mov	r0, r3
 8002708:	f7ff fcf9 	bl	80020fe <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002710:	2b00      	cmp	r3, #0
 8002712:	d004      	beq.n	800271e <xTaskIncrementTick+0xc6>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	3318      	adds	r3, #24
 8002718:	4618      	mov	r0, r3
 800271a:	f7ff fcf0 	bl	80020fe <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	4618      	mov	r0, r3
 8002722:	f002 ff63 	bl	80055ec <SEGGER_SYSVIEW_OnTaskStartReady>
 8002726:	68bb      	ldr	r3, [r7, #8]
 8002728:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800272a:	2201      	movs	r2, #1
 800272c:	409a      	lsls	r2, r3
 800272e:	4b24      	ldr	r3, [pc, #144]	@ (80027c0 <xTaskIncrementTick+0x168>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4313      	orrs	r3, r2
 8002734:	4a22      	ldr	r2, [pc, #136]	@ (80027c0 <xTaskIncrementTick+0x168>)
 8002736:	6013      	str	r3, [r2, #0]
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800273c:	4613      	mov	r3, r2
 800273e:	009b      	lsls	r3, r3, #2
 8002740:	4413      	add	r3, r2
 8002742:	009b      	lsls	r3, r3, #2
 8002744:	4a1f      	ldr	r2, [pc, #124]	@ (80027c4 <xTaskIncrementTick+0x16c>)
 8002746:	441a      	add	r2, r3
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	3304      	adds	r3, #4
 800274c:	4619      	mov	r1, r3
 800274e:	4610      	mov	r0, r2
 8002750:	f7ff fcb1 	bl	80020b6 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002758:	4b1b      	ldr	r3, [pc, #108]	@ (80027c8 <xTaskIncrementTick+0x170>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800275e:	429a      	cmp	r2, r3
 8002760:	d3b5      	bcc.n	80026ce <xTaskIncrementTick+0x76>
                            {
                                xSwitchRequired = pdTRUE;
 8002762:	2301      	movs	r3, #1
 8002764:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002766:	e7b2      	b.n	80026ce <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002768:	4b17      	ldr	r3, [pc, #92]	@ (80027c8 <xTaskIncrementTick+0x170>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800276e:	4915      	ldr	r1, [pc, #84]	@ (80027c4 <xTaskIncrementTick+0x16c>)
 8002770:	4613      	mov	r3, r2
 8002772:	009b      	lsls	r3, r3, #2
 8002774:	4413      	add	r3, r2
 8002776:	009b      	lsls	r3, r3, #2
 8002778:	440b      	add	r3, r1
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	2b01      	cmp	r3, #1
 800277e:	d901      	bls.n	8002784 <xTaskIncrementTick+0x12c>
                {
                    xSwitchRequired = pdTRUE;
 8002780:	2301      	movs	r3, #1
 8002782:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8002784:	4b11      	ldr	r3, [pc, #68]	@ (80027cc <xTaskIncrementTick+0x174>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d007      	beq.n	800279c <xTaskIncrementTick+0x144>
                {
                    xSwitchRequired = pdTRUE;
 800278c:	2301      	movs	r3, #1
 800278e:	617b      	str	r3, [r7, #20]
 8002790:	e004      	b.n	800279c <xTaskIncrementTick+0x144>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8002792:	4b0f      	ldr	r3, [pc, #60]	@ (80027d0 <xTaskIncrementTick+0x178>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	3301      	adds	r3, #1
 8002798:	4a0d      	ldr	r2, [pc, #52]	@ (80027d0 <xTaskIncrementTick+0x178>)
 800279a:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 800279c:	697b      	ldr	r3, [r7, #20]
}
 800279e:	4618      	mov	r0, r3
 80027a0:	3718      	adds	r7, #24
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	bf00      	nop
 80027a8:	200001cc 	.word	0x200001cc
 80027ac:	200001a8 	.word	0x200001a8
 80027b0:	2000015c 	.word	0x2000015c
 80027b4:	20000160 	.word	0x20000160
 80027b8:	200001bc 	.word	0x200001bc
 80027bc:	200001c4 	.word	0x200001c4
 80027c0:	200001ac 	.word	0x200001ac
 80027c4:	200000d0 	.word	0x200000d0
 80027c8:	200000cc 	.word	0x200000cc
 80027cc:	200001b8 	.word	0x200001b8
 80027d0:	200001b4 	.word	0x200001b4

080027d4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b086      	sub	sp, #24
 80027d8:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80027da:	4b2d      	ldr	r3, [pc, #180]	@ (8002890 <vTaskSwitchContext+0xbc>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d003      	beq.n	80027ea <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80027e2:	4b2c      	ldr	r3, [pc, #176]	@ (8002894 <vTaskSwitchContext+0xc0>)
 80027e4:	2201      	movs	r2, #1
 80027e6:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 80027e8:	e04e      	b.n	8002888 <vTaskSwitchContext+0xb4>
        xYieldPending = pdFALSE;
 80027ea:	4b2a      	ldr	r3, [pc, #168]	@ (8002894 <vTaskSwitchContext+0xc0>)
 80027ec:	2200      	movs	r2, #0
 80027ee:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80027f0:	4b29      	ldr	r3, [pc, #164]	@ (8002898 <vTaskSwitchContext+0xc4>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	fab3 f383 	clz	r3, r3
 80027fc:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80027fe:	7afb      	ldrb	r3, [r7, #11]
 8002800:	f1c3 031f 	rsb	r3, r3, #31
 8002804:	617b      	str	r3, [r7, #20]
 8002806:	4925      	ldr	r1, [pc, #148]	@ (800289c <vTaskSwitchContext+0xc8>)
 8002808:	697a      	ldr	r2, [r7, #20]
 800280a:	4613      	mov	r3, r2
 800280c:	009b      	lsls	r3, r3, #2
 800280e:	4413      	add	r3, r2
 8002810:	009b      	lsls	r3, r3, #2
 8002812:	440b      	add	r3, r1
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d10b      	bne.n	8002832 <vTaskSwitchContext+0x5e>
        __asm volatile
 800281a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800281e:	f383 8811 	msr	BASEPRI, r3
 8002822:	f3bf 8f6f 	isb	sy
 8002826:	f3bf 8f4f 	dsb	sy
 800282a:	607b      	str	r3, [r7, #4]
    }
 800282c:	bf00      	nop
 800282e:	bf00      	nop
 8002830:	e7fd      	b.n	800282e <vTaskSwitchContext+0x5a>
 8002832:	697a      	ldr	r2, [r7, #20]
 8002834:	4613      	mov	r3, r2
 8002836:	009b      	lsls	r3, r3, #2
 8002838:	4413      	add	r3, r2
 800283a:	009b      	lsls	r3, r3, #2
 800283c:	4a17      	ldr	r2, [pc, #92]	@ (800289c <vTaskSwitchContext+0xc8>)
 800283e:	4413      	add	r3, r2
 8002840:	613b      	str	r3, [r7, #16]
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	685a      	ldr	r2, [r3, #4]
 8002848:	693b      	ldr	r3, [r7, #16]
 800284a:	605a      	str	r2, [r3, #4]
 800284c:	693b      	ldr	r3, [r7, #16]
 800284e:	685a      	ldr	r2, [r3, #4]
 8002850:	693b      	ldr	r3, [r7, #16]
 8002852:	3308      	adds	r3, #8
 8002854:	429a      	cmp	r2, r3
 8002856:	d104      	bne.n	8002862 <vTaskSwitchContext+0x8e>
 8002858:	693b      	ldr	r3, [r7, #16]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	685a      	ldr	r2, [r3, #4]
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	605a      	str	r2, [r3, #4]
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	68db      	ldr	r3, [r3, #12]
 8002868:	4a0d      	ldr	r2, [pc, #52]	@ (80028a0 <vTaskSwitchContext+0xcc>)
 800286a:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 800286c:	4b0c      	ldr	r3, [pc, #48]	@ (80028a0 <vTaskSwitchContext+0xcc>)
 800286e:	681a      	ldr	r2, [r3, #0]
 8002870:	4b0c      	ldr	r3, [pc, #48]	@ (80028a4 <vTaskSwitchContext+0xd0>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	429a      	cmp	r2, r3
 8002876:	d102      	bne.n	800287e <vTaskSwitchContext+0xaa>
 8002878:	f002 fe18 	bl	80054ac <SEGGER_SYSVIEW_OnIdle>
}
 800287c:	e004      	b.n	8002888 <vTaskSwitchContext+0xb4>
        traceTASK_SWITCHED_IN();
 800287e:	4b08      	ldr	r3, [pc, #32]	@ (80028a0 <vTaskSwitchContext+0xcc>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4618      	mov	r0, r3
 8002884:	f002 fe70 	bl	8005568 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8002888:	bf00      	nop
 800288a:	3718      	adds	r7, #24
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}
 8002890:	200001cc 	.word	0x200001cc
 8002894:	200001b8 	.word	0x200001b8
 8002898:	200001ac 	.word	0x200001ac
 800289c:	200000d0 	.word	0x200000d0
 80028a0:	200000cc 	.word	0x200000cc
 80028a4:	200001c8 	.word	0x200001c8

080028a8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b082      	sub	sp, #8
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80028b0:	f000 f852 	bl	8002958 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80028b4:	4b06      	ldr	r3, [pc, #24]	@ (80028d0 <prvIdleTask+0x28>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	2b01      	cmp	r3, #1
 80028ba:	d9f9      	bls.n	80028b0 <prvIdleTask+0x8>
                {
                    taskYIELD();
 80028bc:	4b05      	ldr	r3, [pc, #20]	@ (80028d4 <prvIdleTask+0x2c>)
 80028be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80028c2:	601a      	str	r2, [r3, #0]
 80028c4:	f3bf 8f4f 	dsb	sy
 80028c8:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80028cc:	e7f0      	b.n	80028b0 <prvIdleTask+0x8>
 80028ce:	bf00      	nop
 80028d0:	200000d0 	.word	0x200000d0
 80028d4:	e000ed04 	.word	0xe000ed04

080028d8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b082      	sub	sp, #8
 80028dc:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80028de:	2300      	movs	r3, #0
 80028e0:	607b      	str	r3, [r7, #4]
 80028e2:	e00c      	b.n	80028fe <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80028e4:	687a      	ldr	r2, [r7, #4]
 80028e6:	4613      	mov	r3, r2
 80028e8:	009b      	lsls	r3, r3, #2
 80028ea:	4413      	add	r3, r2
 80028ec:	009b      	lsls	r3, r3, #2
 80028ee:	4a12      	ldr	r2, [pc, #72]	@ (8002938 <prvInitialiseTaskLists+0x60>)
 80028f0:	4413      	add	r3, r2
 80028f2:	4618      	mov	r0, r3
 80028f4:	f7ff fbb2 	bl	800205c <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	3301      	adds	r3, #1
 80028fc:	607b      	str	r3, [r7, #4]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2b04      	cmp	r3, #4
 8002902:	d9ef      	bls.n	80028e4 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8002904:	480d      	ldr	r0, [pc, #52]	@ (800293c <prvInitialiseTaskLists+0x64>)
 8002906:	f7ff fba9 	bl	800205c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800290a:	480d      	ldr	r0, [pc, #52]	@ (8002940 <prvInitialiseTaskLists+0x68>)
 800290c:	f7ff fba6 	bl	800205c <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8002910:	480c      	ldr	r0, [pc, #48]	@ (8002944 <prvInitialiseTaskLists+0x6c>)
 8002912:	f7ff fba3 	bl	800205c <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8002916:	480c      	ldr	r0, [pc, #48]	@ (8002948 <prvInitialiseTaskLists+0x70>)
 8002918:	f7ff fba0 	bl	800205c <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 800291c:	480b      	ldr	r0, [pc, #44]	@ (800294c <prvInitialiseTaskLists+0x74>)
 800291e:	f7ff fb9d 	bl	800205c <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8002922:	4b0b      	ldr	r3, [pc, #44]	@ (8002950 <prvInitialiseTaskLists+0x78>)
 8002924:	4a05      	ldr	r2, [pc, #20]	@ (800293c <prvInitialiseTaskLists+0x64>)
 8002926:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002928:	4b0a      	ldr	r3, [pc, #40]	@ (8002954 <prvInitialiseTaskLists+0x7c>)
 800292a:	4a05      	ldr	r2, [pc, #20]	@ (8002940 <prvInitialiseTaskLists+0x68>)
 800292c:	601a      	str	r2, [r3, #0]
}
 800292e:	bf00      	nop
 8002930:	3708      	adds	r7, #8
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}
 8002936:	bf00      	nop
 8002938:	200000d0 	.word	0x200000d0
 800293c:	20000134 	.word	0x20000134
 8002940:	20000148 	.word	0x20000148
 8002944:	20000164 	.word	0x20000164
 8002948:	20000178 	.word	0x20000178
 800294c:	20000190 	.word	0x20000190
 8002950:	2000015c 	.word	0x2000015c
 8002954:	20000160 	.word	0x20000160

08002958 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b082      	sub	sp, #8
 800295c:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800295e:	e019      	b.n	8002994 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8002960:	f000 fa04 	bl	8002d6c <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002964:	4b10      	ldr	r3, [pc, #64]	@ (80029a8 <prvCheckTasksWaitingTermination+0x50>)
 8002966:	68db      	ldr	r3, [r3, #12]
 8002968:	68db      	ldr	r3, [r3, #12]
 800296a:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	3304      	adds	r3, #4
 8002970:	4618      	mov	r0, r3
 8002972:	f7ff fbc4 	bl	80020fe <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8002976:	4b0d      	ldr	r3, [pc, #52]	@ (80029ac <prvCheckTasksWaitingTermination+0x54>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	3b01      	subs	r3, #1
 800297c:	4a0b      	ldr	r2, [pc, #44]	@ (80029ac <prvCheckTasksWaitingTermination+0x54>)
 800297e:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8002980:	4b0b      	ldr	r3, [pc, #44]	@ (80029b0 <prvCheckTasksWaitingTermination+0x58>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	3b01      	subs	r3, #1
 8002986:	4a0a      	ldr	r2, [pc, #40]	@ (80029b0 <prvCheckTasksWaitingTermination+0x58>)
 8002988:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 800298a:	f000 fa21 	bl	8002dd0 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 800298e:	6878      	ldr	r0, [r7, #4]
 8002990:	f000 f810 	bl	80029b4 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002994:	4b06      	ldr	r3, [pc, #24]	@ (80029b0 <prvCheckTasksWaitingTermination+0x58>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d1e1      	bne.n	8002960 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 800299c:	bf00      	nop
 800299e:	bf00      	nop
 80029a0:	3708      	adds	r7, #8
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	bf00      	nop
 80029a8:	20000178 	.word	0x20000178
 80029ac:	200001a4 	.word	0x200001a4
 80029b0:	2000018c 	.word	0x2000018c

080029b4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b082      	sub	sp, #8
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029c0:	4618      	mov	r0, r3
 80029c2:	f000 fbe7 	bl	8003194 <vPortFree>
                vPortFree( pxTCB );
 80029c6:	6878      	ldr	r0, [r7, #4]
 80029c8:	f000 fbe4 	bl	8003194 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80029cc:	bf00      	nop
 80029ce:	3708      	adds	r7, #8
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}

080029d4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80029d4:	b480      	push	{r7}
 80029d6:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80029d8:	4b0a      	ldr	r3, [pc, #40]	@ (8002a04 <prvResetNextTaskUnblockTime+0x30>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d104      	bne.n	80029ec <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80029e2:	4b09      	ldr	r3, [pc, #36]	@ (8002a08 <prvResetNextTaskUnblockTime+0x34>)
 80029e4:	f04f 32ff 	mov.w	r2, #4294967295
 80029e8:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80029ea:	e005      	b.n	80029f8 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80029ec:	4b05      	ldr	r3, [pc, #20]	@ (8002a04 <prvResetNextTaskUnblockTime+0x30>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	68db      	ldr	r3, [r3, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a04      	ldr	r2, [pc, #16]	@ (8002a08 <prvResetNextTaskUnblockTime+0x34>)
 80029f6:	6013      	str	r3, [r2, #0]
}
 80029f8:	bf00      	nop
 80029fa:	46bd      	mov	sp, r7
 80029fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a00:	4770      	bx	lr
 8002a02:	bf00      	nop
 8002a04:	2000015c 	.word	0x2000015c
 8002a08:	200001c4 	.word	0x200001c4

08002a0c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b085      	sub	sp, #20
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	60f8      	str	r0, [r7, #12]
 8002a14:	60b9      	str	r1, [r7, #8]
 8002a16:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	3b04      	subs	r3, #4
 8002a1c:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002a24:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	3b04      	subs	r3, #4
 8002a2a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	f023 0201 	bic.w	r2, r3, #1
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	3b04      	subs	r3, #4
 8002a3a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8002a3c:	4a0c      	ldr	r2, [pc, #48]	@ (8002a70 <pxPortInitialiseStack+0x64>)
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	3b14      	subs	r3, #20
 8002a46:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8002a48:	687a      	ldr	r2, [r7, #4]
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	3b04      	subs	r3, #4
 8002a52:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	f06f 0202 	mvn.w	r2, #2
 8002a5a:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	3b20      	subs	r3, #32
 8002a60:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8002a62:	68fb      	ldr	r3, [r7, #12]
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	3714      	adds	r7, #20
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6e:	4770      	bx	lr
 8002a70:	08002a75 	.word	0x08002a75

08002a74 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002a74:	b480      	push	{r7}
 8002a76:	b085      	sub	sp, #20
 8002a78:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8002a7e:	4b13      	ldr	r3, [pc, #76]	@ (8002acc <prvTaskExitError+0x58>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a86:	d00b      	beq.n	8002aa0 <prvTaskExitError+0x2c>
        __asm volatile
 8002a88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a8c:	f383 8811 	msr	BASEPRI, r3
 8002a90:	f3bf 8f6f 	isb	sy
 8002a94:	f3bf 8f4f 	dsb	sy
 8002a98:	60fb      	str	r3, [r7, #12]
    }
 8002a9a:	bf00      	nop
 8002a9c:	bf00      	nop
 8002a9e:	e7fd      	b.n	8002a9c <prvTaskExitError+0x28>
        __asm volatile
 8002aa0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002aa4:	f383 8811 	msr	BASEPRI, r3
 8002aa8:	f3bf 8f6f 	isb	sy
 8002aac:	f3bf 8f4f 	dsb	sy
 8002ab0:	60bb      	str	r3, [r7, #8]
    }
 8002ab2:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8002ab4:	bf00      	nop
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d0fc      	beq.n	8002ab6 <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8002abc:	bf00      	nop
 8002abe:	bf00      	nop
 8002ac0:	3714      	adds	r7, #20
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac8:	4770      	bx	lr
 8002aca:	bf00      	nop
 8002acc:	20000010 	.word	0x20000010

08002ad0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8002ad0:	4b07      	ldr	r3, [pc, #28]	@ (8002af0 <pxCurrentTCBConst2>)
 8002ad2:	6819      	ldr	r1, [r3, #0]
 8002ad4:	6808      	ldr	r0, [r1, #0]
 8002ad6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ada:	f380 8809 	msr	PSP, r0
 8002ade:	f3bf 8f6f 	isb	sy
 8002ae2:	f04f 0000 	mov.w	r0, #0
 8002ae6:	f380 8811 	msr	BASEPRI, r0
 8002aea:	4770      	bx	lr
 8002aec:	f3af 8000 	nop.w

08002af0 <pxCurrentTCBConst2>:
 8002af0:	200000cc 	.word	0x200000cc
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8002af4:	bf00      	nop
 8002af6:	bf00      	nop

08002af8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8002af8:	4808      	ldr	r0, [pc, #32]	@ (8002b1c <prvPortStartFirstTask+0x24>)
 8002afa:	6800      	ldr	r0, [r0, #0]
 8002afc:	6800      	ldr	r0, [r0, #0]
 8002afe:	f380 8808 	msr	MSP, r0
 8002b02:	f04f 0000 	mov.w	r0, #0
 8002b06:	f380 8814 	msr	CONTROL, r0
 8002b0a:	b662      	cpsie	i
 8002b0c:	b661      	cpsie	f
 8002b0e:	f3bf 8f4f 	dsb	sy
 8002b12:	f3bf 8f6f 	isb	sy
 8002b16:	df00      	svc	0
 8002b18:	bf00      	nop
 8002b1a:	0000      	.short	0x0000
 8002b1c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8002b20:	bf00      	nop
 8002b22:	bf00      	nop

08002b24 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b086      	sub	sp, #24
 8002b28:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002b2a:	4b47      	ldr	r3, [pc, #284]	@ (8002c48 <xPortStartScheduler+0x124>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a47      	ldr	r2, [pc, #284]	@ (8002c4c <xPortStartScheduler+0x128>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d10b      	bne.n	8002b4c <xPortStartScheduler+0x28>
        __asm volatile
 8002b34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b38:	f383 8811 	msr	BASEPRI, r3
 8002b3c:	f3bf 8f6f 	isb	sy
 8002b40:	f3bf 8f4f 	dsb	sy
 8002b44:	613b      	str	r3, [r7, #16]
    }
 8002b46:	bf00      	nop
 8002b48:	bf00      	nop
 8002b4a:	e7fd      	b.n	8002b48 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002b4c:	4b3e      	ldr	r3, [pc, #248]	@ (8002c48 <xPortStartScheduler+0x124>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a3f      	ldr	r2, [pc, #252]	@ (8002c50 <xPortStartScheduler+0x12c>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d10b      	bne.n	8002b6e <xPortStartScheduler+0x4a>
        __asm volatile
 8002b56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b5a:	f383 8811 	msr	BASEPRI, r3
 8002b5e:	f3bf 8f6f 	isb	sy
 8002b62:	f3bf 8f4f 	dsb	sy
 8002b66:	60fb      	str	r3, [r7, #12]
    }
 8002b68:	bf00      	nop
 8002b6a:	bf00      	nop
 8002b6c:	e7fd      	b.n	8002b6a <xPortStartScheduler+0x46>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002b6e:	4b39      	ldr	r3, [pc, #228]	@ (8002c54 <xPortStartScheduler+0x130>)
 8002b70:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	781b      	ldrb	r3, [r3, #0]
 8002b76:	b2db      	uxtb	r3, r3
 8002b78:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	22ff      	movs	r2, #255	@ 0xff
 8002b7e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	781b      	ldrb	r3, [r3, #0]
 8002b84:	b2db      	uxtb	r3, r3
 8002b86:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002b88:	78fb      	ldrb	r3, [r7, #3]
 8002b8a:	b2db      	uxtb	r3, r3
 8002b8c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002b90:	b2da      	uxtb	r2, r3
 8002b92:	4b31      	ldr	r3, [pc, #196]	@ (8002c58 <xPortStartScheduler+0x134>)
 8002b94:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002b96:	4b31      	ldr	r3, [pc, #196]	@ (8002c5c <xPortStartScheduler+0x138>)
 8002b98:	2207      	movs	r2, #7
 8002b9a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002b9c:	e009      	b.n	8002bb2 <xPortStartScheduler+0x8e>
            {
                ulMaxPRIGROUPValue--;
 8002b9e:	4b2f      	ldr	r3, [pc, #188]	@ (8002c5c <xPortStartScheduler+0x138>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	3b01      	subs	r3, #1
 8002ba4:	4a2d      	ldr	r2, [pc, #180]	@ (8002c5c <xPortStartScheduler+0x138>)
 8002ba6:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002ba8:	78fb      	ldrb	r3, [r7, #3]
 8002baa:	b2db      	uxtb	r3, r3
 8002bac:	005b      	lsls	r3, r3, #1
 8002bae:	b2db      	uxtb	r3, r3
 8002bb0:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002bb2:	78fb      	ldrb	r3, [r7, #3]
 8002bb4:	b2db      	uxtb	r3, r3
 8002bb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bba:	2b80      	cmp	r3, #128	@ 0x80
 8002bbc:	d0ef      	beq.n	8002b9e <xPortStartScheduler+0x7a>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002bbe:	4b27      	ldr	r3, [pc, #156]	@ (8002c5c <xPortStartScheduler+0x138>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f1c3 0307 	rsb	r3, r3, #7
 8002bc6:	2b04      	cmp	r3, #4
 8002bc8:	d00b      	beq.n	8002be2 <xPortStartScheduler+0xbe>
        __asm volatile
 8002bca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002bce:	f383 8811 	msr	BASEPRI, r3
 8002bd2:	f3bf 8f6f 	isb	sy
 8002bd6:	f3bf 8f4f 	dsb	sy
 8002bda:	60bb      	str	r3, [r7, #8]
    }
 8002bdc:	bf00      	nop
 8002bde:	bf00      	nop
 8002be0:	e7fd      	b.n	8002bde <xPortStartScheduler+0xba>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002be2:	4b1e      	ldr	r3, [pc, #120]	@ (8002c5c <xPortStartScheduler+0x138>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	021b      	lsls	r3, r3, #8
 8002be8:	4a1c      	ldr	r2, [pc, #112]	@ (8002c5c <xPortStartScheduler+0x138>)
 8002bea:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002bec:	4b1b      	ldr	r3, [pc, #108]	@ (8002c5c <xPortStartScheduler+0x138>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002bf4:	4a19      	ldr	r2, [pc, #100]	@ (8002c5c <xPortStartScheduler+0x138>)
 8002bf6:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	b2da      	uxtb	r2, r3
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8002c00:	4b17      	ldr	r3, [pc, #92]	@ (8002c60 <xPortStartScheduler+0x13c>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a16      	ldr	r2, [pc, #88]	@ (8002c60 <xPortStartScheduler+0x13c>)
 8002c06:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002c0a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8002c0c:	4b14      	ldr	r3, [pc, #80]	@ (8002c60 <xPortStartScheduler+0x13c>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a13      	ldr	r2, [pc, #76]	@ (8002c60 <xPortStartScheduler+0x13c>)
 8002c12:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8002c16:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8002c18:	f000 f968 	bl	8002eec <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8002c1c:	4b11      	ldr	r3, [pc, #68]	@ (8002c64 <xPortStartScheduler+0x140>)
 8002c1e:	2200      	movs	r2, #0
 8002c20:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8002c22:	f000 f987 	bl	8002f34 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002c26:	4b10      	ldr	r3, [pc, #64]	@ (8002c68 <xPortStartScheduler+0x144>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a0f      	ldr	r2, [pc, #60]	@ (8002c68 <xPortStartScheduler+0x144>)
 8002c2c:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8002c30:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8002c32:	f7ff ff61 	bl	8002af8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8002c36:	f7ff fdcd 	bl	80027d4 <vTaskSwitchContext>
    prvTaskExitError();
 8002c3a:	f7ff ff1b 	bl	8002a74 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8002c3e:	2300      	movs	r3, #0
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	3718      	adds	r7, #24
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}
 8002c48:	e000ed00 	.word	0xe000ed00
 8002c4c:	410fc271 	.word	0x410fc271
 8002c50:	410fc270 	.word	0x410fc270
 8002c54:	e000e400 	.word	0xe000e400
 8002c58:	200001d0 	.word	0x200001d0
 8002c5c:	200001d4 	.word	0x200001d4
 8002c60:	e000ed20 	.word	0xe000ed20
 8002c64:	20000010 	.word	0x20000010
 8002c68:	e000ef34 	.word	0xe000ef34

08002c6c <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b087      	sub	sp, #28
 8002c70:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002c72:	4b38      	ldr	r3, [pc, #224]	@ (8002d54 <vInitPrioGroupValue+0xe8>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a38      	ldr	r2, [pc, #224]	@ (8002d58 <vInitPrioGroupValue+0xec>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d10b      	bne.n	8002c94 <vInitPrioGroupValue+0x28>
        __asm volatile
 8002c7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c80:	f383 8811 	msr	BASEPRI, r3
 8002c84:	f3bf 8f6f 	isb	sy
 8002c88:	f3bf 8f4f 	dsb	sy
 8002c8c:	613b      	str	r3, [r7, #16]
    }
 8002c8e:	bf00      	nop
 8002c90:	bf00      	nop
 8002c92:	e7fd      	b.n	8002c90 <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002c94:	4b2f      	ldr	r3, [pc, #188]	@ (8002d54 <vInitPrioGroupValue+0xe8>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a30      	ldr	r2, [pc, #192]	@ (8002d5c <vInitPrioGroupValue+0xf0>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d10b      	bne.n	8002cb6 <vInitPrioGroupValue+0x4a>
        __asm volatile
 8002c9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ca2:	f383 8811 	msr	BASEPRI, r3
 8002ca6:	f3bf 8f6f 	isb	sy
 8002caa:	f3bf 8f4f 	dsb	sy
 8002cae:	60fb      	str	r3, [r7, #12]
    }
 8002cb0:	bf00      	nop
 8002cb2:	bf00      	nop
 8002cb4:	e7fd      	b.n	8002cb2 <vInitPrioGroupValue+0x46>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002cb6:	4b2a      	ldr	r3, [pc, #168]	@ (8002d60 <vInitPrioGroupValue+0xf4>)
 8002cb8:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	781b      	ldrb	r3, [r3, #0]
 8002cbe:	b2db      	uxtb	r3, r3
 8002cc0:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	22ff      	movs	r2, #255	@ 0xff
 8002cc6:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	781b      	ldrb	r3, [r3, #0]
 8002ccc:	b2db      	uxtb	r3, r3
 8002cce:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002cd0:	78fb      	ldrb	r3, [r7, #3]
 8002cd2:	b2db      	uxtb	r3, r3
 8002cd4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002cd8:	b2da      	uxtb	r2, r3
 8002cda:	4b22      	ldr	r3, [pc, #136]	@ (8002d64 <vInitPrioGroupValue+0xf8>)
 8002cdc:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002cde:	4b22      	ldr	r3, [pc, #136]	@ (8002d68 <vInitPrioGroupValue+0xfc>)
 8002ce0:	2207      	movs	r2, #7
 8002ce2:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002ce4:	e009      	b.n	8002cfa <vInitPrioGroupValue+0x8e>
            {
                ulMaxPRIGROUPValue--;
 8002ce6:	4b20      	ldr	r3, [pc, #128]	@ (8002d68 <vInitPrioGroupValue+0xfc>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	3b01      	subs	r3, #1
 8002cec:	4a1e      	ldr	r2, [pc, #120]	@ (8002d68 <vInitPrioGroupValue+0xfc>)
 8002cee:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002cf0:	78fb      	ldrb	r3, [r7, #3]
 8002cf2:	b2db      	uxtb	r3, r3
 8002cf4:	005b      	lsls	r3, r3, #1
 8002cf6:	b2db      	uxtb	r3, r3
 8002cf8:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002cfa:	78fb      	ldrb	r3, [r7, #3]
 8002cfc:	b2db      	uxtb	r3, r3
 8002cfe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d02:	2b80      	cmp	r3, #128	@ 0x80
 8002d04:	d0ef      	beq.n	8002ce6 <vInitPrioGroupValue+0x7a>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002d06:	4b18      	ldr	r3, [pc, #96]	@ (8002d68 <vInitPrioGroupValue+0xfc>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f1c3 0307 	rsb	r3, r3, #7
 8002d0e:	2b04      	cmp	r3, #4
 8002d10:	d00b      	beq.n	8002d2a <vInitPrioGroupValue+0xbe>
        __asm volatile
 8002d12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d16:	f383 8811 	msr	BASEPRI, r3
 8002d1a:	f3bf 8f6f 	isb	sy
 8002d1e:	f3bf 8f4f 	dsb	sy
 8002d22:	60bb      	str	r3, [r7, #8]
    }
 8002d24:	bf00      	nop
 8002d26:	bf00      	nop
 8002d28:	e7fd      	b.n	8002d26 <vInitPrioGroupValue+0xba>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002d2a:	4b0f      	ldr	r3, [pc, #60]	@ (8002d68 <vInitPrioGroupValue+0xfc>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	021b      	lsls	r3, r3, #8
 8002d30:	4a0d      	ldr	r2, [pc, #52]	@ (8002d68 <vInitPrioGroupValue+0xfc>)
 8002d32:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002d34:	4b0c      	ldr	r3, [pc, #48]	@ (8002d68 <vInitPrioGroupValue+0xfc>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002d3c:	4a0a      	ldr	r2, [pc, #40]	@ (8002d68 <vInitPrioGroupValue+0xfc>)
 8002d3e:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	b2da      	uxtb	r2, r3
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 8002d48:	bf00      	nop
 8002d4a:	371c      	adds	r7, #28
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d52:	4770      	bx	lr
 8002d54:	e000ed00 	.word	0xe000ed00
 8002d58:	410fc271 	.word	0x410fc271
 8002d5c:	410fc270 	.word	0x410fc270
 8002d60:	e000e400 	.word	0xe000e400
 8002d64:	200001d0 	.word	0x200001d0
 8002d68:	200001d4 	.word	0x200001d4

08002d6c <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b083      	sub	sp, #12
 8002d70:	af00      	add	r7, sp, #0
        __asm volatile
 8002d72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d76:	f383 8811 	msr	BASEPRI, r3
 8002d7a:	f3bf 8f6f 	isb	sy
 8002d7e:	f3bf 8f4f 	dsb	sy
 8002d82:	607b      	str	r3, [r7, #4]
    }
 8002d84:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8002d86:	4b10      	ldr	r3, [pc, #64]	@ (8002dc8 <vPortEnterCritical+0x5c>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	3301      	adds	r3, #1
 8002d8c:	4a0e      	ldr	r2, [pc, #56]	@ (8002dc8 <vPortEnterCritical+0x5c>)
 8002d8e:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8002d90:	4b0d      	ldr	r3, [pc, #52]	@ (8002dc8 <vPortEnterCritical+0x5c>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	d110      	bne.n	8002dba <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002d98:	4b0c      	ldr	r3, [pc, #48]	@ (8002dcc <vPortEnterCritical+0x60>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d00b      	beq.n	8002dba <vPortEnterCritical+0x4e>
        __asm volatile
 8002da2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002da6:	f383 8811 	msr	BASEPRI, r3
 8002daa:	f3bf 8f6f 	isb	sy
 8002dae:	f3bf 8f4f 	dsb	sy
 8002db2:	603b      	str	r3, [r7, #0]
    }
 8002db4:	bf00      	nop
 8002db6:	bf00      	nop
 8002db8:	e7fd      	b.n	8002db6 <vPortEnterCritical+0x4a>
    }
}
 8002dba:	bf00      	nop
 8002dbc:	370c      	adds	r7, #12
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc4:	4770      	bx	lr
 8002dc6:	bf00      	nop
 8002dc8:	20000010 	.word	0x20000010
 8002dcc:	e000ed04 	.word	0xe000ed04

08002dd0 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b083      	sub	sp, #12
 8002dd4:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8002dd6:	4b12      	ldr	r3, [pc, #72]	@ (8002e20 <vPortExitCritical+0x50>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d10b      	bne.n	8002df6 <vPortExitCritical+0x26>
        __asm volatile
 8002dde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002de2:	f383 8811 	msr	BASEPRI, r3
 8002de6:	f3bf 8f6f 	isb	sy
 8002dea:	f3bf 8f4f 	dsb	sy
 8002dee:	607b      	str	r3, [r7, #4]
    }
 8002df0:	bf00      	nop
 8002df2:	bf00      	nop
 8002df4:	e7fd      	b.n	8002df2 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8002df6:	4b0a      	ldr	r3, [pc, #40]	@ (8002e20 <vPortExitCritical+0x50>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	3b01      	subs	r3, #1
 8002dfc:	4a08      	ldr	r2, [pc, #32]	@ (8002e20 <vPortExitCritical+0x50>)
 8002dfe:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8002e00:	4b07      	ldr	r3, [pc, #28]	@ (8002e20 <vPortExitCritical+0x50>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d105      	bne.n	8002e14 <vPortExitCritical+0x44>
 8002e08:	2300      	movs	r3, #0
 8002e0a:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8002e12:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8002e14:	bf00      	nop
 8002e16:	370c      	adds	r7, #12
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1e:	4770      	bx	lr
 8002e20:	20000010 	.word	0x20000010
	...

08002e30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8002e30:	f3ef 8009 	mrs	r0, PSP
 8002e34:	f3bf 8f6f 	isb	sy
 8002e38:	4b15      	ldr	r3, [pc, #84]	@ (8002e90 <pxCurrentTCBConst>)
 8002e3a:	681a      	ldr	r2, [r3, #0]
 8002e3c:	f01e 0f10 	tst.w	lr, #16
 8002e40:	bf08      	it	eq
 8002e42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002e46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e4a:	6010      	str	r0, [r2, #0]
 8002e4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002e50:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8002e54:	f380 8811 	msr	BASEPRI, r0
 8002e58:	f3bf 8f4f 	dsb	sy
 8002e5c:	f3bf 8f6f 	isb	sy
 8002e60:	f7ff fcb8 	bl	80027d4 <vTaskSwitchContext>
 8002e64:	f04f 0000 	mov.w	r0, #0
 8002e68:	f380 8811 	msr	BASEPRI, r0
 8002e6c:	bc09      	pop	{r0, r3}
 8002e6e:	6819      	ldr	r1, [r3, #0]
 8002e70:	6808      	ldr	r0, [r1, #0]
 8002e72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e76:	f01e 0f10 	tst.w	lr, #16
 8002e7a:	bf08      	it	eq
 8002e7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002e80:	f380 8809 	msr	PSP, r0
 8002e84:	f3bf 8f6f 	isb	sy
 8002e88:	4770      	bx	lr
 8002e8a:	bf00      	nop
 8002e8c:	f3af 8000 	nop.w

08002e90 <pxCurrentTCBConst>:
 8002e90:	200000cc 	.word	0x200000cc
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8002e94:	bf00      	nop
 8002e96:	bf00      	nop

08002e98 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b082      	sub	sp, #8
 8002e9c:	af00      	add	r7, sp, #0
        __asm volatile
 8002e9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ea2:	f383 8811 	msr	BASEPRI, r3
 8002ea6:	f3bf 8f6f 	isb	sy
 8002eaa:	f3bf 8f4f 	dsb	sy
 8002eae:	607b      	str	r3, [r7, #4]
    }
 8002eb0:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8002eb2:	f002 fa81 	bl	80053b8 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8002eb6:	f7ff fbcf 	bl	8002658 <xTaskIncrementTick>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d006      	beq.n	8002ece <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8002ec0:	f002 fad8 	bl	8005474 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002ec4:	4b08      	ldr	r3, [pc, #32]	@ (8002ee8 <SysTick_Handler+0x50>)
 8002ec6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002eca:	601a      	str	r2, [r3, #0]
 8002ecc:	e001      	b.n	8002ed2 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 8002ece:	f002 fab5 	bl	800543c <SEGGER_SYSVIEW_RecordExitISR>
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	603b      	str	r3, [r7, #0]
        __asm volatile
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	f383 8811 	msr	BASEPRI, r3
    }
 8002edc:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 8002ede:	bf00      	nop
 8002ee0:	3708      	adds	r7, #8
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}
 8002ee6:	bf00      	nop
 8002ee8:	e000ed04 	.word	0xe000ed04

08002eec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8002eec:	b480      	push	{r7}
 8002eee:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002ef0:	4b0b      	ldr	r3, [pc, #44]	@ (8002f20 <vPortSetupTimerInterrupt+0x34>)
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002ef6:	4b0b      	ldr	r3, [pc, #44]	@ (8002f24 <vPortSetupTimerInterrupt+0x38>)
 8002ef8:	2200      	movs	r2, #0
 8002efa:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002efc:	4b0a      	ldr	r3, [pc, #40]	@ (8002f28 <vPortSetupTimerInterrupt+0x3c>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a0a      	ldr	r2, [pc, #40]	@ (8002f2c <vPortSetupTimerInterrupt+0x40>)
 8002f02:	fba2 2303 	umull	r2, r3, r2, r3
 8002f06:	099b      	lsrs	r3, r3, #6
 8002f08:	4a09      	ldr	r2, [pc, #36]	@ (8002f30 <vPortSetupTimerInterrupt+0x44>)
 8002f0a:	3b01      	subs	r3, #1
 8002f0c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002f0e:	4b04      	ldr	r3, [pc, #16]	@ (8002f20 <vPortSetupTimerInterrupt+0x34>)
 8002f10:	2207      	movs	r2, #7
 8002f12:	601a      	str	r2, [r3, #0]
}
 8002f14:	bf00      	nop
 8002f16:	46bd      	mov	sp, r7
 8002f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1c:	4770      	bx	lr
 8002f1e:	bf00      	nop
 8002f20:	e000e010 	.word	0xe000e010
 8002f24:	e000e018 	.word	0xe000e018
 8002f28:	20000000 	.word	0x20000000
 8002f2c:	10624dd3 	.word	0x10624dd3
 8002f30:	e000e014 	.word	0xe000e014

08002f34 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8002f34:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8002f44 <vPortEnableVFP+0x10>
 8002f38:	6801      	ldr	r1, [r0, #0]
 8002f3a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8002f3e:	6001      	str	r1, [r0, #0]
 8002f40:	4770      	bx	lr
 8002f42:	0000      	.short	0x0000
 8002f44:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8002f48:	bf00      	nop
 8002f4a:	bf00      	nop

08002f4c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8002f4c:	b480      	push	{r7}
 8002f4e:	b085      	sub	sp, #20
 8002f50:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8002f52:	f3ef 8305 	mrs	r3, IPSR
 8002f56:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	2b0f      	cmp	r3, #15
 8002f5c:	d915      	bls.n	8002f8a <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8002f5e:	4a18      	ldr	r2, [pc, #96]	@ (8002fc0 <vPortValidateInterruptPriority+0x74>)
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	4413      	add	r3, r2
 8002f64:	781b      	ldrb	r3, [r3, #0]
 8002f66:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8002f68:	4b16      	ldr	r3, [pc, #88]	@ (8002fc4 <vPortValidateInterruptPriority+0x78>)
 8002f6a:	781b      	ldrb	r3, [r3, #0]
 8002f6c:	7afa      	ldrb	r2, [r7, #11]
 8002f6e:	429a      	cmp	r2, r3
 8002f70:	d20b      	bcs.n	8002f8a <vPortValidateInterruptPriority+0x3e>
        __asm volatile
 8002f72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f76:	f383 8811 	msr	BASEPRI, r3
 8002f7a:	f3bf 8f6f 	isb	sy
 8002f7e:	f3bf 8f4f 	dsb	sy
 8002f82:	607b      	str	r3, [r7, #4]
    }
 8002f84:	bf00      	nop
 8002f86:	bf00      	nop
 8002f88:	e7fd      	b.n	8002f86 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8002f8a:	4b0f      	ldr	r3, [pc, #60]	@ (8002fc8 <vPortValidateInterruptPriority+0x7c>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002f92:	4b0e      	ldr	r3, [pc, #56]	@ (8002fcc <vPortValidateInterruptPriority+0x80>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	429a      	cmp	r2, r3
 8002f98:	d90b      	bls.n	8002fb2 <vPortValidateInterruptPriority+0x66>
        __asm volatile
 8002f9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f9e:	f383 8811 	msr	BASEPRI, r3
 8002fa2:	f3bf 8f6f 	isb	sy
 8002fa6:	f3bf 8f4f 	dsb	sy
 8002faa:	603b      	str	r3, [r7, #0]
    }
 8002fac:	bf00      	nop
 8002fae:	bf00      	nop
 8002fb0:	e7fd      	b.n	8002fae <vPortValidateInterruptPriority+0x62>
    }
 8002fb2:	bf00      	nop
 8002fb4:	3714      	adds	r7, #20
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbc:	4770      	bx	lr
 8002fbe:	bf00      	nop
 8002fc0:	e000e3f0 	.word	0xe000e3f0
 8002fc4:	200001d0 	.word	0x200001d0
 8002fc8:	e000ed0c 	.word	0xe000ed0c
 8002fcc:	200001d4 	.word	0x200001d4

08002fd0 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b08a      	sub	sp, #40	@ 0x28
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8002fdc:	f7ff fa7a 	bl	80024d4 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8002fe0:	4b66      	ldr	r3, [pc, #408]	@ (800317c <pvPortMalloc+0x1ac>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d101      	bne.n	8002fec <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8002fe8:	f000 f938 	bl	800325c <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002fec:	4b64      	ldr	r3, [pc, #400]	@ (8003180 <pvPortMalloc+0x1b0>)
 8002fee:	681a      	ldr	r2, [r3, #0]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	4013      	ands	r3, r2
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	f040 80a9 	bne.w	800314c <pvPortMalloc+0x17c>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d02e      	beq.n	800305e <pvPortMalloc+0x8e>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8003000:	2208      	movs	r2, #8
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8003006:	687a      	ldr	r2, [r7, #4]
 8003008:	429a      	cmp	r2, r3
 800300a:	d228      	bcs.n	800305e <pvPortMalloc+0x8e>
            {
                xWantedSize += xHeapStructSize;
 800300c:	2208      	movs	r2, #8
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	4413      	add	r3, r2
 8003012:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	f003 0307 	and.w	r3, r3, #7
 800301a:	2b00      	cmp	r3, #0
 800301c:	d022      	beq.n	8003064 <pvPortMalloc+0x94>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	f023 0307 	bic.w	r3, r3, #7
 8003024:	3308      	adds	r3, #8
 8003026:	687a      	ldr	r2, [r7, #4]
 8003028:	429a      	cmp	r2, r3
 800302a:	d215      	bcs.n	8003058 <pvPortMalloc+0x88>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	f023 0307 	bic.w	r3, r3, #7
 8003032:	3308      	adds	r3, #8
 8003034:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	f003 0307 	and.w	r3, r3, #7
 800303c:	2b00      	cmp	r3, #0
 800303e:	d011      	beq.n	8003064 <pvPortMalloc+0x94>
        __asm volatile
 8003040:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003044:	f383 8811 	msr	BASEPRI, r3
 8003048:	f3bf 8f6f 	isb	sy
 800304c:	f3bf 8f4f 	dsb	sy
 8003050:	617b      	str	r3, [r7, #20]
    }
 8003052:	bf00      	nop
 8003054:	bf00      	nop
 8003056:	e7fd      	b.n	8003054 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8003058:	2300      	movs	r3, #0
 800305a:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800305c:	e002      	b.n	8003064 <pvPortMalloc+0x94>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 800305e:	2300      	movs	r3, #0
 8003060:	607b      	str	r3, [r7, #4]
 8003062:	e000      	b.n	8003066 <pvPortMalloc+0x96>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003064:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d06f      	beq.n	800314c <pvPortMalloc+0x17c>
 800306c:	4b45      	ldr	r3, [pc, #276]	@ (8003184 <pvPortMalloc+0x1b4>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	687a      	ldr	r2, [r7, #4]
 8003072:	429a      	cmp	r2, r3
 8003074:	d86a      	bhi.n	800314c <pvPortMalloc+0x17c>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8003076:	4b44      	ldr	r3, [pc, #272]	@ (8003188 <pvPortMalloc+0x1b8>)
 8003078:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 800307a:	4b43      	ldr	r3, [pc, #268]	@ (8003188 <pvPortMalloc+0x1b8>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	627b      	str	r3, [r7, #36]	@ 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003080:	e004      	b.n	800308c <pvPortMalloc+0xbc>
                {
                    pxPreviousBlock = pxBlock;
 8003082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003084:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8003086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	627b      	str	r3, [r7, #36]	@ 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800308c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	687a      	ldr	r2, [r7, #4]
 8003092:	429a      	cmp	r2, r3
 8003094:	d903      	bls.n	800309e <pvPortMalloc+0xce>
 8003096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d1f1      	bne.n	8003082 <pvPortMalloc+0xb2>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 800309e:	4b37      	ldr	r3, [pc, #220]	@ (800317c <pvPortMalloc+0x1ac>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030a4:	429a      	cmp	r2, r3
 80030a6:	d051      	beq.n	800314c <pvPortMalloc+0x17c>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80030a8:	6a3b      	ldr	r3, [r7, #32]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	2208      	movs	r2, #8
 80030ae:	4413      	add	r3, r2
 80030b0:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80030b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030b4:	681a      	ldr	r2, [r3, #0]
 80030b6:	6a3b      	ldr	r3, [r7, #32]
 80030b8:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80030ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030bc:	685a      	ldr	r2, [r3, #4]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	1ad2      	subs	r2, r2, r3
 80030c2:	2308      	movs	r3, #8
 80030c4:	005b      	lsls	r3, r3, #1
 80030c6:	429a      	cmp	r2, r3
 80030c8:	d920      	bls.n	800310c <pvPortMalloc+0x13c>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80030ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	4413      	add	r3, r2
 80030d0:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80030d2:	69bb      	ldr	r3, [r7, #24]
 80030d4:	f003 0307 	and.w	r3, r3, #7
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d00b      	beq.n	80030f4 <pvPortMalloc+0x124>
        __asm volatile
 80030dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030e0:	f383 8811 	msr	BASEPRI, r3
 80030e4:	f3bf 8f6f 	isb	sy
 80030e8:	f3bf 8f4f 	dsb	sy
 80030ec:	613b      	str	r3, [r7, #16]
    }
 80030ee:	bf00      	nop
 80030f0:	bf00      	nop
 80030f2:	e7fd      	b.n	80030f0 <pvPortMalloc+0x120>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80030f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030f6:	685a      	ldr	r2, [r3, #4]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	1ad2      	subs	r2, r2, r3
 80030fc:	69bb      	ldr	r3, [r7, #24]
 80030fe:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8003100:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003102:	687a      	ldr	r2, [r7, #4]
 8003104:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003106:	69b8      	ldr	r0, [r7, #24]
 8003108:	f000 f90a 	bl	8003320 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800310c:	4b1d      	ldr	r3, [pc, #116]	@ (8003184 <pvPortMalloc+0x1b4>)
 800310e:	681a      	ldr	r2, [r3, #0]
 8003110:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	1ad3      	subs	r3, r2, r3
 8003116:	4a1b      	ldr	r2, [pc, #108]	@ (8003184 <pvPortMalloc+0x1b4>)
 8003118:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800311a:	4b1a      	ldr	r3, [pc, #104]	@ (8003184 <pvPortMalloc+0x1b4>)
 800311c:	681a      	ldr	r2, [r3, #0]
 800311e:	4b1b      	ldr	r3, [pc, #108]	@ (800318c <pvPortMalloc+0x1bc>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	429a      	cmp	r2, r3
 8003124:	d203      	bcs.n	800312e <pvPortMalloc+0x15e>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003126:	4b17      	ldr	r3, [pc, #92]	@ (8003184 <pvPortMalloc+0x1b4>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a18      	ldr	r2, [pc, #96]	@ (800318c <pvPortMalloc+0x1bc>)
 800312c:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 800312e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003130:	685a      	ldr	r2, [r3, #4]
 8003132:	4b13      	ldr	r3, [pc, #76]	@ (8003180 <pvPortMalloc+0x1b0>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	431a      	orrs	r2, r3
 8003138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800313a:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 800313c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800313e:	2200      	movs	r2, #0
 8003140:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8003142:	4b13      	ldr	r3, [pc, #76]	@ (8003190 <pvPortMalloc+0x1c0>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	3301      	adds	r3, #1
 8003148:	4a11      	ldr	r2, [pc, #68]	@ (8003190 <pvPortMalloc+0x1c0>)
 800314a:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 800314c:	f7ff f9d0 	bl	80024f0 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003150:	69fb      	ldr	r3, [r7, #28]
 8003152:	f003 0307 	and.w	r3, r3, #7
 8003156:	2b00      	cmp	r3, #0
 8003158:	d00b      	beq.n	8003172 <pvPortMalloc+0x1a2>
        __asm volatile
 800315a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800315e:	f383 8811 	msr	BASEPRI, r3
 8003162:	f3bf 8f6f 	isb	sy
 8003166:	f3bf 8f4f 	dsb	sy
 800316a:	60fb      	str	r3, [r7, #12]
    }
 800316c:	bf00      	nop
 800316e:	bf00      	nop
 8003170:	e7fd      	b.n	800316e <pvPortMalloc+0x19e>
    return pvReturn;
 8003172:	69fb      	ldr	r3, [r7, #28]
}
 8003174:	4618      	mov	r0, r3
 8003176:	3728      	adds	r7, #40	@ 0x28
 8003178:	46bd      	mov	sp, r7
 800317a:	bd80      	pop	{r7, pc}
 800317c:	20012de0 	.word	0x20012de0
 8003180:	20012df4 	.word	0x20012df4
 8003184:	20012de4 	.word	0x20012de4
 8003188:	20012dd8 	.word	0x20012dd8
 800318c:	20012de8 	.word	0x20012de8
 8003190:	20012dec 	.word	0x20012dec

08003194 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b086      	sub	sp, #24
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d04f      	beq.n	8003246 <vPortFree+0xb2>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80031a6:	2308      	movs	r3, #8
 80031a8:	425b      	negs	r3, r3
 80031aa:	697a      	ldr	r2, [r7, #20]
 80031ac:	4413      	add	r3, r2
 80031ae:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	685a      	ldr	r2, [r3, #4]
 80031b8:	4b25      	ldr	r3, [pc, #148]	@ (8003250 <vPortFree+0xbc>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4013      	ands	r3, r2
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d10b      	bne.n	80031da <vPortFree+0x46>
        __asm volatile
 80031c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031c6:	f383 8811 	msr	BASEPRI, r3
 80031ca:	f3bf 8f6f 	isb	sy
 80031ce:	f3bf 8f4f 	dsb	sy
 80031d2:	60fb      	str	r3, [r7, #12]
    }
 80031d4:	bf00      	nop
 80031d6:	bf00      	nop
 80031d8:	e7fd      	b.n	80031d6 <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d00b      	beq.n	80031fa <vPortFree+0x66>
        __asm volatile
 80031e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031e6:	f383 8811 	msr	BASEPRI, r3
 80031ea:	f3bf 8f6f 	isb	sy
 80031ee:	f3bf 8f4f 	dsb	sy
 80031f2:	60bb      	str	r3, [r7, #8]
    }
 80031f4:	bf00      	nop
 80031f6:	bf00      	nop
 80031f8:	e7fd      	b.n	80031f6 <vPortFree+0x62>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	685a      	ldr	r2, [r3, #4]
 80031fe:	4b14      	ldr	r3, [pc, #80]	@ (8003250 <vPortFree+0xbc>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4013      	ands	r3, r2
 8003204:	2b00      	cmp	r3, #0
 8003206:	d01e      	beq.n	8003246 <vPortFree+0xb2>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d11a      	bne.n	8003246 <vPortFree+0xb2>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003210:	693b      	ldr	r3, [r7, #16]
 8003212:	685a      	ldr	r2, [r3, #4]
 8003214:	4b0e      	ldr	r3, [pc, #56]	@ (8003250 <vPortFree+0xbc>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	43db      	mvns	r3, r3
 800321a:	401a      	ands	r2, r3
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8003220:	f7ff f958 	bl	80024d4 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	685a      	ldr	r2, [r3, #4]
 8003228:	4b0a      	ldr	r3, [pc, #40]	@ (8003254 <vPortFree+0xc0>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4413      	add	r3, r2
 800322e:	4a09      	ldr	r2, [pc, #36]	@ (8003254 <vPortFree+0xc0>)
 8003230:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003232:	6938      	ldr	r0, [r7, #16]
 8003234:	f000 f874 	bl	8003320 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8003238:	4b07      	ldr	r3, [pc, #28]	@ (8003258 <vPortFree+0xc4>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	3301      	adds	r3, #1
 800323e:	4a06      	ldr	r2, [pc, #24]	@ (8003258 <vPortFree+0xc4>)
 8003240:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8003242:	f7ff f955 	bl	80024f0 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8003246:	bf00      	nop
 8003248:	3718      	adds	r7, #24
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}
 800324e:	bf00      	nop
 8003250:	20012df4 	.word	0x20012df4
 8003254:	20012de4 	.word	0x20012de4
 8003258:	20012df0 	.word	0x20012df0

0800325c <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 800325c:	b480      	push	{r7}
 800325e:	b085      	sub	sp, #20
 8003260:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003262:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 8003266:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8003268:	4b27      	ldr	r3, [pc, #156]	@ (8003308 <prvHeapInit+0xac>)
 800326a:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	f003 0307 	and.w	r3, r3, #7
 8003272:	2b00      	cmp	r3, #0
 8003274:	d00c      	beq.n	8003290 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	3307      	adds	r3, #7
 800327a:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	f023 0307 	bic.w	r3, r3, #7
 8003282:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003284:	68ba      	ldr	r2, [r7, #8]
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	1ad3      	subs	r3, r2, r3
 800328a:	4a1f      	ldr	r2, [pc, #124]	@ (8003308 <prvHeapInit+0xac>)
 800328c:	4413      	add	r3, r2
 800328e:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003294:	4a1d      	ldr	r2, [pc, #116]	@ (800330c <prvHeapInit+0xb0>)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800329a:	4b1c      	ldr	r3, [pc, #112]	@ (800330c <prvHeapInit+0xb0>)
 800329c:	2200      	movs	r2, #0
 800329e:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	68ba      	ldr	r2, [r7, #8]
 80032a4:	4413      	add	r3, r2
 80032a6:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80032a8:	2208      	movs	r2, #8
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	1a9b      	subs	r3, r3, r2
 80032ae:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	f023 0307 	bic.w	r3, r3, #7
 80032b6:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	4a15      	ldr	r2, [pc, #84]	@ (8003310 <prvHeapInit+0xb4>)
 80032bc:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80032be:	4b14      	ldr	r3, [pc, #80]	@ (8003310 <prvHeapInit+0xb4>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	2200      	movs	r2, #0
 80032c4:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80032c6:	4b12      	ldr	r3, [pc, #72]	@ (8003310 <prvHeapInit+0xb4>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	2200      	movs	r2, #0
 80032cc:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	68fa      	ldr	r2, [r7, #12]
 80032d6:	1ad2      	subs	r2, r2, r3
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80032dc:	4b0c      	ldr	r3, [pc, #48]	@ (8003310 <prvHeapInit+0xb4>)
 80032de:	681a      	ldr	r2, [r3, #0]
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	4a0a      	ldr	r2, [pc, #40]	@ (8003314 <prvHeapInit+0xb8>)
 80032ea:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	4a09      	ldr	r2, [pc, #36]	@ (8003318 <prvHeapInit+0xbc>)
 80032f2:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80032f4:	4b09      	ldr	r3, [pc, #36]	@ (800331c <prvHeapInit+0xc0>)
 80032f6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80032fa:	601a      	str	r2, [r3, #0]
}
 80032fc:	bf00      	nop
 80032fe:	3714      	adds	r7, #20
 8003300:	46bd      	mov	sp, r7
 8003302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003306:	4770      	bx	lr
 8003308:	200001d8 	.word	0x200001d8
 800330c:	20012dd8 	.word	0x20012dd8
 8003310:	20012de0 	.word	0x20012de0
 8003314:	20012de8 	.word	0x20012de8
 8003318:	20012de4 	.word	0x20012de4
 800331c:	20012df4 	.word	0x20012df4

08003320 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8003320:	b480      	push	{r7}
 8003322:	b085      	sub	sp, #20
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003328:	4b28      	ldr	r3, [pc, #160]	@ (80033cc <prvInsertBlockIntoFreeList+0xac>)
 800332a:	60fb      	str	r3, [r7, #12]
 800332c:	e002      	b.n	8003334 <prvInsertBlockIntoFreeList+0x14>
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	60fb      	str	r3, [r7, #12]
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	687a      	ldr	r2, [r7, #4]
 800333a:	429a      	cmp	r2, r3
 800333c:	d8f7      	bhi.n	800332e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	68ba      	ldr	r2, [r7, #8]
 8003348:	4413      	add	r3, r2
 800334a:	687a      	ldr	r2, [r7, #4]
 800334c:	429a      	cmp	r2, r3
 800334e:	d108      	bne.n	8003362 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	685a      	ldr	r2, [r3, #4]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	441a      	add	r2, r3
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	68ba      	ldr	r2, [r7, #8]
 800336c:	441a      	add	r2, r3
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	429a      	cmp	r2, r3
 8003374:	d118      	bne.n	80033a8 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681a      	ldr	r2, [r3, #0]
 800337a:	4b15      	ldr	r3, [pc, #84]	@ (80033d0 <prvInsertBlockIntoFreeList+0xb0>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	429a      	cmp	r2, r3
 8003380:	d00d      	beq.n	800339e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	685a      	ldr	r2, [r3, #4]
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	441a      	add	r2, r3
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	681a      	ldr	r2, [r3, #0]
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	601a      	str	r2, [r3, #0]
 800339c:	e008      	b.n	80033b0 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800339e:	4b0c      	ldr	r3, [pc, #48]	@ (80033d0 <prvInsertBlockIntoFreeList+0xb0>)
 80033a0:	681a      	ldr	r2, [r3, #0]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	601a      	str	r2, [r3, #0]
 80033a6:	e003      	b.n	80033b0 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80033b0:	68fa      	ldr	r2, [r7, #12]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	429a      	cmp	r2, r3
 80033b6:	d002      	beq.n	80033be <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	687a      	ldr	r2, [r7, #4]
 80033bc:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80033be:	bf00      	nop
 80033c0:	3714      	adds	r7, #20
 80033c2:	46bd      	mov	sp, r7
 80033c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c8:	4770      	bx	lr
 80033ca:	bf00      	nop
 80033cc:	20012dd8 	.word	0x20012dd8
 80033d0:	20012de0 	.word	0x20012de0

080033d4 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 80033d4:	b580      	push	{r7, lr}
 80033d6:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 80033d8:	4803      	ldr	r0, [pc, #12]	@ (80033e8 <_cbSendSystemDesc+0x14>)
 80033da:	f001 ff97 	bl	800530c <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 80033de:	4803      	ldr	r0, [pc, #12]	@ (80033ec <_cbSendSystemDesc+0x18>)
 80033e0:	f001 ff94 	bl	800530c <SEGGER_SYSVIEW_SendSysDesc>
}
 80033e4:	bf00      	nop
 80033e6:	bd80      	pop	{r7, pc}
 80033e8:	08006360 	.word	0x08006360
 80033ec:	080063a4 	.word	0x080063a4

080033f0 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 80033f0:	b580      	push	{r7, lr}
 80033f2:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 80033f4:	4b06      	ldr	r3, [pc, #24]	@ (8003410 <SEGGER_SYSVIEW_Conf+0x20>)
 80033f6:	6818      	ldr	r0, [r3, #0]
 80033f8:	4b05      	ldr	r3, [pc, #20]	@ (8003410 <SEGGER_SYSVIEW_Conf+0x20>)
 80033fa:	6819      	ldr	r1, [r3, #0]
 80033fc:	4b05      	ldr	r3, [pc, #20]	@ (8003414 <SEGGER_SYSVIEW_Conf+0x24>)
 80033fe:	4a06      	ldr	r2, [pc, #24]	@ (8003418 <SEGGER_SYSVIEW_Conf+0x28>)
 8003400:	f001 fc08 	bl	8004c14 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8003404:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8003408:	f001 fc48 	bl	8004c9c <SEGGER_SYSVIEW_SetRAMBase>
}
 800340c:	bf00      	nop
 800340e:	bd80      	pop	{r7, pc}
 8003410:	20000000 	.word	0x20000000
 8003414:	080033d5 	.word	0x080033d5
 8003418:	08006444 	.word	0x08006444

0800341c <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 800341c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800341e:	b085      	sub	sp, #20
 8003420:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8003422:	2300      	movs	r3, #0
 8003424:	607b      	str	r3, [r7, #4]
 8003426:	e033      	b.n	8003490 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8003428:	491e      	ldr	r1, [pc, #120]	@ (80034a4 <_cbSendTaskList+0x88>)
 800342a:	687a      	ldr	r2, [r7, #4]
 800342c:	4613      	mov	r3, r2
 800342e:	009b      	lsls	r3, r3, #2
 8003430:	4413      	add	r3, r2
 8003432:	009b      	lsls	r3, r3, #2
 8003434:	440b      	add	r3, r1
 8003436:	6818      	ldr	r0, [r3, #0]
 8003438:	491a      	ldr	r1, [pc, #104]	@ (80034a4 <_cbSendTaskList+0x88>)
 800343a:	687a      	ldr	r2, [r7, #4]
 800343c:	4613      	mov	r3, r2
 800343e:	009b      	lsls	r3, r3, #2
 8003440:	4413      	add	r3, r2
 8003442:	009b      	lsls	r3, r3, #2
 8003444:	440b      	add	r3, r1
 8003446:	3304      	adds	r3, #4
 8003448:	6819      	ldr	r1, [r3, #0]
 800344a:	4c16      	ldr	r4, [pc, #88]	@ (80034a4 <_cbSendTaskList+0x88>)
 800344c:	687a      	ldr	r2, [r7, #4]
 800344e:	4613      	mov	r3, r2
 8003450:	009b      	lsls	r3, r3, #2
 8003452:	4413      	add	r3, r2
 8003454:	009b      	lsls	r3, r3, #2
 8003456:	4423      	add	r3, r4
 8003458:	3308      	adds	r3, #8
 800345a:	681c      	ldr	r4, [r3, #0]
 800345c:	4d11      	ldr	r5, [pc, #68]	@ (80034a4 <_cbSendTaskList+0x88>)
 800345e:	687a      	ldr	r2, [r7, #4]
 8003460:	4613      	mov	r3, r2
 8003462:	009b      	lsls	r3, r3, #2
 8003464:	4413      	add	r3, r2
 8003466:	009b      	lsls	r3, r3, #2
 8003468:	442b      	add	r3, r5
 800346a:	330c      	adds	r3, #12
 800346c:	681d      	ldr	r5, [r3, #0]
 800346e:	4e0d      	ldr	r6, [pc, #52]	@ (80034a4 <_cbSendTaskList+0x88>)
 8003470:	687a      	ldr	r2, [r7, #4]
 8003472:	4613      	mov	r3, r2
 8003474:	009b      	lsls	r3, r3, #2
 8003476:	4413      	add	r3, r2
 8003478:	009b      	lsls	r3, r3, #2
 800347a:	4433      	add	r3, r6
 800347c:	3310      	adds	r3, #16
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	9300      	str	r3, [sp, #0]
 8003482:	462b      	mov	r3, r5
 8003484:	4622      	mov	r2, r4
 8003486:	f000 f8bd 	bl	8003604 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	3301      	adds	r3, #1
 800348e:	607b      	str	r3, [r7, #4]
 8003490:	4b05      	ldr	r3, [pc, #20]	@ (80034a8 <_cbSendTaskList+0x8c>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	687a      	ldr	r2, [r7, #4]
 8003496:	429a      	cmp	r2, r3
 8003498:	d3c6      	bcc.n	8003428 <_cbSendTaskList+0xc>
  }
}
 800349a:	bf00      	nop
 800349c:	bf00      	nop
 800349e:	370c      	adds	r7, #12
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80034a4:	20012df8 	.word	0x20012df8
 80034a8:	20012e98 	.word	0x20012e98

080034ac <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 80034ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80034b0:	b082      	sub	sp, #8
 80034b2:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 80034b4:	f7ff f8be 	bl	8002634 <xTaskGetTickCountFromISR>
 80034b8:	4603      	mov	r3, r0
 80034ba:	2200      	movs	r2, #0
 80034bc:	469a      	mov	sl, r3
 80034be:	4693      	mov	fp, r2
 80034c0:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 80034c4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80034c8:	4602      	mov	r2, r0
 80034ca:	460b      	mov	r3, r1
 80034cc:	f04f 0a00 	mov.w	sl, #0
 80034d0:	f04f 0b00 	mov.w	fp, #0
 80034d4:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 80034d8:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 80034dc:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 80034e0:	4652      	mov	r2, sl
 80034e2:	465b      	mov	r3, fp
 80034e4:	1a14      	subs	r4, r2, r0
 80034e6:	eb63 0501 	sbc.w	r5, r3, r1
 80034ea:	f04f 0200 	mov.w	r2, #0
 80034ee:	f04f 0300 	mov.w	r3, #0
 80034f2:	00ab      	lsls	r3, r5, #2
 80034f4:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 80034f8:	00a2      	lsls	r2, r4, #2
 80034fa:	4614      	mov	r4, r2
 80034fc:	461d      	mov	r5, r3
 80034fe:	eb14 0800 	adds.w	r8, r4, r0
 8003502:	eb45 0901 	adc.w	r9, r5, r1
 8003506:	f04f 0200 	mov.w	r2, #0
 800350a:	f04f 0300 	mov.w	r3, #0
 800350e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003512:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003516:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800351a:	4690      	mov	r8, r2
 800351c:	4699      	mov	r9, r3
 800351e:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8003522:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8003526:	4610      	mov	r0, r2
 8003528:	4619      	mov	r1, r3
 800352a:	3708      	adds	r7, #8
 800352c:	46bd      	mov	sp, r7
 800352e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08003534 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8003534:	b580      	push	{r7, lr}
 8003536:	b086      	sub	sp, #24
 8003538:	af02      	add	r7, sp, #8
 800353a:	60f8      	str	r0, [r7, #12]
 800353c:	60b9      	str	r1, [r7, #8]
 800353e:	607a      	str	r2, [r7, #4]
 8003540:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8003542:	2205      	movs	r2, #5
 8003544:	492b      	ldr	r1, [pc, #172]	@ (80035f4 <SYSVIEW_AddTask+0xc0>)
 8003546:	68b8      	ldr	r0, [r7, #8]
 8003548:	f002 fa40 	bl	80059cc <memcmp>
 800354c:	4603      	mov	r3, r0
 800354e:	2b00      	cmp	r3, #0
 8003550:	d04b      	beq.n	80035ea <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8003552:	4b29      	ldr	r3, [pc, #164]	@ (80035f8 <SYSVIEW_AddTask+0xc4>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	2b07      	cmp	r3, #7
 8003558:	d903      	bls.n	8003562 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800355a:	4828      	ldr	r0, [pc, #160]	@ (80035fc <SYSVIEW_AddTask+0xc8>)
 800355c:	f002 f978 	bl	8005850 <SEGGER_SYSVIEW_Warn>
    return;
 8003560:	e044      	b.n	80035ec <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8003562:	4b25      	ldr	r3, [pc, #148]	@ (80035f8 <SYSVIEW_AddTask+0xc4>)
 8003564:	681a      	ldr	r2, [r3, #0]
 8003566:	4926      	ldr	r1, [pc, #152]	@ (8003600 <SYSVIEW_AddTask+0xcc>)
 8003568:	4613      	mov	r3, r2
 800356a:	009b      	lsls	r3, r3, #2
 800356c:	4413      	add	r3, r2
 800356e:	009b      	lsls	r3, r3, #2
 8003570:	440b      	add	r3, r1
 8003572:	68fa      	ldr	r2, [r7, #12]
 8003574:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8003576:	4b20      	ldr	r3, [pc, #128]	@ (80035f8 <SYSVIEW_AddTask+0xc4>)
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	4921      	ldr	r1, [pc, #132]	@ (8003600 <SYSVIEW_AddTask+0xcc>)
 800357c:	4613      	mov	r3, r2
 800357e:	009b      	lsls	r3, r3, #2
 8003580:	4413      	add	r3, r2
 8003582:	009b      	lsls	r3, r3, #2
 8003584:	440b      	add	r3, r1
 8003586:	3304      	adds	r3, #4
 8003588:	68ba      	ldr	r2, [r7, #8]
 800358a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 800358c:	4b1a      	ldr	r3, [pc, #104]	@ (80035f8 <SYSVIEW_AddTask+0xc4>)
 800358e:	681a      	ldr	r2, [r3, #0]
 8003590:	491b      	ldr	r1, [pc, #108]	@ (8003600 <SYSVIEW_AddTask+0xcc>)
 8003592:	4613      	mov	r3, r2
 8003594:	009b      	lsls	r3, r3, #2
 8003596:	4413      	add	r3, r2
 8003598:	009b      	lsls	r3, r3, #2
 800359a:	440b      	add	r3, r1
 800359c:	3308      	adds	r3, #8
 800359e:	687a      	ldr	r2, [r7, #4]
 80035a0:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 80035a2:	4b15      	ldr	r3, [pc, #84]	@ (80035f8 <SYSVIEW_AddTask+0xc4>)
 80035a4:	681a      	ldr	r2, [r3, #0]
 80035a6:	4916      	ldr	r1, [pc, #88]	@ (8003600 <SYSVIEW_AddTask+0xcc>)
 80035a8:	4613      	mov	r3, r2
 80035aa:	009b      	lsls	r3, r3, #2
 80035ac:	4413      	add	r3, r2
 80035ae:	009b      	lsls	r3, r3, #2
 80035b0:	440b      	add	r3, r1
 80035b2:	330c      	adds	r3, #12
 80035b4:	683a      	ldr	r2, [r7, #0]
 80035b6:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 80035b8:	4b0f      	ldr	r3, [pc, #60]	@ (80035f8 <SYSVIEW_AddTask+0xc4>)
 80035ba:	681a      	ldr	r2, [r3, #0]
 80035bc:	4910      	ldr	r1, [pc, #64]	@ (8003600 <SYSVIEW_AddTask+0xcc>)
 80035be:	4613      	mov	r3, r2
 80035c0:	009b      	lsls	r3, r3, #2
 80035c2:	4413      	add	r3, r2
 80035c4:	009b      	lsls	r3, r3, #2
 80035c6:	440b      	add	r3, r1
 80035c8:	3310      	adds	r3, #16
 80035ca:	69ba      	ldr	r2, [r7, #24]
 80035cc:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 80035ce:	4b0a      	ldr	r3, [pc, #40]	@ (80035f8 <SYSVIEW_AddTask+0xc4>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	3301      	adds	r3, #1
 80035d4:	4a08      	ldr	r2, [pc, #32]	@ (80035f8 <SYSVIEW_AddTask+0xc4>)
 80035d6:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 80035d8:	69bb      	ldr	r3, [r7, #24]
 80035da:	9300      	str	r3, [sp, #0]
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	687a      	ldr	r2, [r7, #4]
 80035e0:	68b9      	ldr	r1, [r7, #8]
 80035e2:	68f8      	ldr	r0, [r7, #12]
 80035e4:	f000 f80e 	bl	8003604 <SYSVIEW_SendTaskInfo>
 80035e8:	e000      	b.n	80035ec <SYSVIEW_AddTask+0xb8>
    return;
 80035ea:	bf00      	nop

}
 80035ec:	3710      	adds	r7, #16
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}
 80035f2:	bf00      	nop
 80035f4:	080063b4 	.word	0x080063b4
 80035f8:	20012e98 	.word	0x20012e98
 80035fc:	080063bc 	.word	0x080063bc
 8003600:	20012df8 	.word	0x20012df8

08003604 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8003604:	b580      	push	{r7, lr}
 8003606:	b08a      	sub	sp, #40	@ 0x28
 8003608:	af00      	add	r7, sp, #0
 800360a:	60f8      	str	r0, [r7, #12]
 800360c:	60b9      	str	r1, [r7, #8]
 800360e:	607a      	str	r2, [r7, #4]
 8003610:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8003612:	f107 0314 	add.w	r3, r7, #20
 8003616:	2214      	movs	r2, #20
 8003618:	2100      	movs	r1, #0
 800361a:	4618      	mov	r0, r3
 800361c:	f002 f9e6 	bl	80059ec <memset>
  TaskInfo.TaskID     = TaskID;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8003630:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003632:	627b      	str	r3, [r7, #36]	@ 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8003634:	f107 0314 	add.w	r3, r7, #20
 8003638:	4618      	mov	r0, r3
 800363a:	f001 fd6f 	bl	800511c <SEGGER_SYSVIEW_SendTaskInfo>
}
 800363e:	bf00      	nop
 8003640:	3728      	adds	r7, #40	@ 0x28
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}
	...

08003648 <__NVIC_EnableIRQ>:
{
 8003648:	b480      	push	{r7}
 800364a:	b083      	sub	sp, #12
 800364c:	af00      	add	r7, sp, #0
 800364e:	4603      	mov	r3, r0
 8003650:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003652:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003656:	2b00      	cmp	r3, #0
 8003658:	db0b      	blt.n	8003672 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800365a:	79fb      	ldrb	r3, [r7, #7]
 800365c:	f003 021f 	and.w	r2, r3, #31
 8003660:	4907      	ldr	r1, [pc, #28]	@ (8003680 <__NVIC_EnableIRQ+0x38>)
 8003662:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003666:	095b      	lsrs	r3, r3, #5
 8003668:	2001      	movs	r0, #1
 800366a:	fa00 f202 	lsl.w	r2, r0, r2
 800366e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003672:	bf00      	nop
 8003674:	370c      	adds	r7, #12
 8003676:	46bd      	mov	sp, r7
 8003678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367c:	4770      	bx	lr
 800367e:	bf00      	nop
 8003680:	e000e100 	.word	0xe000e100

08003684 <__NVIC_SetPriority>:
{
 8003684:	b480      	push	{r7}
 8003686:	b083      	sub	sp, #12
 8003688:	af00      	add	r7, sp, #0
 800368a:	4603      	mov	r3, r0
 800368c:	6039      	str	r1, [r7, #0]
 800368e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003690:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003694:	2b00      	cmp	r3, #0
 8003696:	db0a      	blt.n	80036ae <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	b2da      	uxtb	r2, r3
 800369c:	490c      	ldr	r1, [pc, #48]	@ (80036d0 <__NVIC_SetPriority+0x4c>)
 800369e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036a2:	0112      	lsls	r2, r2, #4
 80036a4:	b2d2      	uxtb	r2, r2
 80036a6:	440b      	add	r3, r1
 80036a8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80036ac:	e00a      	b.n	80036c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	b2da      	uxtb	r2, r3
 80036b2:	4908      	ldr	r1, [pc, #32]	@ (80036d4 <__NVIC_SetPriority+0x50>)
 80036b4:	79fb      	ldrb	r3, [r7, #7]
 80036b6:	f003 030f 	and.w	r3, r3, #15
 80036ba:	3b04      	subs	r3, #4
 80036bc:	0112      	lsls	r2, r2, #4
 80036be:	b2d2      	uxtb	r2, r2
 80036c0:	440b      	add	r3, r1
 80036c2:	761a      	strb	r2, [r3, #24]
}
 80036c4:	bf00      	nop
 80036c6:	370c      	adds	r7, #12
 80036c8:	46bd      	mov	sp, r7
 80036ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ce:	4770      	bx	lr
 80036d0:	e000e100 	.word	0xe000e100
 80036d4:	e000ed00 	.word	0xe000ed00

080036d8 <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 80036d8:	b580      	push	{r7, lr}
 80036da:	b082      	sub	sp, #8
 80036dc:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 80036de:	f002 f913 	bl	8005908 <SEGGER_SYSVIEW_IsStarted>
 80036e2:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d101      	bne.n	80036ee <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 80036ea:	f001 fb9b 	bl	8004e24 <SEGGER_SYSVIEW_Start>
  }
}
 80036ee:	bf00      	nop
 80036f0:	3708      	adds	r7, #8
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}
	...

080036f8 <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b082      	sub	sp, #8
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	4603      	mov	r3, r0
 8003700:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 8003702:	4b0c      	ldr	r3, [pc, #48]	@ (8003734 <_cbOnUARTRx+0x3c>)
 8003704:	781b      	ldrb	r3, [r3, #0]
 8003706:	2b03      	cmp	r3, #3
 8003708:	d806      	bhi.n	8003718 <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 800370a:	4b0a      	ldr	r3, [pc, #40]	@ (8003734 <_cbOnUARTRx+0x3c>)
 800370c:	781b      	ldrb	r3, [r3, #0]
 800370e:	3301      	adds	r3, #1
 8003710:	b2da      	uxtb	r2, r3
 8003712:	4b08      	ldr	r3, [pc, #32]	@ (8003734 <_cbOnUARTRx+0x3c>)
 8003714:	701a      	strb	r2, [r3, #0]
    goto Done;
 8003716:	e009      	b.n	800372c <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 8003718:	f7ff ffde 	bl	80036d8 <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 800371c:	4b05      	ldr	r3, [pc, #20]	@ (8003734 <_cbOnUARTRx+0x3c>)
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	4618      	mov	r0, r3
 8003722:	1dfb      	adds	r3, r7, #7
 8003724:	2201      	movs	r2, #1
 8003726:	4619      	mov	r1, r3
 8003728:	f000 fb9a 	bl	8003e60 <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 800372c:	bf00      	nop
}
 800372e:	3708      	adds	r7, #8
 8003730:	46bd      	mov	sp, r7
 8003732:	bd80      	pop	{r7, pc}
 8003734:	20000014 	.word	0x20000014

08003738 <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 8003738:	b580      	push	{r7, lr}
 800373a:	b084      	sub	sp, #16
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 8003740:	4b14      	ldr	r3, [pc, #80]	@ (8003794 <_cbOnUARTTx+0x5c>)
 8003742:	785b      	ldrb	r3, [r3, #1]
 8003744:	2b03      	cmp	r3, #3
 8003746:	d80f      	bhi.n	8003768 <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 8003748:	4b12      	ldr	r3, [pc, #72]	@ (8003794 <_cbOnUARTTx+0x5c>)
 800374a:	785b      	ldrb	r3, [r3, #1]
 800374c:	461a      	mov	r2, r3
 800374e:	4b12      	ldr	r3, [pc, #72]	@ (8003798 <_cbOnUARTTx+0x60>)
 8003750:	5c9a      	ldrb	r2, [r3, r2]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 8003756:	4b0f      	ldr	r3, [pc, #60]	@ (8003794 <_cbOnUARTTx+0x5c>)
 8003758:	785b      	ldrb	r3, [r3, #1]
 800375a:	3301      	adds	r3, #1
 800375c:	b2da      	uxtb	r2, r3
 800375e:	4b0d      	ldr	r3, [pc, #52]	@ (8003794 <_cbOnUARTTx+0x5c>)
 8003760:	705a      	strb	r2, [r3, #1]
    r = 1;
 8003762:	2301      	movs	r3, #1
 8003764:	60fb      	str	r3, [r7, #12]
    goto Done;
 8003766:	e00f      	b.n	8003788 <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 8003768:	4b0a      	ldr	r3, [pc, #40]	@ (8003794 <_cbOnUARTTx+0x5c>)
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	2201      	movs	r2, #1
 800376e:	6879      	ldr	r1, [r7, #4]
 8003770:	4618      	mov	r0, r3
 8003772:	f000 fa19 	bl	8003ba8 <SEGGER_RTT_ReadUpBufferNoLock>
 8003776:	4603      	mov	r3, r0
 8003778:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	2b00      	cmp	r3, #0
 800377e:	da02      	bge.n	8003786 <_cbOnUARTTx+0x4e>
    r = 0;
 8003780:	2300      	movs	r3, #0
 8003782:	60fb      	str	r3, [r7, #12]
 8003784:	e000      	b.n	8003788 <_cbOnUARTTx+0x50>
  }
Done:
 8003786:	bf00      	nop
  return r;
 8003788:	68fb      	ldr	r3, [r7, #12]
}
 800378a:	4618      	mov	r0, r3
 800378c:	3710      	adds	r7, #16
 800378e:	46bd      	mov	sp, r7
 8003790:	bd80      	pop	{r7, pc}
 8003792:	bf00      	nop
 8003794:	20000014 	.word	0x20000014
 8003798:	0800644c 	.word	0x0800644c

0800379c <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b082      	sub	sp, #8
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 80037a4:	4a04      	ldr	r2, [pc, #16]	@ (80037b8 <SEGGER_UART_init+0x1c>)
 80037a6:	4905      	ldr	r1, [pc, #20]	@ (80037bc <SEGGER_UART_init+0x20>)
 80037a8:	6878      	ldr	r0, [r7, #4]
 80037aa:	f000 f863 	bl	8003874 <HIF_UART_Init>
}
 80037ae:	bf00      	nop
 80037b0:	3708      	adds	r7, #8
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}
 80037b6:	bf00      	nop
 80037b8:	080036f9 	.word	0x080036f9
 80037bc:	08003739 	.word	0x08003739

080037c0 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b084      	sub	sp, #16
 80037c4:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 80037c6:	4b1e      	ldr	r3, [pc, #120]	@ (8003840 <USART2_IRQHandler+0x80>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	f003 0320 	and.w	r3, r3, #32
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d011      	beq.n	80037fa <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 80037d6:	4b1b      	ldr	r3, [pc, #108]	@ (8003844 <USART2_IRQHandler+0x84>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	b2db      	uxtb	r3, r3
 80037dc:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	f003 030b 	and.w	r3, r3, #11
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d108      	bne.n	80037fa <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 80037e8:	4b17      	ldr	r3, [pc, #92]	@ (8003848 <USART2_IRQHandler+0x88>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d004      	beq.n	80037fa <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 80037f0:	4b15      	ldr	r3, [pc, #84]	@ (8003848 <USART2_IRQHandler+0x88>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	79fa      	ldrb	r2, [r7, #7]
 80037f6:	4610      	mov	r0, r2
 80037f8:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003800:	2b00      	cmp	r3, #0
 8003802:	d01a      	beq.n	800383a <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8003804:	4b11      	ldr	r3, [pc, #68]	@ (800384c <USART2_IRQHandler+0x8c>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d015      	beq.n	8003838 <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 800380c:	4b0f      	ldr	r3, [pc, #60]	@ (800384c <USART2_IRQHandler+0x8c>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	1dfa      	adds	r2, r7, #7
 8003812:	4610      	mov	r0, r2
 8003814:	4798      	blx	r3
 8003816:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d106      	bne.n	800382c <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 800381e:	4b0c      	ldr	r3, [pc, #48]	@ (8003850 <USART2_IRQHandler+0x90>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a0b      	ldr	r2, [pc, #44]	@ (8003850 <USART2_IRQHandler+0x90>)
 8003824:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003828:	6013      	str	r3, [r2, #0]
 800382a:	e006      	b.n	800383a <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 800382c:	4b04      	ldr	r3, [pc, #16]	@ (8003840 <USART2_IRQHandler+0x80>)
 800382e:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 8003830:	79fa      	ldrb	r2, [r7, #7]
 8003832:	4b04      	ldr	r3, [pc, #16]	@ (8003844 <USART2_IRQHandler+0x84>)
 8003834:	601a      	str	r2, [r3, #0]
 8003836:	e000      	b.n	800383a <USART2_IRQHandler+0x7a>
      return;
 8003838:	bf00      	nop
    }
  }
}
 800383a:	3710      	adds	r7, #16
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}
 8003840:	40004400 	.word	0x40004400
 8003844:	40004404 	.word	0x40004404
 8003848:	20012e9c 	.word	0x20012e9c
 800384c:	20012ea0 	.word	0x20012ea0
 8003850:	4000440c 	.word	0x4000440c

08003854 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 8003854:	b480      	push	{r7}
 8003856:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 8003858:	4b05      	ldr	r3, [pc, #20]	@ (8003870 <HIF_UART_EnableTXEInterrupt+0x1c>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a04      	ldr	r2, [pc, #16]	@ (8003870 <HIF_UART_EnableTXEInterrupt+0x1c>)
 800385e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003862:	6013      	str	r3, [r2, #0]
}
 8003864:	bf00      	nop
 8003866:	46bd      	mov	sp, r7
 8003868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386c:	4770      	bx	lr
 800386e:	bf00      	nop
 8003870:	4000440c 	.word	0x4000440c

08003874 <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 8003874:	b580      	push	{r7, lr}
 8003876:	b086      	sub	sp, #24
 8003878:	af00      	add	r7, sp, #0
 800387a:	60f8      	str	r0, [r7, #12]
 800387c:	60b9      	str	r1, [r7, #8]
 800387e:	607a      	str	r2, [r7, #4]
  uint32_t v;
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
 8003880:	4b2e      	ldr	r3, [pc, #184]	@ (800393c <HIF_UART_Init+0xc8>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a2d      	ldr	r2, [pc, #180]	@ (800393c <HIF_UART_Init+0xc8>)
 8003886:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800388a:	6013      	str	r3, [r2, #0]
  RCC_AHB1ENR |= (1 <<  0);        // Enable IO port A clock
 800388c:	4b2c      	ldr	r3, [pc, #176]	@ (8003940 <HIF_UART_Init+0xcc>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a2b      	ldr	r2, [pc, #172]	@ (8003940 <HIF_UART_Init+0xcc>)
 8003892:	f043 0301 	orr.w	r3, r3, #1
 8003896:	6013      	str	r3, [r2, #0]
  v  = GPIO_AFRL;
 8003898:	4b2a      	ldr	r3, [pc, #168]	@ (8003944 <HIF_UART_Init+0xd0>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80038a4:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	f443 43ee 	orr.w	r3, r3, #30464	@ 0x7700
 80038ac:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 80038ae:	4a25      	ldr	r2, [pc, #148]	@ (8003944 <HIF_UART_Init+0xd0>)
 80038b0:	693b      	ldr	r3, [r7, #16]
 80038b2:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 80038b4:	4b24      	ldr	r3, [pc, #144]	@ (8003948 <HIF_UART_Init+0xd4>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80038c0:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 80038c2:	693b      	ldr	r3, [r7, #16]
 80038c4:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 80038c8:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 80038ca:	4a1f      	ldr	r2, [pc, #124]	@ (8003948 <HIF_UART_Init+0xd4>)
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 80038d0:	4b1e      	ldr	r3, [pc, #120]	@ (800394c <HIF_UART_Init+0xd8>)
 80038d2:	f24a 022c 	movw	r2, #41004	@ 0xa02c
 80038d6:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 80038d8:	4b1d      	ldr	r3, [pc, #116]	@ (8003950 <HIF_UART_Init+0xdc>)
 80038da:	2200      	movs	r2, #0
 80038dc:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 80038de:	4b1d      	ldr	r3, [pc, #116]	@ (8003954 <HIF_UART_Init+0xe0>)
 80038e0:	2280      	movs	r2, #128	@ 0x80
 80038e2:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	00db      	lsls	r3, r3, #3
 80038e8:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 80038ea:	4a1b      	ldr	r2, [pc, #108]	@ (8003958 <HIF_UART_Init+0xe4>)
 80038ec:	697b      	ldr	r3, [r7, #20]
 80038ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80038f2:	3301      	adds	r3, #1
 80038f4:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 80038f6:	697b      	ldr	r3, [r7, #20]
 80038f8:	085b      	lsrs	r3, r3, #1
 80038fa:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003902:	d302      	bcc.n	800390a <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 8003904:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8003908:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 800390a:	697b      	ldr	r3, [r7, #20]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d004      	beq.n	800391a <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	011b      	lsls	r3, r3, #4
 8003914:	4a11      	ldr	r2, [pc, #68]	@ (800395c <HIF_UART_Init+0xe8>)
 8003916:	b29b      	uxth	r3, r3
 8003918:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 800391a:	4a11      	ldr	r2, [pc, #68]	@ (8003960 <HIF_UART_Init+0xec>)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 8003920:	4a10      	ldr	r2, [pc, #64]	@ (8003964 <HIF_UART_Init+0xf0>)
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 8003926:	2106      	movs	r1, #6
 8003928:	2026      	movs	r0, #38	@ 0x26
 800392a:	f7ff feab 	bl	8003684 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 800392e:	2026      	movs	r0, #38	@ 0x26
 8003930:	f7ff fe8a 	bl	8003648 <__NVIC_EnableIRQ>
}
 8003934:	bf00      	nop
 8003936:	3718      	adds	r7, #24
 8003938:	46bd      	mov	sp, r7
 800393a:	bd80      	pop	{r7, pc}
 800393c:	40023840 	.word	0x40023840
 8003940:	40023830 	.word	0x40023830
 8003944:	40020020 	.word	0x40020020
 8003948:	40020000 	.word	0x40020000
 800394c:	4000440c 	.word	0x4000440c
 8003950:	40004410 	.word	0x40004410
 8003954:	40004414 	.word	0x40004414
 8003958:	0501bd00 	.word	0x0501bd00
 800395c:	40004408 	.word	0x40004408
 8003960:	20012e9c 	.word	0x20012e9c
 8003964:	20012ea0 	.word	0x20012ea0

08003968 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8003968:	b480      	push	{r7}
 800396a:	b083      	sub	sp, #12
 800396c:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 800396e:	4b24      	ldr	r3, [pc, #144]	@ (8003a00 <_DoInit+0x98>)
 8003970:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2203      	movs	r2, #3
 8003976:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2203      	movs	r2, #3
 800397c:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	4a20      	ldr	r2, [pc, #128]	@ (8003a04 <_DoInit+0x9c>)
 8003982:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	4a20      	ldr	r2, [pc, #128]	@ (8003a08 <_DoInit+0xa0>)
 8003988:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003990:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2200      	movs	r2, #0
 8003996:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2200      	movs	r2, #0
 800399c:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2200      	movs	r2, #0
 80039a2:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	4a17      	ldr	r2, [pc, #92]	@ (8003a04 <_DoInit+0x9c>)
 80039a8:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	4a17      	ldr	r2, [pc, #92]	@ (8003a0c <_DoInit+0xa4>)
 80039ae:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2210      	movs	r2, #16
 80039b4:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2200      	movs	r2, #0
 80039ba:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2200      	movs	r2, #0
 80039c0:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2200      	movs	r2, #0
 80039c6:	675a      	str	r2, [r3, #116]	@ 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	3307      	adds	r3, #7
 80039cc:	4a10      	ldr	r2, [pc, #64]	@ (8003a10 <_DoInit+0xa8>)
 80039ce:	6810      	ldr	r0, [r2, #0]
 80039d0:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80039d2:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	4a0e      	ldr	r2, [pc, #56]	@ (8003a14 <_DoInit+0xac>)
 80039da:	6810      	ldr	r0, [r2, #0]
 80039dc:	6018      	str	r0, [r3, #0]
 80039de:	8891      	ldrh	r1, [r2, #4]
 80039e0:	7992      	ldrb	r2, [r2, #6]
 80039e2:	8099      	strh	r1, [r3, #4]
 80039e4:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80039e6:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2220      	movs	r2, #32
 80039ee:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80039f0:	f3bf 8f5f 	dmb	sy
}
 80039f4:	bf00      	nop
 80039f6:	370c      	adds	r7, #12
 80039f8:	46bd      	mov	sp, r7
 80039fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fe:	4770      	bx	lr
 8003a00:	20012ea4 	.word	0x20012ea4
 8003a04:	0800640c 	.word	0x0800640c
 8003a08:	20012f4c 	.word	0x20012f4c
 8003a0c:	2001334c 	.word	0x2001334c
 8003a10:	08006418 	.word	0x08006418
 8003a14:	0800641c 	.word	0x0800641c

08003a18 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b08a      	sub	sp, #40	@ 0x28
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	60f8      	str	r0, [r7, #12]
 8003a20:	60b9      	str	r1, [r7, #8]
 8003a22:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8003a24:	2300      	movs	r3, #0
 8003a26:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	68db      	ldr	r3, [r3, #12]
 8003a2c:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	691b      	ldr	r3, [r3, #16]
 8003a32:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8003a34:	69ba      	ldr	r2, [r7, #24]
 8003a36:	69fb      	ldr	r3, [r7, #28]
 8003a38:	429a      	cmp	r2, r3
 8003a3a:	d905      	bls.n	8003a48 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8003a3c:	69ba      	ldr	r2, [r7, #24]
 8003a3e:	69fb      	ldr	r3, [r7, #28]
 8003a40:	1ad3      	subs	r3, r2, r3
 8003a42:	3b01      	subs	r3, #1
 8003a44:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a46:	e007      	b.n	8003a58 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	689a      	ldr	r2, [r3, #8]
 8003a4c:	69b9      	ldr	r1, [r7, #24]
 8003a4e:	69fb      	ldr	r3, [r7, #28]
 8003a50:	1acb      	subs	r3, r1, r3
 8003a52:	4413      	add	r3, r2
 8003a54:	3b01      	subs	r3, #1
 8003a56:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	689a      	ldr	r2, [r3, #8]
 8003a5c:	69fb      	ldr	r3, [r7, #28]
 8003a5e:	1ad3      	subs	r3, r2, r3
 8003a60:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a62:	4293      	cmp	r3, r2
 8003a64:	bf28      	it	cs
 8003a66:	4613      	movcs	r3, r2
 8003a68:	627b      	str	r3, [r7, #36]	@ 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8003a6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	bf28      	it	cs
 8003a72:	4613      	movcs	r3, r2
 8003a74:	627b      	str	r3, [r7, #36]	@ 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	685a      	ldr	r2, [r3, #4]
 8003a7a:	69fb      	ldr	r3, [r7, #28]
 8003a7c:	4413      	add	r3, r2
 8003a7e:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8003a80:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a82:	68b9      	ldr	r1, [r7, #8]
 8003a84:	6978      	ldr	r0, [r7, #20]
 8003a86:	f001 ffdf 	bl	8005a48 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8003a8a:	6a3a      	ldr	r2, [r7, #32]
 8003a8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a8e:	4413      	add	r3, r2
 8003a90:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8003a92:	68ba      	ldr	r2, [r7, #8]
 8003a94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a96:	4413      	add	r3, r2
 8003a98:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8003a9a:	687a      	ldr	r2, [r7, #4]
 8003a9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a9e:	1ad3      	subs	r3, r2, r3
 8003aa0:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8003aa2:	69fa      	ldr	r2, [r7, #28]
 8003aa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aa6:	4413      	add	r3, r2
 8003aa8:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	689b      	ldr	r3, [r3, #8]
 8003aae:	69fa      	ldr	r2, [r7, #28]
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	d101      	bne.n	8003ab8 <_WriteBlocking+0xa0>
      WrOff = 0u;
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003ab8:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	69fa      	ldr	r2, [r7, #28]
 8003ac0:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d1b2      	bne.n	8003a2e <_WriteBlocking+0x16>
  return NumBytesWritten;
 8003ac8:	6a3b      	ldr	r3, [r7, #32]
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	3728      	adds	r7, #40	@ 0x28
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}

08003ad2 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8003ad2:	b580      	push	{r7, lr}
 8003ad4:	b088      	sub	sp, #32
 8003ad6:	af00      	add	r7, sp, #0
 8003ad8:	60f8      	str	r0, [r7, #12]
 8003ada:	60b9      	str	r1, [r7, #8]
 8003adc:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	68db      	ldr	r3, [r3, #12]
 8003ae2:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	689a      	ldr	r2, [r3, #8]
 8003ae8:	69fb      	ldr	r3, [r7, #28]
 8003aea:	1ad3      	subs	r3, r2, r3
 8003aec:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8003aee:	69ba      	ldr	r2, [r7, #24]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	429a      	cmp	r2, r3
 8003af4:	d911      	bls.n	8003b1a <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	685a      	ldr	r2, [r3, #4]
 8003afa:	69fb      	ldr	r3, [r7, #28]
 8003afc:	4413      	add	r3, r2
 8003afe:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8003b00:	687a      	ldr	r2, [r7, #4]
 8003b02:	68b9      	ldr	r1, [r7, #8]
 8003b04:	6938      	ldr	r0, [r7, #16]
 8003b06:	f001 ff9f 	bl	8005a48 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003b0a:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8003b0e:	69fa      	ldr	r2, [r7, #28]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	441a      	add	r2, r3
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8003b18:	e01f      	b.n	8003b5a <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8003b1a:	69bb      	ldr	r3, [r7, #24]
 8003b1c:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	685a      	ldr	r2, [r3, #4]
 8003b22:	69fb      	ldr	r3, [r7, #28]
 8003b24:	4413      	add	r3, r2
 8003b26:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8003b28:	697a      	ldr	r2, [r7, #20]
 8003b2a:	68b9      	ldr	r1, [r7, #8]
 8003b2c:	6938      	ldr	r0, [r7, #16]
 8003b2e:	f001 ff8b 	bl	8005a48 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8003b32:	687a      	ldr	r2, [r7, #4]
 8003b34:	69bb      	ldr	r3, [r7, #24]
 8003b36:	1ad3      	subs	r3, r2, r3
 8003b38:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8003b40:	68ba      	ldr	r2, [r7, #8]
 8003b42:	69bb      	ldr	r3, [r7, #24]
 8003b44:	4413      	add	r3, r2
 8003b46:	697a      	ldr	r2, [r7, #20]
 8003b48:	4619      	mov	r1, r3
 8003b4a:	6938      	ldr	r0, [r7, #16]
 8003b4c:	f001 ff7c 	bl	8005a48 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003b50:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	697a      	ldr	r2, [r7, #20]
 8003b58:	60da      	str	r2, [r3, #12]
}
 8003b5a:	bf00      	nop
 8003b5c:	3720      	adds	r7, #32
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd80      	pop	{r7, pc}

08003b62 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8003b62:	b480      	push	{r7}
 8003b64:	b087      	sub	sp, #28
 8003b66:	af00      	add	r7, sp, #0
 8003b68:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	691b      	ldr	r3, [r3, #16]
 8003b6e:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	68db      	ldr	r3, [r3, #12]
 8003b74:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8003b76:	693a      	ldr	r2, [r7, #16]
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	429a      	cmp	r2, r3
 8003b7c:	d808      	bhi.n	8003b90 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	689a      	ldr	r2, [r3, #8]
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	1ad2      	subs	r2, r2, r3
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	4413      	add	r3, r2
 8003b8a:	3b01      	subs	r3, #1
 8003b8c:	617b      	str	r3, [r7, #20]
 8003b8e:	e004      	b.n	8003b9a <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8003b90:	693a      	ldr	r2, [r7, #16]
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	1ad3      	subs	r3, r2, r3
 8003b96:	3b01      	subs	r3, #1
 8003b98:	617b      	str	r3, [r7, #20]
  }
  return r;
 8003b9a:	697b      	ldr	r3, [r7, #20]
}
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	371c      	adds	r7, #28
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba6:	4770      	bx	lr

08003ba8 <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b08c      	sub	sp, #48	@ 0x30
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	60f8      	str	r0, [r7, #12]
 8003bb0:	60b9      	str	r1, [r7, #8]
 8003bb2:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 8003bb4:	4b3e      	ldr	r3, [pc, #248]	@ (8003cb0 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8003bb6:	623b      	str	r3, [r7, #32]
 8003bb8:	6a3b      	ldr	r3, [r7, #32]
 8003bba:	781b      	ldrb	r3, [r3, #0]
 8003bbc:	b2db      	uxtb	r3, r3
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d101      	bne.n	8003bc6 <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 8003bc2:	f7ff fed1 	bl	8003968 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	1c5a      	adds	r2, r3, #1
 8003bca:	4613      	mov	r3, r2
 8003bcc:	005b      	lsls	r3, r3, #1
 8003bce:	4413      	add	r3, r2
 8003bd0:	00db      	lsls	r3, r3, #3
 8003bd2:	4a37      	ldr	r2, [pc, #220]	@ (8003cb0 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8003bd4:	4413      	add	r3, r2
 8003bd6:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8003bd8:	68bb      	ldr	r3, [r7, #8]
 8003bda:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 8003bdc:	69fb      	ldr	r3, [r7, #28]
 8003bde:	691b      	ldr	r3, [r3, #16]
 8003be0:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 8003be2:	69fb      	ldr	r3, [r7, #28]
 8003be4:	68db      	ldr	r3, [r3, #12]
 8003be6:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8003be8:	2300      	movs	r3, #0
 8003bea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8003bec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003bee:	69bb      	ldr	r3, [r7, #24]
 8003bf0:	429a      	cmp	r2, r3
 8003bf2:	d92b      	bls.n	8003c4c <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8003bf4:	69fb      	ldr	r3, [r7, #28]
 8003bf6:	689a      	ldr	r2, [r3, #8]
 8003bf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bfa:	1ad3      	subs	r3, r2, r3
 8003bfc:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003bfe:	697a      	ldr	r2, [r7, #20]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	4293      	cmp	r3, r2
 8003c04:	bf28      	it	cs
 8003c06:	4613      	movcs	r3, r2
 8003c08:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003c0a:	69fb      	ldr	r3, [r7, #28]
 8003c0c:	685a      	ldr	r2, [r3, #4]
 8003c0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c10:	4413      	add	r3, r2
 8003c12:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003c14:	697a      	ldr	r2, [r7, #20]
 8003c16:	6939      	ldr	r1, [r7, #16]
 8003c18:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003c1a:	f001 ff15 	bl	8005a48 <memcpy>
    NumBytesRead += NumBytesRem;
 8003c1e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003c20:	697b      	ldr	r3, [r7, #20]
 8003c22:	4413      	add	r3, r2
 8003c24:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8003c26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c28:	697b      	ldr	r3, [r7, #20]
 8003c2a:	4413      	add	r3, r2
 8003c2c:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8003c2e:	687a      	ldr	r2, [r7, #4]
 8003c30:	697b      	ldr	r3, [r7, #20]
 8003c32:	1ad3      	subs	r3, r2, r3
 8003c34:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003c36:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003c38:	697b      	ldr	r3, [r7, #20]
 8003c3a:	4413      	add	r3, r2
 8003c3c:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8003c3e:	69fb      	ldr	r3, [r7, #28]
 8003c40:	689b      	ldr	r3, [r3, #8]
 8003c42:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003c44:	429a      	cmp	r2, r3
 8003c46:	d101      	bne.n	8003c4c <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 8003c48:	2300      	movs	r3, #0
 8003c4a:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8003c4c:	69ba      	ldr	r2, [r7, #24]
 8003c4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c50:	1ad3      	subs	r3, r2, r3
 8003c52:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003c54:	697a      	ldr	r2, [r7, #20]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	bf28      	it	cs
 8003c5c:	4613      	movcs	r3, r2
 8003c5e:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d019      	beq.n	8003c9a <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003c66:	69fb      	ldr	r3, [r7, #28]
 8003c68:	685a      	ldr	r2, [r3, #4]
 8003c6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c6c:	4413      	add	r3, r2
 8003c6e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003c70:	697a      	ldr	r2, [r7, #20]
 8003c72:	6939      	ldr	r1, [r7, #16]
 8003c74:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003c76:	f001 fee7 	bl	8005a48 <memcpy>
    NumBytesRead += NumBytesRem;
 8003c7a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	4413      	add	r3, r2
 8003c80:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8003c82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c84:	697b      	ldr	r3, [r7, #20]
 8003c86:	4413      	add	r3, r2
 8003c88:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8003c8a:	687a      	ldr	r2, [r7, #4]
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	1ad3      	subs	r3, r2, r3
 8003c90:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003c92:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003c94:	697b      	ldr	r3, [r7, #20]
 8003c96:	4413      	add	r3, r2
 8003c98:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 8003c9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d002      	beq.n	8003ca6 <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 8003ca0:	69fb      	ldr	r3, [r7, #28]
 8003ca2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003ca4:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8003ca6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8003ca8:	4618      	mov	r0, r3
 8003caa:	3730      	adds	r7, #48	@ 0x30
 8003cac:	46bd      	mov	sp, r7
 8003cae:	bd80      	pop	{r7, pc}
 8003cb0:	20012ea4 	.word	0x20012ea4

08003cb4 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b08c      	sub	sp, #48	@ 0x30
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	60f8      	str	r0, [r7, #12]
 8003cbc:	60b9      	str	r1, [r7, #8]
 8003cbe:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8003cc0:	4b3e      	ldr	r3, [pc, #248]	@ (8003dbc <SEGGER_RTT_ReadNoLock+0x108>)
 8003cc2:	623b      	str	r3, [r7, #32]
 8003cc4:	6a3b      	ldr	r3, [r7, #32]
 8003cc6:	781b      	ldrb	r3, [r3, #0]
 8003cc8:	b2db      	uxtb	r3, r3
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d101      	bne.n	8003cd2 <SEGGER_RTT_ReadNoLock+0x1e>
 8003cce:	f7ff fe4b 	bl	8003968 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003cd2:	68fa      	ldr	r2, [r7, #12]
 8003cd4:	4613      	mov	r3, r2
 8003cd6:	005b      	lsls	r3, r3, #1
 8003cd8:	4413      	add	r3, r2
 8003cda:	00db      	lsls	r3, r3, #3
 8003cdc:	3360      	adds	r3, #96	@ 0x60
 8003cde:	4a37      	ldr	r2, [pc, #220]	@ (8003dbc <SEGGER_RTT_ReadNoLock+0x108>)
 8003ce0:	4413      	add	r3, r2
 8003ce2:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 8003ce8:	69fb      	ldr	r3, [r7, #28]
 8003cea:	691b      	ldr	r3, [r3, #16]
 8003cec:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 8003cee:	69fb      	ldr	r3, [r7, #28]
 8003cf0:	68db      	ldr	r3, [r3, #12]
 8003cf2:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8003cf8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003cfa:	69bb      	ldr	r3, [r7, #24]
 8003cfc:	429a      	cmp	r2, r3
 8003cfe:	d92b      	bls.n	8003d58 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8003d00:	69fb      	ldr	r3, [r7, #28]
 8003d02:	689a      	ldr	r2, [r3, #8]
 8003d04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d06:	1ad3      	subs	r3, r2, r3
 8003d08:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003d0a:	697a      	ldr	r2, [r7, #20]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	bf28      	it	cs
 8003d12:	4613      	movcs	r3, r2
 8003d14:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003d16:	69fb      	ldr	r3, [r7, #28]
 8003d18:	685a      	ldr	r2, [r3, #4]
 8003d1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d1c:	4413      	add	r3, r2
 8003d1e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003d20:	697a      	ldr	r2, [r7, #20]
 8003d22:	6939      	ldr	r1, [r7, #16]
 8003d24:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003d26:	f001 fe8f 	bl	8005a48 <memcpy>
    NumBytesRead += NumBytesRem;
 8003d2a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	4413      	add	r3, r2
 8003d30:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8003d32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	4413      	add	r3, r2
 8003d38:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8003d3a:	687a      	ldr	r2, [r7, #4]
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	1ad3      	subs	r3, r2, r3
 8003d40:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003d42:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	4413      	add	r3, r2
 8003d48:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8003d4a:	69fb      	ldr	r3, [r7, #28]
 8003d4c:	689b      	ldr	r3, [r3, #8]
 8003d4e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003d50:	429a      	cmp	r2, r3
 8003d52:	d101      	bne.n	8003d58 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8003d54:	2300      	movs	r3, #0
 8003d56:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8003d58:	69ba      	ldr	r2, [r7, #24]
 8003d5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d5c:	1ad3      	subs	r3, r2, r3
 8003d5e:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003d60:	697a      	ldr	r2, [r7, #20]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	4293      	cmp	r3, r2
 8003d66:	bf28      	it	cs
 8003d68:	4613      	movcs	r3, r2
 8003d6a:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8003d6c:	697b      	ldr	r3, [r7, #20]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d019      	beq.n	8003da6 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003d72:	69fb      	ldr	r3, [r7, #28]
 8003d74:	685a      	ldr	r2, [r3, #4]
 8003d76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d78:	4413      	add	r3, r2
 8003d7a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003d7c:	697a      	ldr	r2, [r7, #20]
 8003d7e:	6939      	ldr	r1, [r7, #16]
 8003d80:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003d82:	f001 fe61 	bl	8005a48 <memcpy>
    NumBytesRead += NumBytesRem;
 8003d86:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	4413      	add	r3, r2
 8003d8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8003d8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d90:	697b      	ldr	r3, [r7, #20]
 8003d92:	4413      	add	r3, r2
 8003d94:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8003d96:	687a      	ldr	r2, [r7, #4]
 8003d98:	697b      	ldr	r3, [r7, #20]
 8003d9a:	1ad3      	subs	r3, r2, r3
 8003d9c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003d9e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003da0:	697b      	ldr	r3, [r7, #20]
 8003da2:	4413      	add	r3, r2
 8003da4:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  if (NumBytesRead) {
 8003da6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d002      	beq.n	8003db2 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8003dac:	69fb      	ldr	r3, [r7, #28]
 8003dae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003db0:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8003db2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8003db4:	4618      	mov	r0, r3
 8003db6:	3730      	adds	r7, #48	@ 0x30
 8003db8:	46bd      	mov	sp, r7
 8003dba:	bd80      	pop	{r7, pc}
 8003dbc:	20012ea4 	.word	0x20012ea4

08003dc0 <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b088      	sub	sp, #32
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	60f8      	str	r0, [r7, #12]
 8003dc8:	60b9      	str	r1, [r7, #8]
 8003dca:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003dd0:	68fa      	ldr	r2, [r7, #12]
 8003dd2:	4613      	mov	r3, r2
 8003dd4:	005b      	lsls	r3, r3, #1
 8003dd6:	4413      	add	r3, r2
 8003dd8:	00db      	lsls	r3, r3, #3
 8003dda:	3360      	adds	r3, #96	@ 0x60
 8003ddc:	4a1f      	ldr	r2, [pc, #124]	@ (8003e5c <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 8003dde:	4413      	add	r3, r2
 8003de0:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	695b      	ldr	r3, [r3, #20]
 8003de6:	2b02      	cmp	r3, #2
 8003de8:	d029      	beq.n	8003e3e <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 8003dea:	2b02      	cmp	r3, #2
 8003dec:	d82e      	bhi.n	8003e4c <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d002      	beq.n	8003df8 <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 8003df2:	2b01      	cmp	r3, #1
 8003df4:	d013      	beq.n	8003e1e <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 8003df6:	e029      	b.n	8003e4c <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8003df8:	6978      	ldr	r0, [r7, #20]
 8003dfa:	f7ff feb2 	bl	8003b62 <_GetAvailWriteSpace>
 8003dfe:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8003e00:	693a      	ldr	r2, [r7, #16]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	429a      	cmp	r2, r3
 8003e06:	d202      	bcs.n	8003e0e <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 8003e08:	2300      	movs	r3, #0
 8003e0a:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8003e0c:	e021      	b.n	8003e52 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8003e12:	687a      	ldr	r2, [r7, #4]
 8003e14:	69b9      	ldr	r1, [r7, #24]
 8003e16:	6978      	ldr	r0, [r7, #20]
 8003e18:	f7ff fe5b 	bl	8003ad2 <_WriteNoCheck>
    break;
 8003e1c:	e019      	b.n	8003e52 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8003e1e:	6978      	ldr	r0, [r7, #20]
 8003e20:	f7ff fe9f 	bl	8003b62 <_GetAvailWriteSpace>
 8003e24:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8003e26:	687a      	ldr	r2, [r7, #4]
 8003e28:	693b      	ldr	r3, [r7, #16]
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	bf28      	it	cs
 8003e2e:	4613      	movcs	r3, r2
 8003e30:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8003e32:	69fa      	ldr	r2, [r7, #28]
 8003e34:	69b9      	ldr	r1, [r7, #24]
 8003e36:	6978      	ldr	r0, [r7, #20]
 8003e38:	f7ff fe4b 	bl	8003ad2 <_WriteNoCheck>
    break;
 8003e3c:	e009      	b.n	8003e52 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8003e3e:	687a      	ldr	r2, [r7, #4]
 8003e40:	69b9      	ldr	r1, [r7, #24]
 8003e42:	6978      	ldr	r0, [r7, #20]
 8003e44:	f7ff fde8 	bl	8003a18 <_WriteBlocking>
 8003e48:	61f8      	str	r0, [r7, #28]
    break;
 8003e4a:	e002      	b.n	8003e52 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	61fb      	str	r3, [r7, #28]
    break;
 8003e50:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8003e52:	69fb      	ldr	r3, [r7, #28]
}
 8003e54:	4618      	mov	r0, r3
 8003e56:	3720      	adds	r7, #32
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bd80      	pop	{r7, pc}
 8003e5c:	20012ea4 	.word	0x20012ea4

08003e60 <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer, 
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b088      	sub	sp, #32
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	60f8      	str	r0, [r7, #12]
 8003e68:	60b9      	str	r1, [r7, #8]
 8003e6a:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8003e6c:	4b0e      	ldr	r3, [pc, #56]	@ (8003ea8 <SEGGER_RTT_WriteDownBuffer+0x48>)
 8003e6e:	61fb      	str	r3, [r7, #28]
 8003e70:	69fb      	ldr	r3, [r7, #28]
 8003e72:	781b      	ldrb	r3, [r3, #0]
 8003e74:	b2db      	uxtb	r3, r3
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d101      	bne.n	8003e7e <SEGGER_RTT_WriteDownBuffer+0x1e>
 8003e7a:	f7ff fd75 	bl	8003968 <_DoInit>
  SEGGER_RTT_LOCK();
 8003e7e:	f3ef 8311 	mrs	r3, BASEPRI
 8003e82:	f04f 0120 	mov.w	r1, #32
 8003e86:	f381 8811 	msr	BASEPRI, r1
 8003e8a:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8003e8c:	687a      	ldr	r2, [r7, #4]
 8003e8e:	68b9      	ldr	r1, [r7, #8]
 8003e90:	68f8      	ldr	r0, [r7, #12]
 8003e92:	f7ff ff95 	bl	8003dc0 <SEGGER_RTT_WriteDownBufferNoLock>
 8003e96:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8003e98:	69bb      	ldr	r3, [r7, #24]
 8003e9a:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8003e9e:	697b      	ldr	r3, [r7, #20]
}
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	3720      	adds	r7, #32
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bd80      	pop	{r7, pc}
 8003ea8:	20012ea4 	.word	0x20012ea4

08003eac <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b088      	sub	sp, #32
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	60f8      	str	r0, [r7, #12]
 8003eb4:	60b9      	str	r1, [r7, #8]
 8003eb6:	607a      	str	r2, [r7, #4]
 8003eb8:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8003eba:	4b3d      	ldr	r3, [pc, #244]	@ (8003fb0 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8003ebc:	61bb      	str	r3, [r7, #24]
 8003ebe:	69bb      	ldr	r3, [r7, #24]
 8003ec0:	781b      	ldrb	r3, [r3, #0]
 8003ec2:	b2db      	uxtb	r3, r3
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d101      	bne.n	8003ecc <SEGGER_RTT_AllocUpBuffer+0x20>
 8003ec8:	f7ff fd4e 	bl	8003968 <_DoInit>
  SEGGER_RTT_LOCK();
 8003ecc:	f3ef 8311 	mrs	r3, BASEPRI
 8003ed0:	f04f 0120 	mov.w	r1, #32
 8003ed4:	f381 8811 	msr	BASEPRI, r1
 8003ed8:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003eda:	4b35      	ldr	r3, [pc, #212]	@ (8003fb0 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8003edc:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8003ede:	2300      	movs	r3, #0
 8003ee0:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8003ee2:	6939      	ldr	r1, [r7, #16]
 8003ee4:	69fb      	ldr	r3, [r7, #28]
 8003ee6:	1c5a      	adds	r2, r3, #1
 8003ee8:	4613      	mov	r3, r2
 8003eea:	005b      	lsls	r3, r3, #1
 8003eec:	4413      	add	r3, r2
 8003eee:	00db      	lsls	r3, r3, #3
 8003ef0:	440b      	add	r3, r1
 8003ef2:	3304      	adds	r3, #4
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d008      	beq.n	8003f0c <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8003efa:	69fb      	ldr	r3, [r7, #28]
 8003efc:	3301      	adds	r3, #1
 8003efe:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8003f00:	693b      	ldr	r3, [r7, #16]
 8003f02:	691b      	ldr	r3, [r3, #16]
 8003f04:	69fa      	ldr	r2, [r7, #28]
 8003f06:	429a      	cmp	r2, r3
 8003f08:	dbeb      	blt.n	8003ee2 <SEGGER_RTT_AllocUpBuffer+0x36>
 8003f0a:	e000      	b.n	8003f0e <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8003f0c:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8003f0e:	693b      	ldr	r3, [r7, #16]
 8003f10:	691b      	ldr	r3, [r3, #16]
 8003f12:	69fa      	ldr	r2, [r7, #28]
 8003f14:	429a      	cmp	r2, r3
 8003f16:	da3f      	bge.n	8003f98 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8003f18:	6939      	ldr	r1, [r7, #16]
 8003f1a:	69fb      	ldr	r3, [r7, #28]
 8003f1c:	1c5a      	adds	r2, r3, #1
 8003f1e:	4613      	mov	r3, r2
 8003f20:	005b      	lsls	r3, r3, #1
 8003f22:	4413      	add	r3, r2
 8003f24:	00db      	lsls	r3, r3, #3
 8003f26:	440b      	add	r3, r1
 8003f28:	68fa      	ldr	r2, [r7, #12]
 8003f2a:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8003f2c:	6939      	ldr	r1, [r7, #16]
 8003f2e:	69fb      	ldr	r3, [r7, #28]
 8003f30:	1c5a      	adds	r2, r3, #1
 8003f32:	4613      	mov	r3, r2
 8003f34:	005b      	lsls	r3, r3, #1
 8003f36:	4413      	add	r3, r2
 8003f38:	00db      	lsls	r3, r3, #3
 8003f3a:	440b      	add	r3, r1
 8003f3c:	3304      	adds	r3, #4
 8003f3e:	68ba      	ldr	r2, [r7, #8]
 8003f40:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8003f42:	6939      	ldr	r1, [r7, #16]
 8003f44:	69fa      	ldr	r2, [r7, #28]
 8003f46:	4613      	mov	r3, r2
 8003f48:	005b      	lsls	r3, r3, #1
 8003f4a:	4413      	add	r3, r2
 8003f4c:	00db      	lsls	r3, r3, #3
 8003f4e:	440b      	add	r3, r1
 8003f50:	3320      	adds	r3, #32
 8003f52:	687a      	ldr	r2, [r7, #4]
 8003f54:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8003f56:	6939      	ldr	r1, [r7, #16]
 8003f58:	69fa      	ldr	r2, [r7, #28]
 8003f5a:	4613      	mov	r3, r2
 8003f5c:	005b      	lsls	r3, r3, #1
 8003f5e:	4413      	add	r3, r2
 8003f60:	00db      	lsls	r3, r3, #3
 8003f62:	440b      	add	r3, r1
 8003f64:	3328      	adds	r3, #40	@ 0x28
 8003f66:	2200      	movs	r2, #0
 8003f68:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8003f6a:	6939      	ldr	r1, [r7, #16]
 8003f6c:	69fa      	ldr	r2, [r7, #28]
 8003f6e:	4613      	mov	r3, r2
 8003f70:	005b      	lsls	r3, r3, #1
 8003f72:	4413      	add	r3, r2
 8003f74:	00db      	lsls	r3, r3, #3
 8003f76:	440b      	add	r3, r1
 8003f78:	3324      	adds	r3, #36	@ 0x24
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8003f7e:	6939      	ldr	r1, [r7, #16]
 8003f80:	69fa      	ldr	r2, [r7, #28]
 8003f82:	4613      	mov	r3, r2
 8003f84:	005b      	lsls	r3, r3, #1
 8003f86:	4413      	add	r3, r2
 8003f88:	00db      	lsls	r3, r3, #3
 8003f8a:	440b      	add	r3, r1
 8003f8c:	332c      	adds	r3, #44	@ 0x2c
 8003f8e:	683a      	ldr	r2, [r7, #0]
 8003f90:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003f92:	f3bf 8f5f 	dmb	sy
 8003f96:	e002      	b.n	8003f9e <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8003f98:	f04f 33ff 	mov.w	r3, #4294967295
 8003f9c:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8003fa4:	69fb      	ldr	r3, [r7, #28]
}
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	3720      	adds	r7, #32
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd80      	pop	{r7, pc}
 8003fae:	bf00      	nop
 8003fb0:	20012ea4 	.word	0x20012ea4

08003fb4 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b088      	sub	sp, #32
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	60f8      	str	r0, [r7, #12]
 8003fbc:	60b9      	str	r1, [r7, #8]
 8003fbe:	607a      	str	r2, [r7, #4]
 8003fc0:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8003fc2:	4b33      	ldr	r3, [pc, #204]	@ (8004090 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8003fc4:	61bb      	str	r3, [r7, #24]
 8003fc6:	69bb      	ldr	r3, [r7, #24]
 8003fc8:	781b      	ldrb	r3, [r3, #0]
 8003fca:	b2db      	uxtb	r3, r3
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d101      	bne.n	8003fd4 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8003fd0:	f7ff fcca 	bl	8003968 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003fd4:	4b2e      	ldr	r3, [pc, #184]	@ (8004090 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8003fd6:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 8003fd8:	697b      	ldr	r3, [r7, #20]
 8003fda:	695b      	ldr	r3, [r3, #20]
 8003fdc:	461a      	mov	r2, r3
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d24d      	bcs.n	8004080 <SEGGER_RTT_ConfigDownBuffer+0xcc>
    SEGGER_RTT_LOCK();
 8003fe4:	f3ef 8311 	mrs	r3, BASEPRI
 8003fe8:	f04f 0120 	mov.w	r1, #32
 8003fec:	f381 8811 	msr	BASEPRI, r1
 8003ff0:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d031      	beq.n	800405c <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 8003ff8:	6979      	ldr	r1, [r7, #20]
 8003ffa:	68fa      	ldr	r2, [r7, #12]
 8003ffc:	4613      	mov	r3, r2
 8003ffe:	005b      	lsls	r3, r3, #1
 8004000:	4413      	add	r3, r2
 8004002:	00db      	lsls	r3, r3, #3
 8004004:	440b      	add	r3, r1
 8004006:	3360      	adds	r3, #96	@ 0x60
 8004008:	68ba      	ldr	r2, [r7, #8]
 800400a:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 800400c:	6979      	ldr	r1, [r7, #20]
 800400e:	68fa      	ldr	r2, [r7, #12]
 8004010:	4613      	mov	r3, r2
 8004012:	005b      	lsls	r3, r3, #1
 8004014:	4413      	add	r3, r2
 8004016:	00db      	lsls	r3, r3, #3
 8004018:	440b      	add	r3, r1
 800401a:	3364      	adds	r3, #100	@ 0x64
 800401c:	687a      	ldr	r2, [r7, #4]
 800401e:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 8004020:	6979      	ldr	r1, [r7, #20]
 8004022:	68fa      	ldr	r2, [r7, #12]
 8004024:	4613      	mov	r3, r2
 8004026:	005b      	lsls	r3, r3, #1
 8004028:	4413      	add	r3, r2
 800402a:	00db      	lsls	r3, r3, #3
 800402c:	440b      	add	r3, r1
 800402e:	3368      	adds	r3, #104	@ 0x68
 8004030:	683a      	ldr	r2, [r7, #0]
 8004032:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 8004034:	6979      	ldr	r1, [r7, #20]
 8004036:	68fa      	ldr	r2, [r7, #12]
 8004038:	4613      	mov	r3, r2
 800403a:	005b      	lsls	r3, r3, #1
 800403c:	4413      	add	r3, r2
 800403e:	00db      	lsls	r3, r3, #3
 8004040:	440b      	add	r3, r1
 8004042:	3370      	adds	r3, #112	@ 0x70
 8004044:	2200      	movs	r2, #0
 8004046:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 8004048:	6979      	ldr	r1, [r7, #20]
 800404a:	68fa      	ldr	r2, [r7, #12]
 800404c:	4613      	mov	r3, r2
 800404e:	005b      	lsls	r3, r3, #1
 8004050:	4413      	add	r3, r2
 8004052:	00db      	lsls	r3, r3, #3
 8004054:	440b      	add	r3, r1
 8004056:	336c      	adds	r3, #108	@ 0x6c
 8004058:	2200      	movs	r2, #0
 800405a:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 800405c:	6979      	ldr	r1, [r7, #20]
 800405e:	68fa      	ldr	r2, [r7, #12]
 8004060:	4613      	mov	r3, r2
 8004062:	005b      	lsls	r3, r3, #1
 8004064:	4413      	add	r3, r2
 8004066:	00db      	lsls	r3, r3, #3
 8004068:	440b      	add	r3, r1
 800406a:	3374      	adds	r3, #116	@ 0x74
 800406c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800406e:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004070:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8004074:	693b      	ldr	r3, [r7, #16]
 8004076:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 800407a:	2300      	movs	r3, #0
 800407c:	61fb      	str	r3, [r7, #28]
 800407e:	e002      	b.n	8004086 <SEGGER_RTT_ConfigDownBuffer+0xd2>
  } else {
    r = -1;
 8004080:	f04f 33ff 	mov.w	r3, #4294967295
 8004084:	61fb      	str	r3, [r7, #28]
  }
  return r;
 8004086:	69fb      	ldr	r3, [r7, #28]
}
 8004088:	4618      	mov	r0, r3
 800408a:	3720      	adds	r7, #32
 800408c:	46bd      	mov	sp, r7
 800408e:	bd80      	pop	{r7, pc}
 8004090:	20012ea4 	.word	0x20012ea4

08004094 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8004094:	b480      	push	{r7}
 8004096:	b087      	sub	sp, #28
 8004098:	af00      	add	r7, sp, #0
 800409a:	60f8      	str	r0, [r7, #12]
 800409c:	60b9      	str	r1, [r7, #8]
 800409e:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 80040a0:	2300      	movs	r3, #0
 80040a2:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 80040a4:	e002      	b.n	80040ac <_EncodeStr+0x18>
    Len++;
 80040a6:	693b      	ldr	r3, [r7, #16]
 80040a8:	3301      	adds	r3, #1
 80040aa:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 80040ac:	68ba      	ldr	r2, [r7, #8]
 80040ae:	693b      	ldr	r3, [r7, #16]
 80040b0:	4413      	add	r3, r2
 80040b2:	781b      	ldrb	r3, [r3, #0]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d1f6      	bne.n	80040a6 <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 80040b8:	693a      	ldr	r2, [r7, #16]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	429a      	cmp	r2, r3
 80040be:	d901      	bls.n	80040c4 <_EncodeStr+0x30>
    Len = Limit;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 80040c4:	693b      	ldr	r3, [r7, #16]
 80040c6:	2bfe      	cmp	r3, #254	@ 0xfe
 80040c8:	d806      	bhi.n	80040d8 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	1c5a      	adds	r2, r3, #1
 80040ce:	60fa      	str	r2, [r7, #12]
 80040d0:	693a      	ldr	r2, [r7, #16]
 80040d2:	b2d2      	uxtb	r2, r2
 80040d4:	701a      	strb	r2, [r3, #0]
 80040d6:	e011      	b.n	80040fc <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	1c5a      	adds	r2, r3, #1
 80040dc:	60fa      	str	r2, [r7, #12]
 80040de:	22ff      	movs	r2, #255	@ 0xff
 80040e0:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	1c5a      	adds	r2, r3, #1
 80040e6:	60fa      	str	r2, [r7, #12]
 80040e8:	693a      	ldr	r2, [r7, #16]
 80040ea:	b2d2      	uxtb	r2, r2
 80040ec:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	0a19      	lsrs	r1, r3, #8
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	1c5a      	adds	r2, r3, #1
 80040f6:	60fa      	str	r2, [r7, #12]
 80040f8:	b2ca      	uxtb	r2, r1
 80040fa:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 80040fc:	2300      	movs	r3, #0
 80040fe:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8004100:	e00a      	b.n	8004118 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 8004102:	68ba      	ldr	r2, [r7, #8]
 8004104:	1c53      	adds	r3, r2, #1
 8004106:	60bb      	str	r3, [r7, #8]
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	1c59      	adds	r1, r3, #1
 800410c:	60f9      	str	r1, [r7, #12]
 800410e:	7812      	ldrb	r2, [r2, #0]
 8004110:	701a      	strb	r2, [r3, #0]
    n++;
 8004112:	697b      	ldr	r3, [r7, #20]
 8004114:	3301      	adds	r3, #1
 8004116:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8004118:	697a      	ldr	r2, [r7, #20]
 800411a:	693b      	ldr	r3, [r7, #16]
 800411c:	429a      	cmp	r2, r3
 800411e:	d3f0      	bcc.n	8004102 <_EncodeStr+0x6e>
  }
  return pPayload;
 8004120:	68fb      	ldr	r3, [r7, #12]
}
 8004122:	4618      	mov	r0, r3
 8004124:	371c      	adds	r7, #28
 8004126:	46bd      	mov	sp, r7
 8004128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412c:	4770      	bx	lr

0800412e <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 800412e:	b480      	push	{r7}
 8004130:	b083      	sub	sp, #12
 8004132:	af00      	add	r7, sp, #0
 8004134:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	3304      	adds	r3, #4
}
 800413a:	4618      	mov	r0, r3
 800413c:	370c      	adds	r7, #12
 800413e:	46bd      	mov	sp, r7
 8004140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004144:	4770      	bx	lr
	...

08004148 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8004148:	b580      	push	{r7, lr}
 800414a:	b082      	sub	sp, #8
 800414c:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800414e:	4b35      	ldr	r3, [pc, #212]	@ (8004224 <_HandleIncomingPacket+0xdc>)
 8004150:	7e1b      	ldrb	r3, [r3, #24]
 8004152:	4618      	mov	r0, r3
 8004154:	1cfb      	adds	r3, r7, #3
 8004156:	2201      	movs	r2, #1
 8004158:	4619      	mov	r1, r3
 800415a:	f7ff fdab 	bl	8003cb4 <SEGGER_RTT_ReadNoLock>
 800415e:	4603      	mov	r3, r0
 8004160:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2b00      	cmp	r3, #0
 8004166:	dd59      	ble.n	800421c <_HandleIncomingPacket+0xd4>
    switch (Cmd) {
 8004168:	78fb      	ldrb	r3, [r7, #3]
 800416a:	2b80      	cmp	r3, #128	@ 0x80
 800416c:	d032      	beq.n	80041d4 <_HandleIncomingPacket+0x8c>
 800416e:	2b80      	cmp	r3, #128	@ 0x80
 8004170:	dc42      	bgt.n	80041f8 <_HandleIncomingPacket+0xb0>
 8004172:	2b07      	cmp	r3, #7
 8004174:	dc16      	bgt.n	80041a4 <_HandleIncomingPacket+0x5c>
 8004176:	2b00      	cmp	r3, #0
 8004178:	dd3e      	ble.n	80041f8 <_HandleIncomingPacket+0xb0>
 800417a:	3b01      	subs	r3, #1
 800417c:	2b06      	cmp	r3, #6
 800417e:	d83b      	bhi.n	80041f8 <_HandleIncomingPacket+0xb0>
 8004180:	a201      	add	r2, pc, #4	@ (adr r2, 8004188 <_HandleIncomingPacket+0x40>)
 8004182:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004186:	bf00      	nop
 8004188:	080041ab 	.word	0x080041ab
 800418c:	080041b1 	.word	0x080041b1
 8004190:	080041b7 	.word	0x080041b7
 8004194:	080041bd 	.word	0x080041bd
 8004198:	080041c3 	.word	0x080041c3
 800419c:	080041c9 	.word	0x080041c9
 80041a0:	080041cf 	.word	0x080041cf
 80041a4:	2b7f      	cmp	r3, #127	@ 0x7f
 80041a6:	d034      	beq.n	8004212 <_HandleIncomingPacket+0xca>
 80041a8:	e026      	b.n	80041f8 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 80041aa:	f000 fe3b 	bl	8004e24 <SEGGER_SYSVIEW_Start>
      break;
 80041ae:	e035      	b.n	800421c <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 80041b0:	f000 fef4 	bl	8004f9c <SEGGER_SYSVIEW_Stop>
      break;
 80041b4:	e032      	b.n	800421c <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 80041b6:	f001 f8cd 	bl	8005354 <SEGGER_SYSVIEW_RecordSystime>
      break;
 80041ba:	e02f      	b.n	800421c <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 80041bc:	f001 f892 	bl	80052e4 <SEGGER_SYSVIEW_SendTaskList>
      break;
 80041c0:	e02c      	b.n	800421c <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 80041c2:	f000 ff11 	bl	8004fe8 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 80041c6:	e029      	b.n	800421c <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 80041c8:	f001 faf0 	bl	80057ac <SEGGER_SYSVIEW_SendNumModules>
      break;
 80041cc:	e026      	b.n	800421c <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 80041ce:	f001 facf 	bl	8005770 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 80041d2:	e023      	b.n	800421c <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80041d4:	4b13      	ldr	r3, [pc, #76]	@ (8004224 <_HandleIncomingPacket+0xdc>)
 80041d6:	7e1b      	ldrb	r3, [r3, #24]
 80041d8:	4618      	mov	r0, r3
 80041da:	1cfb      	adds	r3, r7, #3
 80041dc:	2201      	movs	r2, #1
 80041de:	4619      	mov	r1, r3
 80041e0:	f7ff fd68 	bl	8003cb4 <SEGGER_RTT_ReadNoLock>
 80041e4:	4603      	mov	r3, r0
 80041e6:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	dd13      	ble.n	8004216 <_HandleIncomingPacket+0xce>
        SEGGER_SYSVIEW_SendModule(Cmd);
 80041ee:	78fb      	ldrb	r3, [r7, #3]
 80041f0:	4618      	mov	r0, r3
 80041f2:	f001 fa3d 	bl	8005670 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 80041f6:	e00e      	b.n	8004216 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 80041f8:	78fb      	ldrb	r3, [r7, #3]
 80041fa:	b25b      	sxtb	r3, r3
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	da0c      	bge.n	800421a <_HandleIncomingPacket+0xd2>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004200:	4b08      	ldr	r3, [pc, #32]	@ (8004224 <_HandleIncomingPacket+0xdc>)
 8004202:	7e1b      	ldrb	r3, [r3, #24]
 8004204:	4618      	mov	r0, r3
 8004206:	1cfb      	adds	r3, r7, #3
 8004208:	2201      	movs	r2, #1
 800420a:	4619      	mov	r1, r3
 800420c:	f7ff fd52 	bl	8003cb4 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8004210:	e003      	b.n	800421a <_HandleIncomingPacket+0xd2>
      break;
 8004212:	bf00      	nop
 8004214:	e002      	b.n	800421c <_HandleIncomingPacket+0xd4>
      break;
 8004216:	bf00      	nop
 8004218:	e000      	b.n	800421c <_HandleIncomingPacket+0xd4>
      break;
 800421a:	bf00      	nop
    }
  }
}
 800421c:	bf00      	nop
 800421e:	3708      	adds	r7, #8
 8004220:	46bd      	mov	sp, r7
 8004222:	bd80      	pop	{r7, pc}
 8004224:	20014364 	.word	0x20014364

08004228 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8004228:	b580      	push	{r7, lr}
 800422a:	b08c      	sub	sp, #48	@ 0x30
 800422c:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 800422e:	2301      	movs	r3, #1
 8004230:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8004232:	1d3b      	adds	r3, r7, #4
 8004234:	3301      	adds	r3, #1
 8004236:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8004238:	69fb      	ldr	r3, [r7, #28]
 800423a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800423c:	4b32      	ldr	r3, [pc, #200]	@ (8004308 <_TrySendOverflowPacket+0xe0>)
 800423e:	695b      	ldr	r3, [r3, #20]
 8004240:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004242:	e00b      	b.n	800425c <_TrySendOverflowPacket+0x34>
 8004244:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004246:	b2da      	uxtb	r2, r3
 8004248:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800424a:	1c59      	adds	r1, r3, #1
 800424c:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800424e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004252:	b2d2      	uxtb	r2, r2
 8004254:	701a      	strb	r2, [r3, #0]
 8004256:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004258:	09db      	lsrs	r3, r3, #7
 800425a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800425c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800425e:	2b7f      	cmp	r3, #127	@ 0x7f
 8004260:	d8f0      	bhi.n	8004244 <_TrySendOverflowPacket+0x1c>
 8004262:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004264:	1c5a      	adds	r2, r3, #1
 8004266:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004268:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800426a:	b2d2      	uxtb	r2, r2
 800426c:	701a      	strb	r2, [r3, #0]
 800426e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004270:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004272:	4b26      	ldr	r3, [pc, #152]	@ (800430c <_TrySendOverflowPacket+0xe4>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004278:	4b23      	ldr	r3, [pc, #140]	@ (8004308 <_TrySendOverflowPacket+0xe0>)
 800427a:	68db      	ldr	r3, [r3, #12]
 800427c:	69ba      	ldr	r2, [r7, #24]
 800427e:	1ad3      	subs	r3, r2, r3
 8004280:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8004282:	69fb      	ldr	r3, [r7, #28]
 8004284:	627b      	str	r3, [r7, #36]	@ 0x24
 8004286:	697b      	ldr	r3, [r7, #20]
 8004288:	623b      	str	r3, [r7, #32]
 800428a:	e00b      	b.n	80042a4 <_TrySendOverflowPacket+0x7c>
 800428c:	6a3b      	ldr	r3, [r7, #32]
 800428e:	b2da      	uxtb	r2, r3
 8004290:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004292:	1c59      	adds	r1, r3, #1
 8004294:	6279      	str	r1, [r7, #36]	@ 0x24
 8004296:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800429a:	b2d2      	uxtb	r2, r2
 800429c:	701a      	strb	r2, [r3, #0]
 800429e:	6a3b      	ldr	r3, [r7, #32]
 80042a0:	09db      	lsrs	r3, r3, #7
 80042a2:	623b      	str	r3, [r7, #32]
 80042a4:	6a3b      	ldr	r3, [r7, #32]
 80042a6:	2b7f      	cmp	r3, #127	@ 0x7f
 80042a8:	d8f0      	bhi.n	800428c <_TrySendOverflowPacket+0x64>
 80042aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042ac:	1c5a      	adds	r2, r3, #1
 80042ae:	627a      	str	r2, [r7, #36]	@ 0x24
 80042b0:	6a3a      	ldr	r2, [r7, #32]
 80042b2:	b2d2      	uxtb	r2, r2
 80042b4:	701a      	strb	r2, [r3, #0]
 80042b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042b8:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 80042ba:	4b13      	ldr	r3, [pc, #76]	@ (8004308 <_TrySendOverflowPacket+0xe0>)
 80042bc:	785b      	ldrb	r3, [r3, #1]
 80042be:	4618      	mov	r0, r3
 80042c0:	1d3b      	adds	r3, r7, #4
 80042c2:	69fa      	ldr	r2, [r7, #28]
 80042c4:	1ad3      	subs	r3, r2, r3
 80042c6:	461a      	mov	r2, r3
 80042c8:	1d3b      	adds	r3, r7, #4
 80042ca:	4619      	mov	r1, r3
 80042cc:	f7fb ff80 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80042d0:	4603      	mov	r3, r0
 80042d2:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 80042d4:	f7ff fabe 	bl	8003854 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 80042d8:	693b      	ldr	r3, [r7, #16]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d009      	beq.n	80042f2 <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80042de:	4a0a      	ldr	r2, [pc, #40]	@ (8004308 <_TrySendOverflowPacket+0xe0>)
 80042e0:	69bb      	ldr	r3, [r7, #24]
 80042e2:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 80042e4:	4b08      	ldr	r3, [pc, #32]	@ (8004308 <_TrySendOverflowPacket+0xe0>)
 80042e6:	781b      	ldrb	r3, [r3, #0]
 80042e8:	3b01      	subs	r3, #1
 80042ea:	b2da      	uxtb	r2, r3
 80042ec:	4b06      	ldr	r3, [pc, #24]	@ (8004308 <_TrySendOverflowPacket+0xe0>)
 80042ee:	701a      	strb	r2, [r3, #0]
 80042f0:	e004      	b.n	80042fc <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 80042f2:	4b05      	ldr	r3, [pc, #20]	@ (8004308 <_TrySendOverflowPacket+0xe0>)
 80042f4:	695b      	ldr	r3, [r3, #20]
 80042f6:	3301      	adds	r3, #1
 80042f8:	4a03      	ldr	r2, [pc, #12]	@ (8004308 <_TrySendOverflowPacket+0xe0>)
 80042fa:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 80042fc:	693b      	ldr	r3, [r7, #16]
}
 80042fe:	4618      	mov	r0, r3
 8004300:	3730      	adds	r7, #48	@ 0x30
 8004302:	46bd      	mov	sp, r7
 8004304:	bd80      	pop	{r7, pc}
 8004306:	bf00      	nop
 8004308:	20014364 	.word	0x20014364
 800430c:	e0001004 	.word	0xe0001004

08004310 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8004310:	b580      	push	{r7, lr}
 8004312:	b08a      	sub	sp, #40	@ 0x28
 8004314:	af00      	add	r7, sp, #0
 8004316:	60f8      	str	r0, [r7, #12]
 8004318:	60b9      	str	r1, [r7, #8]
 800431a:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 800431c:	4b6d      	ldr	r3, [pc, #436]	@ (80044d4 <_SendPacket+0x1c4>)
 800431e:	781b      	ldrb	r3, [r3, #0]
 8004320:	2b01      	cmp	r3, #1
 8004322:	d010      	beq.n	8004346 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8004324:	4b6b      	ldr	r3, [pc, #428]	@ (80044d4 <_SendPacket+0x1c4>)
 8004326:	781b      	ldrb	r3, [r3, #0]
 8004328:	2b00      	cmp	r3, #0
 800432a:	f000 80a5 	beq.w	8004478 <_SendPacket+0x168>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 800432e:	4b69      	ldr	r3, [pc, #420]	@ (80044d4 <_SendPacket+0x1c4>)
 8004330:	781b      	ldrb	r3, [r3, #0]
 8004332:	2b02      	cmp	r3, #2
 8004334:	d109      	bne.n	800434a <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8004336:	f7ff ff77 	bl	8004228 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 800433a:	4b66      	ldr	r3, [pc, #408]	@ (80044d4 <_SendPacket+0x1c4>)
 800433c:	781b      	ldrb	r3, [r3, #0]
 800433e:	2b01      	cmp	r3, #1
 8004340:	f040 809c 	bne.w	800447c <_SendPacket+0x16c>
      goto SendDone;
    }
  }
Send:
 8004344:	e001      	b.n	800434a <_SendPacket+0x3a>
    goto Send;
 8004346:	bf00      	nop
 8004348:	e000      	b.n	800434c <_SendPacket+0x3c>
Send:
 800434a:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2b1f      	cmp	r3, #31
 8004350:	d809      	bhi.n	8004366 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8004352:	4b60      	ldr	r3, [pc, #384]	@ (80044d4 <_SendPacket+0x1c4>)
 8004354:	69da      	ldr	r2, [r3, #28]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	fa22 f303 	lsr.w	r3, r2, r3
 800435c:	f003 0301 	and.w	r3, r3, #1
 8004360:	2b00      	cmp	r3, #0
 8004362:	f040 808d 	bne.w	8004480 <_SendPacket+0x170>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2b17      	cmp	r3, #23
 800436a:	d807      	bhi.n	800437c <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	3b01      	subs	r3, #1
 8004370:	60fb      	str	r3, [r7, #12]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	b2da      	uxtb	r2, r3
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	701a      	strb	r2, [r3, #0]
 800437a:	e03d      	b.n	80043f8 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 800437c:	68ba      	ldr	r2, [r7, #8]
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	1ad3      	subs	r3, r2, r3
 8004382:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8004384:	69fb      	ldr	r3, [r7, #28]
 8004386:	2b7f      	cmp	r3, #127	@ 0x7f
 8004388:	d912      	bls.n	80043b0 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 800438a:	69fb      	ldr	r3, [r7, #28]
 800438c:	09da      	lsrs	r2, r3, #7
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	3b01      	subs	r3, #1
 8004392:	60fb      	str	r3, [r7, #12]
 8004394:	b2d2      	uxtb	r2, r2
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 800439a:	69fb      	ldr	r3, [r7, #28]
 800439c:	b2db      	uxtb	r3, r3
 800439e:	68fa      	ldr	r2, [r7, #12]
 80043a0:	3a01      	subs	r2, #1
 80043a2:	60fa      	str	r2, [r7, #12]
 80043a4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80043a8:	b2da      	uxtb	r2, r3
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	701a      	strb	r2, [r3, #0]
 80043ae:	e006      	b.n	80043be <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	3b01      	subs	r3, #1
 80043b4:	60fb      	str	r3, [r7, #12]
 80043b6:	69fb      	ldr	r3, [r7, #28]
 80043b8:	b2da      	uxtb	r2, r3
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2b7f      	cmp	r3, #127	@ 0x7f
 80043c2:	d912      	bls.n	80043ea <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	09da      	lsrs	r2, r3, #7
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	3b01      	subs	r3, #1
 80043cc:	60fb      	str	r3, [r7, #12]
 80043ce:	b2d2      	uxtb	r2, r2
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	b2db      	uxtb	r3, r3
 80043d8:	68fa      	ldr	r2, [r7, #12]
 80043da:	3a01      	subs	r2, #1
 80043dc:	60fa      	str	r2, [r7, #12]
 80043de:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80043e2:	b2da      	uxtb	r2, r3
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	701a      	strb	r2, [r3, #0]
 80043e8:	e006      	b.n	80043f8 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	3b01      	subs	r3, #1
 80043ee:	60fb      	str	r3, [r7, #12]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	b2da      	uxtb	r2, r3
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80043f8:	4b37      	ldr	r3, [pc, #220]	@ (80044d8 <_SendPacket+0x1c8>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80043fe:	4b35      	ldr	r3, [pc, #212]	@ (80044d4 <_SendPacket+0x1c4>)
 8004400:	68db      	ldr	r3, [r3, #12]
 8004402:	69ba      	ldr	r2, [r7, #24]
 8004404:	1ad3      	subs	r3, r2, r3
 8004406:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	627b      	str	r3, [r7, #36]	@ 0x24
 800440c:	697b      	ldr	r3, [r7, #20]
 800440e:	623b      	str	r3, [r7, #32]
 8004410:	e00b      	b.n	800442a <_SendPacket+0x11a>
 8004412:	6a3b      	ldr	r3, [r7, #32]
 8004414:	b2da      	uxtb	r2, r3
 8004416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004418:	1c59      	adds	r1, r3, #1
 800441a:	6279      	str	r1, [r7, #36]	@ 0x24
 800441c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004420:	b2d2      	uxtb	r2, r2
 8004422:	701a      	strb	r2, [r3, #0]
 8004424:	6a3b      	ldr	r3, [r7, #32]
 8004426:	09db      	lsrs	r3, r3, #7
 8004428:	623b      	str	r3, [r7, #32]
 800442a:	6a3b      	ldr	r3, [r7, #32]
 800442c:	2b7f      	cmp	r3, #127	@ 0x7f
 800442e:	d8f0      	bhi.n	8004412 <_SendPacket+0x102>
 8004430:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004432:	1c5a      	adds	r2, r3, #1
 8004434:	627a      	str	r2, [r7, #36]	@ 0x24
 8004436:	6a3a      	ldr	r2, [r7, #32]
 8004438:	b2d2      	uxtb	r2, r2
 800443a:	701a      	strb	r2, [r3, #0]
 800443c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800443e:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8004440:	4b24      	ldr	r3, [pc, #144]	@ (80044d4 <_SendPacket+0x1c4>)
 8004442:	785b      	ldrb	r3, [r3, #1]
 8004444:	4618      	mov	r0, r3
 8004446:	68ba      	ldr	r2, [r7, #8]
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	1ad3      	subs	r3, r2, r3
 800444c:	461a      	mov	r2, r3
 800444e:	68f9      	ldr	r1, [r7, #12]
 8004450:	f7fb febe 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004454:	4603      	mov	r3, r0
 8004456:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 8004458:	f7ff f9fc 	bl	8003854 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 800445c:	693b      	ldr	r3, [r7, #16]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d003      	beq.n	800446a <_SendPacket+0x15a>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8004462:	4a1c      	ldr	r2, [pc, #112]	@ (80044d4 <_SendPacket+0x1c4>)
 8004464:	69bb      	ldr	r3, [r7, #24]
 8004466:	60d3      	str	r3, [r2, #12]
 8004468:	e00b      	b.n	8004482 <_SendPacket+0x172>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 800446a:	4b1a      	ldr	r3, [pc, #104]	@ (80044d4 <_SendPacket+0x1c4>)
 800446c:	781b      	ldrb	r3, [r3, #0]
 800446e:	3301      	adds	r3, #1
 8004470:	b2da      	uxtb	r2, r3
 8004472:	4b18      	ldr	r3, [pc, #96]	@ (80044d4 <_SendPacket+0x1c4>)
 8004474:	701a      	strb	r2, [r3, #0]
 8004476:	e004      	b.n	8004482 <_SendPacket+0x172>
    goto SendDone;
 8004478:	bf00      	nop
 800447a:	e002      	b.n	8004482 <_SendPacket+0x172>
      goto SendDone;
 800447c:	bf00      	nop
 800447e:	e000      	b.n	8004482 <_SendPacket+0x172>
      goto SendDone;
 8004480:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8004482:	4b14      	ldr	r3, [pc, #80]	@ (80044d4 <_SendPacket+0x1c4>)
 8004484:	7e1b      	ldrb	r3, [r3, #24]
 8004486:	4619      	mov	r1, r3
 8004488:	4a14      	ldr	r2, [pc, #80]	@ (80044dc <_SendPacket+0x1cc>)
 800448a:	460b      	mov	r3, r1
 800448c:	005b      	lsls	r3, r3, #1
 800448e:	440b      	add	r3, r1
 8004490:	00db      	lsls	r3, r3, #3
 8004492:	4413      	add	r3, r2
 8004494:	336c      	adds	r3, #108	@ 0x6c
 8004496:	681a      	ldr	r2, [r3, #0]
 8004498:	4b0e      	ldr	r3, [pc, #56]	@ (80044d4 <_SendPacket+0x1c4>)
 800449a:	7e1b      	ldrb	r3, [r3, #24]
 800449c:	4618      	mov	r0, r3
 800449e:	490f      	ldr	r1, [pc, #60]	@ (80044dc <_SendPacket+0x1cc>)
 80044a0:	4603      	mov	r3, r0
 80044a2:	005b      	lsls	r3, r3, #1
 80044a4:	4403      	add	r3, r0
 80044a6:	00db      	lsls	r3, r3, #3
 80044a8:	440b      	add	r3, r1
 80044aa:	3370      	adds	r3, #112	@ 0x70
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	429a      	cmp	r2, r3
 80044b0:	d00b      	beq.n	80044ca <_SendPacket+0x1ba>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80044b2:	4b08      	ldr	r3, [pc, #32]	@ (80044d4 <_SendPacket+0x1c4>)
 80044b4:	789b      	ldrb	r3, [r3, #2]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d107      	bne.n	80044ca <_SendPacket+0x1ba>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80044ba:	4b06      	ldr	r3, [pc, #24]	@ (80044d4 <_SendPacket+0x1c4>)
 80044bc:	2201      	movs	r2, #1
 80044be:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80044c0:	f7ff fe42 	bl	8004148 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80044c4:	4b03      	ldr	r3, [pc, #12]	@ (80044d4 <_SendPacket+0x1c4>)
 80044c6:	2200      	movs	r2, #0
 80044c8:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 80044ca:	bf00      	nop
 80044cc:	3728      	adds	r7, #40	@ 0x28
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}
 80044d2:	bf00      	nop
 80044d4:	20014364 	.word	0x20014364
 80044d8:	e0001004 	.word	0xe0001004
 80044dc:	20012ea4 	.word	0x20012ea4

080044e0 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b08a      	sub	sp, #40	@ 0x28
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
 80044e8:	460b      	mov	r3, r1
 80044ea:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	691b      	ldr	r3, [r3, #16]
 80044f0:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	3301      	adds	r3, #1
 80044f6:	2b80      	cmp	r3, #128	@ 0x80
 80044f8:	d80a      	bhi.n	8004510 <_StoreChar+0x30>
    *(p->pPayload++) = c;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	1c59      	adds	r1, r3, #1
 8004500:	687a      	ldr	r2, [r7, #4]
 8004502:	6051      	str	r1, [r2, #4]
 8004504:	78fa      	ldrb	r2, [r7, #3]
 8004506:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8004508:	697b      	ldr	r3, [r7, #20]
 800450a:	1c5a      	adds	r2, r3, #1
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	691b      	ldr	r3, [r3, #16]
 8004514:	2b80      	cmp	r3, #128	@ 0x80
 8004516:	d15a      	bne.n	80045ce <_StoreChar+0xee>
    *(p->pPayloadStart) = p->Cnt;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	691a      	ldr	r2, [r3, #16]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	689b      	ldr	r3, [r3, #8]
 8004520:	b2d2      	uxtb	r2, r2
 8004522:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	68db      	ldr	r3, [r3, #12]
 800452e:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 8004530:	693b      	ldr	r3, [r7, #16]
 8004532:	627b      	str	r3, [r7, #36]	@ 0x24
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	623b      	str	r3, [r7, #32]
 8004538:	e00b      	b.n	8004552 <_StoreChar+0x72>
 800453a:	6a3b      	ldr	r3, [r7, #32]
 800453c:	b2da      	uxtb	r2, r3
 800453e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004540:	1c59      	adds	r1, r3, #1
 8004542:	6279      	str	r1, [r7, #36]	@ 0x24
 8004544:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004548:	b2d2      	uxtb	r2, r2
 800454a:	701a      	strb	r2, [r3, #0]
 800454c:	6a3b      	ldr	r3, [r7, #32]
 800454e:	09db      	lsrs	r3, r3, #7
 8004550:	623b      	str	r3, [r7, #32]
 8004552:	6a3b      	ldr	r3, [r7, #32]
 8004554:	2b7f      	cmp	r3, #127	@ 0x7f
 8004556:	d8f0      	bhi.n	800453a <_StoreChar+0x5a>
 8004558:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800455a:	1c5a      	adds	r2, r3, #1
 800455c:	627a      	str	r2, [r7, #36]	@ 0x24
 800455e:	6a3a      	ldr	r2, [r7, #32]
 8004560:	b2d2      	uxtb	r2, r2
 8004562:	701a      	strb	r2, [r3, #0]
 8004564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004566:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	61fb      	str	r3, [r7, #28]
 800456c:	2300      	movs	r3, #0
 800456e:	61bb      	str	r3, [r7, #24]
 8004570:	e00b      	b.n	800458a <_StoreChar+0xaa>
 8004572:	69bb      	ldr	r3, [r7, #24]
 8004574:	b2da      	uxtb	r2, r3
 8004576:	69fb      	ldr	r3, [r7, #28]
 8004578:	1c59      	adds	r1, r3, #1
 800457a:	61f9      	str	r1, [r7, #28]
 800457c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004580:	b2d2      	uxtb	r2, r2
 8004582:	701a      	strb	r2, [r3, #0]
 8004584:	69bb      	ldr	r3, [r7, #24]
 8004586:	09db      	lsrs	r3, r3, #7
 8004588:	61bb      	str	r3, [r7, #24]
 800458a:	69bb      	ldr	r3, [r7, #24]
 800458c:	2b7f      	cmp	r3, #127	@ 0x7f
 800458e:	d8f0      	bhi.n	8004572 <_StoreChar+0x92>
 8004590:	69fb      	ldr	r3, [r7, #28]
 8004592:	1c5a      	adds	r2, r3, #1
 8004594:	61fa      	str	r2, [r7, #28]
 8004596:	69ba      	ldr	r2, [r7, #24]
 8004598:	b2d2      	uxtb	r2, r2
 800459a:	701a      	strb	r2, [r3, #0]
 800459c:	69fb      	ldr	r3, [r7, #28]
 800459e:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	689b      	ldr	r3, [r3, #8]
 80045a4:	221a      	movs	r2, #26
 80045a6:	6939      	ldr	r1, [r7, #16]
 80045a8:	4618      	mov	r0, r3
 80045aa:	f7ff feb1 	bl	8004310 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4618      	mov	r0, r3
 80045b4:	f7ff fdbb 	bl	800412e <_PreparePacket>
 80045b8:	4602      	mov	r2, r0
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	689b      	ldr	r3, [r3, #8]
 80045c2:	1c5a      	adds	r2, r3, #1
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2200      	movs	r2, #0
 80045cc:	611a      	str	r2, [r3, #16]
  }
}
 80045ce:	bf00      	nop
 80045d0:	3728      	adds	r7, #40	@ 0x28
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bd80      	pop	{r7, pc}
	...

080045d8 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 80045d8:	b580      	push	{r7, lr}
 80045da:	b08a      	sub	sp, #40	@ 0x28
 80045dc:	af00      	add	r7, sp, #0
 80045de:	60f8      	str	r0, [r7, #12]
 80045e0:	60b9      	str	r1, [r7, #8]
 80045e2:	607a      	str	r2, [r7, #4]
 80045e4:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 80045e6:	68bb      	ldr	r3, [r7, #8]
 80045e8:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 80045ea:	2301      	movs	r3, #1
 80045ec:	627b      	str	r3, [r7, #36]	@ 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 80045ee:	2301      	movs	r3, #1
 80045f0:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 80045f2:	e007      	b.n	8004604 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 80045f4:	6a3a      	ldr	r2, [r7, #32]
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80045fc:	623b      	str	r3, [r7, #32]
    Width++;
 80045fe:	69fb      	ldr	r3, [r7, #28]
 8004600:	3301      	adds	r3, #1
 8004602:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8004604:	6a3a      	ldr	r2, [r7, #32]
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	429a      	cmp	r2, r3
 800460a:	d2f3      	bcs.n	80045f4 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 800460c:	683a      	ldr	r2, [r7, #0]
 800460e:	69fb      	ldr	r3, [r7, #28]
 8004610:	429a      	cmp	r2, r3
 8004612:	d901      	bls.n	8004618 <_PrintUnsigned+0x40>
    Width = NumDigits;
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8004618:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800461a:	f003 0301 	and.w	r3, r3, #1
 800461e:	2b00      	cmp	r3, #0
 8004620:	d000      	beq.n	8004624 <_PrintUnsigned+0x4c>
 8004622:	e01f      	b.n	8004664 <_PrintUnsigned+0x8c>
    if (FieldWidth != 0u) {
 8004624:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004626:	2b00      	cmp	r3, #0
 8004628:	d01c      	beq.n	8004664 <_PrintUnsigned+0x8c>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 800462a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800462c:	f003 0302 	and.w	r3, r3, #2
 8004630:	2b00      	cmp	r3, #0
 8004632:	d005      	beq.n	8004640 <_PrintUnsigned+0x68>
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d102      	bne.n	8004640 <_PrintUnsigned+0x68>
        c = '0';
 800463a:	2330      	movs	r3, #48	@ 0x30
 800463c:	76fb      	strb	r3, [r7, #27]
 800463e:	e001      	b.n	8004644 <_PrintUnsigned+0x6c>
      } else {
        c = ' ';
 8004640:	2320      	movs	r3, #32
 8004642:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004644:	e007      	b.n	8004656 <_PrintUnsigned+0x7e>
        FieldWidth--;
 8004646:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004648:	3b01      	subs	r3, #1
 800464a:	633b      	str	r3, [r7, #48]	@ 0x30
        _StoreChar(pBufferDesc, c);
 800464c:	7efb      	ldrb	r3, [r7, #27]
 800464e:	4619      	mov	r1, r3
 8004650:	68f8      	ldr	r0, [r7, #12]
 8004652:	f7ff ff45 	bl	80044e0 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004656:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004658:	2b00      	cmp	r3, #0
 800465a:	d003      	beq.n	8004664 <_PrintUnsigned+0x8c>
 800465c:	69fa      	ldr	r2, [r7, #28]
 800465e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004660:	429a      	cmp	r2, r3
 8004662:	d3f0      	bcc.n	8004646 <_PrintUnsigned+0x6e>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	2b01      	cmp	r3, #1
 8004668:	d903      	bls.n	8004672 <_PrintUnsigned+0x9a>
      NumDigits--;
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	3b01      	subs	r3, #1
 800466e:	603b      	str	r3, [r7, #0]
 8004670:	e009      	b.n	8004686 <_PrintUnsigned+0xae>
    } else {
      Div = v / Digit;
 8004672:	68ba      	ldr	r2, [r7, #8]
 8004674:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004676:	fbb2 f3f3 	udiv	r3, r2, r3
 800467a:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 800467c:	697a      	ldr	r2, [r7, #20]
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	429a      	cmp	r2, r3
 8004682:	d200      	bcs.n	8004686 <_PrintUnsigned+0xae>
        break;
 8004684:	e005      	b.n	8004692 <_PrintUnsigned+0xba>
      }
    }
    Digit *= Base;
 8004686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004688:	687a      	ldr	r2, [r7, #4]
 800468a:	fb02 f303 	mul.w	r3, r2, r3
 800468e:	627b      	str	r3, [r7, #36]	@ 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8004690:	e7e8      	b.n	8004664 <_PrintUnsigned+0x8c>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 8004692:	68ba      	ldr	r2, [r7, #8]
 8004694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004696:	fbb2 f3f3 	udiv	r3, r2, r3
 800469a:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 800469c:	697b      	ldr	r3, [r7, #20]
 800469e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80046a0:	fb02 f303 	mul.w	r3, r2, r3
 80046a4:	68ba      	ldr	r2, [r7, #8]
 80046a6:	1ad3      	subs	r3, r2, r3
 80046a8:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 80046aa:	4a15      	ldr	r2, [pc, #84]	@ (8004700 <_PrintUnsigned+0x128>)
 80046ac:	697b      	ldr	r3, [r7, #20]
 80046ae:	4413      	add	r3, r2
 80046b0:	781b      	ldrb	r3, [r3, #0]
 80046b2:	4619      	mov	r1, r3
 80046b4:	68f8      	ldr	r0, [r7, #12]
 80046b6:	f7ff ff13 	bl	80044e0 <_StoreChar>
    Digit /= Base;
 80046ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	fbb2 f3f3 	udiv	r3, r2, r3
 80046c2:	627b      	str	r3, [r7, #36]	@ 0x24
  } while (Digit);
 80046c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d1e3      	bne.n	8004692 <_PrintUnsigned+0xba>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 80046ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046cc:	f003 0301 	and.w	r3, r3, #1
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d011      	beq.n	80046f8 <_PrintUnsigned+0x120>
    if (FieldWidth != 0u) {
 80046d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d00e      	beq.n	80046f8 <_PrintUnsigned+0x120>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80046da:	e006      	b.n	80046ea <_PrintUnsigned+0x112>
        FieldWidth--;
 80046dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046de:	3b01      	subs	r3, #1
 80046e0:	633b      	str	r3, [r7, #48]	@ 0x30
        _StoreChar(pBufferDesc, ' ');
 80046e2:	2120      	movs	r1, #32
 80046e4:	68f8      	ldr	r0, [r7, #12]
 80046e6:	f7ff fefb 	bl	80044e0 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80046ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d003      	beq.n	80046f8 <_PrintUnsigned+0x120>
 80046f0:	69fa      	ldr	r2, [r7, #28]
 80046f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046f4:	429a      	cmp	r2, r3
 80046f6:	d3f1      	bcc.n	80046dc <_PrintUnsigned+0x104>
      }
    }
  }
}
 80046f8:	bf00      	nop
 80046fa:	3728      	adds	r7, #40	@ 0x28
 80046fc:	46bd      	mov	sp, r7
 80046fe:	bd80      	pop	{r7, pc}
 8004700:	0800645c 	.word	0x0800645c

08004704 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8004704:	b580      	push	{r7, lr}
 8004706:	b088      	sub	sp, #32
 8004708:	af02      	add	r7, sp, #8
 800470a:	60f8      	str	r0, [r7, #12]
 800470c:	60b9      	str	r1, [r7, #8]
 800470e:	607a      	str	r2, [r7, #4]
 8004710:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	2b00      	cmp	r3, #0
 8004716:	bfb8      	it	lt
 8004718:	425b      	neglt	r3, r3
 800471a:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 800471c:	2301      	movs	r3, #1
 800471e:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8004720:	e007      	b.n	8004732 <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	693a      	ldr	r2, [r7, #16]
 8004726:	fb92 f3f3 	sdiv	r3, r2, r3
 800472a:	613b      	str	r3, [r7, #16]
    Width++;
 800472c:	697b      	ldr	r3, [r7, #20]
 800472e:	3301      	adds	r3, #1
 8004730:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	693a      	ldr	r2, [r7, #16]
 8004736:	429a      	cmp	r2, r3
 8004738:	daf3      	bge.n	8004722 <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 800473a:	683a      	ldr	r2, [r7, #0]
 800473c:	697b      	ldr	r3, [r7, #20]
 800473e:	429a      	cmp	r2, r3
 8004740:	d901      	bls.n	8004746 <_PrintInt+0x42>
    Width = NumDigits;
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 8004746:	6a3b      	ldr	r3, [r7, #32]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d00a      	beq.n	8004762 <_PrintInt+0x5e>
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	2b00      	cmp	r3, #0
 8004750:	db04      	blt.n	800475c <_PrintInt+0x58>
 8004752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004754:	f003 0304 	and.w	r3, r3, #4
 8004758:	2b00      	cmp	r3, #0
 800475a:	d002      	beq.n	8004762 <_PrintInt+0x5e>
    FieldWidth--;
 800475c:	6a3b      	ldr	r3, [r7, #32]
 800475e:	3b01      	subs	r3, #1
 8004760:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8004762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004764:	f003 0302 	and.w	r3, r3, #2
 8004768:	2b00      	cmp	r3, #0
 800476a:	d002      	beq.n	8004772 <_PrintInt+0x6e>
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d016      	beq.n	80047a0 <_PrintInt+0x9c>
 8004772:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004774:	f003 0301 	and.w	r3, r3, #1
 8004778:	2b00      	cmp	r3, #0
 800477a:	d111      	bne.n	80047a0 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 800477c:	6a3b      	ldr	r3, [r7, #32]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d00e      	beq.n	80047a0 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004782:	e006      	b.n	8004792 <_PrintInt+0x8e>
        FieldWidth--;
 8004784:	6a3b      	ldr	r3, [r7, #32]
 8004786:	3b01      	subs	r3, #1
 8004788:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 800478a:	2120      	movs	r1, #32
 800478c:	68f8      	ldr	r0, [r7, #12]
 800478e:	f7ff fea7 	bl	80044e0 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004792:	6a3b      	ldr	r3, [r7, #32]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d003      	beq.n	80047a0 <_PrintInt+0x9c>
 8004798:	697a      	ldr	r2, [r7, #20]
 800479a:	6a3b      	ldr	r3, [r7, #32]
 800479c:	429a      	cmp	r2, r3
 800479e:	d3f1      	bcc.n	8004784 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	da07      	bge.n	80047b6 <_PrintInt+0xb2>
    v = -v;
 80047a6:	68bb      	ldr	r3, [r7, #8]
 80047a8:	425b      	negs	r3, r3
 80047aa:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 80047ac:	212d      	movs	r1, #45	@ 0x2d
 80047ae:	68f8      	ldr	r0, [r7, #12]
 80047b0:	f7ff fe96 	bl	80044e0 <_StoreChar>
 80047b4:	e008      	b.n	80047c8 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 80047b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047b8:	f003 0304 	and.w	r3, r3, #4
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d003      	beq.n	80047c8 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 80047c0:	212b      	movs	r1, #43	@ 0x2b
 80047c2:	68f8      	ldr	r0, [r7, #12]
 80047c4:	f7ff fe8c 	bl	80044e0 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 80047c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047ca:	f003 0302 	and.w	r3, r3, #2
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d019      	beq.n	8004806 <_PrintInt+0x102>
 80047d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047d4:	f003 0301 	and.w	r3, r3, #1
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d114      	bne.n	8004806 <_PrintInt+0x102>
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d111      	bne.n	8004806 <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 80047e2:	6a3b      	ldr	r3, [r7, #32]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d00e      	beq.n	8004806 <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80047e8:	e006      	b.n	80047f8 <_PrintInt+0xf4>
        FieldWidth--;
 80047ea:	6a3b      	ldr	r3, [r7, #32]
 80047ec:	3b01      	subs	r3, #1
 80047ee:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 80047f0:	2130      	movs	r1, #48	@ 0x30
 80047f2:	68f8      	ldr	r0, [r7, #12]
 80047f4:	f7ff fe74 	bl	80044e0 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80047f8:	6a3b      	ldr	r3, [r7, #32]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d003      	beq.n	8004806 <_PrintInt+0x102>
 80047fe:	697a      	ldr	r2, [r7, #20]
 8004800:	6a3b      	ldr	r3, [r7, #32]
 8004802:	429a      	cmp	r2, r3
 8004804:	d3f1      	bcc.n	80047ea <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 8004806:	68b9      	ldr	r1, [r7, #8]
 8004808:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800480a:	9301      	str	r3, [sp, #4]
 800480c:	6a3b      	ldr	r3, [r7, #32]
 800480e:	9300      	str	r3, [sp, #0]
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	687a      	ldr	r2, [r7, #4]
 8004814:	68f8      	ldr	r0, [r7, #12]
 8004816:	f7ff fedf 	bl	80045d8 <_PrintUnsigned>
}
 800481a:	bf00      	nop
 800481c:	3718      	adds	r7, #24
 800481e:	46bd      	mov	sp, r7
 8004820:	bd80      	pop	{r7, pc}
	...

08004824 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 8004824:	b580      	push	{r7, lr}
 8004826:	b098      	sub	sp, #96	@ 0x60
 8004828:	af02      	add	r7, sp, #8
 800482a:	60f8      	str	r0, [r7, #12]
 800482c:	60b9      	str	r1, [r7, #8]
 800482e:	607a      	str	r2, [r7, #4]
  U8*           pPayloadStart;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004830:	f3ef 8311 	mrs	r3, BASEPRI
 8004834:	f04f 0120 	mov.w	r1, #32
 8004838:	f381 8811 	msr	BASEPRI, r1
 800483c:	633b      	str	r3, [r7, #48]	@ 0x30
 800483e:	48b7      	ldr	r0, [pc, #732]	@ (8004b1c <_VPrintTarget+0x2f8>)
 8004840:	f7ff fc75 	bl	800412e <_PreparePacket>
 8004844:	62f8      	str	r0, [r7, #44]	@ 0x2c
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 8004846:	4bb5      	ldr	r3, [pc, #724]	@ (8004b1c <_VPrintTarget+0x2f8>)
 8004848:	617b      	str	r3, [r7, #20]
#endif
  BufferDesc.Cnt            = 0u;
 800484a:	2300      	movs	r3, #0
 800484c:	627b      	str	r3, [r7, #36]	@ 0x24
  BufferDesc.pPayloadStart  = pPayloadStart;
 800484e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004850:	61fb      	str	r3, [r7, #28]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 8004852:	69fb      	ldr	r3, [r7, #28]
 8004854:	3301      	adds	r3, #1
 8004856:	61bb      	str	r3, [r7, #24]
  BufferDesc.Options        =  Options;
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	623b      	str	r3, [r7, #32]

  do {
    c = *sFormat;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	781b      	ldrb	r3, [r3, #0]
 8004860:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    sFormat++;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	3301      	adds	r3, #1
 8004868:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 800486a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800486e:	2b00      	cmp	r3, #0
 8004870:	f000 8183 	beq.w	8004b7a <_VPrintTarget+0x356>
      break;
    }
    if (c == '%') {
 8004874:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004878:	2b25      	cmp	r3, #37	@ 0x25
 800487a:	f040 8170 	bne.w	8004b5e <_VPrintTarget+0x33a>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 800487e:	2300      	movs	r3, #0
 8004880:	64bb      	str	r3, [r7, #72]	@ 0x48
      v = 1;
 8004882:	2301      	movs	r3, #1
 8004884:	653b      	str	r3, [r7, #80]	@ 0x50
      do {
        c = *sFormat;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	781b      	ldrb	r3, [r3, #0]
 800488a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        switch (c) {
 800488e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004892:	3b23      	subs	r3, #35	@ 0x23
 8004894:	2b0d      	cmp	r3, #13
 8004896:	d83f      	bhi.n	8004918 <_VPrintTarget+0xf4>
 8004898:	a201      	add	r2, pc, #4	@ (adr r2, 80048a0 <_VPrintTarget+0x7c>)
 800489a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800489e:	bf00      	nop
 80048a0:	08004909 	.word	0x08004909
 80048a4:	08004919 	.word	0x08004919
 80048a8:	08004919 	.word	0x08004919
 80048ac:	08004919 	.word	0x08004919
 80048b0:	08004919 	.word	0x08004919
 80048b4:	08004919 	.word	0x08004919
 80048b8:	08004919 	.word	0x08004919
 80048bc:	08004919 	.word	0x08004919
 80048c0:	080048f9 	.word	0x080048f9
 80048c4:	08004919 	.word	0x08004919
 80048c8:	080048d9 	.word	0x080048d9
 80048cc:	08004919 	.word	0x08004919
 80048d0:	08004919 	.word	0x08004919
 80048d4:	080048e9 	.word	0x080048e9
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 80048d8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80048da:	f043 0301 	orr.w	r3, r3, #1
 80048de:	64bb      	str	r3, [r7, #72]	@ 0x48
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	3301      	adds	r3, #1
 80048e4:	60fb      	str	r3, [r7, #12]
 80048e6:	e01a      	b.n	800491e <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 80048e8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80048ea:	f043 0302 	orr.w	r3, r3, #2
 80048ee:	64bb      	str	r3, [r7, #72]	@ 0x48
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	3301      	adds	r3, #1
 80048f4:	60fb      	str	r3, [r7, #12]
 80048f6:	e012      	b.n	800491e <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 80048f8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80048fa:	f043 0304 	orr.w	r3, r3, #4
 80048fe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	3301      	adds	r3, #1
 8004904:	60fb      	str	r3, [r7, #12]
 8004906:	e00a      	b.n	800491e <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8004908:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800490a:	f043 0308 	orr.w	r3, r3, #8
 800490e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	3301      	adds	r3, #1
 8004914:	60fb      	str	r3, [r7, #12]
 8004916:	e002      	b.n	800491e <_VPrintTarget+0xfa>
        default:  v = 0; break;
 8004918:	2300      	movs	r3, #0
 800491a:	653b      	str	r3, [r7, #80]	@ 0x50
 800491c:	bf00      	nop
        }
      } while (v);
 800491e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004920:	2b00      	cmp	r3, #0
 8004922:	d1b0      	bne.n	8004886 <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8004924:	2300      	movs	r3, #0
 8004926:	647b      	str	r3, [r7, #68]	@ 0x44
      do {
        c = *sFormat;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	781b      	ldrb	r3, [r3, #0]
 800492c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        if ((c < '0') || (c > '9')) {
 8004930:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004934:	2b2f      	cmp	r3, #47	@ 0x2f
 8004936:	d912      	bls.n	800495e <_VPrintTarget+0x13a>
 8004938:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800493c:	2b39      	cmp	r3, #57	@ 0x39
 800493e:	d80e      	bhi.n	800495e <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	3301      	adds	r3, #1
 8004944:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 8004946:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004948:	4613      	mov	r3, r2
 800494a:	009b      	lsls	r3, r3, #2
 800494c:	4413      	add	r3, r2
 800494e:	005b      	lsls	r3, r3, #1
 8004950:	461a      	mov	r2, r3
 8004952:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004956:	4413      	add	r3, r2
 8004958:	3b30      	subs	r3, #48	@ 0x30
 800495a:	647b      	str	r3, [r7, #68]	@ 0x44
        c = *sFormat;
 800495c:	e7e4      	b.n	8004928 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 800495e:	2300      	movs	r3, #0
 8004960:	64fb      	str	r3, [r7, #76]	@ 0x4c
      c = *sFormat;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	781b      	ldrb	r3, [r3, #0]
 8004966:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
      if (c == '.') {
 800496a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800496e:	2b2e      	cmp	r3, #46	@ 0x2e
 8004970:	d11d      	bne.n	80049ae <_VPrintTarget+0x18a>
        sFormat++;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	3301      	adds	r3, #1
 8004976:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	781b      	ldrb	r3, [r3, #0]
 800497c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          if ((c < '0') || (c > '9')) {
 8004980:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004984:	2b2f      	cmp	r3, #47	@ 0x2f
 8004986:	d912      	bls.n	80049ae <_VPrintTarget+0x18a>
 8004988:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800498c:	2b39      	cmp	r3, #57	@ 0x39
 800498e:	d80e      	bhi.n	80049ae <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	3301      	adds	r3, #1
 8004994:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 8004996:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004998:	4613      	mov	r3, r2
 800499a:	009b      	lsls	r3, r3, #2
 800499c:	4413      	add	r3, r2
 800499e:	005b      	lsls	r3, r3, #1
 80049a0:	461a      	mov	r2, r3
 80049a2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80049a6:	4413      	add	r3, r2
 80049a8:	3b30      	subs	r3, #48	@ 0x30
 80049aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
          c = *sFormat;
 80049ac:	e7e4      	b.n	8004978 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	781b      	ldrb	r3, [r3, #0]
 80049b2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 80049b6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80049ba:	2b6c      	cmp	r3, #108	@ 0x6c
 80049bc:	d003      	beq.n	80049c6 <_VPrintTarget+0x1a2>
 80049be:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80049c2:	2b68      	cmp	r3, #104	@ 0x68
 80049c4:	d107      	bne.n	80049d6 <_VPrintTarget+0x1b2>
          c = *sFormat;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	781b      	ldrb	r3, [r3, #0]
 80049ca:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          sFormat++;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	3301      	adds	r3, #1
 80049d2:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 80049d4:	e7ef      	b.n	80049b6 <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 80049d6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80049da:	2b25      	cmp	r3, #37	@ 0x25
 80049dc:	f000 80b3 	beq.w	8004b46 <_VPrintTarget+0x322>
 80049e0:	2b25      	cmp	r3, #37	@ 0x25
 80049e2:	f2c0 80b7 	blt.w	8004b54 <_VPrintTarget+0x330>
 80049e6:	2b78      	cmp	r3, #120	@ 0x78
 80049e8:	f300 80b4 	bgt.w	8004b54 <_VPrintTarget+0x330>
 80049ec:	2b58      	cmp	r3, #88	@ 0x58
 80049ee:	f2c0 80b1 	blt.w	8004b54 <_VPrintTarget+0x330>
 80049f2:	3b58      	subs	r3, #88	@ 0x58
 80049f4:	2b20      	cmp	r3, #32
 80049f6:	f200 80ad 	bhi.w	8004b54 <_VPrintTarget+0x330>
 80049fa:	a201      	add	r2, pc, #4	@ (adr r2, 8004a00 <_VPrintTarget+0x1dc>)
 80049fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a00:	08004af7 	.word	0x08004af7
 8004a04:	08004b55 	.word	0x08004b55
 8004a08:	08004b55 	.word	0x08004b55
 8004a0c:	08004b55 	.word	0x08004b55
 8004a10:	08004b55 	.word	0x08004b55
 8004a14:	08004b55 	.word	0x08004b55
 8004a18:	08004b55 	.word	0x08004b55
 8004a1c:	08004b55 	.word	0x08004b55
 8004a20:	08004b55 	.word	0x08004b55
 8004a24:	08004b55 	.word	0x08004b55
 8004a28:	08004b55 	.word	0x08004b55
 8004a2c:	08004a85 	.word	0x08004a85
 8004a30:	08004aab 	.word	0x08004aab
 8004a34:	08004b55 	.word	0x08004b55
 8004a38:	08004b55 	.word	0x08004b55
 8004a3c:	08004b55 	.word	0x08004b55
 8004a40:	08004b55 	.word	0x08004b55
 8004a44:	08004b55 	.word	0x08004b55
 8004a48:	08004b55 	.word	0x08004b55
 8004a4c:	08004b55 	.word	0x08004b55
 8004a50:	08004b55 	.word	0x08004b55
 8004a54:	08004b55 	.word	0x08004b55
 8004a58:	08004b55 	.word	0x08004b55
 8004a5c:	08004b55 	.word	0x08004b55
 8004a60:	08004b21 	.word	0x08004b21
 8004a64:	08004b55 	.word	0x08004b55
 8004a68:	08004b55 	.word	0x08004b55
 8004a6c:	08004b55 	.word	0x08004b55
 8004a70:	08004b55 	.word	0x08004b55
 8004a74:	08004ad1 	.word	0x08004ad1
 8004a78:	08004b55 	.word	0x08004b55
 8004a7c:	08004b55 	.word	0x08004b55
 8004a80:	08004af7 	.word	0x08004af7
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	1d19      	adds	r1, r3, #4
 8004a8a:	687a      	ldr	r2, [r7, #4]
 8004a8c:	6011      	str	r1, [r2, #0]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	653b      	str	r3, [r7, #80]	@ 0x50
        c0 = (char)v;
 8004a92:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004a94:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        _StoreChar(&BufferDesc, c0);
 8004a98:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8004a9c:	f107 0314 	add.w	r3, r7, #20
 8004aa0:	4611      	mov	r1, r2
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	f7ff fd1c 	bl	80044e0 <_StoreChar>
        break;
 8004aa8:	e055      	b.n	8004b56 <_VPrintTarget+0x332>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	1d19      	adds	r1, r3, #4
 8004ab0:	687a      	ldr	r2, [r7, #4]
 8004ab2:	6011      	str	r1, [r2, #0]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8004ab8:	f107 0014 	add.w	r0, r7, #20
 8004abc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004abe:	9301      	str	r3, [sp, #4]
 8004ac0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004ac2:	9300      	str	r3, [sp, #0]
 8004ac4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004ac6:	220a      	movs	r2, #10
 8004ac8:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004aca:	f7ff fe1b 	bl	8004704 <_PrintInt>
        break;
 8004ace:	e042      	b.n	8004b56 <_VPrintTarget+0x332>
      case 'u':
        v = va_arg(*pParamList, int);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	1d19      	adds	r1, r3, #4
 8004ad6:	687a      	ldr	r2, [r7, #4]
 8004ad8:	6011      	str	r1, [r2, #0]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 8004ade:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004ae0:	f107 0014 	add.w	r0, r7, #20
 8004ae4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004ae6:	9301      	str	r3, [sp, #4]
 8004ae8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004aea:	9300      	str	r3, [sp, #0]
 8004aec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004aee:	220a      	movs	r2, #10
 8004af0:	f7ff fd72 	bl	80045d8 <_PrintUnsigned>
        break;
 8004af4:	e02f      	b.n	8004b56 <_VPrintTarget+0x332>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	1d19      	adds	r1, r3, #4
 8004afc:	687a      	ldr	r2, [r7, #4]
 8004afe:	6011      	str	r1, [r2, #0]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8004b04:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004b06:	f107 0014 	add.w	r0, r7, #20
 8004b0a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004b0c:	9301      	str	r3, [sp, #4]
 8004b0e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004b10:	9300      	str	r3, [sp, #0]
 8004b12:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004b14:	2210      	movs	r2, #16
 8004b16:	f7ff fd5f 	bl	80045d8 <_PrintUnsigned>
        break;
 8004b1a:	e01c      	b.n	8004b56 <_VPrintTarget+0x332>
 8004b1c:	20014394 	.word	0x20014394
      case 'p':
        v = va_arg(*pParamList, int);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	1d19      	adds	r1, r3, #4
 8004b26:	687a      	ldr	r2, [r7, #4]
 8004b28:	6011      	str	r1, [r2, #0]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 8004b2e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004b30:	f107 0014 	add.w	r0, r7, #20
 8004b34:	2300      	movs	r3, #0
 8004b36:	9301      	str	r3, [sp, #4]
 8004b38:	2308      	movs	r3, #8
 8004b3a:	9300      	str	r3, [sp, #0]
 8004b3c:	2308      	movs	r3, #8
 8004b3e:	2210      	movs	r2, #16
 8004b40:	f7ff fd4a 	bl	80045d8 <_PrintUnsigned>
        break;
 8004b44:	e007      	b.n	8004b56 <_VPrintTarget+0x332>
      case '%':
        _StoreChar(&BufferDesc, '%');
 8004b46:	f107 0314 	add.w	r3, r7, #20
 8004b4a:	2125      	movs	r1, #37	@ 0x25
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	f7ff fcc7 	bl	80044e0 <_StoreChar>
        break;
 8004b52:	e000      	b.n	8004b56 <_VPrintTarget+0x332>
      default:
        break;
 8004b54:	bf00      	nop
      }
      sFormat++;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	3301      	adds	r3, #1
 8004b5a:	60fb      	str	r3, [r7, #12]
 8004b5c:	e007      	b.n	8004b6e <_VPrintTarget+0x34a>
    } else {
      _StoreChar(&BufferDesc, c);
 8004b5e:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8004b62:	f107 0314 	add.w	r3, r7, #20
 8004b66:	4611      	mov	r1, r2
 8004b68:	4618      	mov	r0, r3
 8004b6a:	f7ff fcb9 	bl	80044e0 <_StoreChar>
    }
  } while (*sFormat);
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	781b      	ldrb	r3, [r3, #0]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	f47f ae72 	bne.w	800485c <_VPrintTarget+0x38>
 8004b78:	e000      	b.n	8004b7c <_VPrintTarget+0x358>
      break;
 8004b7a:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 8004b7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d041      	beq.n	8004c06 <_VPrintTarget+0x3e2>
    *(BufferDesc.pPayloadStart) = BufferDesc.Cnt;
 8004b82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b84:	69fb      	ldr	r3, [r7, #28]
 8004b86:	b2d2      	uxtb	r2, r2
 8004b88:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 8004b8a:	69bb      	ldr	r3, [r7, #24]
 8004b8c:	643b      	str	r3, [r7, #64]	@ 0x40
 8004b8e:	6a3b      	ldr	r3, [r7, #32]
 8004b90:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004b92:	e00b      	b.n	8004bac <_VPrintTarget+0x388>
 8004b94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b96:	b2da      	uxtb	r2, r3
 8004b98:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004b9a:	1c59      	adds	r1, r3, #1
 8004b9c:	6439      	str	r1, [r7, #64]	@ 0x40
 8004b9e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004ba2:	b2d2      	uxtb	r2, r2
 8004ba4:	701a      	strb	r2, [r3, #0]
 8004ba6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ba8:	09db      	lsrs	r3, r3, #7
 8004baa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004bac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004bae:	2b7f      	cmp	r3, #127	@ 0x7f
 8004bb0:	d8f0      	bhi.n	8004b94 <_VPrintTarget+0x370>
 8004bb2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004bb4:	1c5a      	adds	r2, r3, #1
 8004bb6:	643a      	str	r2, [r7, #64]	@ 0x40
 8004bb8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004bba:	b2d2      	uxtb	r2, r2
 8004bbc:	701a      	strb	r2, [r3, #0]
 8004bbe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004bc0:	61bb      	str	r3, [r7, #24]
    ENCODE_U32(BufferDesc.pPayload, 0);
 8004bc2:	69bb      	ldr	r3, [r7, #24]
 8004bc4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	637b      	str	r3, [r7, #52]	@ 0x34
 8004bca:	e00b      	b.n	8004be4 <_VPrintTarget+0x3c0>
 8004bcc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004bce:	b2da      	uxtb	r2, r3
 8004bd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bd2:	1c59      	adds	r1, r3, #1
 8004bd4:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004bd6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004bda:	b2d2      	uxtb	r2, r2
 8004bdc:	701a      	strb	r2, [r3, #0]
 8004bde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004be0:	09db      	lsrs	r3, r3, #7
 8004be2:	637b      	str	r3, [r7, #52]	@ 0x34
 8004be4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004be6:	2b7f      	cmp	r3, #127	@ 0x7f
 8004be8:	d8f0      	bhi.n	8004bcc <_VPrintTarget+0x3a8>
 8004bea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bec:	1c5a      	adds	r2, r3, #1
 8004bee:	63ba      	str	r2, [r7, #56]	@ 0x38
 8004bf0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004bf2:	b2d2      	uxtb	r2, r2
 8004bf4:	701a      	strb	r2, [r3, #0]
 8004bf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bf8:	61bb      	str	r3, [r7, #24]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8004bfa:	69fb      	ldr	r3, [r7, #28]
 8004bfc:	69b9      	ldr	r1, [r7, #24]
 8004bfe:	221a      	movs	r2, #26
 8004c00:	4618      	mov	r0, r3
 8004c02:	f7ff fb85 	bl	8004310 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 8004c06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c08:	f383 8811 	msr	BASEPRI, r3
#endif
}
 8004c0c:	bf00      	nop
 8004c0e:	3758      	adds	r7, #88	@ 0x58
 8004c10:	46bd      	mov	sp, r7
 8004c12:	bd80      	pop	{r7, pc}

08004c14 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b086      	sub	sp, #24
 8004c18:	af02      	add	r7, sp, #8
 8004c1a:	60f8      	str	r0, [r7, #12]
 8004c1c:	60b9      	str	r1, [r7, #8]
 8004c1e:	607a      	str	r2, [r7, #4]
 8004c20:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8004c22:	2300      	movs	r3, #0
 8004c24:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8004c28:	4917      	ldr	r1, [pc, #92]	@ (8004c88 <SEGGER_SYSVIEW_Init+0x74>)
 8004c2a:	4818      	ldr	r0, [pc, #96]	@ (8004c8c <SEGGER_SYSVIEW_Init+0x78>)
 8004c2c:	f7ff f93e 	bl	8003eac <SEGGER_RTT_AllocUpBuffer>
 8004c30:	4603      	mov	r3, r0
 8004c32:	b2da      	uxtb	r2, r3
 8004c34:	4b16      	ldr	r3, [pc, #88]	@ (8004c90 <SEGGER_SYSVIEW_Init+0x7c>)
 8004c36:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8004c38:	4b15      	ldr	r3, [pc, #84]	@ (8004c90 <SEGGER_SYSVIEW_Init+0x7c>)
 8004c3a:	785a      	ldrb	r2, [r3, #1]
 8004c3c:	4b14      	ldr	r3, [pc, #80]	@ (8004c90 <SEGGER_SYSVIEW_Init+0x7c>)
 8004c3e:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8004c40:	4b13      	ldr	r3, [pc, #76]	@ (8004c90 <SEGGER_SYSVIEW_Init+0x7c>)
 8004c42:	7e1b      	ldrb	r3, [r3, #24]
 8004c44:	4618      	mov	r0, r3
 8004c46:	2300      	movs	r3, #0
 8004c48:	9300      	str	r3, [sp, #0]
 8004c4a:	2308      	movs	r3, #8
 8004c4c:	4a11      	ldr	r2, [pc, #68]	@ (8004c94 <SEGGER_SYSVIEW_Init+0x80>)
 8004c4e:	490f      	ldr	r1, [pc, #60]	@ (8004c8c <SEGGER_SYSVIEW_Init+0x78>)
 8004c50:	f7ff f9b0 	bl	8003fb4 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8004c54:	4b0e      	ldr	r3, [pc, #56]	@ (8004c90 <SEGGER_SYSVIEW_Init+0x7c>)
 8004c56:	2200      	movs	r2, #0
 8004c58:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004c5a:	4b0f      	ldr	r3, [pc, #60]	@ (8004c98 <SEGGER_SYSVIEW_Init+0x84>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4a0c      	ldr	r2, [pc, #48]	@ (8004c90 <SEGGER_SYSVIEW_Init+0x7c>)
 8004c60:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8004c62:	4a0b      	ldr	r2, [pc, #44]	@ (8004c90 <SEGGER_SYSVIEW_Init+0x7c>)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8004c68:	4a09      	ldr	r2, [pc, #36]	@ (8004c90 <SEGGER_SYSVIEW_Init+0x7c>)
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8004c6e:	4a08      	ldr	r2, [pc, #32]	@ (8004c90 <SEGGER_SYSVIEW_Init+0x7c>)
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8004c74:	4a06      	ldr	r2, [pc, #24]	@ (8004c90 <SEGGER_SYSVIEW_Init+0x7c>)
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	6253      	str	r3, [r2, #36]	@ 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8004c7a:	4b05      	ldr	r3, [pc, #20]	@ (8004c90 <SEGGER_SYSVIEW_Init+0x7c>)
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8004c80:	bf00      	nop
 8004c82:	3710      	adds	r7, #16
 8004c84:	46bd      	mov	sp, r7
 8004c86:	bd80      	pop	{r7, pc}
 8004c88:	2001335c 	.word	0x2001335c
 8004c8c:	08006424 	.word	0x08006424
 8004c90:	20014364 	.word	0x20014364
 8004c94:	2001435c 	.word	0x2001435c
 8004c98:	e0001004 	.word	0xe0001004

08004c9c <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8004c9c:	b480      	push	{r7}
 8004c9e:	b083      	sub	sp, #12
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8004ca4:	4a04      	ldr	r2, [pc, #16]	@ (8004cb8 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6113      	str	r3, [r2, #16]
}
 8004caa:	bf00      	nop
 8004cac:	370c      	adds	r7, #12
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb4:	4770      	bx	lr
 8004cb6:	bf00      	nop
 8004cb8:	20014364 	.word	0x20014364

08004cbc <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b084      	sub	sp, #16
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004cc4:	f3ef 8311 	mrs	r3, BASEPRI
 8004cc8:	f04f 0120 	mov.w	r1, #32
 8004ccc:	f381 8811 	msr	BASEPRI, r1
 8004cd0:	60fb      	str	r3, [r7, #12]
 8004cd2:	4808      	ldr	r0, [pc, #32]	@ (8004cf4 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8004cd4:	f7ff fa2b 	bl	800412e <_PreparePacket>
 8004cd8:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8004cda:	687a      	ldr	r2, [r7, #4]
 8004cdc:	68b9      	ldr	r1, [r7, #8]
 8004cde:	68b8      	ldr	r0, [r7, #8]
 8004ce0:	f7ff fb16 	bl	8004310 <_SendPacket>
  RECORD_END();
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	f383 8811 	msr	BASEPRI, r3
}
 8004cea:	bf00      	nop
 8004cec:	3710      	adds	r7, #16
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd80      	pop	{r7, pc}
 8004cf2:	bf00      	nop
 8004cf4:	20014394 	.word	0x20014394

08004cf8 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b088      	sub	sp, #32
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
 8004d00:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004d02:	f3ef 8311 	mrs	r3, BASEPRI
 8004d06:	f04f 0120 	mov.w	r1, #32
 8004d0a:	f381 8811 	msr	BASEPRI, r1
 8004d0e:	617b      	str	r3, [r7, #20]
 8004d10:	4816      	ldr	r0, [pc, #88]	@ (8004d6c <SEGGER_SYSVIEW_RecordU32+0x74>)
 8004d12:	f7ff fa0c 	bl	800412e <_PreparePacket>
 8004d16:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004d18:	693b      	ldr	r3, [r7, #16]
 8004d1a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	61fb      	str	r3, [r7, #28]
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	61bb      	str	r3, [r7, #24]
 8004d24:	e00b      	b.n	8004d3e <SEGGER_SYSVIEW_RecordU32+0x46>
 8004d26:	69bb      	ldr	r3, [r7, #24]
 8004d28:	b2da      	uxtb	r2, r3
 8004d2a:	69fb      	ldr	r3, [r7, #28]
 8004d2c:	1c59      	adds	r1, r3, #1
 8004d2e:	61f9      	str	r1, [r7, #28]
 8004d30:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004d34:	b2d2      	uxtb	r2, r2
 8004d36:	701a      	strb	r2, [r3, #0]
 8004d38:	69bb      	ldr	r3, [r7, #24]
 8004d3a:	09db      	lsrs	r3, r3, #7
 8004d3c:	61bb      	str	r3, [r7, #24]
 8004d3e:	69bb      	ldr	r3, [r7, #24]
 8004d40:	2b7f      	cmp	r3, #127	@ 0x7f
 8004d42:	d8f0      	bhi.n	8004d26 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8004d44:	69fb      	ldr	r3, [r7, #28]
 8004d46:	1c5a      	adds	r2, r3, #1
 8004d48:	61fa      	str	r2, [r7, #28]
 8004d4a:	69ba      	ldr	r2, [r7, #24]
 8004d4c:	b2d2      	uxtb	r2, r2
 8004d4e:	701a      	strb	r2, [r3, #0]
 8004d50:	69fb      	ldr	r3, [r7, #28]
 8004d52:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004d54:	687a      	ldr	r2, [r7, #4]
 8004d56:	68f9      	ldr	r1, [r7, #12]
 8004d58:	6938      	ldr	r0, [r7, #16]
 8004d5a:	f7ff fad9 	bl	8004310 <_SendPacket>
  RECORD_END();
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	f383 8811 	msr	BASEPRI, r3
}
 8004d64:	bf00      	nop
 8004d66:	3720      	adds	r7, #32
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	bd80      	pop	{r7, pc}
 8004d6c:	20014394 	.word	0x20014394

08004d70 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b08c      	sub	sp, #48	@ 0x30
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	60f8      	str	r0, [r7, #12]
 8004d78:	60b9      	str	r1, [r7, #8]
 8004d7a:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004d7c:	f3ef 8311 	mrs	r3, BASEPRI
 8004d80:	f04f 0120 	mov.w	r1, #32
 8004d84:	f381 8811 	msr	BASEPRI, r1
 8004d88:	61fb      	str	r3, [r7, #28]
 8004d8a:	4825      	ldr	r0, [pc, #148]	@ (8004e20 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8004d8c:	f7ff f9cf 	bl	800412e <_PreparePacket>
 8004d90:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8004d92:	69bb      	ldr	r3, [r7, #24]
 8004d94:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8004d96:	697b      	ldr	r3, [r7, #20]
 8004d98:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004d9e:	e00b      	b.n	8004db8 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8004da0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004da2:	b2da      	uxtb	r2, r3
 8004da4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004da6:	1c59      	adds	r1, r3, #1
 8004da8:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8004daa:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004dae:	b2d2      	uxtb	r2, r2
 8004db0:	701a      	strb	r2, [r3, #0]
 8004db2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004db4:	09db      	lsrs	r3, r3, #7
 8004db6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004db8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dba:	2b7f      	cmp	r3, #127	@ 0x7f
 8004dbc:	d8f0      	bhi.n	8004da0 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8004dbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004dc0:	1c5a      	adds	r2, r3, #1
 8004dc2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004dc4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004dc6:	b2d2      	uxtb	r2, r2
 8004dc8:	701a      	strb	r2, [r3, #0]
 8004dca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004dcc:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8004dce:	697b      	ldr	r3, [r7, #20]
 8004dd0:	627b      	str	r3, [r7, #36]	@ 0x24
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	623b      	str	r3, [r7, #32]
 8004dd6:	e00b      	b.n	8004df0 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8004dd8:	6a3b      	ldr	r3, [r7, #32]
 8004dda:	b2da      	uxtb	r2, r3
 8004ddc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dde:	1c59      	adds	r1, r3, #1
 8004de0:	6279      	str	r1, [r7, #36]	@ 0x24
 8004de2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004de6:	b2d2      	uxtb	r2, r2
 8004de8:	701a      	strb	r2, [r3, #0]
 8004dea:	6a3b      	ldr	r3, [r7, #32]
 8004dec:	09db      	lsrs	r3, r3, #7
 8004dee:	623b      	str	r3, [r7, #32]
 8004df0:	6a3b      	ldr	r3, [r7, #32]
 8004df2:	2b7f      	cmp	r3, #127	@ 0x7f
 8004df4:	d8f0      	bhi.n	8004dd8 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8004df6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004df8:	1c5a      	adds	r2, r3, #1
 8004dfa:	627a      	str	r2, [r7, #36]	@ 0x24
 8004dfc:	6a3a      	ldr	r2, [r7, #32]
 8004dfe:	b2d2      	uxtb	r2, r2
 8004e00:	701a      	strb	r2, [r3, #0]
 8004e02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e04:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004e06:	68fa      	ldr	r2, [r7, #12]
 8004e08:	6979      	ldr	r1, [r7, #20]
 8004e0a:	69b8      	ldr	r0, [r7, #24]
 8004e0c:	f7ff fa80 	bl	8004310 <_SendPacket>
  RECORD_END();
 8004e10:	69fb      	ldr	r3, [r7, #28]
 8004e12:	f383 8811 	msr	BASEPRI, r3
}
 8004e16:	bf00      	nop
 8004e18:	3730      	adds	r7, #48	@ 0x30
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd80      	pop	{r7, pc}
 8004e1e:	bf00      	nop
 8004e20:	20014394 	.word	0x20014394

08004e24 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b08c      	sub	sp, #48	@ 0x30
 8004e28:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8004e2a:	4b59      	ldr	r3, [pc, #356]	@ (8004f90 <SEGGER_SYSVIEW_Start+0x16c>)
 8004e2c:	2201      	movs	r2, #1
 8004e2e:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8004e30:	f3ef 8311 	mrs	r3, BASEPRI
 8004e34:	f04f 0120 	mov.w	r1, #32
 8004e38:	f381 8811 	msr	BASEPRI, r1
 8004e3c:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8004e3e:	4b54      	ldr	r3, [pc, #336]	@ (8004f90 <SEGGER_SYSVIEW_Start+0x16c>)
 8004e40:	785b      	ldrb	r3, [r3, #1]
 8004e42:	220a      	movs	r2, #10
 8004e44:	4953      	ldr	r1, [pc, #332]	@ (8004f94 <SEGGER_SYSVIEW_Start+0x170>)
 8004e46:	4618      	mov	r0, r3
 8004e48:	f7fb f9c2 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 8004e52:	f7fe fcff 	bl	8003854 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8004e56:	200a      	movs	r0, #10
 8004e58:	f7ff ff30 	bl	8004cbc <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004e5c:	f3ef 8311 	mrs	r3, BASEPRI
 8004e60:	f04f 0120 	mov.w	r1, #32
 8004e64:	f381 8811 	msr	BASEPRI, r1
 8004e68:	60bb      	str	r3, [r7, #8]
 8004e6a:	484b      	ldr	r0, [pc, #300]	@ (8004f98 <SEGGER_SYSVIEW_Start+0x174>)
 8004e6c:	f7ff f95f 	bl	800412e <_PreparePacket>
 8004e70:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004e7a:	4b45      	ldr	r3, [pc, #276]	@ (8004f90 <SEGGER_SYSVIEW_Start+0x16c>)
 8004e7c:	685b      	ldr	r3, [r3, #4]
 8004e7e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004e80:	e00b      	b.n	8004e9a <SEGGER_SYSVIEW_Start+0x76>
 8004e82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e84:	b2da      	uxtb	r2, r3
 8004e86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e88:	1c59      	adds	r1, r3, #1
 8004e8a:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8004e8c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004e90:	b2d2      	uxtb	r2, r2
 8004e92:	701a      	strb	r2, [r3, #0]
 8004e94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e96:	09db      	lsrs	r3, r3, #7
 8004e98:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004e9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e9c:	2b7f      	cmp	r3, #127	@ 0x7f
 8004e9e:	d8f0      	bhi.n	8004e82 <SEGGER_SYSVIEW_Start+0x5e>
 8004ea0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ea2:	1c5a      	adds	r2, r3, #1
 8004ea4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004ea6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004ea8:	b2d2      	uxtb	r2, r2
 8004eaa:	701a      	strb	r2, [r3, #0]
 8004eac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004eae:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	627b      	str	r3, [r7, #36]	@ 0x24
 8004eb4:	4b36      	ldr	r3, [pc, #216]	@ (8004f90 <SEGGER_SYSVIEW_Start+0x16c>)
 8004eb6:	689b      	ldr	r3, [r3, #8]
 8004eb8:	623b      	str	r3, [r7, #32]
 8004eba:	e00b      	b.n	8004ed4 <SEGGER_SYSVIEW_Start+0xb0>
 8004ebc:	6a3b      	ldr	r3, [r7, #32]
 8004ebe:	b2da      	uxtb	r2, r3
 8004ec0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ec2:	1c59      	adds	r1, r3, #1
 8004ec4:	6279      	str	r1, [r7, #36]	@ 0x24
 8004ec6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004eca:	b2d2      	uxtb	r2, r2
 8004ecc:	701a      	strb	r2, [r3, #0]
 8004ece:	6a3b      	ldr	r3, [r7, #32]
 8004ed0:	09db      	lsrs	r3, r3, #7
 8004ed2:	623b      	str	r3, [r7, #32]
 8004ed4:	6a3b      	ldr	r3, [r7, #32]
 8004ed6:	2b7f      	cmp	r3, #127	@ 0x7f
 8004ed8:	d8f0      	bhi.n	8004ebc <SEGGER_SYSVIEW_Start+0x98>
 8004eda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004edc:	1c5a      	adds	r2, r3, #1
 8004ede:	627a      	str	r2, [r7, #36]	@ 0x24
 8004ee0:	6a3a      	ldr	r2, [r7, #32]
 8004ee2:	b2d2      	uxtb	r2, r2
 8004ee4:	701a      	strb	r2, [r3, #0]
 8004ee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ee8:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	61fb      	str	r3, [r7, #28]
 8004eee:	4b28      	ldr	r3, [pc, #160]	@ (8004f90 <SEGGER_SYSVIEW_Start+0x16c>)
 8004ef0:	691b      	ldr	r3, [r3, #16]
 8004ef2:	61bb      	str	r3, [r7, #24]
 8004ef4:	e00b      	b.n	8004f0e <SEGGER_SYSVIEW_Start+0xea>
 8004ef6:	69bb      	ldr	r3, [r7, #24]
 8004ef8:	b2da      	uxtb	r2, r3
 8004efa:	69fb      	ldr	r3, [r7, #28]
 8004efc:	1c59      	adds	r1, r3, #1
 8004efe:	61f9      	str	r1, [r7, #28]
 8004f00:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004f04:	b2d2      	uxtb	r2, r2
 8004f06:	701a      	strb	r2, [r3, #0]
 8004f08:	69bb      	ldr	r3, [r7, #24]
 8004f0a:	09db      	lsrs	r3, r3, #7
 8004f0c:	61bb      	str	r3, [r7, #24]
 8004f0e:	69bb      	ldr	r3, [r7, #24]
 8004f10:	2b7f      	cmp	r3, #127	@ 0x7f
 8004f12:	d8f0      	bhi.n	8004ef6 <SEGGER_SYSVIEW_Start+0xd2>
 8004f14:	69fb      	ldr	r3, [r7, #28]
 8004f16:	1c5a      	adds	r2, r3, #1
 8004f18:	61fa      	str	r2, [r7, #28]
 8004f1a:	69ba      	ldr	r2, [r7, #24]
 8004f1c:	b2d2      	uxtb	r2, r2
 8004f1e:	701a      	strb	r2, [r3, #0]
 8004f20:	69fb      	ldr	r3, [r7, #28]
 8004f22:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	617b      	str	r3, [r7, #20]
 8004f28:	2300      	movs	r3, #0
 8004f2a:	613b      	str	r3, [r7, #16]
 8004f2c:	e00b      	b.n	8004f46 <SEGGER_SYSVIEW_Start+0x122>
 8004f2e:	693b      	ldr	r3, [r7, #16]
 8004f30:	b2da      	uxtb	r2, r3
 8004f32:	697b      	ldr	r3, [r7, #20]
 8004f34:	1c59      	adds	r1, r3, #1
 8004f36:	6179      	str	r1, [r7, #20]
 8004f38:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004f3c:	b2d2      	uxtb	r2, r2
 8004f3e:	701a      	strb	r2, [r3, #0]
 8004f40:	693b      	ldr	r3, [r7, #16]
 8004f42:	09db      	lsrs	r3, r3, #7
 8004f44:	613b      	str	r3, [r7, #16]
 8004f46:	693b      	ldr	r3, [r7, #16]
 8004f48:	2b7f      	cmp	r3, #127	@ 0x7f
 8004f4a:	d8f0      	bhi.n	8004f2e <SEGGER_SYSVIEW_Start+0x10a>
 8004f4c:	697b      	ldr	r3, [r7, #20]
 8004f4e:	1c5a      	adds	r2, r3, #1
 8004f50:	617a      	str	r2, [r7, #20]
 8004f52:	693a      	ldr	r2, [r7, #16]
 8004f54:	b2d2      	uxtb	r2, r2
 8004f56:	701a      	strb	r2, [r3, #0]
 8004f58:	697b      	ldr	r3, [r7, #20]
 8004f5a:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8004f5c:	2218      	movs	r2, #24
 8004f5e:	6839      	ldr	r1, [r7, #0]
 8004f60:	6878      	ldr	r0, [r7, #4]
 8004f62:	f7ff f9d5 	bl	8004310 <_SendPacket>
      RECORD_END();
 8004f66:	68bb      	ldr	r3, [r7, #8]
 8004f68:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8004f6c:	4b08      	ldr	r3, [pc, #32]	@ (8004f90 <SEGGER_SYSVIEW_Start+0x16c>)
 8004f6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d002      	beq.n	8004f7a <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8004f74:	4b06      	ldr	r3, [pc, #24]	@ (8004f90 <SEGGER_SYSVIEW_Start+0x16c>)
 8004f76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f78:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8004f7a:	f000 f9eb 	bl	8005354 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8004f7e:	f000 f9b1 	bl	80052e4 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8004f82:	f000 fc13 	bl	80057ac <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8004f86:	bf00      	nop
 8004f88:	3730      	adds	r7, #48	@ 0x30
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd80      	pop	{r7, pc}
 8004f8e:	bf00      	nop
 8004f90:	20014364 	.word	0x20014364
 8004f94:	08006450 	.word	0x08006450
 8004f98:	20014394 	.word	0x20014394

08004f9c <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b082      	sub	sp, #8
 8004fa0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004fa2:	f3ef 8311 	mrs	r3, BASEPRI
 8004fa6:	f04f 0120 	mov.w	r1, #32
 8004faa:	f381 8811 	msr	BASEPRI, r1
 8004fae:	607b      	str	r3, [r7, #4]
 8004fb0:	480b      	ldr	r0, [pc, #44]	@ (8004fe0 <SEGGER_SYSVIEW_Stop+0x44>)
 8004fb2:	f7ff f8bc 	bl	800412e <_PreparePacket>
 8004fb6:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8004fb8:	4b0a      	ldr	r3, [pc, #40]	@ (8004fe4 <SEGGER_SYSVIEW_Stop+0x48>)
 8004fba:	781b      	ldrb	r3, [r3, #0]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d007      	beq.n	8004fd0 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8004fc0:	220b      	movs	r2, #11
 8004fc2:	6839      	ldr	r1, [r7, #0]
 8004fc4:	6838      	ldr	r0, [r7, #0]
 8004fc6:	f7ff f9a3 	bl	8004310 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8004fca:	4b06      	ldr	r3, [pc, #24]	@ (8004fe4 <SEGGER_SYSVIEW_Stop+0x48>)
 8004fcc:	2200      	movs	r2, #0
 8004fce:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	f383 8811 	msr	BASEPRI, r3
}
 8004fd6:	bf00      	nop
 8004fd8:	3708      	adds	r7, #8
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bd80      	pop	{r7, pc}
 8004fde:	bf00      	nop
 8004fe0:	20014394 	.word	0x20014394
 8004fe4:	20014364 	.word	0x20014364

08004fe8 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b08c      	sub	sp, #48	@ 0x30
 8004fec:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004fee:	f3ef 8311 	mrs	r3, BASEPRI
 8004ff2:	f04f 0120 	mov.w	r1, #32
 8004ff6:	f381 8811 	msr	BASEPRI, r1
 8004ffa:	60fb      	str	r3, [r7, #12]
 8004ffc:	4845      	ldr	r0, [pc, #276]	@ (8005114 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8004ffe:	f7ff f896 	bl	800412e <_PreparePacket>
 8005002:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800500c:	4b42      	ldr	r3, [pc, #264]	@ (8005118 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005012:	e00b      	b.n	800502c <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8005014:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005016:	b2da      	uxtb	r2, r3
 8005018:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800501a:	1c59      	adds	r1, r3, #1
 800501c:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800501e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005022:	b2d2      	uxtb	r2, r2
 8005024:	701a      	strb	r2, [r3, #0]
 8005026:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005028:	09db      	lsrs	r3, r3, #7
 800502a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800502c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800502e:	2b7f      	cmp	r3, #127	@ 0x7f
 8005030:	d8f0      	bhi.n	8005014 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8005032:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005034:	1c5a      	adds	r2, r3, #1
 8005036:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005038:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800503a:	b2d2      	uxtb	r2, r2
 800503c:	701a      	strb	r2, [r3, #0]
 800503e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005040:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	627b      	str	r3, [r7, #36]	@ 0x24
 8005046:	4b34      	ldr	r3, [pc, #208]	@ (8005118 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005048:	689b      	ldr	r3, [r3, #8]
 800504a:	623b      	str	r3, [r7, #32]
 800504c:	e00b      	b.n	8005066 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 800504e:	6a3b      	ldr	r3, [r7, #32]
 8005050:	b2da      	uxtb	r2, r3
 8005052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005054:	1c59      	adds	r1, r3, #1
 8005056:	6279      	str	r1, [r7, #36]	@ 0x24
 8005058:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800505c:	b2d2      	uxtb	r2, r2
 800505e:	701a      	strb	r2, [r3, #0]
 8005060:	6a3b      	ldr	r3, [r7, #32]
 8005062:	09db      	lsrs	r3, r3, #7
 8005064:	623b      	str	r3, [r7, #32]
 8005066:	6a3b      	ldr	r3, [r7, #32]
 8005068:	2b7f      	cmp	r3, #127	@ 0x7f
 800506a:	d8f0      	bhi.n	800504e <SEGGER_SYSVIEW_GetSysDesc+0x66>
 800506c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800506e:	1c5a      	adds	r2, r3, #1
 8005070:	627a      	str	r2, [r7, #36]	@ 0x24
 8005072:	6a3a      	ldr	r2, [r7, #32]
 8005074:	b2d2      	uxtb	r2, r2
 8005076:	701a      	strb	r2, [r3, #0]
 8005078:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800507a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	61fb      	str	r3, [r7, #28]
 8005080:	4b25      	ldr	r3, [pc, #148]	@ (8005118 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005082:	691b      	ldr	r3, [r3, #16]
 8005084:	61bb      	str	r3, [r7, #24]
 8005086:	e00b      	b.n	80050a0 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8005088:	69bb      	ldr	r3, [r7, #24]
 800508a:	b2da      	uxtb	r2, r3
 800508c:	69fb      	ldr	r3, [r7, #28]
 800508e:	1c59      	adds	r1, r3, #1
 8005090:	61f9      	str	r1, [r7, #28]
 8005092:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005096:	b2d2      	uxtb	r2, r2
 8005098:	701a      	strb	r2, [r3, #0]
 800509a:	69bb      	ldr	r3, [r7, #24]
 800509c:	09db      	lsrs	r3, r3, #7
 800509e:	61bb      	str	r3, [r7, #24]
 80050a0:	69bb      	ldr	r3, [r7, #24]
 80050a2:	2b7f      	cmp	r3, #127	@ 0x7f
 80050a4:	d8f0      	bhi.n	8005088 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 80050a6:	69fb      	ldr	r3, [r7, #28]
 80050a8:	1c5a      	adds	r2, r3, #1
 80050aa:	61fa      	str	r2, [r7, #28]
 80050ac:	69ba      	ldr	r2, [r7, #24]
 80050ae:	b2d2      	uxtb	r2, r2
 80050b0:	701a      	strb	r2, [r3, #0]
 80050b2:	69fb      	ldr	r3, [r7, #28]
 80050b4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	617b      	str	r3, [r7, #20]
 80050ba:	2300      	movs	r3, #0
 80050bc:	613b      	str	r3, [r7, #16]
 80050be:	e00b      	b.n	80050d8 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 80050c0:	693b      	ldr	r3, [r7, #16]
 80050c2:	b2da      	uxtb	r2, r3
 80050c4:	697b      	ldr	r3, [r7, #20]
 80050c6:	1c59      	adds	r1, r3, #1
 80050c8:	6179      	str	r1, [r7, #20]
 80050ca:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80050ce:	b2d2      	uxtb	r2, r2
 80050d0:	701a      	strb	r2, [r3, #0]
 80050d2:	693b      	ldr	r3, [r7, #16]
 80050d4:	09db      	lsrs	r3, r3, #7
 80050d6:	613b      	str	r3, [r7, #16]
 80050d8:	693b      	ldr	r3, [r7, #16]
 80050da:	2b7f      	cmp	r3, #127	@ 0x7f
 80050dc:	d8f0      	bhi.n	80050c0 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 80050de:	697b      	ldr	r3, [r7, #20]
 80050e0:	1c5a      	adds	r2, r3, #1
 80050e2:	617a      	str	r2, [r7, #20]
 80050e4:	693a      	ldr	r2, [r7, #16]
 80050e6:	b2d2      	uxtb	r2, r2
 80050e8:	701a      	strb	r2, [r3, #0]
 80050ea:	697b      	ldr	r3, [r7, #20]
 80050ec:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80050ee:	2218      	movs	r2, #24
 80050f0:	6879      	ldr	r1, [r7, #4]
 80050f2:	68b8      	ldr	r0, [r7, #8]
 80050f4:	f7ff f90c 	bl	8004310 <_SendPacket>
  RECORD_END();
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 80050fe:	4b06      	ldr	r3, [pc, #24]	@ (8005118 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005100:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005102:	2b00      	cmp	r3, #0
 8005104:	d002      	beq.n	800510c <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8005106:	4b04      	ldr	r3, [pc, #16]	@ (8005118 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005108:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800510a:	4798      	blx	r3
  }
}
 800510c:	bf00      	nop
 800510e:	3730      	adds	r7, #48	@ 0x30
 8005110:	46bd      	mov	sp, r7
 8005112:	bd80      	pop	{r7, pc}
 8005114:	20014394 	.word	0x20014394
 8005118:	20014364 	.word	0x20014364

0800511c <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 800511c:	b580      	push	{r7, lr}
 800511e:	b092      	sub	sp, #72	@ 0x48
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8005124:	f3ef 8311 	mrs	r3, BASEPRI
 8005128:	f04f 0120 	mov.w	r1, #32
 800512c:	f381 8811 	msr	BASEPRI, r1
 8005130:	617b      	str	r3, [r7, #20]
 8005132:	486a      	ldr	r0, [pc, #424]	@ (80052dc <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8005134:	f7fe fffb 	bl	800412e <_PreparePacket>
 8005138:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800513a:	693b      	ldr	r3, [r7, #16]
 800513c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	647b      	str	r3, [r7, #68]	@ 0x44
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681a      	ldr	r2, [r3, #0]
 8005146:	4b66      	ldr	r3, [pc, #408]	@ (80052e0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005148:	691b      	ldr	r3, [r3, #16]
 800514a:	1ad3      	subs	r3, r2, r3
 800514c:	643b      	str	r3, [r7, #64]	@ 0x40
 800514e:	e00b      	b.n	8005168 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8005150:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005152:	b2da      	uxtb	r2, r3
 8005154:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005156:	1c59      	adds	r1, r3, #1
 8005158:	6479      	str	r1, [r7, #68]	@ 0x44
 800515a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800515e:	b2d2      	uxtb	r2, r2
 8005160:	701a      	strb	r2, [r3, #0]
 8005162:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005164:	09db      	lsrs	r3, r3, #7
 8005166:	643b      	str	r3, [r7, #64]	@ 0x40
 8005168:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800516a:	2b7f      	cmp	r3, #127	@ 0x7f
 800516c:	d8f0      	bhi.n	8005150 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 800516e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005170:	1c5a      	adds	r2, r3, #1
 8005172:	647a      	str	r2, [r7, #68]	@ 0x44
 8005174:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005176:	b2d2      	uxtb	r2, r2
 8005178:	701a      	strb	r2, [r3, #0]
 800517a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800517c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	689b      	ldr	r3, [r3, #8]
 8005186:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005188:	e00b      	b.n	80051a2 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 800518a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800518c:	b2da      	uxtb	r2, r3
 800518e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005190:	1c59      	adds	r1, r3, #1
 8005192:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8005194:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005198:	b2d2      	uxtb	r2, r2
 800519a:	701a      	strb	r2, [r3, #0]
 800519c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800519e:	09db      	lsrs	r3, r3, #7
 80051a0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80051a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051a4:	2b7f      	cmp	r3, #127	@ 0x7f
 80051a6:	d8f0      	bhi.n	800518a <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 80051a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80051aa:	1c5a      	adds	r2, r3, #1
 80051ac:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80051ae:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80051b0:	b2d2      	uxtb	r2, r2
 80051b2:	701a      	strb	r2, [r3, #0]
 80051b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80051b6:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	685b      	ldr	r3, [r3, #4]
 80051bc:	2220      	movs	r2, #32
 80051be:	4619      	mov	r1, r3
 80051c0:	68f8      	ldr	r0, [r7, #12]
 80051c2:	f7fe ff67 	bl	8004094 <_EncodeStr>
 80051c6:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 80051c8:	2209      	movs	r2, #9
 80051ca:	68f9      	ldr	r1, [r7, #12]
 80051cc:	6938      	ldr	r0, [r7, #16]
 80051ce:	f7ff f89f 	bl	8004310 <_SendPacket>
  //
  pPayload = pPayloadStart;
 80051d2:	693b      	ldr	r3, [r7, #16]
 80051d4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681a      	ldr	r2, [r3, #0]
 80051de:	4b40      	ldr	r3, [pc, #256]	@ (80052e0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80051e0:	691b      	ldr	r3, [r3, #16]
 80051e2:	1ad3      	subs	r3, r2, r3
 80051e4:	633b      	str	r3, [r7, #48]	@ 0x30
 80051e6:	e00b      	b.n	8005200 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 80051e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051ea:	b2da      	uxtb	r2, r3
 80051ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051ee:	1c59      	adds	r1, r3, #1
 80051f0:	6379      	str	r1, [r7, #52]	@ 0x34
 80051f2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80051f6:	b2d2      	uxtb	r2, r2
 80051f8:	701a      	strb	r2, [r3, #0]
 80051fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051fc:	09db      	lsrs	r3, r3, #7
 80051fe:	633b      	str	r3, [r7, #48]	@ 0x30
 8005200:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005202:	2b7f      	cmp	r3, #127	@ 0x7f
 8005204:	d8f0      	bhi.n	80051e8 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8005206:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005208:	1c5a      	adds	r2, r3, #1
 800520a:	637a      	str	r2, [r7, #52]	@ 0x34
 800520c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800520e:	b2d2      	uxtb	r2, r2
 8005210:	701a      	strb	r2, [r3, #0]
 8005212:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005214:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	68db      	ldr	r3, [r3, #12]
 800521e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005220:	e00b      	b.n	800523a <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8005222:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005224:	b2da      	uxtb	r2, r3
 8005226:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005228:	1c59      	adds	r1, r3, #1
 800522a:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800522c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005230:	b2d2      	uxtb	r2, r2
 8005232:	701a      	strb	r2, [r3, #0]
 8005234:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005236:	09db      	lsrs	r3, r3, #7
 8005238:	62bb      	str	r3, [r7, #40]	@ 0x28
 800523a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800523c:	2b7f      	cmp	r3, #127	@ 0x7f
 800523e:	d8f0      	bhi.n	8005222 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8005240:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005242:	1c5a      	adds	r2, r3, #1
 8005244:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005246:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005248:	b2d2      	uxtb	r2, r2
 800524a:	701a      	strb	r2, [r3, #0]
 800524c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800524e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	627b      	str	r3, [r7, #36]	@ 0x24
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	691b      	ldr	r3, [r3, #16]
 8005258:	623b      	str	r3, [r7, #32]
 800525a:	e00b      	b.n	8005274 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 800525c:	6a3b      	ldr	r3, [r7, #32]
 800525e:	b2da      	uxtb	r2, r3
 8005260:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005262:	1c59      	adds	r1, r3, #1
 8005264:	6279      	str	r1, [r7, #36]	@ 0x24
 8005266:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800526a:	b2d2      	uxtb	r2, r2
 800526c:	701a      	strb	r2, [r3, #0]
 800526e:	6a3b      	ldr	r3, [r7, #32]
 8005270:	09db      	lsrs	r3, r3, #7
 8005272:	623b      	str	r3, [r7, #32]
 8005274:	6a3b      	ldr	r3, [r7, #32]
 8005276:	2b7f      	cmp	r3, #127	@ 0x7f
 8005278:	d8f0      	bhi.n	800525c <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 800527a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800527c:	1c5a      	adds	r2, r3, #1
 800527e:	627a      	str	r2, [r7, #36]	@ 0x24
 8005280:	6a3a      	ldr	r2, [r7, #32]
 8005282:	b2d2      	uxtb	r2, r2
 8005284:	701a      	strb	r2, [r3, #0]
 8005286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005288:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	61fb      	str	r3, [r7, #28]
 800528e:	2300      	movs	r3, #0
 8005290:	61bb      	str	r3, [r7, #24]
 8005292:	e00b      	b.n	80052ac <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8005294:	69bb      	ldr	r3, [r7, #24]
 8005296:	b2da      	uxtb	r2, r3
 8005298:	69fb      	ldr	r3, [r7, #28]
 800529a:	1c59      	adds	r1, r3, #1
 800529c:	61f9      	str	r1, [r7, #28]
 800529e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80052a2:	b2d2      	uxtb	r2, r2
 80052a4:	701a      	strb	r2, [r3, #0]
 80052a6:	69bb      	ldr	r3, [r7, #24]
 80052a8:	09db      	lsrs	r3, r3, #7
 80052aa:	61bb      	str	r3, [r7, #24]
 80052ac:	69bb      	ldr	r3, [r7, #24]
 80052ae:	2b7f      	cmp	r3, #127	@ 0x7f
 80052b0:	d8f0      	bhi.n	8005294 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 80052b2:	69fb      	ldr	r3, [r7, #28]
 80052b4:	1c5a      	adds	r2, r3, #1
 80052b6:	61fa      	str	r2, [r7, #28]
 80052b8:	69ba      	ldr	r2, [r7, #24]
 80052ba:	b2d2      	uxtb	r2, r2
 80052bc:	701a      	strb	r2, [r3, #0]
 80052be:	69fb      	ldr	r3, [r7, #28]
 80052c0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 80052c2:	2215      	movs	r2, #21
 80052c4:	68f9      	ldr	r1, [r7, #12]
 80052c6:	6938      	ldr	r0, [r7, #16]
 80052c8:	f7ff f822 	bl	8004310 <_SendPacket>
  RECORD_END();
 80052cc:	697b      	ldr	r3, [r7, #20]
 80052ce:	f383 8811 	msr	BASEPRI, r3
}
 80052d2:	bf00      	nop
 80052d4:	3748      	adds	r7, #72	@ 0x48
 80052d6:	46bd      	mov	sp, r7
 80052d8:	bd80      	pop	{r7, pc}
 80052da:	bf00      	nop
 80052dc:	20014394 	.word	0x20014394
 80052e0:	20014364 	.word	0x20014364

080052e4 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 80052e4:	b580      	push	{r7, lr}
 80052e6:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 80052e8:	4b07      	ldr	r3, [pc, #28]	@ (8005308 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80052ea:	6a1b      	ldr	r3, [r3, #32]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d008      	beq.n	8005302 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 80052f0:	4b05      	ldr	r3, [pc, #20]	@ (8005308 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80052f2:	6a1b      	ldr	r3, [r3, #32]
 80052f4:	685b      	ldr	r3, [r3, #4]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d003      	beq.n	8005302 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 80052fa:	4b03      	ldr	r3, [pc, #12]	@ (8005308 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80052fc:	6a1b      	ldr	r3, [r3, #32]
 80052fe:	685b      	ldr	r3, [r3, #4]
 8005300:	4798      	blx	r3
  }
}
 8005302:	bf00      	nop
 8005304:	bd80      	pop	{r7, pc}
 8005306:	bf00      	nop
 8005308:	20014364 	.word	0x20014364

0800530c <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 800530c:	b580      	push	{r7, lr}
 800530e:	b086      	sub	sp, #24
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005314:	f3ef 8311 	mrs	r3, BASEPRI
 8005318:	f04f 0120 	mov.w	r1, #32
 800531c:	f381 8811 	msr	BASEPRI, r1
 8005320:	617b      	str	r3, [r7, #20]
 8005322:	480b      	ldr	r0, [pc, #44]	@ (8005350 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8005324:	f7fe ff03 	bl	800412e <_PreparePacket>
 8005328:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800532a:	2280      	movs	r2, #128	@ 0x80
 800532c:	6879      	ldr	r1, [r7, #4]
 800532e:	6938      	ldr	r0, [r7, #16]
 8005330:	f7fe feb0 	bl	8004094 <_EncodeStr>
 8005334:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8005336:	220e      	movs	r2, #14
 8005338:	68f9      	ldr	r1, [r7, #12]
 800533a:	6938      	ldr	r0, [r7, #16]
 800533c:	f7fe ffe8 	bl	8004310 <_SendPacket>
  RECORD_END();
 8005340:	697b      	ldr	r3, [r7, #20]
 8005342:	f383 8811 	msr	BASEPRI, r3
}
 8005346:	bf00      	nop
 8005348:	3718      	adds	r7, #24
 800534a:	46bd      	mov	sp, r7
 800534c:	bd80      	pop	{r7, pc}
 800534e:	bf00      	nop
 8005350:	20014394 	.word	0x20014394

08005354 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8005354:	b590      	push	{r4, r7, lr}
 8005356:	b083      	sub	sp, #12
 8005358:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800535a:	4b15      	ldr	r3, [pc, #84]	@ (80053b0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800535c:	6a1b      	ldr	r3, [r3, #32]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d01a      	beq.n	8005398 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8005362:	4b13      	ldr	r3, [pc, #76]	@ (80053b0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005364:	6a1b      	ldr	r3, [r3, #32]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d015      	beq.n	8005398 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 800536c:	4b10      	ldr	r3, [pc, #64]	@ (80053b0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800536e:	6a1b      	ldr	r3, [r3, #32]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4798      	blx	r3
 8005374:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8005378:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800537a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800537e:	f04f 0200 	mov.w	r2, #0
 8005382:	f04f 0300 	mov.w	r3, #0
 8005386:	000a      	movs	r2, r1
 8005388:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800538a:	4613      	mov	r3, r2
 800538c:	461a      	mov	r2, r3
 800538e:	4621      	mov	r1, r4
 8005390:	200d      	movs	r0, #13
 8005392:	f7ff fced 	bl	8004d70 <SEGGER_SYSVIEW_RecordU32x2>
 8005396:	e006      	b.n	80053a6 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8005398:	4b06      	ldr	r3, [pc, #24]	@ (80053b4 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4619      	mov	r1, r3
 800539e:	200c      	movs	r0, #12
 80053a0:	f7ff fcaa 	bl	8004cf8 <SEGGER_SYSVIEW_RecordU32>
  }
}
 80053a4:	bf00      	nop
 80053a6:	bf00      	nop
 80053a8:	370c      	adds	r7, #12
 80053aa:	46bd      	mov	sp, r7
 80053ac:	bd90      	pop	{r4, r7, pc}
 80053ae:	bf00      	nop
 80053b0:	20014364 	.word	0x20014364
 80053b4:	e0001004 	.word	0xe0001004

080053b8 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b086      	sub	sp, #24
 80053bc:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80053be:	f3ef 8311 	mrs	r3, BASEPRI
 80053c2:	f04f 0120 	mov.w	r1, #32
 80053c6:	f381 8811 	msr	BASEPRI, r1
 80053ca:	60fb      	str	r3, [r7, #12]
 80053cc:	4819      	ldr	r0, [pc, #100]	@ (8005434 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 80053ce:	f7fe feae 	bl	800412e <_PreparePacket>
 80053d2:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80053d4:	68bb      	ldr	r3, [r7, #8]
 80053d6:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 80053d8:	4b17      	ldr	r3, [pc, #92]	@ (8005438 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053e0:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	617b      	str	r3, [r7, #20]
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	613b      	str	r3, [r7, #16]
 80053ea:	e00b      	b.n	8005404 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 80053ec:	693b      	ldr	r3, [r7, #16]
 80053ee:	b2da      	uxtb	r2, r3
 80053f0:	697b      	ldr	r3, [r7, #20]
 80053f2:	1c59      	adds	r1, r3, #1
 80053f4:	6179      	str	r1, [r7, #20]
 80053f6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80053fa:	b2d2      	uxtb	r2, r2
 80053fc:	701a      	strb	r2, [r3, #0]
 80053fe:	693b      	ldr	r3, [r7, #16]
 8005400:	09db      	lsrs	r3, r3, #7
 8005402:	613b      	str	r3, [r7, #16]
 8005404:	693b      	ldr	r3, [r7, #16]
 8005406:	2b7f      	cmp	r3, #127	@ 0x7f
 8005408:	d8f0      	bhi.n	80053ec <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 800540a:	697b      	ldr	r3, [r7, #20]
 800540c:	1c5a      	adds	r2, r3, #1
 800540e:	617a      	str	r2, [r7, #20]
 8005410:	693a      	ldr	r2, [r7, #16]
 8005412:	b2d2      	uxtb	r2, r2
 8005414:	701a      	strb	r2, [r3, #0]
 8005416:	697b      	ldr	r3, [r7, #20]
 8005418:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 800541a:	2202      	movs	r2, #2
 800541c:	6879      	ldr	r1, [r7, #4]
 800541e:	68b8      	ldr	r0, [r7, #8]
 8005420:	f7fe ff76 	bl	8004310 <_SendPacket>
  RECORD_END();
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	f383 8811 	msr	BASEPRI, r3
}
 800542a:	bf00      	nop
 800542c:	3718      	adds	r7, #24
 800542e:	46bd      	mov	sp, r7
 8005430:	bd80      	pop	{r7, pc}
 8005432:	bf00      	nop
 8005434:	20014394 	.word	0x20014394
 8005438:	e000ed04 	.word	0xe000ed04

0800543c <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 800543c:	b580      	push	{r7, lr}
 800543e:	b082      	sub	sp, #8
 8005440:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005442:	f3ef 8311 	mrs	r3, BASEPRI
 8005446:	f04f 0120 	mov.w	r1, #32
 800544a:	f381 8811 	msr	BASEPRI, r1
 800544e:	607b      	str	r3, [r7, #4]
 8005450:	4807      	ldr	r0, [pc, #28]	@ (8005470 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8005452:	f7fe fe6c 	bl	800412e <_PreparePacket>
 8005456:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8005458:	2203      	movs	r2, #3
 800545a:	6839      	ldr	r1, [r7, #0]
 800545c:	6838      	ldr	r0, [r7, #0]
 800545e:	f7fe ff57 	bl	8004310 <_SendPacket>
  RECORD_END();
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	f383 8811 	msr	BASEPRI, r3
}
 8005468:	bf00      	nop
 800546a:	3708      	adds	r7, #8
 800546c:	46bd      	mov	sp, r7
 800546e:	bd80      	pop	{r7, pc}
 8005470:	20014394 	.word	0x20014394

08005474 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8005474:	b580      	push	{r7, lr}
 8005476:	b082      	sub	sp, #8
 8005478:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800547a:	f3ef 8311 	mrs	r3, BASEPRI
 800547e:	f04f 0120 	mov.w	r1, #32
 8005482:	f381 8811 	msr	BASEPRI, r1
 8005486:	607b      	str	r3, [r7, #4]
 8005488:	4807      	ldr	r0, [pc, #28]	@ (80054a8 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 800548a:	f7fe fe50 	bl	800412e <_PreparePacket>
 800548e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8005490:	2212      	movs	r2, #18
 8005492:	6839      	ldr	r1, [r7, #0]
 8005494:	6838      	ldr	r0, [r7, #0]
 8005496:	f7fe ff3b 	bl	8004310 <_SendPacket>
  RECORD_END();
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	f383 8811 	msr	BASEPRI, r3
}
 80054a0:	bf00      	nop
 80054a2:	3708      	adds	r7, #8
 80054a4:	46bd      	mov	sp, r7
 80054a6:	bd80      	pop	{r7, pc}
 80054a8:	20014394 	.word	0x20014394

080054ac <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b082      	sub	sp, #8
 80054b0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80054b2:	f3ef 8311 	mrs	r3, BASEPRI
 80054b6:	f04f 0120 	mov.w	r1, #32
 80054ba:	f381 8811 	msr	BASEPRI, r1
 80054be:	607b      	str	r3, [r7, #4]
 80054c0:	4807      	ldr	r0, [pc, #28]	@ (80054e0 <SEGGER_SYSVIEW_OnIdle+0x34>)
 80054c2:	f7fe fe34 	bl	800412e <_PreparePacket>
 80054c6:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 80054c8:	2211      	movs	r2, #17
 80054ca:	6839      	ldr	r1, [r7, #0]
 80054cc:	6838      	ldr	r0, [r7, #0]
 80054ce:	f7fe ff1f 	bl	8004310 <_SendPacket>
  RECORD_END();
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	f383 8811 	msr	BASEPRI, r3
}
 80054d8:	bf00      	nop
 80054da:	3708      	adds	r7, #8
 80054dc:	46bd      	mov	sp, r7
 80054de:	bd80      	pop	{r7, pc}
 80054e0:	20014394 	.word	0x20014394

080054e4 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b088      	sub	sp, #32
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80054ec:	f3ef 8311 	mrs	r3, BASEPRI
 80054f0:	f04f 0120 	mov.w	r1, #32
 80054f4:	f381 8811 	msr	BASEPRI, r1
 80054f8:	617b      	str	r3, [r7, #20]
 80054fa:	4819      	ldr	r0, [pc, #100]	@ (8005560 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 80054fc:	f7fe fe17 	bl	800412e <_PreparePacket>
 8005500:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005502:	693b      	ldr	r3, [r7, #16]
 8005504:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005506:	4b17      	ldr	r3, [pc, #92]	@ (8005564 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8005508:	691b      	ldr	r3, [r3, #16]
 800550a:	687a      	ldr	r2, [r7, #4]
 800550c:	1ad3      	subs	r3, r2, r3
 800550e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	61fb      	str	r3, [r7, #28]
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	61bb      	str	r3, [r7, #24]
 8005518:	e00b      	b.n	8005532 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 800551a:	69bb      	ldr	r3, [r7, #24]
 800551c:	b2da      	uxtb	r2, r3
 800551e:	69fb      	ldr	r3, [r7, #28]
 8005520:	1c59      	adds	r1, r3, #1
 8005522:	61f9      	str	r1, [r7, #28]
 8005524:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005528:	b2d2      	uxtb	r2, r2
 800552a:	701a      	strb	r2, [r3, #0]
 800552c:	69bb      	ldr	r3, [r7, #24]
 800552e:	09db      	lsrs	r3, r3, #7
 8005530:	61bb      	str	r3, [r7, #24]
 8005532:	69bb      	ldr	r3, [r7, #24]
 8005534:	2b7f      	cmp	r3, #127	@ 0x7f
 8005536:	d8f0      	bhi.n	800551a <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8005538:	69fb      	ldr	r3, [r7, #28]
 800553a:	1c5a      	adds	r2, r3, #1
 800553c:	61fa      	str	r2, [r7, #28]
 800553e:	69ba      	ldr	r2, [r7, #24]
 8005540:	b2d2      	uxtb	r2, r2
 8005542:	701a      	strb	r2, [r3, #0]
 8005544:	69fb      	ldr	r3, [r7, #28]
 8005546:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8005548:	2208      	movs	r2, #8
 800554a:	68f9      	ldr	r1, [r7, #12]
 800554c:	6938      	ldr	r0, [r7, #16]
 800554e:	f7fe fedf 	bl	8004310 <_SendPacket>
  RECORD_END();
 8005552:	697b      	ldr	r3, [r7, #20]
 8005554:	f383 8811 	msr	BASEPRI, r3
}
 8005558:	bf00      	nop
 800555a:	3720      	adds	r7, #32
 800555c:	46bd      	mov	sp, r7
 800555e:	bd80      	pop	{r7, pc}
 8005560:	20014394 	.word	0x20014394
 8005564:	20014364 	.word	0x20014364

08005568 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8005568:	b580      	push	{r7, lr}
 800556a:	b088      	sub	sp, #32
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005570:	f3ef 8311 	mrs	r3, BASEPRI
 8005574:	f04f 0120 	mov.w	r1, #32
 8005578:	f381 8811 	msr	BASEPRI, r1
 800557c:	617b      	str	r3, [r7, #20]
 800557e:	4819      	ldr	r0, [pc, #100]	@ (80055e4 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8005580:	f7fe fdd5 	bl	800412e <_PreparePacket>
 8005584:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005586:	693b      	ldr	r3, [r7, #16]
 8005588:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800558a:	4b17      	ldr	r3, [pc, #92]	@ (80055e8 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 800558c:	691b      	ldr	r3, [r3, #16]
 800558e:	687a      	ldr	r2, [r7, #4]
 8005590:	1ad3      	subs	r3, r2, r3
 8005592:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	61fb      	str	r3, [r7, #28]
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	61bb      	str	r3, [r7, #24]
 800559c:	e00b      	b.n	80055b6 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 800559e:	69bb      	ldr	r3, [r7, #24]
 80055a0:	b2da      	uxtb	r2, r3
 80055a2:	69fb      	ldr	r3, [r7, #28]
 80055a4:	1c59      	adds	r1, r3, #1
 80055a6:	61f9      	str	r1, [r7, #28]
 80055a8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80055ac:	b2d2      	uxtb	r2, r2
 80055ae:	701a      	strb	r2, [r3, #0]
 80055b0:	69bb      	ldr	r3, [r7, #24]
 80055b2:	09db      	lsrs	r3, r3, #7
 80055b4:	61bb      	str	r3, [r7, #24]
 80055b6:	69bb      	ldr	r3, [r7, #24]
 80055b8:	2b7f      	cmp	r3, #127	@ 0x7f
 80055ba:	d8f0      	bhi.n	800559e <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 80055bc:	69fb      	ldr	r3, [r7, #28]
 80055be:	1c5a      	adds	r2, r3, #1
 80055c0:	61fa      	str	r2, [r7, #28]
 80055c2:	69ba      	ldr	r2, [r7, #24]
 80055c4:	b2d2      	uxtb	r2, r2
 80055c6:	701a      	strb	r2, [r3, #0]
 80055c8:	69fb      	ldr	r3, [r7, #28]
 80055ca:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 80055cc:	2204      	movs	r2, #4
 80055ce:	68f9      	ldr	r1, [r7, #12]
 80055d0:	6938      	ldr	r0, [r7, #16]
 80055d2:	f7fe fe9d 	bl	8004310 <_SendPacket>
  RECORD_END();
 80055d6:	697b      	ldr	r3, [r7, #20]
 80055d8:	f383 8811 	msr	BASEPRI, r3
}
 80055dc:	bf00      	nop
 80055de:	3720      	adds	r7, #32
 80055e0:	46bd      	mov	sp, r7
 80055e2:	bd80      	pop	{r7, pc}
 80055e4:	20014394 	.word	0x20014394
 80055e8:	20014364 	.word	0x20014364

080055ec <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b088      	sub	sp, #32
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80055f4:	f3ef 8311 	mrs	r3, BASEPRI
 80055f8:	f04f 0120 	mov.w	r1, #32
 80055fc:	f381 8811 	msr	BASEPRI, r1
 8005600:	617b      	str	r3, [r7, #20]
 8005602:	4819      	ldr	r0, [pc, #100]	@ (8005668 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8005604:	f7fe fd93 	bl	800412e <_PreparePacket>
 8005608:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800560a:	693b      	ldr	r3, [r7, #16]
 800560c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800560e:	4b17      	ldr	r3, [pc, #92]	@ (800566c <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8005610:	691b      	ldr	r3, [r3, #16]
 8005612:	687a      	ldr	r2, [r7, #4]
 8005614:	1ad3      	subs	r3, r2, r3
 8005616:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	61fb      	str	r3, [r7, #28]
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	61bb      	str	r3, [r7, #24]
 8005620:	e00b      	b.n	800563a <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8005622:	69bb      	ldr	r3, [r7, #24]
 8005624:	b2da      	uxtb	r2, r3
 8005626:	69fb      	ldr	r3, [r7, #28]
 8005628:	1c59      	adds	r1, r3, #1
 800562a:	61f9      	str	r1, [r7, #28]
 800562c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005630:	b2d2      	uxtb	r2, r2
 8005632:	701a      	strb	r2, [r3, #0]
 8005634:	69bb      	ldr	r3, [r7, #24]
 8005636:	09db      	lsrs	r3, r3, #7
 8005638:	61bb      	str	r3, [r7, #24]
 800563a:	69bb      	ldr	r3, [r7, #24]
 800563c:	2b7f      	cmp	r3, #127	@ 0x7f
 800563e:	d8f0      	bhi.n	8005622 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8005640:	69fb      	ldr	r3, [r7, #28]
 8005642:	1c5a      	adds	r2, r3, #1
 8005644:	61fa      	str	r2, [r7, #28]
 8005646:	69ba      	ldr	r2, [r7, #24]
 8005648:	b2d2      	uxtb	r2, r2
 800564a:	701a      	strb	r2, [r3, #0]
 800564c:	69fb      	ldr	r3, [r7, #28]
 800564e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8005650:	2206      	movs	r2, #6
 8005652:	68f9      	ldr	r1, [r7, #12]
 8005654:	6938      	ldr	r0, [r7, #16]
 8005656:	f7fe fe5b 	bl	8004310 <_SendPacket>
  RECORD_END();
 800565a:	697b      	ldr	r3, [r7, #20]
 800565c:	f383 8811 	msr	BASEPRI, r3
}
 8005660:	bf00      	nop
 8005662:	3720      	adds	r7, #32
 8005664:	46bd      	mov	sp, r7
 8005666:	bd80      	pop	{r7, pc}
 8005668:	20014394 	.word	0x20014394
 800566c:	20014364 	.word	0x20014364

08005670 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8005670:	b580      	push	{r7, lr}
 8005672:	b08c      	sub	sp, #48	@ 0x30
 8005674:	af00      	add	r7, sp, #0
 8005676:	4603      	mov	r3, r0
 8005678:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800567a:	4b3b      	ldr	r3, [pc, #236]	@ (8005768 <SEGGER_SYSVIEW_SendModule+0xf8>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d06d      	beq.n	800575e <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8005682:	4b39      	ldr	r3, [pc, #228]	@ (8005768 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (n = 0; n < ModuleId; n++) {
 8005688:	2300      	movs	r3, #0
 800568a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800568c:	e008      	b.n	80056a0 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800568e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005690:	691b      	ldr	r3, [r3, #16]
 8005692:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (pModule == 0) {
 8005694:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005696:	2b00      	cmp	r3, #0
 8005698:	d007      	beq.n	80056aa <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800569a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800569c:	3301      	adds	r3, #1
 800569e:	62bb      	str	r3, [r7, #40]	@ 0x28
 80056a0:	79fb      	ldrb	r3, [r7, #7]
 80056a2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80056a4:	429a      	cmp	r2, r3
 80056a6:	d3f2      	bcc.n	800568e <SEGGER_SYSVIEW_SendModule+0x1e>
 80056a8:	e000      	b.n	80056ac <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 80056aa:	bf00      	nop
      }
    }
    if (pModule != 0) {
 80056ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d055      	beq.n	800575e <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80056b2:	f3ef 8311 	mrs	r3, BASEPRI
 80056b6:	f04f 0120 	mov.w	r1, #32
 80056ba:	f381 8811 	msr	BASEPRI, r1
 80056be:	617b      	str	r3, [r7, #20]
 80056c0:	482a      	ldr	r0, [pc, #168]	@ (800576c <SEGGER_SYSVIEW_SendModule+0xfc>)
 80056c2:	f7fe fd34 	bl	800412e <_PreparePacket>
 80056c6:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 80056c8:	693b      	ldr	r3, [r7, #16]
 80056ca:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80056d0:	79fb      	ldrb	r3, [r7, #7]
 80056d2:	623b      	str	r3, [r7, #32]
 80056d4:	e00b      	b.n	80056ee <SEGGER_SYSVIEW_SendModule+0x7e>
 80056d6:	6a3b      	ldr	r3, [r7, #32]
 80056d8:	b2da      	uxtb	r2, r3
 80056da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056dc:	1c59      	adds	r1, r3, #1
 80056de:	6279      	str	r1, [r7, #36]	@ 0x24
 80056e0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80056e4:	b2d2      	uxtb	r2, r2
 80056e6:	701a      	strb	r2, [r3, #0]
 80056e8:	6a3b      	ldr	r3, [r7, #32]
 80056ea:	09db      	lsrs	r3, r3, #7
 80056ec:	623b      	str	r3, [r7, #32]
 80056ee:	6a3b      	ldr	r3, [r7, #32]
 80056f0:	2b7f      	cmp	r3, #127	@ 0x7f
 80056f2:	d8f0      	bhi.n	80056d6 <SEGGER_SYSVIEW_SendModule+0x66>
 80056f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056f6:	1c5a      	adds	r2, r3, #1
 80056f8:	627a      	str	r2, [r7, #36]	@ 0x24
 80056fa:	6a3a      	ldr	r2, [r7, #32]
 80056fc:	b2d2      	uxtb	r2, r2
 80056fe:	701a      	strb	r2, [r3, #0]
 8005700:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005702:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	61fb      	str	r3, [r7, #28]
 8005708:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800570a:	689b      	ldr	r3, [r3, #8]
 800570c:	61bb      	str	r3, [r7, #24]
 800570e:	e00b      	b.n	8005728 <SEGGER_SYSVIEW_SendModule+0xb8>
 8005710:	69bb      	ldr	r3, [r7, #24]
 8005712:	b2da      	uxtb	r2, r3
 8005714:	69fb      	ldr	r3, [r7, #28]
 8005716:	1c59      	adds	r1, r3, #1
 8005718:	61f9      	str	r1, [r7, #28]
 800571a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800571e:	b2d2      	uxtb	r2, r2
 8005720:	701a      	strb	r2, [r3, #0]
 8005722:	69bb      	ldr	r3, [r7, #24]
 8005724:	09db      	lsrs	r3, r3, #7
 8005726:	61bb      	str	r3, [r7, #24]
 8005728:	69bb      	ldr	r3, [r7, #24]
 800572a:	2b7f      	cmp	r3, #127	@ 0x7f
 800572c:	d8f0      	bhi.n	8005710 <SEGGER_SYSVIEW_SendModule+0xa0>
 800572e:	69fb      	ldr	r3, [r7, #28]
 8005730:	1c5a      	adds	r2, r3, #1
 8005732:	61fa      	str	r2, [r7, #28]
 8005734:	69ba      	ldr	r2, [r7, #24]
 8005736:	b2d2      	uxtb	r2, r2
 8005738:	701a      	strb	r2, [r3, #0]
 800573a:	69fb      	ldr	r3, [r7, #28]
 800573c:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800573e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	2280      	movs	r2, #128	@ 0x80
 8005744:	4619      	mov	r1, r3
 8005746:	68f8      	ldr	r0, [r7, #12]
 8005748:	f7fe fca4 	bl	8004094 <_EncodeStr>
 800574c:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800574e:	2216      	movs	r2, #22
 8005750:	68f9      	ldr	r1, [r7, #12]
 8005752:	6938      	ldr	r0, [r7, #16]
 8005754:	f7fe fddc 	bl	8004310 <_SendPacket>
      RECORD_END();
 8005758:	697b      	ldr	r3, [r7, #20]
 800575a:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 800575e:	bf00      	nop
 8005760:	3730      	adds	r7, #48	@ 0x30
 8005762:	46bd      	mov	sp, r7
 8005764:	bd80      	pop	{r7, pc}
 8005766:	bf00      	nop
 8005768:	2001438c 	.word	0x2001438c
 800576c:	20014394 	.word	0x20014394

08005770 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8005770:	b580      	push	{r7, lr}
 8005772:	b082      	sub	sp, #8
 8005774:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8005776:	4b0c      	ldr	r3, [pc, #48]	@ (80057a8 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d00f      	beq.n	800579e <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800577e:	4b0a      	ldr	r3, [pc, #40]	@ (80057a8 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	68db      	ldr	r3, [r3, #12]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d002      	beq.n	8005792 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	68db      	ldr	r3, [r3, #12]
 8005790:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	691b      	ldr	r3, [r3, #16]
 8005796:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d1f2      	bne.n	8005784 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800579e:	bf00      	nop
 80057a0:	3708      	adds	r7, #8
 80057a2:	46bd      	mov	sp, r7
 80057a4:	bd80      	pop	{r7, pc}
 80057a6:	bf00      	nop
 80057a8:	2001438c 	.word	0x2001438c

080057ac <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b086      	sub	sp, #24
 80057b0:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 80057b2:	f3ef 8311 	mrs	r3, BASEPRI
 80057b6:	f04f 0120 	mov.w	r1, #32
 80057ba:	f381 8811 	msr	BASEPRI, r1
 80057be:	60fb      	str	r3, [r7, #12]
 80057c0:	4817      	ldr	r0, [pc, #92]	@ (8005820 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 80057c2:	f7fe fcb4 	bl	800412e <_PreparePacket>
 80057c6:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	617b      	str	r3, [r7, #20]
 80057d0:	4b14      	ldr	r3, [pc, #80]	@ (8005824 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 80057d2:	781b      	ldrb	r3, [r3, #0]
 80057d4:	613b      	str	r3, [r7, #16]
 80057d6:	e00b      	b.n	80057f0 <SEGGER_SYSVIEW_SendNumModules+0x44>
 80057d8:	693b      	ldr	r3, [r7, #16]
 80057da:	b2da      	uxtb	r2, r3
 80057dc:	697b      	ldr	r3, [r7, #20]
 80057de:	1c59      	adds	r1, r3, #1
 80057e0:	6179      	str	r1, [r7, #20]
 80057e2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80057e6:	b2d2      	uxtb	r2, r2
 80057e8:	701a      	strb	r2, [r3, #0]
 80057ea:	693b      	ldr	r3, [r7, #16]
 80057ec:	09db      	lsrs	r3, r3, #7
 80057ee:	613b      	str	r3, [r7, #16]
 80057f0:	693b      	ldr	r3, [r7, #16]
 80057f2:	2b7f      	cmp	r3, #127	@ 0x7f
 80057f4:	d8f0      	bhi.n	80057d8 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 80057f6:	697b      	ldr	r3, [r7, #20]
 80057f8:	1c5a      	adds	r2, r3, #1
 80057fa:	617a      	str	r2, [r7, #20]
 80057fc:	693a      	ldr	r2, [r7, #16]
 80057fe:	b2d2      	uxtb	r2, r2
 8005800:	701a      	strb	r2, [r3, #0]
 8005802:	697b      	ldr	r3, [r7, #20]
 8005804:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8005806:	221b      	movs	r2, #27
 8005808:	6879      	ldr	r1, [r7, #4]
 800580a:	68b8      	ldr	r0, [r7, #8]
 800580c:	f7fe fd80 	bl	8004310 <_SendPacket>
  RECORD_END();
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	f383 8811 	msr	BASEPRI, r3
}
 8005816:	bf00      	nop
 8005818:	3718      	adds	r7, #24
 800581a:	46bd      	mov	sp, r7
 800581c:	bd80      	pop	{r7, pc}
 800581e:	bf00      	nop
 8005820:	20014394 	.word	0x20014394
 8005824:	20014390 	.word	0x20014390

08005828 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 8005828:	b40f      	push	{r0, r1, r2, r3}
 800582a:	b580      	push	{r7, lr}
 800582c:	b082      	sub	sp, #8
 800582e:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 8005830:	f107 0314 	add.w	r3, r7, #20
 8005834:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 8005836:	1d3b      	adds	r3, r7, #4
 8005838:	461a      	mov	r2, r3
 800583a:	2100      	movs	r1, #0
 800583c:	6938      	ldr	r0, [r7, #16]
 800583e:	f7fe fff1 	bl	8004824 <_VPrintTarget>
  va_end(ParamList);
}
 8005842:	bf00      	nop
 8005844:	3708      	adds	r7, #8
 8005846:	46bd      	mov	sp, r7
 8005848:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800584c:	b004      	add	sp, #16
 800584e:	4770      	bx	lr

08005850 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8005850:	b580      	push	{r7, lr}
 8005852:	b08a      	sub	sp, #40	@ 0x28
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005858:	f3ef 8311 	mrs	r3, BASEPRI
 800585c:	f04f 0120 	mov.w	r1, #32
 8005860:	f381 8811 	msr	BASEPRI, r1
 8005864:	617b      	str	r3, [r7, #20]
 8005866:	4827      	ldr	r0, [pc, #156]	@ (8005904 <SEGGER_SYSVIEW_Warn+0xb4>)
 8005868:	f7fe fc61 	bl	800412e <_PreparePacket>
 800586c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800586e:	2280      	movs	r2, #128	@ 0x80
 8005870:	6879      	ldr	r1, [r7, #4]
 8005872:	6938      	ldr	r0, [r7, #16]
 8005874:	f7fe fc0e 	bl	8004094 <_EncodeStr>
 8005878:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	627b      	str	r3, [r7, #36]	@ 0x24
 800587e:	2301      	movs	r3, #1
 8005880:	623b      	str	r3, [r7, #32]
 8005882:	e00b      	b.n	800589c <SEGGER_SYSVIEW_Warn+0x4c>
 8005884:	6a3b      	ldr	r3, [r7, #32]
 8005886:	b2da      	uxtb	r2, r3
 8005888:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800588a:	1c59      	adds	r1, r3, #1
 800588c:	6279      	str	r1, [r7, #36]	@ 0x24
 800588e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005892:	b2d2      	uxtb	r2, r2
 8005894:	701a      	strb	r2, [r3, #0]
 8005896:	6a3b      	ldr	r3, [r7, #32]
 8005898:	09db      	lsrs	r3, r3, #7
 800589a:	623b      	str	r3, [r7, #32]
 800589c:	6a3b      	ldr	r3, [r7, #32]
 800589e:	2b7f      	cmp	r3, #127	@ 0x7f
 80058a0:	d8f0      	bhi.n	8005884 <SEGGER_SYSVIEW_Warn+0x34>
 80058a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058a4:	1c5a      	adds	r2, r3, #1
 80058a6:	627a      	str	r2, [r7, #36]	@ 0x24
 80058a8:	6a3a      	ldr	r2, [r7, #32]
 80058aa:	b2d2      	uxtb	r2, r2
 80058ac:	701a      	strb	r2, [r3, #0]
 80058ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058b0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	61fb      	str	r3, [r7, #28]
 80058b6:	2300      	movs	r3, #0
 80058b8:	61bb      	str	r3, [r7, #24]
 80058ba:	e00b      	b.n	80058d4 <SEGGER_SYSVIEW_Warn+0x84>
 80058bc:	69bb      	ldr	r3, [r7, #24]
 80058be:	b2da      	uxtb	r2, r3
 80058c0:	69fb      	ldr	r3, [r7, #28]
 80058c2:	1c59      	adds	r1, r3, #1
 80058c4:	61f9      	str	r1, [r7, #28]
 80058c6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80058ca:	b2d2      	uxtb	r2, r2
 80058cc:	701a      	strb	r2, [r3, #0]
 80058ce:	69bb      	ldr	r3, [r7, #24]
 80058d0:	09db      	lsrs	r3, r3, #7
 80058d2:	61bb      	str	r3, [r7, #24]
 80058d4:	69bb      	ldr	r3, [r7, #24]
 80058d6:	2b7f      	cmp	r3, #127	@ 0x7f
 80058d8:	d8f0      	bhi.n	80058bc <SEGGER_SYSVIEW_Warn+0x6c>
 80058da:	69fb      	ldr	r3, [r7, #28]
 80058dc:	1c5a      	adds	r2, r3, #1
 80058de:	61fa      	str	r2, [r7, #28]
 80058e0:	69ba      	ldr	r2, [r7, #24]
 80058e2:	b2d2      	uxtb	r2, r2
 80058e4:	701a      	strb	r2, [r3, #0]
 80058e6:	69fb      	ldr	r3, [r7, #28]
 80058e8:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80058ea:	221a      	movs	r2, #26
 80058ec:	68f9      	ldr	r1, [r7, #12]
 80058ee:	6938      	ldr	r0, [r7, #16]
 80058f0:	f7fe fd0e 	bl	8004310 <_SendPacket>
  RECORD_END();
 80058f4:	697b      	ldr	r3, [r7, #20]
 80058f6:	f383 8811 	msr	BASEPRI, r3
}
 80058fa:	bf00      	nop
 80058fc:	3728      	adds	r7, #40	@ 0x28
 80058fe:	46bd      	mov	sp, r7
 8005900:	bd80      	pop	{r7, pc}
 8005902:	bf00      	nop
 8005904:	20014394 	.word	0x20014394

08005908 <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 8005908:	b580      	push	{r7, lr}
 800590a:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800590c:	4b13      	ldr	r3, [pc, #76]	@ (800595c <SEGGER_SYSVIEW_IsStarted+0x54>)
 800590e:	7e1b      	ldrb	r3, [r3, #24]
 8005910:	4619      	mov	r1, r3
 8005912:	4a13      	ldr	r2, [pc, #76]	@ (8005960 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8005914:	460b      	mov	r3, r1
 8005916:	005b      	lsls	r3, r3, #1
 8005918:	440b      	add	r3, r1
 800591a:	00db      	lsls	r3, r3, #3
 800591c:	4413      	add	r3, r2
 800591e:	336c      	adds	r3, #108	@ 0x6c
 8005920:	681a      	ldr	r2, [r3, #0]
 8005922:	4b0e      	ldr	r3, [pc, #56]	@ (800595c <SEGGER_SYSVIEW_IsStarted+0x54>)
 8005924:	7e1b      	ldrb	r3, [r3, #24]
 8005926:	4618      	mov	r0, r3
 8005928:	490d      	ldr	r1, [pc, #52]	@ (8005960 <SEGGER_SYSVIEW_IsStarted+0x58>)
 800592a:	4603      	mov	r3, r0
 800592c:	005b      	lsls	r3, r3, #1
 800592e:	4403      	add	r3, r0
 8005930:	00db      	lsls	r3, r3, #3
 8005932:	440b      	add	r3, r1
 8005934:	3370      	adds	r3, #112	@ 0x70
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	429a      	cmp	r2, r3
 800593a:	d00b      	beq.n	8005954 <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800593c:	4b07      	ldr	r3, [pc, #28]	@ (800595c <SEGGER_SYSVIEW_IsStarted+0x54>)
 800593e:	789b      	ldrb	r3, [r3, #2]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d107      	bne.n	8005954 <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8005944:	4b05      	ldr	r3, [pc, #20]	@ (800595c <SEGGER_SYSVIEW_IsStarted+0x54>)
 8005946:	2201      	movs	r2, #1
 8005948:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 800594a:	f7fe fbfd 	bl	8004148 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 800594e:	4b03      	ldr	r3, [pc, #12]	@ (800595c <SEGGER_SYSVIEW_IsStarted+0x54>)
 8005950:	2200      	movs	r2, #0
 8005952:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 8005954:	4b01      	ldr	r3, [pc, #4]	@ (800595c <SEGGER_SYSVIEW_IsStarted+0x54>)
 8005956:	781b      	ldrb	r3, [r3, #0]
}
 8005958:	4618      	mov	r0, r3
 800595a:	bd80      	pop	{r7, pc}
 800595c:	20014364 	.word	0x20014364
 8005960:	20012ea4 	.word	0x20012ea4

08005964 <sniprintf>:
 8005964:	b40c      	push	{r2, r3}
 8005966:	b530      	push	{r4, r5, lr}
 8005968:	4b17      	ldr	r3, [pc, #92]	@ (80059c8 <sniprintf+0x64>)
 800596a:	1e0c      	subs	r4, r1, #0
 800596c:	681d      	ldr	r5, [r3, #0]
 800596e:	b09d      	sub	sp, #116	@ 0x74
 8005970:	da08      	bge.n	8005984 <sniprintf+0x20>
 8005972:	238b      	movs	r3, #139	@ 0x8b
 8005974:	602b      	str	r3, [r5, #0]
 8005976:	f04f 30ff 	mov.w	r0, #4294967295
 800597a:	b01d      	add	sp, #116	@ 0x74
 800597c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005980:	b002      	add	sp, #8
 8005982:	4770      	bx	lr
 8005984:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8005988:	f8ad 3014 	strh.w	r3, [sp, #20]
 800598c:	bf14      	ite	ne
 800598e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005992:	4623      	moveq	r3, r4
 8005994:	9304      	str	r3, [sp, #16]
 8005996:	9307      	str	r3, [sp, #28]
 8005998:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800599c:	9002      	str	r0, [sp, #8]
 800599e:	9006      	str	r0, [sp, #24]
 80059a0:	f8ad 3016 	strh.w	r3, [sp, #22]
 80059a4:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80059a6:	ab21      	add	r3, sp, #132	@ 0x84
 80059a8:	a902      	add	r1, sp, #8
 80059aa:	4628      	mov	r0, r5
 80059ac:	9301      	str	r3, [sp, #4]
 80059ae:	f000 f9ad 	bl	8005d0c <_svfiprintf_r>
 80059b2:	1c43      	adds	r3, r0, #1
 80059b4:	bfbc      	itt	lt
 80059b6:	238b      	movlt	r3, #139	@ 0x8b
 80059b8:	602b      	strlt	r3, [r5, #0]
 80059ba:	2c00      	cmp	r4, #0
 80059bc:	d0dd      	beq.n	800597a <sniprintf+0x16>
 80059be:	9b02      	ldr	r3, [sp, #8]
 80059c0:	2200      	movs	r2, #0
 80059c2:	701a      	strb	r2, [r3, #0]
 80059c4:	e7d9      	b.n	800597a <sniprintf+0x16>
 80059c6:	bf00      	nop
 80059c8:	2000001c 	.word	0x2000001c

080059cc <memcmp>:
 80059cc:	b510      	push	{r4, lr}
 80059ce:	3901      	subs	r1, #1
 80059d0:	4402      	add	r2, r0
 80059d2:	4290      	cmp	r0, r2
 80059d4:	d101      	bne.n	80059da <memcmp+0xe>
 80059d6:	2000      	movs	r0, #0
 80059d8:	e005      	b.n	80059e6 <memcmp+0x1a>
 80059da:	7803      	ldrb	r3, [r0, #0]
 80059dc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80059e0:	42a3      	cmp	r3, r4
 80059e2:	d001      	beq.n	80059e8 <memcmp+0x1c>
 80059e4:	1b18      	subs	r0, r3, r4
 80059e6:	bd10      	pop	{r4, pc}
 80059e8:	3001      	adds	r0, #1
 80059ea:	e7f2      	b.n	80059d2 <memcmp+0x6>

080059ec <memset>:
 80059ec:	4402      	add	r2, r0
 80059ee:	4603      	mov	r3, r0
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d100      	bne.n	80059f6 <memset+0xa>
 80059f4:	4770      	bx	lr
 80059f6:	f803 1b01 	strb.w	r1, [r3], #1
 80059fa:	e7f9      	b.n	80059f0 <memset+0x4>

080059fc <__libc_init_array>:
 80059fc:	b570      	push	{r4, r5, r6, lr}
 80059fe:	4d0d      	ldr	r5, [pc, #52]	@ (8005a34 <__libc_init_array+0x38>)
 8005a00:	4c0d      	ldr	r4, [pc, #52]	@ (8005a38 <__libc_init_array+0x3c>)
 8005a02:	1b64      	subs	r4, r4, r5
 8005a04:	10a4      	asrs	r4, r4, #2
 8005a06:	2600      	movs	r6, #0
 8005a08:	42a6      	cmp	r6, r4
 8005a0a:	d109      	bne.n	8005a20 <__libc_init_array+0x24>
 8005a0c:	4d0b      	ldr	r5, [pc, #44]	@ (8005a3c <__libc_init_array+0x40>)
 8005a0e:	4c0c      	ldr	r4, [pc, #48]	@ (8005a40 <__libc_init_array+0x44>)
 8005a10:	f000 fc74 	bl	80062fc <_init>
 8005a14:	1b64      	subs	r4, r4, r5
 8005a16:	10a4      	asrs	r4, r4, #2
 8005a18:	2600      	movs	r6, #0
 8005a1a:	42a6      	cmp	r6, r4
 8005a1c:	d105      	bne.n	8005a2a <__libc_init_array+0x2e>
 8005a1e:	bd70      	pop	{r4, r5, r6, pc}
 8005a20:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a24:	4798      	blx	r3
 8005a26:	3601      	adds	r6, #1
 8005a28:	e7ee      	b.n	8005a08 <__libc_init_array+0xc>
 8005a2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a2e:	4798      	blx	r3
 8005a30:	3601      	adds	r6, #1
 8005a32:	e7f2      	b.n	8005a1a <__libc_init_array+0x1e>
 8005a34:	080064a8 	.word	0x080064a8
 8005a38:	080064a8 	.word	0x080064a8
 8005a3c:	080064a8 	.word	0x080064a8
 8005a40:	080064ac 	.word	0x080064ac

08005a44 <__retarget_lock_acquire_recursive>:
 8005a44:	4770      	bx	lr

08005a46 <__retarget_lock_release_recursive>:
 8005a46:	4770      	bx	lr

08005a48 <memcpy>:
 8005a48:	440a      	add	r2, r1
 8005a4a:	4291      	cmp	r1, r2
 8005a4c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005a50:	d100      	bne.n	8005a54 <memcpy+0xc>
 8005a52:	4770      	bx	lr
 8005a54:	b510      	push	{r4, lr}
 8005a56:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005a5a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005a5e:	4291      	cmp	r1, r2
 8005a60:	d1f9      	bne.n	8005a56 <memcpy+0xe>
 8005a62:	bd10      	pop	{r4, pc}

08005a64 <_free_r>:
 8005a64:	b538      	push	{r3, r4, r5, lr}
 8005a66:	4605      	mov	r5, r0
 8005a68:	2900      	cmp	r1, #0
 8005a6a:	d041      	beq.n	8005af0 <_free_r+0x8c>
 8005a6c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a70:	1f0c      	subs	r4, r1, #4
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	bfb8      	it	lt
 8005a76:	18e4      	addlt	r4, r4, r3
 8005a78:	f000 f8e0 	bl	8005c3c <__malloc_lock>
 8005a7c:	4a1d      	ldr	r2, [pc, #116]	@ (8005af4 <_free_r+0x90>)
 8005a7e:	6813      	ldr	r3, [r2, #0]
 8005a80:	b933      	cbnz	r3, 8005a90 <_free_r+0x2c>
 8005a82:	6063      	str	r3, [r4, #4]
 8005a84:	6014      	str	r4, [r2, #0]
 8005a86:	4628      	mov	r0, r5
 8005a88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005a8c:	f000 b8dc 	b.w	8005c48 <__malloc_unlock>
 8005a90:	42a3      	cmp	r3, r4
 8005a92:	d908      	bls.n	8005aa6 <_free_r+0x42>
 8005a94:	6820      	ldr	r0, [r4, #0]
 8005a96:	1821      	adds	r1, r4, r0
 8005a98:	428b      	cmp	r3, r1
 8005a9a:	bf01      	itttt	eq
 8005a9c:	6819      	ldreq	r1, [r3, #0]
 8005a9e:	685b      	ldreq	r3, [r3, #4]
 8005aa0:	1809      	addeq	r1, r1, r0
 8005aa2:	6021      	streq	r1, [r4, #0]
 8005aa4:	e7ed      	b.n	8005a82 <_free_r+0x1e>
 8005aa6:	461a      	mov	r2, r3
 8005aa8:	685b      	ldr	r3, [r3, #4]
 8005aaa:	b10b      	cbz	r3, 8005ab0 <_free_r+0x4c>
 8005aac:	42a3      	cmp	r3, r4
 8005aae:	d9fa      	bls.n	8005aa6 <_free_r+0x42>
 8005ab0:	6811      	ldr	r1, [r2, #0]
 8005ab2:	1850      	adds	r0, r2, r1
 8005ab4:	42a0      	cmp	r0, r4
 8005ab6:	d10b      	bne.n	8005ad0 <_free_r+0x6c>
 8005ab8:	6820      	ldr	r0, [r4, #0]
 8005aba:	4401      	add	r1, r0
 8005abc:	1850      	adds	r0, r2, r1
 8005abe:	4283      	cmp	r3, r0
 8005ac0:	6011      	str	r1, [r2, #0]
 8005ac2:	d1e0      	bne.n	8005a86 <_free_r+0x22>
 8005ac4:	6818      	ldr	r0, [r3, #0]
 8005ac6:	685b      	ldr	r3, [r3, #4]
 8005ac8:	6053      	str	r3, [r2, #4]
 8005aca:	4408      	add	r0, r1
 8005acc:	6010      	str	r0, [r2, #0]
 8005ace:	e7da      	b.n	8005a86 <_free_r+0x22>
 8005ad0:	d902      	bls.n	8005ad8 <_free_r+0x74>
 8005ad2:	230c      	movs	r3, #12
 8005ad4:	602b      	str	r3, [r5, #0]
 8005ad6:	e7d6      	b.n	8005a86 <_free_r+0x22>
 8005ad8:	6820      	ldr	r0, [r4, #0]
 8005ada:	1821      	adds	r1, r4, r0
 8005adc:	428b      	cmp	r3, r1
 8005ade:	bf04      	itt	eq
 8005ae0:	6819      	ldreq	r1, [r3, #0]
 8005ae2:	685b      	ldreq	r3, [r3, #4]
 8005ae4:	6063      	str	r3, [r4, #4]
 8005ae6:	bf04      	itt	eq
 8005ae8:	1809      	addeq	r1, r1, r0
 8005aea:	6021      	streq	r1, [r4, #0]
 8005aec:	6054      	str	r4, [r2, #4]
 8005aee:	e7ca      	b.n	8005a86 <_free_r+0x22>
 8005af0:	bd38      	pop	{r3, r4, r5, pc}
 8005af2:	bf00      	nop
 8005af4:	200145bc 	.word	0x200145bc

08005af8 <sbrk_aligned>:
 8005af8:	b570      	push	{r4, r5, r6, lr}
 8005afa:	4e0f      	ldr	r6, [pc, #60]	@ (8005b38 <sbrk_aligned+0x40>)
 8005afc:	460c      	mov	r4, r1
 8005afe:	6831      	ldr	r1, [r6, #0]
 8005b00:	4605      	mov	r5, r0
 8005b02:	b911      	cbnz	r1, 8005b0a <sbrk_aligned+0x12>
 8005b04:	f000 fba6 	bl	8006254 <_sbrk_r>
 8005b08:	6030      	str	r0, [r6, #0]
 8005b0a:	4621      	mov	r1, r4
 8005b0c:	4628      	mov	r0, r5
 8005b0e:	f000 fba1 	bl	8006254 <_sbrk_r>
 8005b12:	1c43      	adds	r3, r0, #1
 8005b14:	d103      	bne.n	8005b1e <sbrk_aligned+0x26>
 8005b16:	f04f 34ff 	mov.w	r4, #4294967295
 8005b1a:	4620      	mov	r0, r4
 8005b1c:	bd70      	pop	{r4, r5, r6, pc}
 8005b1e:	1cc4      	adds	r4, r0, #3
 8005b20:	f024 0403 	bic.w	r4, r4, #3
 8005b24:	42a0      	cmp	r0, r4
 8005b26:	d0f8      	beq.n	8005b1a <sbrk_aligned+0x22>
 8005b28:	1a21      	subs	r1, r4, r0
 8005b2a:	4628      	mov	r0, r5
 8005b2c:	f000 fb92 	bl	8006254 <_sbrk_r>
 8005b30:	3001      	adds	r0, #1
 8005b32:	d1f2      	bne.n	8005b1a <sbrk_aligned+0x22>
 8005b34:	e7ef      	b.n	8005b16 <sbrk_aligned+0x1e>
 8005b36:	bf00      	nop
 8005b38:	200145b8 	.word	0x200145b8

08005b3c <_malloc_r>:
 8005b3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b40:	1ccd      	adds	r5, r1, #3
 8005b42:	f025 0503 	bic.w	r5, r5, #3
 8005b46:	3508      	adds	r5, #8
 8005b48:	2d0c      	cmp	r5, #12
 8005b4a:	bf38      	it	cc
 8005b4c:	250c      	movcc	r5, #12
 8005b4e:	2d00      	cmp	r5, #0
 8005b50:	4606      	mov	r6, r0
 8005b52:	db01      	blt.n	8005b58 <_malloc_r+0x1c>
 8005b54:	42a9      	cmp	r1, r5
 8005b56:	d904      	bls.n	8005b62 <_malloc_r+0x26>
 8005b58:	230c      	movs	r3, #12
 8005b5a:	6033      	str	r3, [r6, #0]
 8005b5c:	2000      	movs	r0, #0
 8005b5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b62:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005c38 <_malloc_r+0xfc>
 8005b66:	f000 f869 	bl	8005c3c <__malloc_lock>
 8005b6a:	f8d8 3000 	ldr.w	r3, [r8]
 8005b6e:	461c      	mov	r4, r3
 8005b70:	bb44      	cbnz	r4, 8005bc4 <_malloc_r+0x88>
 8005b72:	4629      	mov	r1, r5
 8005b74:	4630      	mov	r0, r6
 8005b76:	f7ff ffbf 	bl	8005af8 <sbrk_aligned>
 8005b7a:	1c43      	adds	r3, r0, #1
 8005b7c:	4604      	mov	r4, r0
 8005b7e:	d158      	bne.n	8005c32 <_malloc_r+0xf6>
 8005b80:	f8d8 4000 	ldr.w	r4, [r8]
 8005b84:	4627      	mov	r7, r4
 8005b86:	2f00      	cmp	r7, #0
 8005b88:	d143      	bne.n	8005c12 <_malloc_r+0xd6>
 8005b8a:	2c00      	cmp	r4, #0
 8005b8c:	d04b      	beq.n	8005c26 <_malloc_r+0xea>
 8005b8e:	6823      	ldr	r3, [r4, #0]
 8005b90:	4639      	mov	r1, r7
 8005b92:	4630      	mov	r0, r6
 8005b94:	eb04 0903 	add.w	r9, r4, r3
 8005b98:	f000 fb5c 	bl	8006254 <_sbrk_r>
 8005b9c:	4581      	cmp	r9, r0
 8005b9e:	d142      	bne.n	8005c26 <_malloc_r+0xea>
 8005ba0:	6821      	ldr	r1, [r4, #0]
 8005ba2:	1a6d      	subs	r5, r5, r1
 8005ba4:	4629      	mov	r1, r5
 8005ba6:	4630      	mov	r0, r6
 8005ba8:	f7ff ffa6 	bl	8005af8 <sbrk_aligned>
 8005bac:	3001      	adds	r0, #1
 8005bae:	d03a      	beq.n	8005c26 <_malloc_r+0xea>
 8005bb0:	6823      	ldr	r3, [r4, #0]
 8005bb2:	442b      	add	r3, r5
 8005bb4:	6023      	str	r3, [r4, #0]
 8005bb6:	f8d8 3000 	ldr.w	r3, [r8]
 8005bba:	685a      	ldr	r2, [r3, #4]
 8005bbc:	bb62      	cbnz	r2, 8005c18 <_malloc_r+0xdc>
 8005bbe:	f8c8 7000 	str.w	r7, [r8]
 8005bc2:	e00f      	b.n	8005be4 <_malloc_r+0xa8>
 8005bc4:	6822      	ldr	r2, [r4, #0]
 8005bc6:	1b52      	subs	r2, r2, r5
 8005bc8:	d420      	bmi.n	8005c0c <_malloc_r+0xd0>
 8005bca:	2a0b      	cmp	r2, #11
 8005bcc:	d917      	bls.n	8005bfe <_malloc_r+0xc2>
 8005bce:	1961      	adds	r1, r4, r5
 8005bd0:	42a3      	cmp	r3, r4
 8005bd2:	6025      	str	r5, [r4, #0]
 8005bd4:	bf18      	it	ne
 8005bd6:	6059      	strne	r1, [r3, #4]
 8005bd8:	6863      	ldr	r3, [r4, #4]
 8005bda:	bf08      	it	eq
 8005bdc:	f8c8 1000 	streq.w	r1, [r8]
 8005be0:	5162      	str	r2, [r4, r5]
 8005be2:	604b      	str	r3, [r1, #4]
 8005be4:	4630      	mov	r0, r6
 8005be6:	f000 f82f 	bl	8005c48 <__malloc_unlock>
 8005bea:	f104 000b 	add.w	r0, r4, #11
 8005bee:	1d23      	adds	r3, r4, #4
 8005bf0:	f020 0007 	bic.w	r0, r0, #7
 8005bf4:	1ac2      	subs	r2, r0, r3
 8005bf6:	bf1c      	itt	ne
 8005bf8:	1a1b      	subne	r3, r3, r0
 8005bfa:	50a3      	strne	r3, [r4, r2]
 8005bfc:	e7af      	b.n	8005b5e <_malloc_r+0x22>
 8005bfe:	6862      	ldr	r2, [r4, #4]
 8005c00:	42a3      	cmp	r3, r4
 8005c02:	bf0c      	ite	eq
 8005c04:	f8c8 2000 	streq.w	r2, [r8]
 8005c08:	605a      	strne	r2, [r3, #4]
 8005c0a:	e7eb      	b.n	8005be4 <_malloc_r+0xa8>
 8005c0c:	4623      	mov	r3, r4
 8005c0e:	6864      	ldr	r4, [r4, #4]
 8005c10:	e7ae      	b.n	8005b70 <_malloc_r+0x34>
 8005c12:	463c      	mov	r4, r7
 8005c14:	687f      	ldr	r7, [r7, #4]
 8005c16:	e7b6      	b.n	8005b86 <_malloc_r+0x4a>
 8005c18:	461a      	mov	r2, r3
 8005c1a:	685b      	ldr	r3, [r3, #4]
 8005c1c:	42a3      	cmp	r3, r4
 8005c1e:	d1fb      	bne.n	8005c18 <_malloc_r+0xdc>
 8005c20:	2300      	movs	r3, #0
 8005c22:	6053      	str	r3, [r2, #4]
 8005c24:	e7de      	b.n	8005be4 <_malloc_r+0xa8>
 8005c26:	230c      	movs	r3, #12
 8005c28:	6033      	str	r3, [r6, #0]
 8005c2a:	4630      	mov	r0, r6
 8005c2c:	f000 f80c 	bl	8005c48 <__malloc_unlock>
 8005c30:	e794      	b.n	8005b5c <_malloc_r+0x20>
 8005c32:	6005      	str	r5, [r0, #0]
 8005c34:	e7d6      	b.n	8005be4 <_malloc_r+0xa8>
 8005c36:	bf00      	nop
 8005c38:	200145bc 	.word	0x200145bc

08005c3c <__malloc_lock>:
 8005c3c:	4801      	ldr	r0, [pc, #4]	@ (8005c44 <__malloc_lock+0x8>)
 8005c3e:	f7ff bf01 	b.w	8005a44 <__retarget_lock_acquire_recursive>
 8005c42:	bf00      	nop
 8005c44:	200145b4 	.word	0x200145b4

08005c48 <__malloc_unlock>:
 8005c48:	4801      	ldr	r0, [pc, #4]	@ (8005c50 <__malloc_unlock+0x8>)
 8005c4a:	f7ff befc 	b.w	8005a46 <__retarget_lock_release_recursive>
 8005c4e:	bf00      	nop
 8005c50:	200145b4 	.word	0x200145b4

08005c54 <__ssputs_r>:
 8005c54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c58:	688e      	ldr	r6, [r1, #8]
 8005c5a:	461f      	mov	r7, r3
 8005c5c:	42be      	cmp	r6, r7
 8005c5e:	680b      	ldr	r3, [r1, #0]
 8005c60:	4682      	mov	sl, r0
 8005c62:	460c      	mov	r4, r1
 8005c64:	4690      	mov	r8, r2
 8005c66:	d82d      	bhi.n	8005cc4 <__ssputs_r+0x70>
 8005c68:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005c6c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005c70:	d026      	beq.n	8005cc0 <__ssputs_r+0x6c>
 8005c72:	6965      	ldr	r5, [r4, #20]
 8005c74:	6909      	ldr	r1, [r1, #16]
 8005c76:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005c7a:	eba3 0901 	sub.w	r9, r3, r1
 8005c7e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005c82:	1c7b      	adds	r3, r7, #1
 8005c84:	444b      	add	r3, r9
 8005c86:	106d      	asrs	r5, r5, #1
 8005c88:	429d      	cmp	r5, r3
 8005c8a:	bf38      	it	cc
 8005c8c:	461d      	movcc	r5, r3
 8005c8e:	0553      	lsls	r3, r2, #21
 8005c90:	d527      	bpl.n	8005ce2 <__ssputs_r+0x8e>
 8005c92:	4629      	mov	r1, r5
 8005c94:	f7ff ff52 	bl	8005b3c <_malloc_r>
 8005c98:	4606      	mov	r6, r0
 8005c9a:	b360      	cbz	r0, 8005cf6 <__ssputs_r+0xa2>
 8005c9c:	6921      	ldr	r1, [r4, #16]
 8005c9e:	464a      	mov	r2, r9
 8005ca0:	f7ff fed2 	bl	8005a48 <memcpy>
 8005ca4:	89a3      	ldrh	r3, [r4, #12]
 8005ca6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005caa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005cae:	81a3      	strh	r3, [r4, #12]
 8005cb0:	6126      	str	r6, [r4, #16]
 8005cb2:	6165      	str	r5, [r4, #20]
 8005cb4:	444e      	add	r6, r9
 8005cb6:	eba5 0509 	sub.w	r5, r5, r9
 8005cba:	6026      	str	r6, [r4, #0]
 8005cbc:	60a5      	str	r5, [r4, #8]
 8005cbe:	463e      	mov	r6, r7
 8005cc0:	42be      	cmp	r6, r7
 8005cc2:	d900      	bls.n	8005cc6 <__ssputs_r+0x72>
 8005cc4:	463e      	mov	r6, r7
 8005cc6:	6820      	ldr	r0, [r4, #0]
 8005cc8:	4632      	mov	r2, r6
 8005cca:	4641      	mov	r1, r8
 8005ccc:	f000 faa8 	bl	8006220 <memmove>
 8005cd0:	68a3      	ldr	r3, [r4, #8]
 8005cd2:	1b9b      	subs	r3, r3, r6
 8005cd4:	60a3      	str	r3, [r4, #8]
 8005cd6:	6823      	ldr	r3, [r4, #0]
 8005cd8:	4433      	add	r3, r6
 8005cda:	6023      	str	r3, [r4, #0]
 8005cdc:	2000      	movs	r0, #0
 8005cde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ce2:	462a      	mov	r2, r5
 8005ce4:	f000 fac6 	bl	8006274 <_realloc_r>
 8005ce8:	4606      	mov	r6, r0
 8005cea:	2800      	cmp	r0, #0
 8005cec:	d1e0      	bne.n	8005cb0 <__ssputs_r+0x5c>
 8005cee:	6921      	ldr	r1, [r4, #16]
 8005cf0:	4650      	mov	r0, sl
 8005cf2:	f7ff feb7 	bl	8005a64 <_free_r>
 8005cf6:	230c      	movs	r3, #12
 8005cf8:	f8ca 3000 	str.w	r3, [sl]
 8005cfc:	89a3      	ldrh	r3, [r4, #12]
 8005cfe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005d02:	81a3      	strh	r3, [r4, #12]
 8005d04:	f04f 30ff 	mov.w	r0, #4294967295
 8005d08:	e7e9      	b.n	8005cde <__ssputs_r+0x8a>
	...

08005d0c <_svfiprintf_r>:
 8005d0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d10:	4698      	mov	r8, r3
 8005d12:	898b      	ldrh	r3, [r1, #12]
 8005d14:	061b      	lsls	r3, r3, #24
 8005d16:	b09d      	sub	sp, #116	@ 0x74
 8005d18:	4607      	mov	r7, r0
 8005d1a:	460d      	mov	r5, r1
 8005d1c:	4614      	mov	r4, r2
 8005d1e:	d510      	bpl.n	8005d42 <_svfiprintf_r+0x36>
 8005d20:	690b      	ldr	r3, [r1, #16]
 8005d22:	b973      	cbnz	r3, 8005d42 <_svfiprintf_r+0x36>
 8005d24:	2140      	movs	r1, #64	@ 0x40
 8005d26:	f7ff ff09 	bl	8005b3c <_malloc_r>
 8005d2a:	6028      	str	r0, [r5, #0]
 8005d2c:	6128      	str	r0, [r5, #16]
 8005d2e:	b930      	cbnz	r0, 8005d3e <_svfiprintf_r+0x32>
 8005d30:	230c      	movs	r3, #12
 8005d32:	603b      	str	r3, [r7, #0]
 8005d34:	f04f 30ff 	mov.w	r0, #4294967295
 8005d38:	b01d      	add	sp, #116	@ 0x74
 8005d3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d3e:	2340      	movs	r3, #64	@ 0x40
 8005d40:	616b      	str	r3, [r5, #20]
 8005d42:	2300      	movs	r3, #0
 8005d44:	9309      	str	r3, [sp, #36]	@ 0x24
 8005d46:	2320      	movs	r3, #32
 8005d48:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005d4c:	f8cd 800c 	str.w	r8, [sp, #12]
 8005d50:	2330      	movs	r3, #48	@ 0x30
 8005d52:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005ef0 <_svfiprintf_r+0x1e4>
 8005d56:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005d5a:	f04f 0901 	mov.w	r9, #1
 8005d5e:	4623      	mov	r3, r4
 8005d60:	469a      	mov	sl, r3
 8005d62:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005d66:	b10a      	cbz	r2, 8005d6c <_svfiprintf_r+0x60>
 8005d68:	2a25      	cmp	r2, #37	@ 0x25
 8005d6a:	d1f9      	bne.n	8005d60 <_svfiprintf_r+0x54>
 8005d6c:	ebba 0b04 	subs.w	fp, sl, r4
 8005d70:	d00b      	beq.n	8005d8a <_svfiprintf_r+0x7e>
 8005d72:	465b      	mov	r3, fp
 8005d74:	4622      	mov	r2, r4
 8005d76:	4629      	mov	r1, r5
 8005d78:	4638      	mov	r0, r7
 8005d7a:	f7ff ff6b 	bl	8005c54 <__ssputs_r>
 8005d7e:	3001      	adds	r0, #1
 8005d80:	f000 80a7 	beq.w	8005ed2 <_svfiprintf_r+0x1c6>
 8005d84:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005d86:	445a      	add	r2, fp
 8005d88:	9209      	str	r2, [sp, #36]	@ 0x24
 8005d8a:	f89a 3000 	ldrb.w	r3, [sl]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	f000 809f 	beq.w	8005ed2 <_svfiprintf_r+0x1c6>
 8005d94:	2300      	movs	r3, #0
 8005d96:	f04f 32ff 	mov.w	r2, #4294967295
 8005d9a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005d9e:	f10a 0a01 	add.w	sl, sl, #1
 8005da2:	9304      	str	r3, [sp, #16]
 8005da4:	9307      	str	r3, [sp, #28]
 8005da6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005daa:	931a      	str	r3, [sp, #104]	@ 0x68
 8005dac:	4654      	mov	r4, sl
 8005dae:	2205      	movs	r2, #5
 8005db0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005db4:	484e      	ldr	r0, [pc, #312]	@ (8005ef0 <_svfiprintf_r+0x1e4>)
 8005db6:	f7fa fa5b 	bl	8000270 <memchr>
 8005dba:	9a04      	ldr	r2, [sp, #16]
 8005dbc:	b9d8      	cbnz	r0, 8005df6 <_svfiprintf_r+0xea>
 8005dbe:	06d0      	lsls	r0, r2, #27
 8005dc0:	bf44      	itt	mi
 8005dc2:	2320      	movmi	r3, #32
 8005dc4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005dc8:	0711      	lsls	r1, r2, #28
 8005dca:	bf44      	itt	mi
 8005dcc:	232b      	movmi	r3, #43	@ 0x2b
 8005dce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005dd2:	f89a 3000 	ldrb.w	r3, [sl]
 8005dd6:	2b2a      	cmp	r3, #42	@ 0x2a
 8005dd8:	d015      	beq.n	8005e06 <_svfiprintf_r+0xfa>
 8005dda:	9a07      	ldr	r2, [sp, #28]
 8005ddc:	4654      	mov	r4, sl
 8005dde:	2000      	movs	r0, #0
 8005de0:	f04f 0c0a 	mov.w	ip, #10
 8005de4:	4621      	mov	r1, r4
 8005de6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005dea:	3b30      	subs	r3, #48	@ 0x30
 8005dec:	2b09      	cmp	r3, #9
 8005dee:	d94b      	bls.n	8005e88 <_svfiprintf_r+0x17c>
 8005df0:	b1b0      	cbz	r0, 8005e20 <_svfiprintf_r+0x114>
 8005df2:	9207      	str	r2, [sp, #28]
 8005df4:	e014      	b.n	8005e20 <_svfiprintf_r+0x114>
 8005df6:	eba0 0308 	sub.w	r3, r0, r8
 8005dfa:	fa09 f303 	lsl.w	r3, r9, r3
 8005dfe:	4313      	orrs	r3, r2
 8005e00:	9304      	str	r3, [sp, #16]
 8005e02:	46a2      	mov	sl, r4
 8005e04:	e7d2      	b.n	8005dac <_svfiprintf_r+0xa0>
 8005e06:	9b03      	ldr	r3, [sp, #12]
 8005e08:	1d19      	adds	r1, r3, #4
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	9103      	str	r1, [sp, #12]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	bfbb      	ittet	lt
 8005e12:	425b      	neglt	r3, r3
 8005e14:	f042 0202 	orrlt.w	r2, r2, #2
 8005e18:	9307      	strge	r3, [sp, #28]
 8005e1a:	9307      	strlt	r3, [sp, #28]
 8005e1c:	bfb8      	it	lt
 8005e1e:	9204      	strlt	r2, [sp, #16]
 8005e20:	7823      	ldrb	r3, [r4, #0]
 8005e22:	2b2e      	cmp	r3, #46	@ 0x2e
 8005e24:	d10a      	bne.n	8005e3c <_svfiprintf_r+0x130>
 8005e26:	7863      	ldrb	r3, [r4, #1]
 8005e28:	2b2a      	cmp	r3, #42	@ 0x2a
 8005e2a:	d132      	bne.n	8005e92 <_svfiprintf_r+0x186>
 8005e2c:	9b03      	ldr	r3, [sp, #12]
 8005e2e:	1d1a      	adds	r2, r3, #4
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	9203      	str	r2, [sp, #12]
 8005e34:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005e38:	3402      	adds	r4, #2
 8005e3a:	9305      	str	r3, [sp, #20]
 8005e3c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005f00 <_svfiprintf_r+0x1f4>
 8005e40:	7821      	ldrb	r1, [r4, #0]
 8005e42:	2203      	movs	r2, #3
 8005e44:	4650      	mov	r0, sl
 8005e46:	f7fa fa13 	bl	8000270 <memchr>
 8005e4a:	b138      	cbz	r0, 8005e5c <_svfiprintf_r+0x150>
 8005e4c:	9b04      	ldr	r3, [sp, #16]
 8005e4e:	eba0 000a 	sub.w	r0, r0, sl
 8005e52:	2240      	movs	r2, #64	@ 0x40
 8005e54:	4082      	lsls	r2, r0
 8005e56:	4313      	orrs	r3, r2
 8005e58:	3401      	adds	r4, #1
 8005e5a:	9304      	str	r3, [sp, #16]
 8005e5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e60:	4824      	ldr	r0, [pc, #144]	@ (8005ef4 <_svfiprintf_r+0x1e8>)
 8005e62:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005e66:	2206      	movs	r2, #6
 8005e68:	f7fa fa02 	bl	8000270 <memchr>
 8005e6c:	2800      	cmp	r0, #0
 8005e6e:	d036      	beq.n	8005ede <_svfiprintf_r+0x1d2>
 8005e70:	4b21      	ldr	r3, [pc, #132]	@ (8005ef8 <_svfiprintf_r+0x1ec>)
 8005e72:	bb1b      	cbnz	r3, 8005ebc <_svfiprintf_r+0x1b0>
 8005e74:	9b03      	ldr	r3, [sp, #12]
 8005e76:	3307      	adds	r3, #7
 8005e78:	f023 0307 	bic.w	r3, r3, #7
 8005e7c:	3308      	adds	r3, #8
 8005e7e:	9303      	str	r3, [sp, #12]
 8005e80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e82:	4433      	add	r3, r6
 8005e84:	9309      	str	r3, [sp, #36]	@ 0x24
 8005e86:	e76a      	b.n	8005d5e <_svfiprintf_r+0x52>
 8005e88:	fb0c 3202 	mla	r2, ip, r2, r3
 8005e8c:	460c      	mov	r4, r1
 8005e8e:	2001      	movs	r0, #1
 8005e90:	e7a8      	b.n	8005de4 <_svfiprintf_r+0xd8>
 8005e92:	2300      	movs	r3, #0
 8005e94:	3401      	adds	r4, #1
 8005e96:	9305      	str	r3, [sp, #20]
 8005e98:	4619      	mov	r1, r3
 8005e9a:	f04f 0c0a 	mov.w	ip, #10
 8005e9e:	4620      	mov	r0, r4
 8005ea0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005ea4:	3a30      	subs	r2, #48	@ 0x30
 8005ea6:	2a09      	cmp	r2, #9
 8005ea8:	d903      	bls.n	8005eb2 <_svfiprintf_r+0x1a6>
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d0c6      	beq.n	8005e3c <_svfiprintf_r+0x130>
 8005eae:	9105      	str	r1, [sp, #20]
 8005eb0:	e7c4      	b.n	8005e3c <_svfiprintf_r+0x130>
 8005eb2:	fb0c 2101 	mla	r1, ip, r1, r2
 8005eb6:	4604      	mov	r4, r0
 8005eb8:	2301      	movs	r3, #1
 8005eba:	e7f0      	b.n	8005e9e <_svfiprintf_r+0x192>
 8005ebc:	ab03      	add	r3, sp, #12
 8005ebe:	9300      	str	r3, [sp, #0]
 8005ec0:	462a      	mov	r2, r5
 8005ec2:	4b0e      	ldr	r3, [pc, #56]	@ (8005efc <_svfiprintf_r+0x1f0>)
 8005ec4:	a904      	add	r1, sp, #16
 8005ec6:	4638      	mov	r0, r7
 8005ec8:	f3af 8000 	nop.w
 8005ecc:	1c42      	adds	r2, r0, #1
 8005ece:	4606      	mov	r6, r0
 8005ed0:	d1d6      	bne.n	8005e80 <_svfiprintf_r+0x174>
 8005ed2:	89ab      	ldrh	r3, [r5, #12]
 8005ed4:	065b      	lsls	r3, r3, #25
 8005ed6:	f53f af2d 	bmi.w	8005d34 <_svfiprintf_r+0x28>
 8005eda:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005edc:	e72c      	b.n	8005d38 <_svfiprintf_r+0x2c>
 8005ede:	ab03      	add	r3, sp, #12
 8005ee0:	9300      	str	r3, [sp, #0]
 8005ee2:	462a      	mov	r2, r5
 8005ee4:	4b05      	ldr	r3, [pc, #20]	@ (8005efc <_svfiprintf_r+0x1f0>)
 8005ee6:	a904      	add	r1, sp, #16
 8005ee8:	4638      	mov	r0, r7
 8005eea:	f000 f879 	bl	8005fe0 <_printf_i>
 8005eee:	e7ed      	b.n	8005ecc <_svfiprintf_r+0x1c0>
 8005ef0:	0800646c 	.word	0x0800646c
 8005ef4:	08006476 	.word	0x08006476
 8005ef8:	00000000 	.word	0x00000000
 8005efc:	08005c55 	.word	0x08005c55
 8005f00:	08006472 	.word	0x08006472

08005f04 <_printf_common>:
 8005f04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f08:	4616      	mov	r6, r2
 8005f0a:	4698      	mov	r8, r3
 8005f0c:	688a      	ldr	r2, [r1, #8]
 8005f0e:	690b      	ldr	r3, [r1, #16]
 8005f10:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005f14:	4293      	cmp	r3, r2
 8005f16:	bfb8      	it	lt
 8005f18:	4613      	movlt	r3, r2
 8005f1a:	6033      	str	r3, [r6, #0]
 8005f1c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005f20:	4607      	mov	r7, r0
 8005f22:	460c      	mov	r4, r1
 8005f24:	b10a      	cbz	r2, 8005f2a <_printf_common+0x26>
 8005f26:	3301      	adds	r3, #1
 8005f28:	6033      	str	r3, [r6, #0]
 8005f2a:	6823      	ldr	r3, [r4, #0]
 8005f2c:	0699      	lsls	r1, r3, #26
 8005f2e:	bf42      	ittt	mi
 8005f30:	6833      	ldrmi	r3, [r6, #0]
 8005f32:	3302      	addmi	r3, #2
 8005f34:	6033      	strmi	r3, [r6, #0]
 8005f36:	6825      	ldr	r5, [r4, #0]
 8005f38:	f015 0506 	ands.w	r5, r5, #6
 8005f3c:	d106      	bne.n	8005f4c <_printf_common+0x48>
 8005f3e:	f104 0a19 	add.w	sl, r4, #25
 8005f42:	68e3      	ldr	r3, [r4, #12]
 8005f44:	6832      	ldr	r2, [r6, #0]
 8005f46:	1a9b      	subs	r3, r3, r2
 8005f48:	42ab      	cmp	r3, r5
 8005f4a:	dc26      	bgt.n	8005f9a <_printf_common+0x96>
 8005f4c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005f50:	6822      	ldr	r2, [r4, #0]
 8005f52:	3b00      	subs	r3, #0
 8005f54:	bf18      	it	ne
 8005f56:	2301      	movne	r3, #1
 8005f58:	0692      	lsls	r2, r2, #26
 8005f5a:	d42b      	bmi.n	8005fb4 <_printf_common+0xb0>
 8005f5c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005f60:	4641      	mov	r1, r8
 8005f62:	4638      	mov	r0, r7
 8005f64:	47c8      	blx	r9
 8005f66:	3001      	adds	r0, #1
 8005f68:	d01e      	beq.n	8005fa8 <_printf_common+0xa4>
 8005f6a:	6823      	ldr	r3, [r4, #0]
 8005f6c:	6922      	ldr	r2, [r4, #16]
 8005f6e:	f003 0306 	and.w	r3, r3, #6
 8005f72:	2b04      	cmp	r3, #4
 8005f74:	bf02      	ittt	eq
 8005f76:	68e5      	ldreq	r5, [r4, #12]
 8005f78:	6833      	ldreq	r3, [r6, #0]
 8005f7a:	1aed      	subeq	r5, r5, r3
 8005f7c:	68a3      	ldr	r3, [r4, #8]
 8005f7e:	bf0c      	ite	eq
 8005f80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005f84:	2500      	movne	r5, #0
 8005f86:	4293      	cmp	r3, r2
 8005f88:	bfc4      	itt	gt
 8005f8a:	1a9b      	subgt	r3, r3, r2
 8005f8c:	18ed      	addgt	r5, r5, r3
 8005f8e:	2600      	movs	r6, #0
 8005f90:	341a      	adds	r4, #26
 8005f92:	42b5      	cmp	r5, r6
 8005f94:	d11a      	bne.n	8005fcc <_printf_common+0xc8>
 8005f96:	2000      	movs	r0, #0
 8005f98:	e008      	b.n	8005fac <_printf_common+0xa8>
 8005f9a:	2301      	movs	r3, #1
 8005f9c:	4652      	mov	r2, sl
 8005f9e:	4641      	mov	r1, r8
 8005fa0:	4638      	mov	r0, r7
 8005fa2:	47c8      	blx	r9
 8005fa4:	3001      	adds	r0, #1
 8005fa6:	d103      	bne.n	8005fb0 <_printf_common+0xac>
 8005fa8:	f04f 30ff 	mov.w	r0, #4294967295
 8005fac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fb0:	3501      	adds	r5, #1
 8005fb2:	e7c6      	b.n	8005f42 <_printf_common+0x3e>
 8005fb4:	18e1      	adds	r1, r4, r3
 8005fb6:	1c5a      	adds	r2, r3, #1
 8005fb8:	2030      	movs	r0, #48	@ 0x30
 8005fba:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005fbe:	4422      	add	r2, r4
 8005fc0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005fc4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005fc8:	3302      	adds	r3, #2
 8005fca:	e7c7      	b.n	8005f5c <_printf_common+0x58>
 8005fcc:	2301      	movs	r3, #1
 8005fce:	4622      	mov	r2, r4
 8005fd0:	4641      	mov	r1, r8
 8005fd2:	4638      	mov	r0, r7
 8005fd4:	47c8      	blx	r9
 8005fd6:	3001      	adds	r0, #1
 8005fd8:	d0e6      	beq.n	8005fa8 <_printf_common+0xa4>
 8005fda:	3601      	adds	r6, #1
 8005fdc:	e7d9      	b.n	8005f92 <_printf_common+0x8e>
	...

08005fe0 <_printf_i>:
 8005fe0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005fe4:	7e0f      	ldrb	r7, [r1, #24]
 8005fe6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005fe8:	2f78      	cmp	r7, #120	@ 0x78
 8005fea:	4691      	mov	r9, r2
 8005fec:	4680      	mov	r8, r0
 8005fee:	460c      	mov	r4, r1
 8005ff0:	469a      	mov	sl, r3
 8005ff2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005ff6:	d807      	bhi.n	8006008 <_printf_i+0x28>
 8005ff8:	2f62      	cmp	r7, #98	@ 0x62
 8005ffa:	d80a      	bhi.n	8006012 <_printf_i+0x32>
 8005ffc:	2f00      	cmp	r7, #0
 8005ffe:	f000 80d2 	beq.w	80061a6 <_printf_i+0x1c6>
 8006002:	2f58      	cmp	r7, #88	@ 0x58
 8006004:	f000 80b9 	beq.w	800617a <_printf_i+0x19a>
 8006008:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800600c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006010:	e03a      	b.n	8006088 <_printf_i+0xa8>
 8006012:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006016:	2b15      	cmp	r3, #21
 8006018:	d8f6      	bhi.n	8006008 <_printf_i+0x28>
 800601a:	a101      	add	r1, pc, #4	@ (adr r1, 8006020 <_printf_i+0x40>)
 800601c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006020:	08006079 	.word	0x08006079
 8006024:	0800608d 	.word	0x0800608d
 8006028:	08006009 	.word	0x08006009
 800602c:	08006009 	.word	0x08006009
 8006030:	08006009 	.word	0x08006009
 8006034:	08006009 	.word	0x08006009
 8006038:	0800608d 	.word	0x0800608d
 800603c:	08006009 	.word	0x08006009
 8006040:	08006009 	.word	0x08006009
 8006044:	08006009 	.word	0x08006009
 8006048:	08006009 	.word	0x08006009
 800604c:	0800618d 	.word	0x0800618d
 8006050:	080060b7 	.word	0x080060b7
 8006054:	08006147 	.word	0x08006147
 8006058:	08006009 	.word	0x08006009
 800605c:	08006009 	.word	0x08006009
 8006060:	080061af 	.word	0x080061af
 8006064:	08006009 	.word	0x08006009
 8006068:	080060b7 	.word	0x080060b7
 800606c:	08006009 	.word	0x08006009
 8006070:	08006009 	.word	0x08006009
 8006074:	0800614f 	.word	0x0800614f
 8006078:	6833      	ldr	r3, [r6, #0]
 800607a:	1d1a      	adds	r2, r3, #4
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	6032      	str	r2, [r6, #0]
 8006080:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006084:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006088:	2301      	movs	r3, #1
 800608a:	e09d      	b.n	80061c8 <_printf_i+0x1e8>
 800608c:	6833      	ldr	r3, [r6, #0]
 800608e:	6820      	ldr	r0, [r4, #0]
 8006090:	1d19      	adds	r1, r3, #4
 8006092:	6031      	str	r1, [r6, #0]
 8006094:	0606      	lsls	r6, r0, #24
 8006096:	d501      	bpl.n	800609c <_printf_i+0xbc>
 8006098:	681d      	ldr	r5, [r3, #0]
 800609a:	e003      	b.n	80060a4 <_printf_i+0xc4>
 800609c:	0645      	lsls	r5, r0, #25
 800609e:	d5fb      	bpl.n	8006098 <_printf_i+0xb8>
 80060a0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80060a4:	2d00      	cmp	r5, #0
 80060a6:	da03      	bge.n	80060b0 <_printf_i+0xd0>
 80060a8:	232d      	movs	r3, #45	@ 0x2d
 80060aa:	426d      	negs	r5, r5
 80060ac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80060b0:	4859      	ldr	r0, [pc, #356]	@ (8006218 <_printf_i+0x238>)
 80060b2:	230a      	movs	r3, #10
 80060b4:	e011      	b.n	80060da <_printf_i+0xfa>
 80060b6:	6821      	ldr	r1, [r4, #0]
 80060b8:	6833      	ldr	r3, [r6, #0]
 80060ba:	0608      	lsls	r0, r1, #24
 80060bc:	f853 5b04 	ldr.w	r5, [r3], #4
 80060c0:	d402      	bmi.n	80060c8 <_printf_i+0xe8>
 80060c2:	0649      	lsls	r1, r1, #25
 80060c4:	bf48      	it	mi
 80060c6:	b2ad      	uxthmi	r5, r5
 80060c8:	2f6f      	cmp	r7, #111	@ 0x6f
 80060ca:	4853      	ldr	r0, [pc, #332]	@ (8006218 <_printf_i+0x238>)
 80060cc:	6033      	str	r3, [r6, #0]
 80060ce:	bf14      	ite	ne
 80060d0:	230a      	movne	r3, #10
 80060d2:	2308      	moveq	r3, #8
 80060d4:	2100      	movs	r1, #0
 80060d6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80060da:	6866      	ldr	r6, [r4, #4]
 80060dc:	60a6      	str	r6, [r4, #8]
 80060de:	2e00      	cmp	r6, #0
 80060e0:	bfa2      	ittt	ge
 80060e2:	6821      	ldrge	r1, [r4, #0]
 80060e4:	f021 0104 	bicge.w	r1, r1, #4
 80060e8:	6021      	strge	r1, [r4, #0]
 80060ea:	b90d      	cbnz	r5, 80060f0 <_printf_i+0x110>
 80060ec:	2e00      	cmp	r6, #0
 80060ee:	d04b      	beq.n	8006188 <_printf_i+0x1a8>
 80060f0:	4616      	mov	r6, r2
 80060f2:	fbb5 f1f3 	udiv	r1, r5, r3
 80060f6:	fb03 5711 	mls	r7, r3, r1, r5
 80060fa:	5dc7      	ldrb	r7, [r0, r7]
 80060fc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006100:	462f      	mov	r7, r5
 8006102:	42bb      	cmp	r3, r7
 8006104:	460d      	mov	r5, r1
 8006106:	d9f4      	bls.n	80060f2 <_printf_i+0x112>
 8006108:	2b08      	cmp	r3, #8
 800610a:	d10b      	bne.n	8006124 <_printf_i+0x144>
 800610c:	6823      	ldr	r3, [r4, #0]
 800610e:	07df      	lsls	r7, r3, #31
 8006110:	d508      	bpl.n	8006124 <_printf_i+0x144>
 8006112:	6923      	ldr	r3, [r4, #16]
 8006114:	6861      	ldr	r1, [r4, #4]
 8006116:	4299      	cmp	r1, r3
 8006118:	bfde      	ittt	le
 800611a:	2330      	movle	r3, #48	@ 0x30
 800611c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006120:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006124:	1b92      	subs	r2, r2, r6
 8006126:	6122      	str	r2, [r4, #16]
 8006128:	f8cd a000 	str.w	sl, [sp]
 800612c:	464b      	mov	r3, r9
 800612e:	aa03      	add	r2, sp, #12
 8006130:	4621      	mov	r1, r4
 8006132:	4640      	mov	r0, r8
 8006134:	f7ff fee6 	bl	8005f04 <_printf_common>
 8006138:	3001      	adds	r0, #1
 800613a:	d14a      	bne.n	80061d2 <_printf_i+0x1f2>
 800613c:	f04f 30ff 	mov.w	r0, #4294967295
 8006140:	b004      	add	sp, #16
 8006142:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006146:	6823      	ldr	r3, [r4, #0]
 8006148:	f043 0320 	orr.w	r3, r3, #32
 800614c:	6023      	str	r3, [r4, #0]
 800614e:	4833      	ldr	r0, [pc, #204]	@ (800621c <_printf_i+0x23c>)
 8006150:	2778      	movs	r7, #120	@ 0x78
 8006152:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006156:	6823      	ldr	r3, [r4, #0]
 8006158:	6831      	ldr	r1, [r6, #0]
 800615a:	061f      	lsls	r7, r3, #24
 800615c:	f851 5b04 	ldr.w	r5, [r1], #4
 8006160:	d402      	bmi.n	8006168 <_printf_i+0x188>
 8006162:	065f      	lsls	r7, r3, #25
 8006164:	bf48      	it	mi
 8006166:	b2ad      	uxthmi	r5, r5
 8006168:	6031      	str	r1, [r6, #0]
 800616a:	07d9      	lsls	r1, r3, #31
 800616c:	bf44      	itt	mi
 800616e:	f043 0320 	orrmi.w	r3, r3, #32
 8006172:	6023      	strmi	r3, [r4, #0]
 8006174:	b11d      	cbz	r5, 800617e <_printf_i+0x19e>
 8006176:	2310      	movs	r3, #16
 8006178:	e7ac      	b.n	80060d4 <_printf_i+0xf4>
 800617a:	4827      	ldr	r0, [pc, #156]	@ (8006218 <_printf_i+0x238>)
 800617c:	e7e9      	b.n	8006152 <_printf_i+0x172>
 800617e:	6823      	ldr	r3, [r4, #0]
 8006180:	f023 0320 	bic.w	r3, r3, #32
 8006184:	6023      	str	r3, [r4, #0]
 8006186:	e7f6      	b.n	8006176 <_printf_i+0x196>
 8006188:	4616      	mov	r6, r2
 800618a:	e7bd      	b.n	8006108 <_printf_i+0x128>
 800618c:	6833      	ldr	r3, [r6, #0]
 800618e:	6825      	ldr	r5, [r4, #0]
 8006190:	6961      	ldr	r1, [r4, #20]
 8006192:	1d18      	adds	r0, r3, #4
 8006194:	6030      	str	r0, [r6, #0]
 8006196:	062e      	lsls	r6, r5, #24
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	d501      	bpl.n	80061a0 <_printf_i+0x1c0>
 800619c:	6019      	str	r1, [r3, #0]
 800619e:	e002      	b.n	80061a6 <_printf_i+0x1c6>
 80061a0:	0668      	lsls	r0, r5, #25
 80061a2:	d5fb      	bpl.n	800619c <_printf_i+0x1bc>
 80061a4:	8019      	strh	r1, [r3, #0]
 80061a6:	2300      	movs	r3, #0
 80061a8:	6123      	str	r3, [r4, #16]
 80061aa:	4616      	mov	r6, r2
 80061ac:	e7bc      	b.n	8006128 <_printf_i+0x148>
 80061ae:	6833      	ldr	r3, [r6, #0]
 80061b0:	1d1a      	adds	r2, r3, #4
 80061b2:	6032      	str	r2, [r6, #0]
 80061b4:	681e      	ldr	r6, [r3, #0]
 80061b6:	6862      	ldr	r2, [r4, #4]
 80061b8:	2100      	movs	r1, #0
 80061ba:	4630      	mov	r0, r6
 80061bc:	f7fa f858 	bl	8000270 <memchr>
 80061c0:	b108      	cbz	r0, 80061c6 <_printf_i+0x1e6>
 80061c2:	1b80      	subs	r0, r0, r6
 80061c4:	6060      	str	r0, [r4, #4]
 80061c6:	6863      	ldr	r3, [r4, #4]
 80061c8:	6123      	str	r3, [r4, #16]
 80061ca:	2300      	movs	r3, #0
 80061cc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80061d0:	e7aa      	b.n	8006128 <_printf_i+0x148>
 80061d2:	6923      	ldr	r3, [r4, #16]
 80061d4:	4632      	mov	r2, r6
 80061d6:	4649      	mov	r1, r9
 80061d8:	4640      	mov	r0, r8
 80061da:	47d0      	blx	sl
 80061dc:	3001      	adds	r0, #1
 80061de:	d0ad      	beq.n	800613c <_printf_i+0x15c>
 80061e0:	6823      	ldr	r3, [r4, #0]
 80061e2:	079b      	lsls	r3, r3, #30
 80061e4:	d413      	bmi.n	800620e <_printf_i+0x22e>
 80061e6:	68e0      	ldr	r0, [r4, #12]
 80061e8:	9b03      	ldr	r3, [sp, #12]
 80061ea:	4298      	cmp	r0, r3
 80061ec:	bfb8      	it	lt
 80061ee:	4618      	movlt	r0, r3
 80061f0:	e7a6      	b.n	8006140 <_printf_i+0x160>
 80061f2:	2301      	movs	r3, #1
 80061f4:	4632      	mov	r2, r6
 80061f6:	4649      	mov	r1, r9
 80061f8:	4640      	mov	r0, r8
 80061fa:	47d0      	blx	sl
 80061fc:	3001      	adds	r0, #1
 80061fe:	d09d      	beq.n	800613c <_printf_i+0x15c>
 8006200:	3501      	adds	r5, #1
 8006202:	68e3      	ldr	r3, [r4, #12]
 8006204:	9903      	ldr	r1, [sp, #12]
 8006206:	1a5b      	subs	r3, r3, r1
 8006208:	42ab      	cmp	r3, r5
 800620a:	dcf2      	bgt.n	80061f2 <_printf_i+0x212>
 800620c:	e7eb      	b.n	80061e6 <_printf_i+0x206>
 800620e:	2500      	movs	r5, #0
 8006210:	f104 0619 	add.w	r6, r4, #25
 8006214:	e7f5      	b.n	8006202 <_printf_i+0x222>
 8006216:	bf00      	nop
 8006218:	0800647d 	.word	0x0800647d
 800621c:	0800648e 	.word	0x0800648e

08006220 <memmove>:
 8006220:	4288      	cmp	r0, r1
 8006222:	b510      	push	{r4, lr}
 8006224:	eb01 0402 	add.w	r4, r1, r2
 8006228:	d902      	bls.n	8006230 <memmove+0x10>
 800622a:	4284      	cmp	r4, r0
 800622c:	4623      	mov	r3, r4
 800622e:	d807      	bhi.n	8006240 <memmove+0x20>
 8006230:	1e43      	subs	r3, r0, #1
 8006232:	42a1      	cmp	r1, r4
 8006234:	d008      	beq.n	8006248 <memmove+0x28>
 8006236:	f811 2b01 	ldrb.w	r2, [r1], #1
 800623a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800623e:	e7f8      	b.n	8006232 <memmove+0x12>
 8006240:	4402      	add	r2, r0
 8006242:	4601      	mov	r1, r0
 8006244:	428a      	cmp	r2, r1
 8006246:	d100      	bne.n	800624a <memmove+0x2a>
 8006248:	bd10      	pop	{r4, pc}
 800624a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800624e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006252:	e7f7      	b.n	8006244 <memmove+0x24>

08006254 <_sbrk_r>:
 8006254:	b538      	push	{r3, r4, r5, lr}
 8006256:	4d06      	ldr	r5, [pc, #24]	@ (8006270 <_sbrk_r+0x1c>)
 8006258:	2300      	movs	r3, #0
 800625a:	4604      	mov	r4, r0
 800625c:	4608      	mov	r0, r1
 800625e:	602b      	str	r3, [r5, #0]
 8006260:	f000 f83e 	bl	80062e0 <_sbrk>
 8006264:	1c43      	adds	r3, r0, #1
 8006266:	d102      	bne.n	800626e <_sbrk_r+0x1a>
 8006268:	682b      	ldr	r3, [r5, #0]
 800626a:	b103      	cbz	r3, 800626e <_sbrk_r+0x1a>
 800626c:	6023      	str	r3, [r4, #0]
 800626e:	bd38      	pop	{r3, r4, r5, pc}
 8006270:	200145b0 	.word	0x200145b0

08006274 <_realloc_r>:
 8006274:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006278:	4680      	mov	r8, r0
 800627a:	4615      	mov	r5, r2
 800627c:	460c      	mov	r4, r1
 800627e:	b921      	cbnz	r1, 800628a <_realloc_r+0x16>
 8006280:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006284:	4611      	mov	r1, r2
 8006286:	f7ff bc59 	b.w	8005b3c <_malloc_r>
 800628a:	b92a      	cbnz	r2, 8006298 <_realloc_r+0x24>
 800628c:	f7ff fbea 	bl	8005a64 <_free_r>
 8006290:	2400      	movs	r4, #0
 8006292:	4620      	mov	r0, r4
 8006294:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006298:	f000 f81a 	bl	80062d0 <_malloc_usable_size_r>
 800629c:	4285      	cmp	r5, r0
 800629e:	4606      	mov	r6, r0
 80062a0:	d802      	bhi.n	80062a8 <_realloc_r+0x34>
 80062a2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80062a6:	d8f4      	bhi.n	8006292 <_realloc_r+0x1e>
 80062a8:	4629      	mov	r1, r5
 80062aa:	4640      	mov	r0, r8
 80062ac:	f7ff fc46 	bl	8005b3c <_malloc_r>
 80062b0:	4607      	mov	r7, r0
 80062b2:	2800      	cmp	r0, #0
 80062b4:	d0ec      	beq.n	8006290 <_realloc_r+0x1c>
 80062b6:	42b5      	cmp	r5, r6
 80062b8:	462a      	mov	r2, r5
 80062ba:	4621      	mov	r1, r4
 80062bc:	bf28      	it	cs
 80062be:	4632      	movcs	r2, r6
 80062c0:	f7ff fbc2 	bl	8005a48 <memcpy>
 80062c4:	4621      	mov	r1, r4
 80062c6:	4640      	mov	r0, r8
 80062c8:	f7ff fbcc 	bl	8005a64 <_free_r>
 80062cc:	463c      	mov	r4, r7
 80062ce:	e7e0      	b.n	8006292 <_realloc_r+0x1e>

080062d0 <_malloc_usable_size_r>:
 80062d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80062d4:	1f18      	subs	r0, r3, #4
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	bfbc      	itt	lt
 80062da:	580b      	ldrlt	r3, [r1, r0]
 80062dc:	18c0      	addlt	r0, r0, r3
 80062de:	4770      	bx	lr

080062e0 <_sbrk>:
 80062e0:	4a04      	ldr	r2, [pc, #16]	@ (80062f4 <_sbrk+0x14>)
 80062e2:	6811      	ldr	r1, [r2, #0]
 80062e4:	4603      	mov	r3, r0
 80062e6:	b909      	cbnz	r1, 80062ec <_sbrk+0xc>
 80062e8:	4903      	ldr	r1, [pc, #12]	@ (80062f8 <_sbrk+0x18>)
 80062ea:	6011      	str	r1, [r2, #0]
 80062ec:	6810      	ldr	r0, [r2, #0]
 80062ee:	4403      	add	r3, r0
 80062f0:	6013      	str	r3, [r2, #0]
 80062f2:	4770      	bx	lr
 80062f4:	200145c0 	.word	0x200145c0
 80062f8:	200145c8 	.word	0x200145c8

080062fc <_init>:
 80062fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062fe:	bf00      	nop
 8006300:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006302:	bc08      	pop	{r3}
 8006304:	469e      	mov	lr, r3
 8006306:	4770      	bx	lr

08006308 <_fini>:
 8006308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800630a:	bf00      	nop
 800630c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800630e:	bc08      	pop	{r3}
 8006310:	469e      	mov	lr, r3
 8006312:	4770      	bx	lr
