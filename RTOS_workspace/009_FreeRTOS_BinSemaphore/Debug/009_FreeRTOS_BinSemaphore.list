
009_FreeRTOS_BinSemaphore.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006e2c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a8  08006fbc  08006fbc  00007fbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007164  08007164  00009070  2**0
                  CONTENTS
  4 .ARM          00000008  08007164  08007164  00008164  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800716c  0800716c  00009070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800716c  0800716c  0000816c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007170  08007170  00008170  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08007174  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001355c  20000070  080071e4  00009070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200135cc  080071e4  000095cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012e6f  00000000  00000000  000090a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030da  00000000  00000000  0001bf0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012c0  00000000  00000000  0001eff0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e42  00000000  00000000  000202b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000243e4  00000000  00000000  000210f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014e0b  00000000  00000000  000454d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d8121  00000000  00000000  0005a2e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00132402  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000057c8  00000000  00000000  00132448  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000b5  00000000  00000000  00137c10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006fa4 	.word	0x08006fa4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08006fa4 	.word	0x08006fa4

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	@ 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	20012eb0 	.word	0x20012eb0
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b96a 	b.w	80005fc <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9d08      	ldr	r5, [sp, #32]
 8000346:	460c      	mov	r4, r1
 8000348:	2b00      	cmp	r3, #0
 800034a:	d14e      	bne.n	80003ea <__udivmoddi4+0xaa>
 800034c:	4694      	mov	ip, r2
 800034e:	458c      	cmp	ip, r1
 8000350:	4686      	mov	lr, r0
 8000352:	fab2 f282 	clz	r2, r2
 8000356:	d962      	bls.n	800041e <__udivmoddi4+0xde>
 8000358:	b14a      	cbz	r2, 800036e <__udivmoddi4+0x2e>
 800035a:	f1c2 0320 	rsb	r3, r2, #32
 800035e:	4091      	lsls	r1, r2
 8000360:	fa20 f303 	lsr.w	r3, r0, r3
 8000364:	fa0c fc02 	lsl.w	ip, ip, r2
 8000368:	4319      	orrs	r1, r3
 800036a:	fa00 fe02 	lsl.w	lr, r0, r2
 800036e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000372:	fa1f f68c 	uxth.w	r6, ip
 8000376:	fbb1 f4f7 	udiv	r4, r1, r7
 800037a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800037e:	fb07 1114 	mls	r1, r7, r4, r1
 8000382:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000386:	fb04 f106 	mul.w	r1, r4, r6
 800038a:	4299      	cmp	r1, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x64>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f104 30ff 	add.w	r0, r4, #4294967295
 8000396:	f080 8112 	bcs.w	80005be <__udivmoddi4+0x27e>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 810f 	bls.w	80005be <__udivmoddi4+0x27e>
 80003a0:	3c02      	subs	r4, #2
 80003a2:	4463      	add	r3, ip
 80003a4:	1a59      	subs	r1, r3, r1
 80003a6:	fa1f f38e 	uxth.w	r3, lr
 80003aa:	fbb1 f0f7 	udiv	r0, r1, r7
 80003ae:	fb07 1110 	mls	r1, r7, r0, r1
 80003b2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b6:	fb00 f606 	mul.w	r6, r0, r6
 80003ba:	429e      	cmp	r6, r3
 80003bc:	d90a      	bls.n	80003d4 <__udivmoddi4+0x94>
 80003be:	eb1c 0303 	adds.w	r3, ip, r3
 80003c2:	f100 31ff 	add.w	r1, r0, #4294967295
 80003c6:	f080 80fc 	bcs.w	80005c2 <__udivmoddi4+0x282>
 80003ca:	429e      	cmp	r6, r3
 80003cc:	f240 80f9 	bls.w	80005c2 <__udivmoddi4+0x282>
 80003d0:	4463      	add	r3, ip
 80003d2:	3802      	subs	r0, #2
 80003d4:	1b9b      	subs	r3, r3, r6
 80003d6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003da:	2100      	movs	r1, #0
 80003dc:	b11d      	cbz	r5, 80003e6 <__udivmoddi4+0xa6>
 80003de:	40d3      	lsrs	r3, r2
 80003e0:	2200      	movs	r2, #0
 80003e2:	e9c5 3200 	strd	r3, r2, [r5]
 80003e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d905      	bls.n	80003fa <__udivmoddi4+0xba>
 80003ee:	b10d      	cbz	r5, 80003f4 <__udivmoddi4+0xb4>
 80003f0:	e9c5 0100 	strd	r0, r1, [r5]
 80003f4:	2100      	movs	r1, #0
 80003f6:	4608      	mov	r0, r1
 80003f8:	e7f5      	b.n	80003e6 <__udivmoddi4+0xa6>
 80003fa:	fab3 f183 	clz	r1, r3
 80003fe:	2900      	cmp	r1, #0
 8000400:	d146      	bne.n	8000490 <__udivmoddi4+0x150>
 8000402:	42a3      	cmp	r3, r4
 8000404:	d302      	bcc.n	800040c <__udivmoddi4+0xcc>
 8000406:	4290      	cmp	r0, r2
 8000408:	f0c0 80f0 	bcc.w	80005ec <__udivmoddi4+0x2ac>
 800040c:	1a86      	subs	r6, r0, r2
 800040e:	eb64 0303 	sbc.w	r3, r4, r3
 8000412:	2001      	movs	r0, #1
 8000414:	2d00      	cmp	r5, #0
 8000416:	d0e6      	beq.n	80003e6 <__udivmoddi4+0xa6>
 8000418:	e9c5 6300 	strd	r6, r3, [r5]
 800041c:	e7e3      	b.n	80003e6 <__udivmoddi4+0xa6>
 800041e:	2a00      	cmp	r2, #0
 8000420:	f040 8090 	bne.w	8000544 <__udivmoddi4+0x204>
 8000424:	eba1 040c 	sub.w	r4, r1, ip
 8000428:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800042c:	fa1f f78c 	uxth.w	r7, ip
 8000430:	2101      	movs	r1, #1
 8000432:	fbb4 f6f8 	udiv	r6, r4, r8
 8000436:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800043a:	fb08 4416 	mls	r4, r8, r6, r4
 800043e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000442:	fb07 f006 	mul.w	r0, r7, r6
 8000446:	4298      	cmp	r0, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x11c>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000452:	d202      	bcs.n	800045a <__udivmoddi4+0x11a>
 8000454:	4298      	cmp	r0, r3
 8000456:	f200 80cd 	bhi.w	80005f4 <__udivmoddi4+0x2b4>
 800045a:	4626      	mov	r6, r4
 800045c:	1a1c      	subs	r4, r3, r0
 800045e:	fa1f f38e 	uxth.w	r3, lr
 8000462:	fbb4 f0f8 	udiv	r0, r4, r8
 8000466:	fb08 4410 	mls	r4, r8, r0, r4
 800046a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800046e:	fb00 f707 	mul.w	r7, r0, r7
 8000472:	429f      	cmp	r7, r3
 8000474:	d908      	bls.n	8000488 <__udivmoddi4+0x148>
 8000476:	eb1c 0303 	adds.w	r3, ip, r3
 800047a:	f100 34ff 	add.w	r4, r0, #4294967295
 800047e:	d202      	bcs.n	8000486 <__udivmoddi4+0x146>
 8000480:	429f      	cmp	r7, r3
 8000482:	f200 80b0 	bhi.w	80005e6 <__udivmoddi4+0x2a6>
 8000486:	4620      	mov	r0, r4
 8000488:	1bdb      	subs	r3, r3, r7
 800048a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800048e:	e7a5      	b.n	80003dc <__udivmoddi4+0x9c>
 8000490:	f1c1 0620 	rsb	r6, r1, #32
 8000494:	408b      	lsls	r3, r1
 8000496:	fa22 f706 	lsr.w	r7, r2, r6
 800049a:	431f      	orrs	r7, r3
 800049c:	fa20 fc06 	lsr.w	ip, r0, r6
 80004a0:	fa04 f301 	lsl.w	r3, r4, r1
 80004a4:	ea43 030c 	orr.w	r3, r3, ip
 80004a8:	40f4      	lsrs	r4, r6
 80004aa:	fa00 f801 	lsl.w	r8, r0, r1
 80004ae:	0c38      	lsrs	r0, r7, #16
 80004b0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80004b4:	fbb4 fef0 	udiv	lr, r4, r0
 80004b8:	fa1f fc87 	uxth.w	ip, r7
 80004bc:	fb00 441e 	mls	r4, r0, lr, r4
 80004c0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c4:	fb0e f90c 	mul.w	r9, lr, ip
 80004c8:	45a1      	cmp	r9, r4
 80004ca:	fa02 f201 	lsl.w	r2, r2, r1
 80004ce:	d90a      	bls.n	80004e6 <__udivmoddi4+0x1a6>
 80004d0:	193c      	adds	r4, r7, r4
 80004d2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004d6:	f080 8084 	bcs.w	80005e2 <__udivmoddi4+0x2a2>
 80004da:	45a1      	cmp	r9, r4
 80004dc:	f240 8081 	bls.w	80005e2 <__udivmoddi4+0x2a2>
 80004e0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004e4:	443c      	add	r4, r7
 80004e6:	eba4 0409 	sub.w	r4, r4, r9
 80004ea:	fa1f f983 	uxth.w	r9, r3
 80004ee:	fbb4 f3f0 	udiv	r3, r4, r0
 80004f2:	fb00 4413 	mls	r4, r0, r3, r4
 80004f6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004fa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004fe:	45a4      	cmp	ip, r4
 8000500:	d907      	bls.n	8000512 <__udivmoddi4+0x1d2>
 8000502:	193c      	adds	r4, r7, r4
 8000504:	f103 30ff 	add.w	r0, r3, #4294967295
 8000508:	d267      	bcs.n	80005da <__udivmoddi4+0x29a>
 800050a:	45a4      	cmp	ip, r4
 800050c:	d965      	bls.n	80005da <__udivmoddi4+0x29a>
 800050e:	3b02      	subs	r3, #2
 8000510:	443c      	add	r4, r7
 8000512:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000516:	fba0 9302 	umull	r9, r3, r0, r2
 800051a:	eba4 040c 	sub.w	r4, r4, ip
 800051e:	429c      	cmp	r4, r3
 8000520:	46ce      	mov	lr, r9
 8000522:	469c      	mov	ip, r3
 8000524:	d351      	bcc.n	80005ca <__udivmoddi4+0x28a>
 8000526:	d04e      	beq.n	80005c6 <__udivmoddi4+0x286>
 8000528:	b155      	cbz	r5, 8000540 <__udivmoddi4+0x200>
 800052a:	ebb8 030e 	subs.w	r3, r8, lr
 800052e:	eb64 040c 	sbc.w	r4, r4, ip
 8000532:	fa04 f606 	lsl.w	r6, r4, r6
 8000536:	40cb      	lsrs	r3, r1
 8000538:	431e      	orrs	r6, r3
 800053a:	40cc      	lsrs	r4, r1
 800053c:	e9c5 6400 	strd	r6, r4, [r5]
 8000540:	2100      	movs	r1, #0
 8000542:	e750      	b.n	80003e6 <__udivmoddi4+0xa6>
 8000544:	f1c2 0320 	rsb	r3, r2, #32
 8000548:	fa20 f103 	lsr.w	r1, r0, r3
 800054c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000550:	fa24 f303 	lsr.w	r3, r4, r3
 8000554:	4094      	lsls	r4, r2
 8000556:	430c      	orrs	r4, r1
 8000558:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800055c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000560:	fa1f f78c 	uxth.w	r7, ip
 8000564:	fbb3 f0f8 	udiv	r0, r3, r8
 8000568:	fb08 3110 	mls	r1, r8, r0, r3
 800056c:	0c23      	lsrs	r3, r4, #16
 800056e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000572:	fb00 f107 	mul.w	r1, r0, r7
 8000576:	4299      	cmp	r1, r3
 8000578:	d908      	bls.n	800058c <__udivmoddi4+0x24c>
 800057a:	eb1c 0303 	adds.w	r3, ip, r3
 800057e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000582:	d22c      	bcs.n	80005de <__udivmoddi4+0x29e>
 8000584:	4299      	cmp	r1, r3
 8000586:	d92a      	bls.n	80005de <__udivmoddi4+0x29e>
 8000588:	3802      	subs	r0, #2
 800058a:	4463      	add	r3, ip
 800058c:	1a5b      	subs	r3, r3, r1
 800058e:	b2a4      	uxth	r4, r4
 8000590:	fbb3 f1f8 	udiv	r1, r3, r8
 8000594:	fb08 3311 	mls	r3, r8, r1, r3
 8000598:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800059c:	fb01 f307 	mul.w	r3, r1, r7
 80005a0:	42a3      	cmp	r3, r4
 80005a2:	d908      	bls.n	80005b6 <__udivmoddi4+0x276>
 80005a4:	eb1c 0404 	adds.w	r4, ip, r4
 80005a8:	f101 36ff 	add.w	r6, r1, #4294967295
 80005ac:	d213      	bcs.n	80005d6 <__udivmoddi4+0x296>
 80005ae:	42a3      	cmp	r3, r4
 80005b0:	d911      	bls.n	80005d6 <__udivmoddi4+0x296>
 80005b2:	3902      	subs	r1, #2
 80005b4:	4464      	add	r4, ip
 80005b6:	1ae4      	subs	r4, r4, r3
 80005b8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80005bc:	e739      	b.n	8000432 <__udivmoddi4+0xf2>
 80005be:	4604      	mov	r4, r0
 80005c0:	e6f0      	b.n	80003a4 <__udivmoddi4+0x64>
 80005c2:	4608      	mov	r0, r1
 80005c4:	e706      	b.n	80003d4 <__udivmoddi4+0x94>
 80005c6:	45c8      	cmp	r8, r9
 80005c8:	d2ae      	bcs.n	8000528 <__udivmoddi4+0x1e8>
 80005ca:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ce:	eb63 0c07 	sbc.w	ip, r3, r7
 80005d2:	3801      	subs	r0, #1
 80005d4:	e7a8      	b.n	8000528 <__udivmoddi4+0x1e8>
 80005d6:	4631      	mov	r1, r6
 80005d8:	e7ed      	b.n	80005b6 <__udivmoddi4+0x276>
 80005da:	4603      	mov	r3, r0
 80005dc:	e799      	b.n	8000512 <__udivmoddi4+0x1d2>
 80005de:	4630      	mov	r0, r6
 80005e0:	e7d4      	b.n	800058c <__udivmoddi4+0x24c>
 80005e2:	46d6      	mov	lr, sl
 80005e4:	e77f      	b.n	80004e6 <__udivmoddi4+0x1a6>
 80005e6:	4463      	add	r3, ip
 80005e8:	3802      	subs	r0, #2
 80005ea:	e74d      	b.n	8000488 <__udivmoddi4+0x148>
 80005ec:	4606      	mov	r6, r0
 80005ee:	4623      	mov	r3, r4
 80005f0:	4608      	mov	r0, r1
 80005f2:	e70f      	b.n	8000414 <__udivmoddi4+0xd4>
 80005f4:	3e02      	subs	r6, #2
 80005f6:	4463      	add	r3, ip
 80005f8:	e730      	b.n	800045c <__udivmoddi4+0x11c>
 80005fa:	bf00      	nop

080005fc <__aeabi_idiv0>:
 80005fc:	4770      	bx	lr
 80005fe:	bf00      	nop

08000600 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000600:	b580      	push	{r7, lr}
 8000602:	b088      	sub	sp, #32
 8000604:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000606:	f000 fbf7 	bl	8000df8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800060a:	f000 f857 	bl	80006bc <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800060e:	f000 f8bf 	bl	8000790 <MX_GPIO_Init>
	/* USER CODE BEGIN 2 */

	// created semaphore
	xWork = xSemaphoreCreateBinary();
 8000612:	2203      	movs	r2, #3
 8000614:	2100      	movs	r1, #0
 8000616:	2001      	movs	r0, #1
 8000618:	f001 fed0 	bl	80023bc <xQueueGenericCreate>
 800061c:	4603      	mov	r3, r0
 800061e:	4a21      	ldr	r2, [pc, #132]	@ (80006a4 <main+0xa4>)
 8000620:	6013      	str	r3, [r2, #0]

	// created queue
	xWorkQueue = xQueueCreate(1, sizeof(uint32_t));
 8000622:	2200      	movs	r2, #0
 8000624:	2104      	movs	r1, #4
 8000626:	2001      	movs	r0, #1
 8000628:	f001 fec8 	bl	80023bc <xQueueGenericCreate>
 800062c:	4603      	mov	r3, r0
 800062e:	4a1e      	ldr	r2, [pc, #120]	@ (80006a8 <main+0xa8>)
 8000630:	6013      	str	r3, [r2, #0]

	status = xTaskCreate(ManagerTask, "Manager Task", 200, NULL, 3,
 8000632:	f107 0308 	add.w	r3, r7, #8
 8000636:	9301      	str	r3, [sp, #4]
 8000638:	2303      	movs	r3, #3
 800063a:	9300      	str	r3, [sp, #0]
 800063c:	2300      	movs	r3, #0
 800063e:	22c8      	movs	r2, #200	@ 0xc8
 8000640:	491a      	ldr	r1, [pc, #104]	@ (80006ac <main+0xac>)
 8000642:	481b      	ldr	r0, [pc, #108]	@ (80006b0 <main+0xb0>)
 8000644:	f002 fb9e 	bl	8002d84 <xTaskCreate>
 8000648:	6178      	str	r0, [r7, #20]
			&task1_handle);

	configASSERT(status == pdPASS);
 800064a:	697b      	ldr	r3, [r7, #20]
 800064c:	2b01      	cmp	r3, #1
 800064e:	d00b      	beq.n	8000668 <main+0x68>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000650:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000654:	f383 8811 	msr	BASEPRI, r3
 8000658:	f3bf 8f6f 	isb	sy
 800065c:	f3bf 8f4f 	dsb	sy
 8000660:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000662:	bf00      	nop
 8000664:	bf00      	nop
 8000666:	e7fd      	b.n	8000664 <main+0x64>

	status = xTaskCreate(EmployeeTask, "Employee Task", 200, NULL, 2,
 8000668:	1d3b      	adds	r3, r7, #4
 800066a:	9301      	str	r3, [sp, #4]
 800066c:	2302      	movs	r3, #2
 800066e:	9300      	str	r3, [sp, #0]
 8000670:	2300      	movs	r3, #0
 8000672:	22c8      	movs	r2, #200	@ 0xc8
 8000674:	490f      	ldr	r1, [pc, #60]	@ (80006b4 <main+0xb4>)
 8000676:	4810      	ldr	r0, [pc, #64]	@ (80006b8 <main+0xb8>)
 8000678:	f002 fb84 	bl	8002d84 <xTaskCreate>
 800067c:	6178      	str	r0, [r7, #20]
			&task2_handle);

	configASSERT(status == pdPASS);
 800067e:	697b      	ldr	r3, [r7, #20]
 8000680:	2b01      	cmp	r3, #1
 8000682:	d00b      	beq.n	800069c <main+0x9c>
        __asm volatile
 8000684:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000688:	f383 8811 	msr	BASEPRI, r3
 800068c:	f3bf 8f6f 	isb	sy
 8000690:	f3bf 8f4f 	dsb	sy
 8000694:	60fb      	str	r3, [r7, #12]
    }
 8000696:	bf00      	nop
 8000698:	bf00      	nop
 800069a:	e7fd      	b.n	8000698 <main+0x98>

	//start the freeRTOS scheduler
	vTaskStartScheduler();
 800069c:	f002 fd10 	bl	80030c0 <vTaskStartScheduler>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 80006a0:	bf00      	nop
 80006a2:	e7fd      	b.n	80006a0 <main+0xa0>
 80006a4:	2000008c 	.word	0x2000008c
 80006a8:	20000090 	.word	0x20000090
 80006ac:	08006fbc 	.word	0x08006fbc
 80006b0:	08000a51 	.word	0x08000a51
 80006b4:	08006fcc 	.word	0x08006fcc
 80006b8:	08000abd 	.word	0x08000abd

080006bc <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80006bc:	b580      	push	{r7, lr}
 80006be:	b094      	sub	sp, #80	@ 0x50
 80006c0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80006c2:	f107 0320 	add.w	r3, r7, #32
 80006c6:	2230      	movs	r2, #48	@ 0x30
 80006c8:	2100      	movs	r1, #0
 80006ca:	4618      	mov	r0, r3
 80006cc:	f005 fdc3 	bl	8006256 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80006d0:	f107 030c 	add.w	r3, r7, #12
 80006d4:	2200      	movs	r2, #0
 80006d6:	601a      	str	r2, [r3, #0]
 80006d8:	605a      	str	r2, [r3, #4]
 80006da:	609a      	str	r2, [r3, #8]
 80006dc:	60da      	str	r2, [r3, #12]
 80006de:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80006e0:	2300      	movs	r3, #0
 80006e2:	60bb      	str	r3, [r7, #8]
 80006e4:	4b28      	ldr	r3, [pc, #160]	@ (8000788 <SystemClock_Config+0xcc>)
 80006e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006e8:	4a27      	ldr	r2, [pc, #156]	@ (8000788 <SystemClock_Config+0xcc>)
 80006ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006ee:	6413      	str	r3, [r2, #64]	@ 0x40
 80006f0:	4b25      	ldr	r3, [pc, #148]	@ (8000788 <SystemClock_Config+0xcc>)
 80006f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006f8:	60bb      	str	r3, [r7, #8]
 80006fa:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006fc:	2300      	movs	r3, #0
 80006fe:	607b      	str	r3, [r7, #4]
 8000700:	4b22      	ldr	r3, [pc, #136]	@ (800078c <SystemClock_Config+0xd0>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	4a21      	ldr	r2, [pc, #132]	@ (800078c <SystemClock_Config+0xd0>)
 8000706:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800070a:	6013      	str	r3, [r2, #0]
 800070c:	4b1f      	ldr	r3, [pc, #124]	@ (800078c <SystemClock_Config+0xd0>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000714:	607b      	str	r3, [r7, #4]
 8000716:	687b      	ldr	r3, [r7, #4]
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000718:	2302      	movs	r3, #2
 800071a:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800071c:	2301      	movs	r3, #1
 800071e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000720:	2310      	movs	r3, #16
 8000722:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000724:	2302      	movs	r3, #2
 8000726:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000728:	2300      	movs	r3, #0
 800072a:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 800072c:	2308      	movs	r3, #8
 800072e:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 168;
 8000730:	23a8      	movs	r3, #168	@ 0xa8
 8000732:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000734:	2302      	movs	r3, #2
 8000736:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8000738:	2307      	movs	r3, #7
 800073a:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800073c:	f107 0320 	add.w	r3, r7, #32
 8000740:	4618      	mov	r0, r3
 8000742:	f000 fe33 	bl	80013ac <HAL_RCC_OscConfig>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <SystemClock_Config+0x94>
		Error_Handler();
 800074c:	f000 f9ee 	bl	8000b2c <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000750:	230f      	movs	r3, #15
 8000752:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000754:	2302      	movs	r3, #2
 8000756:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000758:	2300      	movs	r3, #0
 800075a:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800075c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000760:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000762:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000766:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8000768:	f107 030c 	add.w	r3, r7, #12
 800076c:	2105      	movs	r1, #5
 800076e:	4618      	mov	r0, r3
 8000770:	f001 f88a 	bl	8001888 <HAL_RCC_ClockConfig>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <SystemClock_Config+0xc2>
		Error_Handler();
 800077a:	f000 f9d7 	bl	8000b2c <Error_Handler>
	}
}
 800077e:	bf00      	nop
 8000780:	3750      	adds	r7, #80	@ 0x50
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	40023800 	.word	0x40023800
 800078c:	40007000 	.word	0x40007000

08000790 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000790:	b580      	push	{r7, lr}
 8000792:	b08c      	sub	sp, #48	@ 0x30
 8000794:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000796:	f107 031c 	add.w	r3, r7, #28
 800079a:	2200      	movs	r2, #0
 800079c:	601a      	str	r2, [r3, #0]
 800079e:	605a      	str	r2, [r3, #4]
 80007a0:	609a      	str	r2, [r3, #8]
 80007a2:	60da      	str	r2, [r3, #12]
 80007a4:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 80007a6:	2300      	movs	r3, #0
 80007a8:	61bb      	str	r3, [r7, #24]
 80007aa:	4ba1      	ldr	r3, [pc, #644]	@ (8000a30 <MX_GPIO_Init+0x2a0>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ae:	4aa0      	ldr	r2, [pc, #640]	@ (8000a30 <MX_GPIO_Init+0x2a0>)
 80007b0:	f043 0310 	orr.w	r3, r3, #16
 80007b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007b6:	4b9e      	ldr	r3, [pc, #632]	@ (8000a30 <MX_GPIO_Init+0x2a0>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ba:	f003 0310 	and.w	r3, r3, #16
 80007be:	61bb      	str	r3, [r7, #24]
 80007c0:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80007c2:	2300      	movs	r3, #0
 80007c4:	617b      	str	r3, [r7, #20]
 80007c6:	4b9a      	ldr	r3, [pc, #616]	@ (8000a30 <MX_GPIO_Init+0x2a0>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ca:	4a99      	ldr	r2, [pc, #612]	@ (8000a30 <MX_GPIO_Init+0x2a0>)
 80007cc:	f043 0304 	orr.w	r3, r3, #4
 80007d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007d2:	4b97      	ldr	r3, [pc, #604]	@ (8000a30 <MX_GPIO_Init+0x2a0>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007d6:	f003 0304 	and.w	r3, r3, #4
 80007da:	617b      	str	r3, [r7, #20]
 80007dc:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	613b      	str	r3, [r7, #16]
 80007e2:	4b93      	ldr	r3, [pc, #588]	@ (8000a30 <MX_GPIO_Init+0x2a0>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e6:	4a92      	ldr	r2, [pc, #584]	@ (8000a30 <MX_GPIO_Init+0x2a0>)
 80007e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ee:	4b90      	ldr	r3, [pc, #576]	@ (8000a30 <MX_GPIO_Init+0x2a0>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007f6:	613b      	str	r3, [r7, #16]
 80007f8:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80007fa:	2300      	movs	r3, #0
 80007fc:	60fb      	str	r3, [r7, #12]
 80007fe:	4b8c      	ldr	r3, [pc, #560]	@ (8000a30 <MX_GPIO_Init+0x2a0>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000802:	4a8b      	ldr	r2, [pc, #556]	@ (8000a30 <MX_GPIO_Init+0x2a0>)
 8000804:	f043 0301 	orr.w	r3, r3, #1
 8000808:	6313      	str	r3, [r2, #48]	@ 0x30
 800080a:	4b89      	ldr	r3, [pc, #548]	@ (8000a30 <MX_GPIO_Init+0x2a0>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080e:	f003 0301 	and.w	r3, r3, #1
 8000812:	60fb      	str	r3, [r7, #12]
 8000814:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000816:	2300      	movs	r3, #0
 8000818:	60bb      	str	r3, [r7, #8]
 800081a:	4b85      	ldr	r3, [pc, #532]	@ (8000a30 <MX_GPIO_Init+0x2a0>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800081e:	4a84      	ldr	r2, [pc, #528]	@ (8000a30 <MX_GPIO_Init+0x2a0>)
 8000820:	f043 0302 	orr.w	r3, r3, #2
 8000824:	6313      	str	r3, [r2, #48]	@ 0x30
 8000826:	4b82      	ldr	r3, [pc, #520]	@ (8000a30 <MX_GPIO_Init+0x2a0>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082a:	f003 0302 	and.w	r3, r3, #2
 800082e:	60bb      	str	r3, [r7, #8]
 8000830:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000832:	2300      	movs	r3, #0
 8000834:	607b      	str	r3, [r7, #4]
 8000836:	4b7e      	ldr	r3, [pc, #504]	@ (8000a30 <MX_GPIO_Init+0x2a0>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083a:	4a7d      	ldr	r2, [pc, #500]	@ (8000a30 <MX_GPIO_Init+0x2a0>)
 800083c:	f043 0308 	orr.w	r3, r3, #8
 8000840:	6313      	str	r3, [r2, #48]	@ 0x30
 8000842:	4b7b      	ldr	r3, [pc, #492]	@ (8000a30 <MX_GPIO_Init+0x2a0>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000846:	f003 0308 	and.w	r3, r3, #8
 800084a:	607b      	str	r3, [r7, #4]
 800084c:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800084e:	2200      	movs	r2, #0
 8000850:	2108      	movs	r1, #8
 8000852:	4878      	ldr	r0, [pc, #480]	@ (8000a34 <MX_GPIO_Init+0x2a4>)
 8000854:	f000 fd90 	bl	8001378 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin,
 8000858:	2201      	movs	r2, #1
 800085a:	2101      	movs	r1, #1
 800085c:	4876      	ldr	r0, [pc, #472]	@ (8000a38 <MX_GPIO_Init+0x2a8>)
 800085e:	f000 fd8b 	bl	8001378 <HAL_GPIO_WritePin>
			GPIO_PIN_SET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD,
 8000862:	2200      	movs	r2, #0
 8000864:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8000868:	4874      	ldr	r0, [pc, #464]	@ (8000a3c <MX_GPIO_Init+0x2ac>)
 800086a:	f000 fd85 	bl	8001378 <HAL_GPIO_WritePin>
			LD4_Pin | LD3_Pin | LD5_Pin | LD6_Pin | Audio_RST_Pin,
			GPIO_PIN_RESET);

	/*Configure GPIO pin : CS_I2C_SPI_Pin */
	GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800086e:	2308      	movs	r3, #8
 8000870:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000872:	2301      	movs	r3, #1
 8000874:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000876:	2300      	movs	r3, #0
 8000878:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800087a:	2300      	movs	r3, #0
 800087c:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800087e:	f107 031c 	add.w	r3, r7, #28
 8000882:	4619      	mov	r1, r3
 8000884:	486b      	ldr	r0, [pc, #428]	@ (8000a34 <MX_GPIO_Init+0x2a4>)
 8000886:	f000 fbdb 	bl	8001040 <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
	GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800088a:	2301      	movs	r3, #1
 800088c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800088e:	2301      	movs	r3, #1
 8000890:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000892:	2300      	movs	r3, #0
 8000894:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000896:	2300      	movs	r3, #0
 8000898:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800089a:	f107 031c 	add.w	r3, r7, #28
 800089e:	4619      	mov	r1, r3
 80008a0:	4865      	ldr	r0, [pc, #404]	@ (8000a38 <MX_GPIO_Init+0x2a8>)
 80008a2:	f000 fbcd 	bl	8001040 <HAL_GPIO_Init>

	/*Configure GPIO pin : PDM_OUT_Pin */
	GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80008a6:	2308      	movs	r3, #8
 80008a8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008aa:	2302      	movs	r3, #2
 80008ac:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ae:	2300      	movs	r3, #0
 80008b0:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b2:	2300      	movs	r3, #0
 80008b4:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008b6:	2305      	movs	r3, #5
 80008b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80008ba:	f107 031c 	add.w	r3, r7, #28
 80008be:	4619      	mov	r1, r3
 80008c0:	485d      	ldr	r0, [pc, #372]	@ (8000a38 <MX_GPIO_Init+0x2a8>)
 80008c2:	f000 fbbd 	bl	8001040 <HAL_GPIO_Init>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 80008c6:	2301      	movs	r3, #1
 80008c8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008ca:	4b5d      	ldr	r3, [pc, #372]	@ (8000a40 <MX_GPIO_Init+0x2b0>)
 80008cc:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ce:	2300      	movs	r3, #0
 80008d0:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008d2:	f107 031c 	add.w	r3, r7, #28
 80008d6:	4619      	mov	r1, r3
 80008d8:	485a      	ldr	r0, [pc, #360]	@ (8000a44 <MX_GPIO_Init+0x2b4>)
 80008da:	f000 fbb1 	bl	8001040 <HAL_GPIO_Init>

	/*Configure GPIO pin : I2S3_WS_Pin */
	GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80008de:	2310      	movs	r3, #16
 80008e0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e2:	2302      	movs	r3, #2
 80008e4:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e6:	2300      	movs	r3, #0
 80008e8:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ea:	2300      	movs	r3, #0
 80008ec:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80008ee:	2306      	movs	r3, #6
 80008f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80008f2:	f107 031c 	add.w	r3, r7, #28
 80008f6:	4619      	mov	r1, r3
 80008f8:	4852      	ldr	r0, [pc, #328]	@ (8000a44 <MX_GPIO_Init+0x2b4>)
 80008fa:	f000 fba1 	bl	8001040 <HAL_GPIO_Init>

	/*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
	GPIO_InitStruct.Pin = SPI1_SCK_Pin | SPI1_MISO_Pin | SPI1_MOSI_Pin;
 80008fe:	23e0      	movs	r3, #224	@ 0xe0
 8000900:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000902:	2302      	movs	r3, #2
 8000904:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000906:	2300      	movs	r3, #0
 8000908:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090a:	2300      	movs	r3, #0
 800090c:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800090e:	2305      	movs	r3, #5
 8000910:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000912:	f107 031c 	add.w	r3, r7, #28
 8000916:	4619      	mov	r1, r3
 8000918:	484a      	ldr	r0, [pc, #296]	@ (8000a44 <MX_GPIO_Init+0x2b4>)
 800091a:	f000 fb91 	bl	8001040 <HAL_GPIO_Init>

	/*Configure GPIO pin : BOOT1_Pin */
	GPIO_InitStruct.Pin = BOOT1_Pin;
 800091e:	2304      	movs	r3, #4
 8000920:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000922:	2300      	movs	r3, #0
 8000924:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000926:	2300      	movs	r3, #0
 8000928:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800092a:	f107 031c 	add.w	r3, r7, #28
 800092e:	4619      	mov	r1, r3
 8000930:	4845      	ldr	r0, [pc, #276]	@ (8000a48 <MX_GPIO_Init+0x2b8>)
 8000932:	f000 fb85 	bl	8001040 <HAL_GPIO_Init>

	/*Configure GPIO pin : CLK_IN_Pin */
	GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000936:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800093a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800093c:	2302      	movs	r3, #2
 800093e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000940:	2300      	movs	r3, #0
 8000942:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000944:	2300      	movs	r3, #0
 8000946:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000948:	2305      	movs	r3, #5
 800094a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800094c:	f107 031c 	add.w	r3, r7, #28
 8000950:	4619      	mov	r1, r3
 8000952:	483d      	ldr	r0, [pc, #244]	@ (8000a48 <MX_GPIO_Init+0x2b8>)
 8000954:	f000 fb74 	bl	8001040 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
	 Audio_RST_Pin */
	GPIO_InitStruct.Pin = LD4_Pin | LD3_Pin | LD5_Pin | LD6_Pin | Audio_RST_Pin;
 8000958:	f24f 0310 	movw	r3, #61456	@ 0xf010
 800095c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800095e:	2301      	movs	r3, #1
 8000960:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000962:	2300      	movs	r3, #0
 8000964:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000966:	2300      	movs	r3, #0
 8000968:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800096a:	f107 031c 	add.w	r3, r7, #28
 800096e:	4619      	mov	r1, r3
 8000970:	4832      	ldr	r0, [pc, #200]	@ (8000a3c <MX_GPIO_Init+0x2ac>)
 8000972:	f000 fb65 	bl	8001040 <HAL_GPIO_Init>

	/*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
	GPIO_InitStruct.Pin = I2S3_MCK_Pin | I2S3_SCK_Pin | I2S3_SD_Pin;
 8000976:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 800097a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800097c:	2302      	movs	r3, #2
 800097e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000980:	2300      	movs	r3, #0
 8000982:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000984:	2300      	movs	r3, #0
 8000986:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000988:	2306      	movs	r3, #6
 800098a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800098c:	f107 031c 	add.w	r3, r7, #28
 8000990:	4619      	mov	r1, r3
 8000992:	4829      	ldr	r0, [pc, #164]	@ (8000a38 <MX_GPIO_Init+0x2a8>)
 8000994:	f000 fb54 	bl	8001040 <HAL_GPIO_Init>

	/*Configure GPIO pin : VBUS_FS_Pin */
	GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000998:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800099c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800099e:	2300      	movs	r3, #0
 80009a0:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a2:	2300      	movs	r3, #0
 80009a4:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80009a6:	f107 031c 	add.w	r3, r7, #28
 80009aa:	4619      	mov	r1, r3
 80009ac:	4825      	ldr	r0, [pc, #148]	@ (8000a44 <MX_GPIO_Init+0x2b4>)
 80009ae:	f000 fb47 	bl	8001040 <HAL_GPIO_Init>

	/*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
	GPIO_InitStruct.Pin = OTG_FS_ID_Pin | OTG_FS_DM_Pin | OTG_FS_DP_Pin;
 80009b2:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80009b6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b8:	2302      	movs	r3, #2
 80009ba:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009bc:	2300      	movs	r3, #0
 80009be:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c0:	2300      	movs	r3, #0
 80009c2:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80009c4:	230a      	movs	r3, #10
 80009c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009c8:	f107 031c 	add.w	r3, r7, #28
 80009cc:	4619      	mov	r1, r3
 80009ce:	481d      	ldr	r0, [pc, #116]	@ (8000a44 <MX_GPIO_Init+0x2b4>)
 80009d0:	f000 fb36 	bl	8001040 <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
	GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80009d4:	2320      	movs	r3, #32
 80009d6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009d8:	2300      	movs	r3, #0
 80009da:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009dc:	2300      	movs	r3, #0
 80009de:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009e0:	f107 031c 	add.w	r3, r7, #28
 80009e4:	4619      	mov	r1, r3
 80009e6:	4815      	ldr	r0, [pc, #84]	@ (8000a3c <MX_GPIO_Init+0x2ac>)
 80009e8:	f000 fb2a 	bl	8001040 <HAL_GPIO_Init>

	/*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
	GPIO_InitStruct.Pin = Audio_SCL_Pin | Audio_SDA_Pin;
 80009ec:	f44f 7310 	mov.w	r3, #576	@ 0x240
 80009f0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009f2:	2312      	movs	r3, #18
 80009f4:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009f6:	2301      	movs	r3, #1
 80009f8:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009fa:	2300      	movs	r3, #0
 80009fc:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009fe:	2304      	movs	r3, #4
 8000a00:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a02:	f107 031c 	add.w	r3, r7, #28
 8000a06:	4619      	mov	r1, r3
 8000a08:	480f      	ldr	r0, [pc, #60]	@ (8000a48 <MX_GPIO_Init+0x2b8>)
 8000a0a:	f000 fb19 	bl	8001040 <HAL_GPIO_Init>

	/*Configure GPIO pin : MEMS_INT2_Pin */
	GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000a0e:	2302      	movs	r3, #2
 8000a10:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a12:	4b0e      	ldr	r3, [pc, #56]	@ (8000a4c <MX_GPIO_Init+0x2bc>)
 8000a14:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a16:	2300      	movs	r3, #0
 8000a18:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000a1a:	f107 031c 	add.w	r3, r7, #28
 8000a1e:	4619      	mov	r1, r3
 8000a20:	4804      	ldr	r0, [pc, #16]	@ (8000a34 <MX_GPIO_Init+0x2a4>)
 8000a22:	f000 fb0d 	bl	8001040 <HAL_GPIO_Init>

}
 8000a26:	bf00      	nop
 8000a28:	3730      	adds	r7, #48	@ 0x30
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	40023800 	.word	0x40023800
 8000a34:	40021000 	.word	0x40021000
 8000a38:	40020800 	.word	0x40020800
 8000a3c:	40020c00 	.word	0x40020c00
 8000a40:	10110000 	.word	0x10110000
 8000a44:	40020000 	.word	0x40020000
 8000a48:	40020400 	.word	0x40020400
 8000a4c:	10120000 	.word	0x10120000

08000a50 <ManagerTask>:

/* USER CODE BEGIN 4 */

static void ManagerTask(void *parameters) {
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b084      	sub	sp, #16
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
	uint8_t idTicket;
	xSemaphoreGive(xWork);
 8000a58:	4b15      	ldr	r3, [pc, #84]	@ (8000ab0 <ManagerTask+0x60>)
 8000a5a:	6818      	ldr	r0, [r3, #0]
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	2200      	movs	r2, #0
 8000a60:	2100      	movs	r1, #0
 8000a62:	f001 fd37 	bl	80024d4 <xQueueGenericSend>
	while (1) {
		idTicket = (rand() & 0x1F);
 8000a66:	f005 fa91 	bl	8005f8c <rand>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	b2db      	uxtb	r3, r3
 8000a6e:	f003 031f 	and.w	r3, r3, #31
 8000a72:	b2db      	uxtb	r3, r3
 8000a74:	73fb      	strb	r3, [r7, #15]
		if(xQueueSend(xWorkQueue, &idTicket, portMAX_DELAY) != pdFALSE)
 8000a76:	4b0f      	ldr	r3, [pc, #60]	@ (8000ab4 <ManagerTask+0x64>)
 8000a78:	6818      	ldr	r0, [r3, #0]
 8000a7a:	f107 010f 	add.w	r1, r7, #15
 8000a7e:	2300      	movs	r3, #0
 8000a80:	f04f 32ff 	mov.w	r2, #4294967295
 8000a84:	f001 fd26 	bl	80024d4 <xQueueGenericSend>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d0eb      	beq.n	8000a66 <ManagerTask+0x16>
		{
			xSemaphoreGive(xWork);
 8000a8e:	4b08      	ldr	r3, [pc, #32]	@ (8000ab0 <ManagerTask+0x60>)
 8000a90:	6818      	ldr	r0, [r3, #0]
 8000a92:	2300      	movs	r3, #0
 8000a94:	2200      	movs	r2, #0
 8000a96:	2100      	movs	r1, #0
 8000a98:	f001 fd1c 	bl	80024d4 <xQueueGenericSend>
			taskYIELD();
 8000a9c:	4b06      	ldr	r3, [pc, #24]	@ (8000ab8 <ManagerTask+0x68>)
 8000a9e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000aa2:	601a      	str	r2, [r3, #0]
 8000aa4:	f3bf 8f4f 	dsb	sy
 8000aa8:	f3bf 8f6f 	isb	sy
	while (1) {
 8000aac:	e7db      	b.n	8000a66 <ManagerTask+0x16>
 8000aae:	bf00      	nop
 8000ab0:	2000008c 	.word	0x2000008c
 8000ab4:	20000090 	.word	0x20000090
 8000ab8:	e000ed04 	.word	0xe000ed04

08000abc <EmployeeTask>:
		}
	}

}

static void EmployeeTask(void *parameters) {
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b084      	sub	sp, #16
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
	uint8_t idTicket;
	while (1) {
		xSemaphoreTake(xWork, 0);
 8000ac4:	4b0d      	ldr	r3, [pc, #52]	@ (8000afc <EmployeeTask+0x40>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	2100      	movs	r1, #0
 8000aca:	4618      	mov	r0, r3
 8000acc:	f001 ff0c 	bl	80028e8 <xQueueSemaphoreTake>
		idTicket = xQueueReceive(xWorkQueue, &idTicket, 0);
 8000ad0:	4b0b      	ldr	r3, [pc, #44]	@ (8000b00 <EmployeeTask+0x44>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	f107 010f 	add.w	r1, r7, #15
 8000ad8:	2200      	movs	r2, #0
 8000ada:	4618      	mov	r0, r3
 8000adc:	f001 fe0a 	bl	80026f4 <xQueueReceive>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	b2db      	uxtb	r3, r3
 8000ae4:	73fb      	strb	r3, [r7, #15]
		printf("Ticket ID %d", idTicket);
 8000ae6:	7bfb      	ldrb	r3, [r7, #15]
 8000ae8:	4619      	mov	r1, r3
 8000aea:	4806      	ldr	r0, [pc, #24]	@ (8000b04 <EmployeeTask+0x48>)
 8000aec:	f005 fb4e 	bl	800618c <iprintf>
		vTaskDelay(idTicket);
 8000af0:	7bfb      	ldrb	r3, [r7, #15]
 8000af2:	4618      	mov	r0, r3
 8000af4:	f002 faaa 	bl	800304c <vTaskDelay>
		xSemaphoreTake(xWork, 0);
 8000af8:	bf00      	nop
 8000afa:	e7e3      	b.n	8000ac4 <EmployeeTask+0x8>
 8000afc:	2000008c 	.word	0x2000008c
 8000b00:	20000090 	.word	0x20000090
 8000b04:	08006fdc 	.word	0x08006fdc

08000b08 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6) {
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	4a04      	ldr	r2, [pc, #16]	@ (8000b28 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b16:	4293      	cmp	r3, r2
 8000b18:	d101      	bne.n	8000b1e <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8000b1a:	f000 f98f 	bl	8000e3c <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8000b1e:	bf00      	nop
 8000b20:	3708      	adds	r7, #8
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	40001000 	.word	0x40001000

08000b2c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8000b30:	bf00      	nop
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr
	...

08000b3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b082      	sub	sp, #8
 8000b40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b42:	2300      	movs	r3, #0
 8000b44:	607b      	str	r3, [r7, #4]
 8000b46:	4b10      	ldr	r3, [pc, #64]	@ (8000b88 <HAL_MspInit+0x4c>)
 8000b48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b4a:	4a0f      	ldr	r2, [pc, #60]	@ (8000b88 <HAL_MspInit+0x4c>)
 8000b4c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b50:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b52:	4b0d      	ldr	r3, [pc, #52]	@ (8000b88 <HAL_MspInit+0x4c>)
 8000b54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b56:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b5a:	607b      	str	r3, [r7, #4]
 8000b5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b5e:	2300      	movs	r3, #0
 8000b60:	603b      	str	r3, [r7, #0]
 8000b62:	4b09      	ldr	r3, [pc, #36]	@ (8000b88 <HAL_MspInit+0x4c>)
 8000b64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b66:	4a08      	ldr	r2, [pc, #32]	@ (8000b88 <HAL_MspInit+0x4c>)
 8000b68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b6c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b6e:	4b06      	ldr	r3, [pc, #24]	@ (8000b88 <HAL_MspInit+0x4c>)
 8000b70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b76:	603b      	str	r3, [r7, #0]
 8000b78:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  vInitPrioGroupValue();
 8000b7a:	f003 f9f7 	bl	8003f6c <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 8000b7e:	bf00      	nop
 8000b80:	3708      	adds	r7, #8
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	40023800 	.word	0x40023800

08000b8c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b08c      	sub	sp, #48	@ 0x30
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000b94:	2300      	movs	r3, #0
 8000b96:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	6879      	ldr	r1, [r7, #4]
 8000ba0:	2036      	movs	r0, #54	@ 0x36
 8000ba2:	f000 fa23 	bl	8000fec <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 8000ba6:	2036      	movs	r0, #54	@ 0x36
 8000ba8:	f000 fa3c 	bl	8001024 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000bac:	2300      	movs	r3, #0
 8000bae:	60fb      	str	r3, [r7, #12]
 8000bb0:	4b1f      	ldr	r3, [pc, #124]	@ (8000c30 <HAL_InitTick+0xa4>)
 8000bb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bb4:	4a1e      	ldr	r2, [pc, #120]	@ (8000c30 <HAL_InitTick+0xa4>)
 8000bb6:	f043 0310 	orr.w	r3, r3, #16
 8000bba:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bbc:	4b1c      	ldr	r3, [pc, #112]	@ (8000c30 <HAL_InitTick+0xa4>)
 8000bbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bc0:	f003 0310 	and.w	r3, r3, #16
 8000bc4:	60fb      	str	r3, [r7, #12]
 8000bc6:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000bc8:	f107 0210 	add.w	r2, r7, #16
 8000bcc:	f107 0314 	add.w	r3, r7, #20
 8000bd0:	4611      	mov	r1, r2
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f001 f864 	bl	8001ca0 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000bd8:	f001 f84e 	bl	8001c78 <HAL_RCC_GetPCLK1Freq>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	005b      	lsls	r3, r3, #1
 8000be0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000be2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000be4:	4a13      	ldr	r2, [pc, #76]	@ (8000c34 <HAL_InitTick+0xa8>)
 8000be6:	fba2 2303 	umull	r2, r3, r2, r3
 8000bea:	0c9b      	lsrs	r3, r3, #18
 8000bec:	3b01      	subs	r3, #1
 8000bee:	62bb      	str	r3, [r7, #40]	@ 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000bf0:	4b11      	ldr	r3, [pc, #68]	@ (8000c38 <HAL_InitTick+0xac>)
 8000bf2:	4a12      	ldr	r2, [pc, #72]	@ (8000c3c <HAL_InitTick+0xb0>)
 8000bf4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8000bf6:	4b10      	ldr	r3, [pc, #64]	@ (8000c38 <HAL_InitTick+0xac>)
 8000bf8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000bfc:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000bfe:	4a0e      	ldr	r2, [pc, #56]	@ (8000c38 <HAL_InitTick+0xac>)
 8000c00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000c02:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000c04:	4b0c      	ldr	r3, [pc, #48]	@ (8000c38 <HAL_InitTick+0xac>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c0a:	4b0b      	ldr	r3, [pc, #44]	@ (8000c38 <HAL_InitTick+0xac>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000c10:	4809      	ldr	r0, [pc, #36]	@ (8000c38 <HAL_InitTick+0xac>)
 8000c12:	f001 f877 	bl	8001d04 <HAL_TIM_Base_Init>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d104      	bne.n	8000c26 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000c1c:	4806      	ldr	r0, [pc, #24]	@ (8000c38 <HAL_InitTick+0xac>)
 8000c1e:	f001 f8a6 	bl	8001d6e <HAL_TIM_Base_Start_IT>
 8000c22:	4603      	mov	r3, r0
 8000c24:	e000      	b.n	8000c28 <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8000c26:	2301      	movs	r3, #1
}
 8000c28:	4618      	mov	r0, r3
 8000c2a:	3730      	adds	r7, #48	@ 0x30
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	40023800 	.word	0x40023800
 8000c34:	431bde83 	.word	0x431bde83
 8000c38:	20000094 	.word	0x20000094
 8000c3c:	40001000 	.word	0x40001000

08000c40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000c44:	bf00      	nop
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr

08000c4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c4e:	b480      	push	{r7}
 8000c50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c52:	bf00      	nop
 8000c54:	e7fd      	b.n	8000c52 <HardFault_Handler+0x4>

08000c56 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c56:	b480      	push	{r7}
 8000c58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c5a:	bf00      	nop
 8000c5c:	e7fd      	b.n	8000c5a <MemManage_Handler+0x4>

08000c5e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c5e:	b480      	push	{r7}
 8000c60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c62:	bf00      	nop
 8000c64:	e7fd      	b.n	8000c62 <BusFault_Handler+0x4>

08000c66 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c66:	b480      	push	{r7}
 8000c68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c6a:	bf00      	nop
 8000c6c:	e7fd      	b.n	8000c6a <UsageFault_Handler+0x4>

08000c6e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c6e:	b480      	push	{r7}
 8000c70:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c72:	bf00      	nop
 8000c74:	46bd      	mov	sp, r7
 8000c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7a:	4770      	bx	lr

08000c7c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000c80:	4802      	ldr	r0, [pc, #8]	@ (8000c8c <TIM6_DAC_IRQHandler+0x10>)
 8000c82:	f001 f898 	bl	8001db6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000c86:	bf00      	nop
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	20000094 	.word	0x20000094

08000c90 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
	return 1;
 8000c94:	2301      	movs	r3, #1
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9e:	4770      	bx	lr

08000ca0 <_kill>:

int _kill(int pid, int sig)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
 8000ca8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000caa:	f005 fb11 	bl	80062d0 <__errno>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2216      	movs	r2, #22
 8000cb2:	601a      	str	r2, [r3, #0]
	return -1;
 8000cb4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cb8:	4618      	mov	r0, r3
 8000cba:	3708      	adds	r7, #8
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}

08000cc0 <_exit>:

void _exit (int status)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b082      	sub	sp, #8
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000cc8:	f04f 31ff 	mov.w	r1, #4294967295
 8000ccc:	6878      	ldr	r0, [r7, #4]
 8000cce:	f7ff ffe7 	bl	8000ca0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000cd2:	bf00      	nop
 8000cd4:	e7fd      	b.n	8000cd2 <_exit+0x12>

08000cd6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000cd6:	b580      	push	{r7, lr}
 8000cd8:	b086      	sub	sp, #24
 8000cda:	af00      	add	r7, sp, #0
 8000cdc:	60f8      	str	r0, [r7, #12]
 8000cde:	60b9      	str	r1, [r7, #8]
 8000ce0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	617b      	str	r3, [r7, #20]
 8000ce6:	e00a      	b.n	8000cfe <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000ce8:	f3af 8000 	nop.w
 8000cec:	4601      	mov	r1, r0
 8000cee:	68bb      	ldr	r3, [r7, #8]
 8000cf0:	1c5a      	adds	r2, r3, #1
 8000cf2:	60ba      	str	r2, [r7, #8]
 8000cf4:	b2ca      	uxtb	r2, r1
 8000cf6:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cf8:	697b      	ldr	r3, [r7, #20]
 8000cfa:	3301      	adds	r3, #1
 8000cfc:	617b      	str	r3, [r7, #20]
 8000cfe:	697a      	ldr	r2, [r7, #20]
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	429a      	cmp	r2, r3
 8000d04:	dbf0      	blt.n	8000ce8 <_read+0x12>
	}

return len;
 8000d06:	687b      	ldr	r3, [r7, #4]
}
 8000d08:	4618      	mov	r0, r3
 8000d0a:	3718      	adds	r7, #24
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}

08000d10 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b083      	sub	sp, #12
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
	return -1;
 8000d18:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	370c      	adds	r7, #12
 8000d20:	46bd      	mov	sp, r7
 8000d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d26:	4770      	bx	lr

08000d28 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	b083      	sub	sp, #12
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
 8000d30:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000d38:	605a      	str	r2, [r3, #4]
	return 0;
 8000d3a:	2300      	movs	r3, #0
}
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	370c      	adds	r7, #12
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr

08000d48 <_isatty>:

int _isatty(int file)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b083      	sub	sp, #12
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
	return 1;
 8000d50:	2301      	movs	r3, #1
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	370c      	adds	r7, #12
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr

08000d5e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d5e:	b480      	push	{r7}
 8000d60:	b085      	sub	sp, #20
 8000d62:	af00      	add	r7, sp, #0
 8000d64:	60f8      	str	r0, [r7, #12]
 8000d66:	60b9      	str	r1, [r7, #8]
 8000d68:	607a      	str	r2, [r7, #4]
	return 0;
 8000d6a:	2300      	movs	r3, #0
}
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	3714      	adds	r7, #20
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr

08000d78 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d7c:	4b08      	ldr	r3, [pc, #32]	@ (8000da0 <SystemInit+0x28>)
 8000d7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d82:	4a07      	ldr	r2, [pc, #28]	@ (8000da0 <SystemInit+0x28>)
 8000d84:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d88:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000d8c:	4b04      	ldr	r3, [pc, #16]	@ (8000da0 <SystemInit+0x28>)
 8000d8e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000d92:	609a      	str	r2, [r3, #8]
#endif
}
 8000d94:	bf00      	nop
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr
 8000d9e:	bf00      	nop
 8000da0:	e000ed00 	.word	0xe000ed00

08000da4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000da4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ddc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000da8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000daa:	e003      	b.n	8000db4 <LoopCopyDataInit>

08000dac <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000dac:	4b0c      	ldr	r3, [pc, #48]	@ (8000de0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000dae:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000db0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000db2:	3104      	adds	r1, #4

08000db4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000db4:	480b      	ldr	r0, [pc, #44]	@ (8000de4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000db6:	4b0c      	ldr	r3, [pc, #48]	@ (8000de8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000db8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000dba:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000dbc:	d3f6      	bcc.n	8000dac <CopyDataInit>
  ldr  r2, =_sbss
 8000dbe:	4a0b      	ldr	r2, [pc, #44]	@ (8000dec <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000dc0:	e002      	b.n	8000dc8 <LoopFillZerobss>

08000dc2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000dc2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000dc4:	f842 3b04 	str.w	r3, [r2], #4

08000dc8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000dc8:	4b09      	ldr	r3, [pc, #36]	@ (8000df0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000dca:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000dcc:	d3f9      	bcc.n	8000dc2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000dce:	f7ff ffd3 	bl	8000d78 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000dd2:	f005 fa83 	bl	80062dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dd6:	f7ff fc13 	bl	8000600 <main>
  bx  lr    
 8000dda:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000ddc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000de0:	08007174 	.word	0x08007174
  ldr  r0, =_sdata
 8000de4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000de8:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8000dec:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8000df0:	200135cc 	.word	0x200135cc

08000df4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000df4:	e7fe      	b.n	8000df4 <ADC_IRQHandler>
	...

08000df8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000dfc:	4b0e      	ldr	r3, [pc, #56]	@ (8000e38 <HAL_Init+0x40>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4a0d      	ldr	r2, [pc, #52]	@ (8000e38 <HAL_Init+0x40>)
 8000e02:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e06:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e08:	4b0b      	ldr	r3, [pc, #44]	@ (8000e38 <HAL_Init+0x40>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	4a0a      	ldr	r2, [pc, #40]	@ (8000e38 <HAL_Init+0x40>)
 8000e0e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000e12:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e14:	4b08      	ldr	r3, [pc, #32]	@ (8000e38 <HAL_Init+0x40>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4a07      	ldr	r2, [pc, #28]	@ (8000e38 <HAL_Init+0x40>)
 8000e1a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e1e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e20:	2003      	movs	r0, #3
 8000e22:	f000 f8d8 	bl	8000fd6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e26:	2000      	movs	r0, #0
 8000e28:	f7ff feb0 	bl	8000b8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e2c:	f7ff fe86 	bl	8000b3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e30:	2300      	movs	r3, #0
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	40023c00 	.word	0x40023c00

08000e3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e40:	4b06      	ldr	r3, [pc, #24]	@ (8000e5c <HAL_IncTick+0x20>)
 8000e42:	781b      	ldrb	r3, [r3, #0]
 8000e44:	461a      	mov	r2, r3
 8000e46:	4b06      	ldr	r3, [pc, #24]	@ (8000e60 <HAL_IncTick+0x24>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	4413      	add	r3, r2
 8000e4c:	4a04      	ldr	r2, [pc, #16]	@ (8000e60 <HAL_IncTick+0x24>)
 8000e4e:	6013      	str	r3, [r2, #0]
}
 8000e50:	bf00      	nop
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop
 8000e5c:	20000008 	.word	0x20000008
 8000e60:	200000d4 	.word	0x200000d4

08000e64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  return uwTick;
 8000e68:	4b03      	ldr	r3, [pc, #12]	@ (8000e78 <HAL_GetTick+0x14>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
}
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop
 8000e78:	200000d4 	.word	0x200000d4

08000e7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b085      	sub	sp, #20
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	f003 0307 	and.w	r3, r3, #7
 8000e8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e8c:	4b0c      	ldr	r3, [pc, #48]	@ (8000ec0 <__NVIC_SetPriorityGrouping+0x44>)
 8000e8e:	68db      	ldr	r3, [r3, #12]
 8000e90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e92:	68ba      	ldr	r2, [r7, #8]
 8000e94:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e98:	4013      	ands	r3, r2
 8000e9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ea0:	68bb      	ldr	r3, [r7, #8]
 8000ea2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ea4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ea8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000eac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000eae:	4a04      	ldr	r2, [pc, #16]	@ (8000ec0 <__NVIC_SetPriorityGrouping+0x44>)
 8000eb0:	68bb      	ldr	r3, [r7, #8]
 8000eb2:	60d3      	str	r3, [r2, #12]
}
 8000eb4:	bf00      	nop
 8000eb6:	3714      	adds	r7, #20
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebe:	4770      	bx	lr
 8000ec0:	e000ed00 	.word	0xe000ed00

08000ec4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ec8:	4b04      	ldr	r3, [pc, #16]	@ (8000edc <__NVIC_GetPriorityGrouping+0x18>)
 8000eca:	68db      	ldr	r3, [r3, #12]
 8000ecc:	0a1b      	lsrs	r3, r3, #8
 8000ece:	f003 0307 	and.w	r3, r3, #7
}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eda:	4770      	bx	lr
 8000edc:	e000ed00 	.word	0xe000ed00

08000ee0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b083      	sub	sp, #12
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	db0b      	blt.n	8000f0a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ef2:	79fb      	ldrb	r3, [r7, #7]
 8000ef4:	f003 021f 	and.w	r2, r3, #31
 8000ef8:	4907      	ldr	r1, [pc, #28]	@ (8000f18 <__NVIC_EnableIRQ+0x38>)
 8000efa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000efe:	095b      	lsrs	r3, r3, #5
 8000f00:	2001      	movs	r0, #1
 8000f02:	fa00 f202 	lsl.w	r2, r0, r2
 8000f06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f0a:	bf00      	nop
 8000f0c:	370c      	adds	r7, #12
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	e000e100 	.word	0xe000e100

08000f1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b083      	sub	sp, #12
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	4603      	mov	r3, r0
 8000f24:	6039      	str	r1, [r7, #0]
 8000f26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	db0a      	blt.n	8000f46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	b2da      	uxtb	r2, r3
 8000f34:	490c      	ldr	r1, [pc, #48]	@ (8000f68 <__NVIC_SetPriority+0x4c>)
 8000f36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f3a:	0112      	lsls	r2, r2, #4
 8000f3c:	b2d2      	uxtb	r2, r2
 8000f3e:	440b      	add	r3, r1
 8000f40:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f44:	e00a      	b.n	8000f5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	b2da      	uxtb	r2, r3
 8000f4a:	4908      	ldr	r1, [pc, #32]	@ (8000f6c <__NVIC_SetPriority+0x50>)
 8000f4c:	79fb      	ldrb	r3, [r7, #7]
 8000f4e:	f003 030f 	and.w	r3, r3, #15
 8000f52:	3b04      	subs	r3, #4
 8000f54:	0112      	lsls	r2, r2, #4
 8000f56:	b2d2      	uxtb	r2, r2
 8000f58:	440b      	add	r3, r1
 8000f5a:	761a      	strb	r2, [r3, #24]
}
 8000f5c:	bf00      	nop
 8000f5e:	370c      	adds	r7, #12
 8000f60:	46bd      	mov	sp, r7
 8000f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f66:	4770      	bx	lr
 8000f68:	e000e100 	.word	0xe000e100
 8000f6c:	e000ed00 	.word	0xe000ed00

08000f70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b089      	sub	sp, #36	@ 0x24
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	60f8      	str	r0, [r7, #12]
 8000f78:	60b9      	str	r1, [r7, #8]
 8000f7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	f003 0307 	and.w	r3, r3, #7
 8000f82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f84:	69fb      	ldr	r3, [r7, #28]
 8000f86:	f1c3 0307 	rsb	r3, r3, #7
 8000f8a:	2b04      	cmp	r3, #4
 8000f8c:	bf28      	it	cs
 8000f8e:	2304      	movcs	r3, #4
 8000f90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f92:	69fb      	ldr	r3, [r7, #28]
 8000f94:	3304      	adds	r3, #4
 8000f96:	2b06      	cmp	r3, #6
 8000f98:	d902      	bls.n	8000fa0 <NVIC_EncodePriority+0x30>
 8000f9a:	69fb      	ldr	r3, [r7, #28]
 8000f9c:	3b03      	subs	r3, #3
 8000f9e:	e000      	b.n	8000fa2 <NVIC_EncodePriority+0x32>
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fa4:	f04f 32ff 	mov.w	r2, #4294967295
 8000fa8:	69bb      	ldr	r3, [r7, #24]
 8000faa:	fa02 f303 	lsl.w	r3, r2, r3
 8000fae:	43da      	mvns	r2, r3
 8000fb0:	68bb      	ldr	r3, [r7, #8]
 8000fb2:	401a      	ands	r2, r3
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fb8:	f04f 31ff 	mov.w	r1, #4294967295
 8000fbc:	697b      	ldr	r3, [r7, #20]
 8000fbe:	fa01 f303 	lsl.w	r3, r1, r3
 8000fc2:	43d9      	mvns	r1, r3
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fc8:	4313      	orrs	r3, r2
         );
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	3724      	adds	r7, #36	@ 0x24
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr

08000fd6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fd6:	b580      	push	{r7, lr}
 8000fd8:	b082      	sub	sp, #8
 8000fda:	af00      	add	r7, sp, #0
 8000fdc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fde:	6878      	ldr	r0, [r7, #4]
 8000fe0:	f7ff ff4c 	bl	8000e7c <__NVIC_SetPriorityGrouping>
}
 8000fe4:	bf00      	nop
 8000fe6:	3708      	adds	r7, #8
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}

08000fec <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b086      	sub	sp, #24
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	60b9      	str	r1, [r7, #8]
 8000ff6:	607a      	str	r2, [r7, #4]
 8000ff8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ffe:	f7ff ff61 	bl	8000ec4 <__NVIC_GetPriorityGrouping>
 8001002:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001004:	687a      	ldr	r2, [r7, #4]
 8001006:	68b9      	ldr	r1, [r7, #8]
 8001008:	6978      	ldr	r0, [r7, #20]
 800100a:	f7ff ffb1 	bl	8000f70 <NVIC_EncodePriority>
 800100e:	4602      	mov	r2, r0
 8001010:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001014:	4611      	mov	r1, r2
 8001016:	4618      	mov	r0, r3
 8001018:	f7ff ff80 	bl	8000f1c <__NVIC_SetPriority>
}
 800101c:	bf00      	nop
 800101e:	3718      	adds	r7, #24
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}

08001024 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
 800102a:	4603      	mov	r3, r0
 800102c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800102e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001032:	4618      	mov	r0, r3
 8001034:	f7ff ff54 	bl	8000ee0 <__NVIC_EnableIRQ>
}
 8001038:	bf00      	nop
 800103a:	3708      	adds	r7, #8
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}

08001040 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001040:	b480      	push	{r7}
 8001042:	b089      	sub	sp, #36	@ 0x24
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
 8001048:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800104a:	2300      	movs	r3, #0
 800104c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800104e:	2300      	movs	r3, #0
 8001050:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001052:	2300      	movs	r3, #0
 8001054:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001056:	2300      	movs	r3, #0
 8001058:	61fb      	str	r3, [r7, #28]
 800105a:	e16b      	b.n	8001334 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800105c:	2201      	movs	r2, #1
 800105e:	69fb      	ldr	r3, [r7, #28]
 8001060:	fa02 f303 	lsl.w	r3, r2, r3
 8001064:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	697a      	ldr	r2, [r7, #20]
 800106c:	4013      	ands	r3, r2
 800106e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001070:	693a      	ldr	r2, [r7, #16]
 8001072:	697b      	ldr	r3, [r7, #20]
 8001074:	429a      	cmp	r2, r3
 8001076:	f040 815a 	bne.w	800132e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	2b01      	cmp	r3, #1
 8001080:	d00b      	beq.n	800109a <HAL_GPIO_Init+0x5a>
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	2b02      	cmp	r3, #2
 8001088:	d007      	beq.n	800109a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800108e:	2b11      	cmp	r3, #17
 8001090:	d003      	beq.n	800109a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	2b12      	cmp	r3, #18
 8001098:	d130      	bne.n	80010fc <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	689b      	ldr	r3, [r3, #8]
 800109e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010a0:	69fb      	ldr	r3, [r7, #28]
 80010a2:	005b      	lsls	r3, r3, #1
 80010a4:	2203      	movs	r2, #3
 80010a6:	fa02 f303 	lsl.w	r3, r2, r3
 80010aa:	43db      	mvns	r3, r3
 80010ac:	69ba      	ldr	r2, [r7, #24]
 80010ae:	4013      	ands	r3, r2
 80010b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	68da      	ldr	r2, [r3, #12]
 80010b6:	69fb      	ldr	r3, [r7, #28]
 80010b8:	005b      	lsls	r3, r3, #1
 80010ba:	fa02 f303 	lsl.w	r3, r2, r3
 80010be:	69ba      	ldr	r2, [r7, #24]
 80010c0:	4313      	orrs	r3, r2
 80010c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	69ba      	ldr	r2, [r7, #24]
 80010c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010d0:	2201      	movs	r2, #1
 80010d2:	69fb      	ldr	r3, [r7, #28]
 80010d4:	fa02 f303 	lsl.w	r3, r2, r3
 80010d8:	43db      	mvns	r3, r3
 80010da:	69ba      	ldr	r2, [r7, #24]
 80010dc:	4013      	ands	r3, r2
 80010de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	091b      	lsrs	r3, r3, #4
 80010e6:	f003 0201 	and.w	r2, r3, #1
 80010ea:	69fb      	ldr	r3, [r7, #28]
 80010ec:	fa02 f303 	lsl.w	r3, r2, r3
 80010f0:	69ba      	ldr	r2, [r7, #24]
 80010f2:	4313      	orrs	r3, r2
 80010f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	69ba      	ldr	r2, [r7, #24]
 80010fa:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	68db      	ldr	r3, [r3, #12]
 8001100:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001102:	69fb      	ldr	r3, [r7, #28]
 8001104:	005b      	lsls	r3, r3, #1
 8001106:	2203      	movs	r2, #3
 8001108:	fa02 f303 	lsl.w	r3, r2, r3
 800110c:	43db      	mvns	r3, r3
 800110e:	69ba      	ldr	r2, [r7, #24]
 8001110:	4013      	ands	r3, r2
 8001112:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	689a      	ldr	r2, [r3, #8]
 8001118:	69fb      	ldr	r3, [r7, #28]
 800111a:	005b      	lsls	r3, r3, #1
 800111c:	fa02 f303 	lsl.w	r3, r2, r3
 8001120:	69ba      	ldr	r2, [r7, #24]
 8001122:	4313      	orrs	r3, r2
 8001124:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	69ba      	ldr	r2, [r7, #24]
 800112a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	2b02      	cmp	r3, #2
 8001132:	d003      	beq.n	800113c <HAL_GPIO_Init+0xfc>
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	2b12      	cmp	r3, #18
 800113a:	d123      	bne.n	8001184 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800113c:	69fb      	ldr	r3, [r7, #28]
 800113e:	08da      	lsrs	r2, r3, #3
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	3208      	adds	r2, #8
 8001144:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001148:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800114a:	69fb      	ldr	r3, [r7, #28]
 800114c:	f003 0307 	and.w	r3, r3, #7
 8001150:	009b      	lsls	r3, r3, #2
 8001152:	220f      	movs	r2, #15
 8001154:	fa02 f303 	lsl.w	r3, r2, r3
 8001158:	43db      	mvns	r3, r3
 800115a:	69ba      	ldr	r2, [r7, #24]
 800115c:	4013      	ands	r3, r2
 800115e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	691a      	ldr	r2, [r3, #16]
 8001164:	69fb      	ldr	r3, [r7, #28]
 8001166:	f003 0307 	and.w	r3, r3, #7
 800116a:	009b      	lsls	r3, r3, #2
 800116c:	fa02 f303 	lsl.w	r3, r2, r3
 8001170:	69ba      	ldr	r2, [r7, #24]
 8001172:	4313      	orrs	r3, r2
 8001174:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001176:	69fb      	ldr	r3, [r7, #28]
 8001178:	08da      	lsrs	r2, r3, #3
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	3208      	adds	r2, #8
 800117e:	69b9      	ldr	r1, [r7, #24]
 8001180:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800118a:	69fb      	ldr	r3, [r7, #28]
 800118c:	005b      	lsls	r3, r3, #1
 800118e:	2203      	movs	r2, #3
 8001190:	fa02 f303 	lsl.w	r3, r2, r3
 8001194:	43db      	mvns	r3, r3
 8001196:	69ba      	ldr	r2, [r7, #24]
 8001198:	4013      	ands	r3, r2
 800119a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	f003 0203 	and.w	r2, r3, #3
 80011a4:	69fb      	ldr	r3, [r7, #28]
 80011a6:	005b      	lsls	r3, r3, #1
 80011a8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ac:	69ba      	ldr	r2, [r7, #24]
 80011ae:	4313      	orrs	r3, r2
 80011b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	69ba      	ldr	r2, [r7, #24]
 80011b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	f000 80b4 	beq.w	800132e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011c6:	2300      	movs	r3, #0
 80011c8:	60fb      	str	r3, [r7, #12]
 80011ca:	4b60      	ldr	r3, [pc, #384]	@ (800134c <HAL_GPIO_Init+0x30c>)
 80011cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011ce:	4a5f      	ldr	r2, [pc, #380]	@ (800134c <HAL_GPIO_Init+0x30c>)
 80011d0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80011d6:	4b5d      	ldr	r3, [pc, #372]	@ (800134c <HAL_GPIO_Init+0x30c>)
 80011d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011de:	60fb      	str	r3, [r7, #12]
 80011e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011e2:	4a5b      	ldr	r2, [pc, #364]	@ (8001350 <HAL_GPIO_Init+0x310>)
 80011e4:	69fb      	ldr	r3, [r7, #28]
 80011e6:	089b      	lsrs	r3, r3, #2
 80011e8:	3302      	adds	r3, #2
 80011ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011f0:	69fb      	ldr	r3, [r7, #28]
 80011f2:	f003 0303 	and.w	r3, r3, #3
 80011f6:	009b      	lsls	r3, r3, #2
 80011f8:	220f      	movs	r2, #15
 80011fa:	fa02 f303 	lsl.w	r3, r2, r3
 80011fe:	43db      	mvns	r3, r3
 8001200:	69ba      	ldr	r2, [r7, #24]
 8001202:	4013      	ands	r3, r2
 8001204:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	4a52      	ldr	r2, [pc, #328]	@ (8001354 <HAL_GPIO_Init+0x314>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d02b      	beq.n	8001266 <HAL_GPIO_Init+0x226>
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	4a51      	ldr	r2, [pc, #324]	@ (8001358 <HAL_GPIO_Init+0x318>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d025      	beq.n	8001262 <HAL_GPIO_Init+0x222>
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	4a50      	ldr	r2, [pc, #320]	@ (800135c <HAL_GPIO_Init+0x31c>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d01f      	beq.n	800125e <HAL_GPIO_Init+0x21e>
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	4a4f      	ldr	r2, [pc, #316]	@ (8001360 <HAL_GPIO_Init+0x320>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d019      	beq.n	800125a <HAL_GPIO_Init+0x21a>
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	4a4e      	ldr	r2, [pc, #312]	@ (8001364 <HAL_GPIO_Init+0x324>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d013      	beq.n	8001256 <HAL_GPIO_Init+0x216>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	4a4d      	ldr	r2, [pc, #308]	@ (8001368 <HAL_GPIO_Init+0x328>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d00d      	beq.n	8001252 <HAL_GPIO_Init+0x212>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	4a4c      	ldr	r2, [pc, #304]	@ (800136c <HAL_GPIO_Init+0x32c>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d007      	beq.n	800124e <HAL_GPIO_Init+0x20e>
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	4a4b      	ldr	r2, [pc, #300]	@ (8001370 <HAL_GPIO_Init+0x330>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d101      	bne.n	800124a <HAL_GPIO_Init+0x20a>
 8001246:	2307      	movs	r3, #7
 8001248:	e00e      	b.n	8001268 <HAL_GPIO_Init+0x228>
 800124a:	2308      	movs	r3, #8
 800124c:	e00c      	b.n	8001268 <HAL_GPIO_Init+0x228>
 800124e:	2306      	movs	r3, #6
 8001250:	e00a      	b.n	8001268 <HAL_GPIO_Init+0x228>
 8001252:	2305      	movs	r3, #5
 8001254:	e008      	b.n	8001268 <HAL_GPIO_Init+0x228>
 8001256:	2304      	movs	r3, #4
 8001258:	e006      	b.n	8001268 <HAL_GPIO_Init+0x228>
 800125a:	2303      	movs	r3, #3
 800125c:	e004      	b.n	8001268 <HAL_GPIO_Init+0x228>
 800125e:	2302      	movs	r3, #2
 8001260:	e002      	b.n	8001268 <HAL_GPIO_Init+0x228>
 8001262:	2301      	movs	r3, #1
 8001264:	e000      	b.n	8001268 <HAL_GPIO_Init+0x228>
 8001266:	2300      	movs	r3, #0
 8001268:	69fa      	ldr	r2, [r7, #28]
 800126a:	f002 0203 	and.w	r2, r2, #3
 800126e:	0092      	lsls	r2, r2, #2
 8001270:	4093      	lsls	r3, r2
 8001272:	69ba      	ldr	r2, [r7, #24]
 8001274:	4313      	orrs	r3, r2
 8001276:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001278:	4935      	ldr	r1, [pc, #212]	@ (8001350 <HAL_GPIO_Init+0x310>)
 800127a:	69fb      	ldr	r3, [r7, #28]
 800127c:	089b      	lsrs	r3, r3, #2
 800127e:	3302      	adds	r3, #2
 8001280:	69ba      	ldr	r2, [r7, #24]
 8001282:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001286:	4b3b      	ldr	r3, [pc, #236]	@ (8001374 <HAL_GPIO_Init+0x334>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800128c:	693b      	ldr	r3, [r7, #16]
 800128e:	43db      	mvns	r3, r3
 8001290:	69ba      	ldr	r2, [r7, #24]
 8001292:	4013      	ands	r3, r2
 8001294:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d003      	beq.n	80012aa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80012a2:	69ba      	ldr	r2, [r7, #24]
 80012a4:	693b      	ldr	r3, [r7, #16]
 80012a6:	4313      	orrs	r3, r2
 80012a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012aa:	4a32      	ldr	r2, [pc, #200]	@ (8001374 <HAL_GPIO_Init+0x334>)
 80012ac:	69bb      	ldr	r3, [r7, #24]
 80012ae:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80012b0:	4b30      	ldr	r3, [pc, #192]	@ (8001374 <HAL_GPIO_Init+0x334>)
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012b6:	693b      	ldr	r3, [r7, #16]
 80012b8:	43db      	mvns	r3, r3
 80012ba:	69ba      	ldr	r2, [r7, #24]
 80012bc:	4013      	ands	r3, r2
 80012be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d003      	beq.n	80012d4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80012cc:	69ba      	ldr	r2, [r7, #24]
 80012ce:	693b      	ldr	r3, [r7, #16]
 80012d0:	4313      	orrs	r3, r2
 80012d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012d4:	4a27      	ldr	r2, [pc, #156]	@ (8001374 <HAL_GPIO_Init+0x334>)
 80012d6:	69bb      	ldr	r3, [r7, #24]
 80012d8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012da:	4b26      	ldr	r3, [pc, #152]	@ (8001374 <HAL_GPIO_Init+0x334>)
 80012dc:	689b      	ldr	r3, [r3, #8]
 80012de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012e0:	693b      	ldr	r3, [r7, #16]
 80012e2:	43db      	mvns	r3, r3
 80012e4:	69ba      	ldr	r2, [r7, #24]
 80012e6:	4013      	ands	r3, r2
 80012e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d003      	beq.n	80012fe <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80012f6:	69ba      	ldr	r2, [r7, #24]
 80012f8:	693b      	ldr	r3, [r7, #16]
 80012fa:	4313      	orrs	r3, r2
 80012fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012fe:	4a1d      	ldr	r2, [pc, #116]	@ (8001374 <HAL_GPIO_Init+0x334>)
 8001300:	69bb      	ldr	r3, [r7, #24]
 8001302:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001304:	4b1b      	ldr	r3, [pc, #108]	@ (8001374 <HAL_GPIO_Init+0x334>)
 8001306:	68db      	ldr	r3, [r3, #12]
 8001308:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800130a:	693b      	ldr	r3, [r7, #16]
 800130c:	43db      	mvns	r3, r3
 800130e:	69ba      	ldr	r2, [r7, #24]
 8001310:	4013      	ands	r3, r2
 8001312:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800131c:	2b00      	cmp	r3, #0
 800131e:	d003      	beq.n	8001328 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001320:	69ba      	ldr	r2, [r7, #24]
 8001322:	693b      	ldr	r3, [r7, #16]
 8001324:	4313      	orrs	r3, r2
 8001326:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001328:	4a12      	ldr	r2, [pc, #72]	@ (8001374 <HAL_GPIO_Init+0x334>)
 800132a:	69bb      	ldr	r3, [r7, #24]
 800132c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800132e:	69fb      	ldr	r3, [r7, #28]
 8001330:	3301      	adds	r3, #1
 8001332:	61fb      	str	r3, [r7, #28]
 8001334:	69fb      	ldr	r3, [r7, #28]
 8001336:	2b0f      	cmp	r3, #15
 8001338:	f67f ae90 	bls.w	800105c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800133c:	bf00      	nop
 800133e:	bf00      	nop
 8001340:	3724      	adds	r7, #36	@ 0x24
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr
 800134a:	bf00      	nop
 800134c:	40023800 	.word	0x40023800
 8001350:	40013800 	.word	0x40013800
 8001354:	40020000 	.word	0x40020000
 8001358:	40020400 	.word	0x40020400
 800135c:	40020800 	.word	0x40020800
 8001360:	40020c00 	.word	0x40020c00
 8001364:	40021000 	.word	0x40021000
 8001368:	40021400 	.word	0x40021400
 800136c:	40021800 	.word	0x40021800
 8001370:	40021c00 	.word	0x40021c00
 8001374:	40013c00 	.word	0x40013c00

08001378 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001378:	b480      	push	{r7}
 800137a:	b083      	sub	sp, #12
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
 8001380:	460b      	mov	r3, r1
 8001382:	807b      	strh	r3, [r7, #2]
 8001384:	4613      	mov	r3, r2
 8001386:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001388:	787b      	ldrb	r3, [r7, #1]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d003      	beq.n	8001396 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800138e:	887a      	ldrh	r2, [r7, #2]
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001394:	e003      	b.n	800139e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001396:	887b      	ldrh	r3, [r7, #2]
 8001398:	041a      	lsls	r2, r3, #16
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	619a      	str	r2, [r3, #24]
}
 800139e:	bf00      	nop
 80013a0:	370c      	adds	r7, #12
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr
	...

080013ac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b086      	sub	sp, #24
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d101      	bne.n	80013be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013ba:	2301      	movs	r3, #1
 80013bc:	e25e      	b.n	800187c <HAL_RCC_OscConfig+0x4d0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f003 0301 	and.w	r3, r3, #1
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d075      	beq.n	80014b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80013ca:	4b88      	ldr	r3, [pc, #544]	@ (80015ec <HAL_RCC_OscConfig+0x240>)
 80013cc:	689b      	ldr	r3, [r3, #8]
 80013ce:	f003 030c 	and.w	r3, r3, #12
 80013d2:	2b04      	cmp	r3, #4
 80013d4:	d00c      	beq.n	80013f0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013d6:	4b85      	ldr	r3, [pc, #532]	@ (80015ec <HAL_RCC_OscConfig+0x240>)
 80013d8:	689b      	ldr	r3, [r3, #8]
 80013da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80013de:	2b08      	cmp	r3, #8
 80013e0:	d112      	bne.n	8001408 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013e2:	4b82      	ldr	r3, [pc, #520]	@ (80015ec <HAL_RCC_OscConfig+0x240>)
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80013ea:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80013ee:	d10b      	bne.n	8001408 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013f0:	4b7e      	ldr	r3, [pc, #504]	@ (80015ec <HAL_RCC_OscConfig+0x240>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d05b      	beq.n	80014b4 <HAL_RCC_OscConfig+0x108>
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d157      	bne.n	80014b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001404:	2301      	movs	r3, #1
 8001406:	e239      	b.n	800187c <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001410:	d106      	bne.n	8001420 <HAL_RCC_OscConfig+0x74>
 8001412:	4b76      	ldr	r3, [pc, #472]	@ (80015ec <HAL_RCC_OscConfig+0x240>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4a75      	ldr	r2, [pc, #468]	@ (80015ec <HAL_RCC_OscConfig+0x240>)
 8001418:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800141c:	6013      	str	r3, [r2, #0]
 800141e:	e01d      	b.n	800145c <HAL_RCC_OscConfig+0xb0>
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001428:	d10c      	bne.n	8001444 <HAL_RCC_OscConfig+0x98>
 800142a:	4b70      	ldr	r3, [pc, #448]	@ (80015ec <HAL_RCC_OscConfig+0x240>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4a6f      	ldr	r2, [pc, #444]	@ (80015ec <HAL_RCC_OscConfig+0x240>)
 8001430:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001434:	6013      	str	r3, [r2, #0]
 8001436:	4b6d      	ldr	r3, [pc, #436]	@ (80015ec <HAL_RCC_OscConfig+0x240>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4a6c      	ldr	r2, [pc, #432]	@ (80015ec <HAL_RCC_OscConfig+0x240>)
 800143c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001440:	6013      	str	r3, [r2, #0]
 8001442:	e00b      	b.n	800145c <HAL_RCC_OscConfig+0xb0>
 8001444:	4b69      	ldr	r3, [pc, #420]	@ (80015ec <HAL_RCC_OscConfig+0x240>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a68      	ldr	r2, [pc, #416]	@ (80015ec <HAL_RCC_OscConfig+0x240>)
 800144a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800144e:	6013      	str	r3, [r2, #0]
 8001450:	4b66      	ldr	r3, [pc, #408]	@ (80015ec <HAL_RCC_OscConfig+0x240>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a65      	ldr	r2, [pc, #404]	@ (80015ec <HAL_RCC_OscConfig+0x240>)
 8001456:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800145a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d013      	beq.n	800148c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001464:	f7ff fcfe 	bl	8000e64 <HAL_GetTick>
 8001468:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800146a:	e008      	b.n	800147e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800146c:	f7ff fcfa 	bl	8000e64 <HAL_GetTick>
 8001470:	4602      	mov	r2, r0
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	1ad3      	subs	r3, r2, r3
 8001476:	2b64      	cmp	r3, #100	@ 0x64
 8001478:	d901      	bls.n	800147e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800147a:	2303      	movs	r3, #3
 800147c:	e1fe      	b.n	800187c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800147e:	4b5b      	ldr	r3, [pc, #364]	@ (80015ec <HAL_RCC_OscConfig+0x240>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001486:	2b00      	cmp	r3, #0
 8001488:	d0f0      	beq.n	800146c <HAL_RCC_OscConfig+0xc0>
 800148a:	e014      	b.n	80014b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800148c:	f7ff fcea 	bl	8000e64 <HAL_GetTick>
 8001490:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001492:	e008      	b.n	80014a6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001494:	f7ff fce6 	bl	8000e64 <HAL_GetTick>
 8001498:	4602      	mov	r2, r0
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	1ad3      	subs	r3, r2, r3
 800149e:	2b64      	cmp	r3, #100	@ 0x64
 80014a0:	d901      	bls.n	80014a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80014a2:	2303      	movs	r3, #3
 80014a4:	e1ea      	b.n	800187c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014a6:	4b51      	ldr	r3, [pc, #324]	@ (80015ec <HAL_RCC_OscConfig+0x240>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d1f0      	bne.n	8001494 <HAL_RCC_OscConfig+0xe8>
 80014b2:	e000      	b.n	80014b6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f003 0302 	and.w	r3, r3, #2
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d063      	beq.n	800158a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80014c2:	4b4a      	ldr	r3, [pc, #296]	@ (80015ec <HAL_RCC_OscConfig+0x240>)
 80014c4:	689b      	ldr	r3, [r3, #8]
 80014c6:	f003 030c 	and.w	r3, r3, #12
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d00b      	beq.n	80014e6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014ce:	4b47      	ldr	r3, [pc, #284]	@ (80015ec <HAL_RCC_OscConfig+0x240>)
 80014d0:	689b      	ldr	r3, [r3, #8]
 80014d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80014d6:	2b08      	cmp	r3, #8
 80014d8:	d11c      	bne.n	8001514 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014da:	4b44      	ldr	r3, [pc, #272]	@ (80015ec <HAL_RCC_OscConfig+0x240>)
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d116      	bne.n	8001514 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014e6:	4b41      	ldr	r3, [pc, #260]	@ (80015ec <HAL_RCC_OscConfig+0x240>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f003 0302 	and.w	r3, r3, #2
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d005      	beq.n	80014fe <HAL_RCC_OscConfig+0x152>
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	68db      	ldr	r3, [r3, #12]
 80014f6:	2b01      	cmp	r3, #1
 80014f8:	d001      	beq.n	80014fe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80014fa:	2301      	movs	r3, #1
 80014fc:	e1be      	b.n	800187c <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014fe:	4b3b      	ldr	r3, [pc, #236]	@ (80015ec <HAL_RCC_OscConfig+0x240>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	691b      	ldr	r3, [r3, #16]
 800150a:	00db      	lsls	r3, r3, #3
 800150c:	4937      	ldr	r1, [pc, #220]	@ (80015ec <HAL_RCC_OscConfig+0x240>)
 800150e:	4313      	orrs	r3, r2
 8001510:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001512:	e03a      	b.n	800158a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	68db      	ldr	r3, [r3, #12]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d020      	beq.n	800155e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800151c:	4b34      	ldr	r3, [pc, #208]	@ (80015f0 <HAL_RCC_OscConfig+0x244>)
 800151e:	2201      	movs	r2, #1
 8001520:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001522:	f7ff fc9f 	bl	8000e64 <HAL_GetTick>
 8001526:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001528:	e008      	b.n	800153c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800152a:	f7ff fc9b 	bl	8000e64 <HAL_GetTick>
 800152e:	4602      	mov	r2, r0
 8001530:	693b      	ldr	r3, [r7, #16]
 8001532:	1ad3      	subs	r3, r2, r3
 8001534:	2b02      	cmp	r3, #2
 8001536:	d901      	bls.n	800153c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001538:	2303      	movs	r3, #3
 800153a:	e19f      	b.n	800187c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800153c:	4b2b      	ldr	r3, [pc, #172]	@ (80015ec <HAL_RCC_OscConfig+0x240>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f003 0302 	and.w	r3, r3, #2
 8001544:	2b00      	cmp	r3, #0
 8001546:	d0f0      	beq.n	800152a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001548:	4b28      	ldr	r3, [pc, #160]	@ (80015ec <HAL_RCC_OscConfig+0x240>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	691b      	ldr	r3, [r3, #16]
 8001554:	00db      	lsls	r3, r3, #3
 8001556:	4925      	ldr	r1, [pc, #148]	@ (80015ec <HAL_RCC_OscConfig+0x240>)
 8001558:	4313      	orrs	r3, r2
 800155a:	600b      	str	r3, [r1, #0]
 800155c:	e015      	b.n	800158a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800155e:	4b24      	ldr	r3, [pc, #144]	@ (80015f0 <HAL_RCC_OscConfig+0x244>)
 8001560:	2200      	movs	r2, #0
 8001562:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001564:	f7ff fc7e 	bl	8000e64 <HAL_GetTick>
 8001568:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800156a:	e008      	b.n	800157e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800156c:	f7ff fc7a 	bl	8000e64 <HAL_GetTick>
 8001570:	4602      	mov	r2, r0
 8001572:	693b      	ldr	r3, [r7, #16]
 8001574:	1ad3      	subs	r3, r2, r3
 8001576:	2b02      	cmp	r3, #2
 8001578:	d901      	bls.n	800157e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800157a:	2303      	movs	r3, #3
 800157c:	e17e      	b.n	800187c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800157e:	4b1b      	ldr	r3, [pc, #108]	@ (80015ec <HAL_RCC_OscConfig+0x240>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f003 0302 	and.w	r3, r3, #2
 8001586:	2b00      	cmp	r3, #0
 8001588:	d1f0      	bne.n	800156c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f003 0308 	and.w	r3, r3, #8
 8001592:	2b00      	cmp	r3, #0
 8001594:	d036      	beq.n	8001604 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	695b      	ldr	r3, [r3, #20]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d016      	beq.n	80015cc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800159e:	4b15      	ldr	r3, [pc, #84]	@ (80015f4 <HAL_RCC_OscConfig+0x248>)
 80015a0:	2201      	movs	r2, #1
 80015a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015a4:	f7ff fc5e 	bl	8000e64 <HAL_GetTick>
 80015a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015aa:	e008      	b.n	80015be <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015ac:	f7ff fc5a 	bl	8000e64 <HAL_GetTick>
 80015b0:	4602      	mov	r2, r0
 80015b2:	693b      	ldr	r3, [r7, #16]
 80015b4:	1ad3      	subs	r3, r2, r3
 80015b6:	2b02      	cmp	r3, #2
 80015b8:	d901      	bls.n	80015be <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80015ba:	2303      	movs	r3, #3
 80015bc:	e15e      	b.n	800187c <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015be:	4b0b      	ldr	r3, [pc, #44]	@ (80015ec <HAL_RCC_OscConfig+0x240>)
 80015c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80015c2:	f003 0302 	and.w	r3, r3, #2
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d0f0      	beq.n	80015ac <HAL_RCC_OscConfig+0x200>
 80015ca:	e01b      	b.n	8001604 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015cc:	4b09      	ldr	r3, [pc, #36]	@ (80015f4 <HAL_RCC_OscConfig+0x248>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015d2:	f7ff fc47 	bl	8000e64 <HAL_GetTick>
 80015d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015d8:	e00e      	b.n	80015f8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015da:	f7ff fc43 	bl	8000e64 <HAL_GetTick>
 80015de:	4602      	mov	r2, r0
 80015e0:	693b      	ldr	r3, [r7, #16]
 80015e2:	1ad3      	subs	r3, r2, r3
 80015e4:	2b02      	cmp	r3, #2
 80015e6:	d907      	bls.n	80015f8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80015e8:	2303      	movs	r3, #3
 80015ea:	e147      	b.n	800187c <HAL_RCC_OscConfig+0x4d0>
 80015ec:	40023800 	.word	0x40023800
 80015f0:	42470000 	.word	0x42470000
 80015f4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015f8:	4b88      	ldr	r3, [pc, #544]	@ (800181c <HAL_RCC_OscConfig+0x470>)
 80015fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80015fc:	f003 0302 	and.w	r3, r3, #2
 8001600:	2b00      	cmp	r3, #0
 8001602:	d1ea      	bne.n	80015da <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f003 0304 	and.w	r3, r3, #4
 800160c:	2b00      	cmp	r3, #0
 800160e:	f000 8097 	beq.w	8001740 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001612:	2300      	movs	r3, #0
 8001614:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001616:	4b81      	ldr	r3, [pc, #516]	@ (800181c <HAL_RCC_OscConfig+0x470>)
 8001618:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800161a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800161e:	2b00      	cmp	r3, #0
 8001620:	d10f      	bne.n	8001642 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001622:	2300      	movs	r3, #0
 8001624:	60bb      	str	r3, [r7, #8]
 8001626:	4b7d      	ldr	r3, [pc, #500]	@ (800181c <HAL_RCC_OscConfig+0x470>)
 8001628:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800162a:	4a7c      	ldr	r2, [pc, #496]	@ (800181c <HAL_RCC_OscConfig+0x470>)
 800162c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001630:	6413      	str	r3, [r2, #64]	@ 0x40
 8001632:	4b7a      	ldr	r3, [pc, #488]	@ (800181c <HAL_RCC_OscConfig+0x470>)
 8001634:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001636:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800163a:	60bb      	str	r3, [r7, #8]
 800163c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800163e:	2301      	movs	r3, #1
 8001640:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001642:	4b77      	ldr	r3, [pc, #476]	@ (8001820 <HAL_RCC_OscConfig+0x474>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800164a:	2b00      	cmp	r3, #0
 800164c:	d118      	bne.n	8001680 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800164e:	4b74      	ldr	r3, [pc, #464]	@ (8001820 <HAL_RCC_OscConfig+0x474>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4a73      	ldr	r2, [pc, #460]	@ (8001820 <HAL_RCC_OscConfig+0x474>)
 8001654:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001658:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800165a:	f7ff fc03 	bl	8000e64 <HAL_GetTick>
 800165e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001660:	e008      	b.n	8001674 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001662:	f7ff fbff 	bl	8000e64 <HAL_GetTick>
 8001666:	4602      	mov	r2, r0
 8001668:	693b      	ldr	r3, [r7, #16]
 800166a:	1ad3      	subs	r3, r2, r3
 800166c:	2b02      	cmp	r3, #2
 800166e:	d901      	bls.n	8001674 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001670:	2303      	movs	r3, #3
 8001672:	e103      	b.n	800187c <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001674:	4b6a      	ldr	r3, [pc, #424]	@ (8001820 <HAL_RCC_OscConfig+0x474>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800167c:	2b00      	cmp	r3, #0
 800167e:	d0f0      	beq.n	8001662 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	689b      	ldr	r3, [r3, #8]
 8001684:	2b01      	cmp	r3, #1
 8001686:	d106      	bne.n	8001696 <HAL_RCC_OscConfig+0x2ea>
 8001688:	4b64      	ldr	r3, [pc, #400]	@ (800181c <HAL_RCC_OscConfig+0x470>)
 800168a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800168c:	4a63      	ldr	r2, [pc, #396]	@ (800181c <HAL_RCC_OscConfig+0x470>)
 800168e:	f043 0301 	orr.w	r3, r3, #1
 8001692:	6713      	str	r3, [r2, #112]	@ 0x70
 8001694:	e01c      	b.n	80016d0 <HAL_RCC_OscConfig+0x324>
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	689b      	ldr	r3, [r3, #8]
 800169a:	2b05      	cmp	r3, #5
 800169c:	d10c      	bne.n	80016b8 <HAL_RCC_OscConfig+0x30c>
 800169e:	4b5f      	ldr	r3, [pc, #380]	@ (800181c <HAL_RCC_OscConfig+0x470>)
 80016a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016a2:	4a5e      	ldr	r2, [pc, #376]	@ (800181c <HAL_RCC_OscConfig+0x470>)
 80016a4:	f043 0304 	orr.w	r3, r3, #4
 80016a8:	6713      	str	r3, [r2, #112]	@ 0x70
 80016aa:	4b5c      	ldr	r3, [pc, #368]	@ (800181c <HAL_RCC_OscConfig+0x470>)
 80016ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016ae:	4a5b      	ldr	r2, [pc, #364]	@ (800181c <HAL_RCC_OscConfig+0x470>)
 80016b0:	f043 0301 	orr.w	r3, r3, #1
 80016b4:	6713      	str	r3, [r2, #112]	@ 0x70
 80016b6:	e00b      	b.n	80016d0 <HAL_RCC_OscConfig+0x324>
 80016b8:	4b58      	ldr	r3, [pc, #352]	@ (800181c <HAL_RCC_OscConfig+0x470>)
 80016ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016bc:	4a57      	ldr	r2, [pc, #348]	@ (800181c <HAL_RCC_OscConfig+0x470>)
 80016be:	f023 0301 	bic.w	r3, r3, #1
 80016c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80016c4:	4b55      	ldr	r3, [pc, #340]	@ (800181c <HAL_RCC_OscConfig+0x470>)
 80016c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016c8:	4a54      	ldr	r2, [pc, #336]	@ (800181c <HAL_RCC_OscConfig+0x470>)
 80016ca:	f023 0304 	bic.w	r3, r3, #4
 80016ce:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	689b      	ldr	r3, [r3, #8]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d015      	beq.n	8001704 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016d8:	f7ff fbc4 	bl	8000e64 <HAL_GetTick>
 80016dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016de:	e00a      	b.n	80016f6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016e0:	f7ff fbc0 	bl	8000e64 <HAL_GetTick>
 80016e4:	4602      	mov	r2, r0
 80016e6:	693b      	ldr	r3, [r7, #16]
 80016e8:	1ad3      	subs	r3, r2, r3
 80016ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d901      	bls.n	80016f6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80016f2:	2303      	movs	r3, #3
 80016f4:	e0c2      	b.n	800187c <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016f6:	4b49      	ldr	r3, [pc, #292]	@ (800181c <HAL_RCC_OscConfig+0x470>)
 80016f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016fa:	f003 0302 	and.w	r3, r3, #2
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d0ee      	beq.n	80016e0 <HAL_RCC_OscConfig+0x334>
 8001702:	e014      	b.n	800172e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001704:	f7ff fbae 	bl	8000e64 <HAL_GetTick>
 8001708:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800170a:	e00a      	b.n	8001722 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800170c:	f7ff fbaa 	bl	8000e64 <HAL_GetTick>
 8001710:	4602      	mov	r2, r0
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	1ad3      	subs	r3, r2, r3
 8001716:	f241 3288 	movw	r2, #5000	@ 0x1388
 800171a:	4293      	cmp	r3, r2
 800171c:	d901      	bls.n	8001722 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800171e:	2303      	movs	r3, #3
 8001720:	e0ac      	b.n	800187c <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001722:	4b3e      	ldr	r3, [pc, #248]	@ (800181c <HAL_RCC_OscConfig+0x470>)
 8001724:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001726:	f003 0302 	and.w	r3, r3, #2
 800172a:	2b00      	cmp	r3, #0
 800172c:	d1ee      	bne.n	800170c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800172e:	7dfb      	ldrb	r3, [r7, #23]
 8001730:	2b01      	cmp	r3, #1
 8001732:	d105      	bne.n	8001740 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001734:	4b39      	ldr	r3, [pc, #228]	@ (800181c <HAL_RCC_OscConfig+0x470>)
 8001736:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001738:	4a38      	ldr	r2, [pc, #224]	@ (800181c <HAL_RCC_OscConfig+0x470>)
 800173a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800173e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	699b      	ldr	r3, [r3, #24]
 8001744:	2b00      	cmp	r3, #0
 8001746:	f000 8098 	beq.w	800187a <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800174a:	4b34      	ldr	r3, [pc, #208]	@ (800181c <HAL_RCC_OscConfig+0x470>)
 800174c:	689b      	ldr	r3, [r3, #8]
 800174e:	f003 030c 	and.w	r3, r3, #12
 8001752:	2b08      	cmp	r3, #8
 8001754:	d05c      	beq.n	8001810 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	699b      	ldr	r3, [r3, #24]
 800175a:	2b02      	cmp	r3, #2
 800175c:	d141      	bne.n	80017e2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800175e:	4b31      	ldr	r3, [pc, #196]	@ (8001824 <HAL_RCC_OscConfig+0x478>)
 8001760:	2200      	movs	r2, #0
 8001762:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001764:	f7ff fb7e 	bl	8000e64 <HAL_GetTick>
 8001768:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800176a:	e008      	b.n	800177e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800176c:	f7ff fb7a 	bl	8000e64 <HAL_GetTick>
 8001770:	4602      	mov	r2, r0
 8001772:	693b      	ldr	r3, [r7, #16]
 8001774:	1ad3      	subs	r3, r2, r3
 8001776:	2b02      	cmp	r3, #2
 8001778:	d901      	bls.n	800177e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800177a:	2303      	movs	r3, #3
 800177c:	e07e      	b.n	800187c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800177e:	4b27      	ldr	r3, [pc, #156]	@ (800181c <HAL_RCC_OscConfig+0x470>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001786:	2b00      	cmp	r3, #0
 8001788:	d1f0      	bne.n	800176c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	69da      	ldr	r2, [r3, #28]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6a1b      	ldr	r3, [r3, #32]
 8001792:	431a      	orrs	r2, r3
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001798:	019b      	lsls	r3, r3, #6
 800179a:	431a      	orrs	r2, r3
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017a0:	085b      	lsrs	r3, r3, #1
 80017a2:	3b01      	subs	r3, #1
 80017a4:	041b      	lsls	r3, r3, #16
 80017a6:	431a      	orrs	r2, r3
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017ac:	061b      	lsls	r3, r3, #24
 80017ae:	491b      	ldr	r1, [pc, #108]	@ (800181c <HAL_RCC_OscConfig+0x470>)
 80017b0:	4313      	orrs	r3, r2
 80017b2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017b4:	4b1b      	ldr	r3, [pc, #108]	@ (8001824 <HAL_RCC_OscConfig+0x478>)
 80017b6:	2201      	movs	r2, #1
 80017b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017ba:	f7ff fb53 	bl	8000e64 <HAL_GetTick>
 80017be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017c0:	e008      	b.n	80017d4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017c2:	f7ff fb4f 	bl	8000e64 <HAL_GetTick>
 80017c6:	4602      	mov	r2, r0
 80017c8:	693b      	ldr	r3, [r7, #16]
 80017ca:	1ad3      	subs	r3, r2, r3
 80017cc:	2b02      	cmp	r3, #2
 80017ce:	d901      	bls.n	80017d4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80017d0:	2303      	movs	r3, #3
 80017d2:	e053      	b.n	800187c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017d4:	4b11      	ldr	r3, [pc, #68]	@ (800181c <HAL_RCC_OscConfig+0x470>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d0f0      	beq.n	80017c2 <HAL_RCC_OscConfig+0x416>
 80017e0:	e04b      	b.n	800187a <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017e2:	4b10      	ldr	r3, [pc, #64]	@ (8001824 <HAL_RCC_OscConfig+0x478>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017e8:	f7ff fb3c 	bl	8000e64 <HAL_GetTick>
 80017ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017ee:	e008      	b.n	8001802 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017f0:	f7ff fb38 	bl	8000e64 <HAL_GetTick>
 80017f4:	4602      	mov	r2, r0
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	1ad3      	subs	r3, r2, r3
 80017fa:	2b02      	cmp	r3, #2
 80017fc:	d901      	bls.n	8001802 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80017fe:	2303      	movs	r3, #3
 8001800:	e03c      	b.n	800187c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001802:	4b06      	ldr	r3, [pc, #24]	@ (800181c <HAL_RCC_OscConfig+0x470>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800180a:	2b00      	cmp	r3, #0
 800180c:	d1f0      	bne.n	80017f0 <HAL_RCC_OscConfig+0x444>
 800180e:	e034      	b.n	800187a <HAL_RCC_OscConfig+0x4ce>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	699b      	ldr	r3, [r3, #24]
 8001814:	2b01      	cmp	r3, #1
 8001816:	d107      	bne.n	8001828 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001818:	2301      	movs	r3, #1
 800181a:	e02f      	b.n	800187c <HAL_RCC_OscConfig+0x4d0>
 800181c:	40023800 	.word	0x40023800
 8001820:	40007000 	.word	0x40007000
 8001824:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001828:	4b16      	ldr	r3, [pc, #88]	@ (8001884 <HAL_RCC_OscConfig+0x4d8>)
 800182a:	689b      	ldr	r3, [r3, #8]
 800182c:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	69db      	ldr	r3, [r3, #28]
 8001838:	429a      	cmp	r2, r3
 800183a:	d11c      	bne.n	8001876 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001846:	429a      	cmp	r2, r3
 8001848:	d115      	bne.n	8001876 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800184a:	68fa      	ldr	r2, [r7, #12]
 800184c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001850:	4013      	ands	r3, r2
 8001852:	687a      	ldr	r2, [r7, #4]
 8001854:	6a52      	ldr	r2, [r2, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001856:	4293      	cmp	r3, r2
 8001858:	d10d      	bne.n	8001876 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001864:	429a      	cmp	r2, r3
 8001866:	d106      	bne.n	8001876 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001872:	429a      	cmp	r2, r3
 8001874:	d001      	beq.n	800187a <HAL_RCC_OscConfig+0x4ce>
        {
          return HAL_ERROR;
 8001876:	2301      	movs	r3, #1
 8001878:	e000      	b.n	800187c <HAL_RCC_OscConfig+0x4d0>
        }
      }
    }
  }
  return HAL_OK;
 800187a:	2300      	movs	r3, #0
}
 800187c:	4618      	mov	r0, r3
 800187e:	3718      	adds	r7, #24
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}
 8001884:	40023800 	.word	0x40023800

08001888 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b084      	sub	sp, #16
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
 8001890:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d101      	bne.n	800189c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001898:	2301      	movs	r3, #1
 800189a:	e0cc      	b.n	8001a36 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800189c:	4b68      	ldr	r3, [pc, #416]	@ (8001a40 <HAL_RCC_ClockConfig+0x1b8>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f003 030f 	and.w	r3, r3, #15
 80018a4:	683a      	ldr	r2, [r7, #0]
 80018a6:	429a      	cmp	r2, r3
 80018a8:	d90c      	bls.n	80018c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018aa:	4b65      	ldr	r3, [pc, #404]	@ (8001a40 <HAL_RCC_ClockConfig+0x1b8>)
 80018ac:	683a      	ldr	r2, [r7, #0]
 80018ae:	b2d2      	uxtb	r2, r2
 80018b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018b2:	4b63      	ldr	r3, [pc, #396]	@ (8001a40 <HAL_RCC_ClockConfig+0x1b8>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f003 030f 	and.w	r3, r3, #15
 80018ba:	683a      	ldr	r2, [r7, #0]
 80018bc:	429a      	cmp	r2, r3
 80018be:	d001      	beq.n	80018c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80018c0:	2301      	movs	r3, #1
 80018c2:	e0b8      	b.n	8001a36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f003 0302 	and.w	r3, r3, #2
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d020      	beq.n	8001912 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f003 0304 	and.w	r3, r3, #4
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d005      	beq.n	80018e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018dc:	4b59      	ldr	r3, [pc, #356]	@ (8001a44 <HAL_RCC_ClockConfig+0x1bc>)
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	4a58      	ldr	r2, [pc, #352]	@ (8001a44 <HAL_RCC_ClockConfig+0x1bc>)
 80018e2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80018e6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f003 0308 	and.w	r3, r3, #8
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d005      	beq.n	8001900 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80018f4:	4b53      	ldr	r3, [pc, #332]	@ (8001a44 <HAL_RCC_ClockConfig+0x1bc>)
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	4a52      	ldr	r2, [pc, #328]	@ (8001a44 <HAL_RCC_ClockConfig+0x1bc>)
 80018fa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80018fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001900:	4b50      	ldr	r3, [pc, #320]	@ (8001a44 <HAL_RCC_ClockConfig+0x1bc>)
 8001902:	689b      	ldr	r3, [r3, #8]
 8001904:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	494d      	ldr	r1, [pc, #308]	@ (8001a44 <HAL_RCC_ClockConfig+0x1bc>)
 800190e:	4313      	orrs	r3, r2
 8001910:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f003 0301 	and.w	r3, r3, #1
 800191a:	2b00      	cmp	r3, #0
 800191c:	d044      	beq.n	80019a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	2b01      	cmp	r3, #1
 8001924:	d107      	bne.n	8001936 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001926:	4b47      	ldr	r3, [pc, #284]	@ (8001a44 <HAL_RCC_ClockConfig+0x1bc>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800192e:	2b00      	cmp	r3, #0
 8001930:	d119      	bne.n	8001966 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001932:	2301      	movs	r3, #1
 8001934:	e07f      	b.n	8001a36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	2b02      	cmp	r3, #2
 800193c:	d003      	beq.n	8001946 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001942:	2b03      	cmp	r3, #3
 8001944:	d107      	bne.n	8001956 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001946:	4b3f      	ldr	r3, [pc, #252]	@ (8001a44 <HAL_RCC_ClockConfig+0x1bc>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800194e:	2b00      	cmp	r3, #0
 8001950:	d109      	bne.n	8001966 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001952:	2301      	movs	r3, #1
 8001954:	e06f      	b.n	8001a36 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001956:	4b3b      	ldr	r3, [pc, #236]	@ (8001a44 <HAL_RCC_ClockConfig+0x1bc>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f003 0302 	and.w	r3, r3, #2
 800195e:	2b00      	cmp	r3, #0
 8001960:	d101      	bne.n	8001966 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001962:	2301      	movs	r3, #1
 8001964:	e067      	b.n	8001a36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001966:	4b37      	ldr	r3, [pc, #220]	@ (8001a44 <HAL_RCC_ClockConfig+0x1bc>)
 8001968:	689b      	ldr	r3, [r3, #8]
 800196a:	f023 0203 	bic.w	r2, r3, #3
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	4934      	ldr	r1, [pc, #208]	@ (8001a44 <HAL_RCC_ClockConfig+0x1bc>)
 8001974:	4313      	orrs	r3, r2
 8001976:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001978:	f7ff fa74 	bl	8000e64 <HAL_GetTick>
 800197c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800197e:	e00a      	b.n	8001996 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001980:	f7ff fa70 	bl	8000e64 <HAL_GetTick>
 8001984:	4602      	mov	r2, r0
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	1ad3      	subs	r3, r2, r3
 800198a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800198e:	4293      	cmp	r3, r2
 8001990:	d901      	bls.n	8001996 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001992:	2303      	movs	r3, #3
 8001994:	e04f      	b.n	8001a36 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001996:	4b2b      	ldr	r3, [pc, #172]	@ (8001a44 <HAL_RCC_ClockConfig+0x1bc>)
 8001998:	689b      	ldr	r3, [r3, #8]
 800199a:	f003 020c 	and.w	r2, r3, #12
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	009b      	lsls	r3, r3, #2
 80019a4:	429a      	cmp	r2, r3
 80019a6:	d1eb      	bne.n	8001980 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80019a8:	4b25      	ldr	r3, [pc, #148]	@ (8001a40 <HAL_RCC_ClockConfig+0x1b8>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f003 030f 	and.w	r3, r3, #15
 80019b0:	683a      	ldr	r2, [r7, #0]
 80019b2:	429a      	cmp	r2, r3
 80019b4:	d20c      	bcs.n	80019d0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019b6:	4b22      	ldr	r3, [pc, #136]	@ (8001a40 <HAL_RCC_ClockConfig+0x1b8>)
 80019b8:	683a      	ldr	r2, [r7, #0]
 80019ba:	b2d2      	uxtb	r2, r2
 80019bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019be:	4b20      	ldr	r3, [pc, #128]	@ (8001a40 <HAL_RCC_ClockConfig+0x1b8>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f003 030f 	and.w	r3, r3, #15
 80019c6:	683a      	ldr	r2, [r7, #0]
 80019c8:	429a      	cmp	r2, r3
 80019ca:	d001      	beq.n	80019d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80019cc:	2301      	movs	r3, #1
 80019ce:	e032      	b.n	8001a36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f003 0304 	and.w	r3, r3, #4
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d008      	beq.n	80019ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019dc:	4b19      	ldr	r3, [pc, #100]	@ (8001a44 <HAL_RCC_ClockConfig+0x1bc>)
 80019de:	689b      	ldr	r3, [r3, #8]
 80019e0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	68db      	ldr	r3, [r3, #12]
 80019e8:	4916      	ldr	r1, [pc, #88]	@ (8001a44 <HAL_RCC_ClockConfig+0x1bc>)
 80019ea:	4313      	orrs	r3, r2
 80019ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f003 0308 	and.w	r3, r3, #8
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d009      	beq.n	8001a0e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80019fa:	4b12      	ldr	r3, [pc, #72]	@ (8001a44 <HAL_RCC_ClockConfig+0x1bc>)
 80019fc:	689b      	ldr	r3, [r3, #8]
 80019fe:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	691b      	ldr	r3, [r3, #16]
 8001a06:	00db      	lsls	r3, r3, #3
 8001a08:	490e      	ldr	r1, [pc, #56]	@ (8001a44 <HAL_RCC_ClockConfig+0x1bc>)
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a0e:	f000 f821 	bl	8001a54 <HAL_RCC_GetSysClockFreq>
 8001a12:	4602      	mov	r2, r0
 8001a14:	4b0b      	ldr	r3, [pc, #44]	@ (8001a44 <HAL_RCC_ClockConfig+0x1bc>)
 8001a16:	689b      	ldr	r3, [r3, #8]
 8001a18:	091b      	lsrs	r3, r3, #4
 8001a1a:	f003 030f 	and.w	r3, r3, #15
 8001a1e:	490a      	ldr	r1, [pc, #40]	@ (8001a48 <HAL_RCC_ClockConfig+0x1c0>)
 8001a20:	5ccb      	ldrb	r3, [r1, r3]
 8001a22:	fa22 f303 	lsr.w	r3, r2, r3
 8001a26:	4a09      	ldr	r2, [pc, #36]	@ (8001a4c <HAL_RCC_ClockConfig+0x1c4>)
 8001a28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001a2a:	4b09      	ldr	r3, [pc, #36]	@ (8001a50 <HAL_RCC_ClockConfig+0x1c8>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f7ff f8ac 	bl	8000b8c <HAL_InitTick>

  return HAL_OK;
 8001a34:	2300      	movs	r3, #0
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	3710      	adds	r7, #16
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	40023c00 	.word	0x40023c00
 8001a44:	40023800 	.word	0x40023800
 8001a48:	08007064 	.word	0x08007064
 8001a4c:	20000000 	.word	0x20000000
 8001a50:	20000004 	.word	0x20000004

08001a54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a58:	b094      	sub	sp, #80	@ 0x50
 8001a5a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	647b      	str	r3, [r7, #68]	@ 0x44
 8001a60:	2300      	movs	r3, #0
 8001a62:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001a64:	2300      	movs	r3, #0
 8001a66:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a6c:	4b79      	ldr	r3, [pc, #484]	@ (8001c54 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	f003 030c 	and.w	r3, r3, #12
 8001a74:	2b08      	cmp	r3, #8
 8001a76:	d00d      	beq.n	8001a94 <HAL_RCC_GetSysClockFreq+0x40>
 8001a78:	2b08      	cmp	r3, #8
 8001a7a:	f200 80e1 	bhi.w	8001c40 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d002      	beq.n	8001a88 <HAL_RCC_GetSysClockFreq+0x34>
 8001a82:	2b04      	cmp	r3, #4
 8001a84:	d003      	beq.n	8001a8e <HAL_RCC_GetSysClockFreq+0x3a>
 8001a86:	e0db      	b.n	8001c40 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a88:	4b73      	ldr	r3, [pc, #460]	@ (8001c58 <HAL_RCC_GetSysClockFreq+0x204>)
 8001a8a:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8001a8c:	e0db      	b.n	8001c46 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001a8e:	4b73      	ldr	r3, [pc, #460]	@ (8001c5c <HAL_RCC_GetSysClockFreq+0x208>)
 8001a90:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001a92:	e0d8      	b.n	8001c46 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a94:	4b6f      	ldr	r3, [pc, #444]	@ (8001c54 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001a9c:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a9e:	4b6d      	ldr	r3, [pc, #436]	@ (8001c54 <HAL_RCC_GetSysClockFreq+0x200>)
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d063      	beq.n	8001b72 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001aaa:	4b6a      	ldr	r3, [pc, #424]	@ (8001c54 <HAL_RCC_GetSysClockFreq+0x200>)
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	099b      	lsrs	r3, r3, #6
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001ab4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001ab6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001ab8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001abc:	633b      	str	r3, [r7, #48]	@ 0x30
 8001abe:	2300      	movs	r3, #0
 8001ac0:	637b      	str	r3, [r7, #52]	@ 0x34
 8001ac2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001ac6:	4622      	mov	r2, r4
 8001ac8:	462b      	mov	r3, r5
 8001aca:	f04f 0000 	mov.w	r0, #0
 8001ace:	f04f 0100 	mov.w	r1, #0
 8001ad2:	0159      	lsls	r1, r3, #5
 8001ad4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ad8:	0150      	lsls	r0, r2, #5
 8001ada:	4602      	mov	r2, r0
 8001adc:	460b      	mov	r3, r1
 8001ade:	4621      	mov	r1, r4
 8001ae0:	1a51      	subs	r1, r2, r1
 8001ae2:	6139      	str	r1, [r7, #16]
 8001ae4:	4629      	mov	r1, r5
 8001ae6:	eb63 0301 	sbc.w	r3, r3, r1
 8001aea:	617b      	str	r3, [r7, #20]
 8001aec:	f04f 0200 	mov.w	r2, #0
 8001af0:	f04f 0300 	mov.w	r3, #0
 8001af4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001af8:	4659      	mov	r1, fp
 8001afa:	018b      	lsls	r3, r1, #6
 8001afc:	4651      	mov	r1, sl
 8001afe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001b02:	4651      	mov	r1, sl
 8001b04:	018a      	lsls	r2, r1, #6
 8001b06:	4651      	mov	r1, sl
 8001b08:	ebb2 0801 	subs.w	r8, r2, r1
 8001b0c:	4659      	mov	r1, fp
 8001b0e:	eb63 0901 	sbc.w	r9, r3, r1
 8001b12:	f04f 0200 	mov.w	r2, #0
 8001b16:	f04f 0300 	mov.w	r3, #0
 8001b1a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001b1e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001b22:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001b26:	4690      	mov	r8, r2
 8001b28:	4699      	mov	r9, r3
 8001b2a:	4623      	mov	r3, r4
 8001b2c:	eb18 0303 	adds.w	r3, r8, r3
 8001b30:	60bb      	str	r3, [r7, #8]
 8001b32:	462b      	mov	r3, r5
 8001b34:	eb49 0303 	adc.w	r3, r9, r3
 8001b38:	60fb      	str	r3, [r7, #12]
 8001b3a:	f04f 0200 	mov.w	r2, #0
 8001b3e:	f04f 0300 	mov.w	r3, #0
 8001b42:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001b46:	4629      	mov	r1, r5
 8001b48:	024b      	lsls	r3, r1, #9
 8001b4a:	4621      	mov	r1, r4
 8001b4c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001b50:	4621      	mov	r1, r4
 8001b52:	024a      	lsls	r2, r1, #9
 8001b54:	4610      	mov	r0, r2
 8001b56:	4619      	mov	r1, r3
 8001b58:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001b5e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001b60:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001b64:	f7fe fbd4 	bl	8000310 <__aeabi_uldivmod>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	460b      	mov	r3, r1
 8001b6c:	4613      	mov	r3, r2
 8001b6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001b70:	e058      	b.n	8001c24 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b72:	4b38      	ldr	r3, [pc, #224]	@ (8001c54 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	099b      	lsrs	r3, r3, #6
 8001b78:	2200      	movs	r2, #0
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	4611      	mov	r1, r2
 8001b7e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001b82:	623b      	str	r3, [r7, #32]
 8001b84:	2300      	movs	r3, #0
 8001b86:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b88:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001b8c:	4642      	mov	r2, r8
 8001b8e:	464b      	mov	r3, r9
 8001b90:	f04f 0000 	mov.w	r0, #0
 8001b94:	f04f 0100 	mov.w	r1, #0
 8001b98:	0159      	lsls	r1, r3, #5
 8001b9a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b9e:	0150      	lsls	r0, r2, #5
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	460b      	mov	r3, r1
 8001ba4:	4641      	mov	r1, r8
 8001ba6:	ebb2 0a01 	subs.w	sl, r2, r1
 8001baa:	4649      	mov	r1, r9
 8001bac:	eb63 0b01 	sbc.w	fp, r3, r1
 8001bb0:	f04f 0200 	mov.w	r2, #0
 8001bb4:	f04f 0300 	mov.w	r3, #0
 8001bb8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001bbc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001bc0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001bc4:	ebb2 040a 	subs.w	r4, r2, sl
 8001bc8:	eb63 050b 	sbc.w	r5, r3, fp
 8001bcc:	f04f 0200 	mov.w	r2, #0
 8001bd0:	f04f 0300 	mov.w	r3, #0
 8001bd4:	00eb      	lsls	r3, r5, #3
 8001bd6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001bda:	00e2      	lsls	r2, r4, #3
 8001bdc:	4614      	mov	r4, r2
 8001bde:	461d      	mov	r5, r3
 8001be0:	4643      	mov	r3, r8
 8001be2:	18e3      	adds	r3, r4, r3
 8001be4:	603b      	str	r3, [r7, #0]
 8001be6:	464b      	mov	r3, r9
 8001be8:	eb45 0303 	adc.w	r3, r5, r3
 8001bec:	607b      	str	r3, [r7, #4]
 8001bee:	f04f 0200 	mov.w	r2, #0
 8001bf2:	f04f 0300 	mov.w	r3, #0
 8001bf6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001bfa:	4629      	mov	r1, r5
 8001bfc:	028b      	lsls	r3, r1, #10
 8001bfe:	4621      	mov	r1, r4
 8001c00:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001c04:	4621      	mov	r1, r4
 8001c06:	028a      	lsls	r2, r1, #10
 8001c08:	4610      	mov	r0, r2
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001c0e:	2200      	movs	r2, #0
 8001c10:	61bb      	str	r3, [r7, #24]
 8001c12:	61fa      	str	r2, [r7, #28]
 8001c14:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c18:	f7fe fb7a 	bl	8000310 <__aeabi_uldivmod>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	460b      	mov	r3, r1
 8001c20:	4613      	mov	r3, r2
 8001c22:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001c24:	4b0b      	ldr	r3, [pc, #44]	@ (8001c54 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	0c1b      	lsrs	r3, r3, #16
 8001c2a:	f003 0303 	and.w	r3, r3, #3
 8001c2e:	3301      	adds	r3, #1
 8001c30:	005b      	lsls	r3, r3, #1
 8001c32:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8001c34:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001c36:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001c38:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c3c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001c3e:	e002      	b.n	8001c46 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c40:	4b05      	ldr	r3, [pc, #20]	@ (8001c58 <HAL_RCC_GetSysClockFreq+0x204>)
 8001c42:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001c44:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c46:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	3750      	adds	r7, #80	@ 0x50
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c52:	bf00      	nop
 8001c54:	40023800 	.word	0x40023800
 8001c58:	00f42400 	.word	0x00f42400
 8001c5c:	007a1200 	.word	0x007a1200

08001c60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c60:	b480      	push	{r7}
 8001c62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c64:	4b03      	ldr	r3, [pc, #12]	@ (8001c74 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c66:	681b      	ldr	r3, [r3, #0]
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr
 8001c72:	bf00      	nop
 8001c74:	20000000 	.word	0x20000000

08001c78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001c7c:	f7ff fff0 	bl	8001c60 <HAL_RCC_GetHCLKFreq>
 8001c80:	4602      	mov	r2, r0
 8001c82:	4b05      	ldr	r3, [pc, #20]	@ (8001c98 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c84:	689b      	ldr	r3, [r3, #8]
 8001c86:	0a9b      	lsrs	r3, r3, #10
 8001c88:	f003 0307 	and.w	r3, r3, #7
 8001c8c:	4903      	ldr	r1, [pc, #12]	@ (8001c9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c8e:	5ccb      	ldrb	r3, [r1, r3]
 8001c90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	40023800 	.word	0x40023800
 8001c9c:	08007074 	.word	0x08007074

08001ca0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b083      	sub	sp, #12
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
 8001ca8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	220f      	movs	r2, #15
 8001cae:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001cb0:	4b12      	ldr	r3, [pc, #72]	@ (8001cfc <HAL_RCC_GetClockConfig+0x5c>)
 8001cb2:	689b      	ldr	r3, [r3, #8]
 8001cb4:	f003 0203 	and.w	r2, r3, #3
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001cbc:	4b0f      	ldr	r3, [pc, #60]	@ (8001cfc <HAL_RCC_GetClockConfig+0x5c>)
 8001cbe:	689b      	ldr	r3, [r3, #8]
 8001cc0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001cc8:	4b0c      	ldr	r3, [pc, #48]	@ (8001cfc <HAL_RCC_GetClockConfig+0x5c>)
 8001cca:	689b      	ldr	r3, [r3, #8]
 8001ccc:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001cd4:	4b09      	ldr	r3, [pc, #36]	@ (8001cfc <HAL_RCC_GetClockConfig+0x5c>)
 8001cd6:	689b      	ldr	r3, [r3, #8]
 8001cd8:	08db      	lsrs	r3, r3, #3
 8001cda:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001ce2:	4b07      	ldr	r3, [pc, #28]	@ (8001d00 <HAL_RCC_GetClockConfig+0x60>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f003 020f 	and.w	r2, r3, #15
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	601a      	str	r2, [r3, #0]
}
 8001cee:	bf00      	nop
 8001cf0:	370c      	adds	r7, #12
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr
 8001cfa:	bf00      	nop
 8001cfc:	40023800 	.word	0x40023800
 8001d00:	40023c00 	.word	0x40023c00

08001d04 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b082      	sub	sp, #8
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d101      	bne.n	8001d16 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	e01d      	b.n	8001d52 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d1c:	b2db      	uxtb	r3, r3
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d106      	bne.n	8001d30 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2200      	movs	r2, #0
 8001d26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d2a:	6878      	ldr	r0, [r7, #4]
 8001d2c:	f000 f815 	bl	8001d5a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2202      	movs	r2, #2
 8001d34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681a      	ldr	r2, [r3, #0]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	3304      	adds	r3, #4
 8001d40:	4619      	mov	r1, r3
 8001d42:	4610      	mov	r0, r2
 8001d44:	f000 f968 	bl	8002018 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001d50:	2300      	movs	r3, #0
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	3708      	adds	r7, #8
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}

08001d5a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001d5a:	b480      	push	{r7}
 8001d5c:	b083      	sub	sp, #12
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001d62:	bf00      	nop
 8001d64:	370c      	adds	r7, #12
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr

08001d6e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001d6e:	b480      	push	{r7}
 8001d70:	b085      	sub	sp, #20
 8001d72:	af00      	add	r7, sp, #0
 8001d74:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	68da      	ldr	r2, [r3, #12]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f042 0201 	orr.w	r2, r2, #1
 8001d84:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	f003 0307 	and.w	r3, r3, #7
 8001d90:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	2b06      	cmp	r3, #6
 8001d96:	d007      	beq.n	8001da8 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	681a      	ldr	r2, [r3, #0]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f042 0201 	orr.w	r2, r2, #1
 8001da6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001da8:	2300      	movs	r3, #0
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	3714      	adds	r7, #20
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr

08001db6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001db6:	b580      	push	{r7, lr}
 8001db8:	b082      	sub	sp, #8
 8001dba:	af00      	add	r7, sp, #0
 8001dbc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	691b      	ldr	r3, [r3, #16]
 8001dc4:	f003 0302 	and.w	r3, r3, #2
 8001dc8:	2b02      	cmp	r3, #2
 8001dca:	d122      	bne.n	8001e12 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	68db      	ldr	r3, [r3, #12]
 8001dd2:	f003 0302 	and.w	r3, r3, #2
 8001dd6:	2b02      	cmp	r3, #2
 8001dd8:	d11b      	bne.n	8001e12 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f06f 0202 	mvn.w	r2, #2
 8001de2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2201      	movs	r2, #1
 8001de8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	699b      	ldr	r3, [r3, #24]
 8001df0:	f003 0303 	and.w	r3, r3, #3
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d003      	beq.n	8001e00 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001df8:	6878      	ldr	r0, [r7, #4]
 8001dfa:	f000 f8ee 	bl	8001fda <HAL_TIM_IC_CaptureCallback>
 8001dfe:	e005      	b.n	8001e0c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e00:	6878      	ldr	r0, [r7, #4]
 8001e02:	f000 f8e0 	bl	8001fc6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e06:	6878      	ldr	r0, [r7, #4]
 8001e08:	f000 f8f1 	bl	8001fee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2200      	movs	r2, #0
 8001e10:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	691b      	ldr	r3, [r3, #16]
 8001e18:	f003 0304 	and.w	r3, r3, #4
 8001e1c:	2b04      	cmp	r3, #4
 8001e1e:	d122      	bne.n	8001e66 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	68db      	ldr	r3, [r3, #12]
 8001e26:	f003 0304 	and.w	r3, r3, #4
 8001e2a:	2b04      	cmp	r3, #4
 8001e2c:	d11b      	bne.n	8001e66 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f06f 0204 	mvn.w	r2, #4
 8001e36:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2202      	movs	r2, #2
 8001e3c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	699b      	ldr	r3, [r3, #24]
 8001e44:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d003      	beq.n	8001e54 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e4c:	6878      	ldr	r0, [r7, #4]
 8001e4e:	f000 f8c4 	bl	8001fda <HAL_TIM_IC_CaptureCallback>
 8001e52:	e005      	b.n	8001e60 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e54:	6878      	ldr	r0, [r7, #4]
 8001e56:	f000 f8b6 	bl	8001fc6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e5a:	6878      	ldr	r0, [r7, #4]
 8001e5c:	f000 f8c7 	bl	8001fee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2200      	movs	r2, #0
 8001e64:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	691b      	ldr	r3, [r3, #16]
 8001e6c:	f003 0308 	and.w	r3, r3, #8
 8001e70:	2b08      	cmp	r3, #8
 8001e72:	d122      	bne.n	8001eba <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	68db      	ldr	r3, [r3, #12]
 8001e7a:	f003 0308 	and.w	r3, r3, #8
 8001e7e:	2b08      	cmp	r3, #8
 8001e80:	d11b      	bne.n	8001eba <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f06f 0208 	mvn.w	r2, #8
 8001e8a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2204      	movs	r2, #4
 8001e90:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	69db      	ldr	r3, [r3, #28]
 8001e98:	f003 0303 	and.w	r3, r3, #3
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d003      	beq.n	8001ea8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ea0:	6878      	ldr	r0, [r7, #4]
 8001ea2:	f000 f89a 	bl	8001fda <HAL_TIM_IC_CaptureCallback>
 8001ea6:	e005      	b.n	8001eb4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ea8:	6878      	ldr	r0, [r7, #4]
 8001eaa:	f000 f88c 	bl	8001fc6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001eae:	6878      	ldr	r0, [r7, #4]
 8001eb0:	f000 f89d 	bl	8001fee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	691b      	ldr	r3, [r3, #16]
 8001ec0:	f003 0310 	and.w	r3, r3, #16
 8001ec4:	2b10      	cmp	r3, #16
 8001ec6:	d122      	bne.n	8001f0e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	68db      	ldr	r3, [r3, #12]
 8001ece:	f003 0310 	and.w	r3, r3, #16
 8001ed2:	2b10      	cmp	r3, #16
 8001ed4:	d11b      	bne.n	8001f0e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f06f 0210 	mvn.w	r2, #16
 8001ede:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2208      	movs	r2, #8
 8001ee4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	69db      	ldr	r3, [r3, #28]
 8001eec:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d003      	beq.n	8001efc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ef4:	6878      	ldr	r0, [r7, #4]
 8001ef6:	f000 f870 	bl	8001fda <HAL_TIM_IC_CaptureCallback>
 8001efa:	e005      	b.n	8001f08 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001efc:	6878      	ldr	r0, [r7, #4]
 8001efe:	f000 f862 	bl	8001fc6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f02:	6878      	ldr	r0, [r7, #4]
 8001f04:	f000 f873 	bl	8001fee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	691b      	ldr	r3, [r3, #16]
 8001f14:	f003 0301 	and.w	r3, r3, #1
 8001f18:	2b01      	cmp	r3, #1
 8001f1a:	d10e      	bne.n	8001f3a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	68db      	ldr	r3, [r3, #12]
 8001f22:	f003 0301 	and.w	r3, r3, #1
 8001f26:	2b01      	cmp	r3, #1
 8001f28:	d107      	bne.n	8001f3a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f06f 0201 	mvn.w	r2, #1
 8001f32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001f34:	6878      	ldr	r0, [r7, #4]
 8001f36:	f7fe fde7 	bl	8000b08 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	691b      	ldr	r3, [r3, #16]
 8001f40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f44:	2b80      	cmp	r3, #128	@ 0x80
 8001f46:	d10e      	bne.n	8001f66 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	68db      	ldr	r3, [r3, #12]
 8001f4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f52:	2b80      	cmp	r3, #128	@ 0x80
 8001f54:	d107      	bne.n	8001f66 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001f5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001f60:	6878      	ldr	r0, [r7, #4]
 8001f62:	f000 f903 	bl	800216c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	691b      	ldr	r3, [r3, #16]
 8001f6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f70:	2b40      	cmp	r3, #64	@ 0x40
 8001f72:	d10e      	bne.n	8001f92 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	68db      	ldr	r3, [r3, #12]
 8001f7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f7e:	2b40      	cmp	r3, #64	@ 0x40
 8001f80:	d107      	bne.n	8001f92 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001f8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001f8c:	6878      	ldr	r0, [r7, #4]
 8001f8e:	f000 f838 	bl	8002002 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	691b      	ldr	r3, [r3, #16]
 8001f98:	f003 0320 	and.w	r3, r3, #32
 8001f9c:	2b20      	cmp	r3, #32
 8001f9e:	d10e      	bne.n	8001fbe <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	68db      	ldr	r3, [r3, #12]
 8001fa6:	f003 0320 	and.w	r3, r3, #32
 8001faa:	2b20      	cmp	r3, #32
 8001fac:	d107      	bne.n	8001fbe <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f06f 0220 	mvn.w	r2, #32
 8001fb6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001fb8:	6878      	ldr	r0, [r7, #4]
 8001fba:	f000 f8cd 	bl	8002158 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001fbe:	bf00      	nop
 8001fc0:	3708      	adds	r7, #8
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}

08001fc6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001fc6:	b480      	push	{r7}
 8001fc8:	b083      	sub	sp, #12
 8001fca:	af00      	add	r7, sp, #0
 8001fcc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001fce:	bf00      	nop
 8001fd0:	370c      	adds	r7, #12
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr

08001fda <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001fda:	b480      	push	{r7}
 8001fdc:	b083      	sub	sp, #12
 8001fde:	af00      	add	r7, sp, #0
 8001fe0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001fe2:	bf00      	nop
 8001fe4:	370c      	adds	r7, #12
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr

08001fee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001fee:	b480      	push	{r7}
 8001ff0:	b083      	sub	sp, #12
 8001ff2:	af00      	add	r7, sp, #0
 8001ff4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001ff6:	bf00      	nop
 8001ff8:	370c      	adds	r7, #12
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr

08002002 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002002:	b480      	push	{r7}
 8002004:	b083      	sub	sp, #12
 8002006:	af00      	add	r7, sp, #0
 8002008:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800200a:	bf00      	nop
 800200c:	370c      	adds	r7, #12
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr
	...

08002018 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002018:	b480      	push	{r7}
 800201a:	b085      	sub	sp, #20
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
 8002020:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	4a40      	ldr	r2, [pc, #256]	@ (800212c <TIM_Base_SetConfig+0x114>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d013      	beq.n	8002058 <TIM_Base_SetConfig+0x40>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002036:	d00f      	beq.n	8002058 <TIM_Base_SetConfig+0x40>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	4a3d      	ldr	r2, [pc, #244]	@ (8002130 <TIM_Base_SetConfig+0x118>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d00b      	beq.n	8002058 <TIM_Base_SetConfig+0x40>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	4a3c      	ldr	r2, [pc, #240]	@ (8002134 <TIM_Base_SetConfig+0x11c>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d007      	beq.n	8002058 <TIM_Base_SetConfig+0x40>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	4a3b      	ldr	r2, [pc, #236]	@ (8002138 <TIM_Base_SetConfig+0x120>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d003      	beq.n	8002058 <TIM_Base_SetConfig+0x40>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	4a3a      	ldr	r2, [pc, #232]	@ (800213c <TIM_Base_SetConfig+0x124>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d108      	bne.n	800206a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800205e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	68fa      	ldr	r2, [r7, #12]
 8002066:	4313      	orrs	r3, r2
 8002068:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	4a2f      	ldr	r2, [pc, #188]	@ (800212c <TIM_Base_SetConfig+0x114>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d02b      	beq.n	80020ca <TIM_Base_SetConfig+0xb2>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002078:	d027      	beq.n	80020ca <TIM_Base_SetConfig+0xb2>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	4a2c      	ldr	r2, [pc, #176]	@ (8002130 <TIM_Base_SetConfig+0x118>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d023      	beq.n	80020ca <TIM_Base_SetConfig+0xb2>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	4a2b      	ldr	r2, [pc, #172]	@ (8002134 <TIM_Base_SetConfig+0x11c>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d01f      	beq.n	80020ca <TIM_Base_SetConfig+0xb2>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	4a2a      	ldr	r2, [pc, #168]	@ (8002138 <TIM_Base_SetConfig+0x120>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d01b      	beq.n	80020ca <TIM_Base_SetConfig+0xb2>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	4a29      	ldr	r2, [pc, #164]	@ (800213c <TIM_Base_SetConfig+0x124>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d017      	beq.n	80020ca <TIM_Base_SetConfig+0xb2>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	4a28      	ldr	r2, [pc, #160]	@ (8002140 <TIM_Base_SetConfig+0x128>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d013      	beq.n	80020ca <TIM_Base_SetConfig+0xb2>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	4a27      	ldr	r2, [pc, #156]	@ (8002144 <TIM_Base_SetConfig+0x12c>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d00f      	beq.n	80020ca <TIM_Base_SetConfig+0xb2>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	4a26      	ldr	r2, [pc, #152]	@ (8002148 <TIM_Base_SetConfig+0x130>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d00b      	beq.n	80020ca <TIM_Base_SetConfig+0xb2>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	4a25      	ldr	r2, [pc, #148]	@ (800214c <TIM_Base_SetConfig+0x134>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d007      	beq.n	80020ca <TIM_Base_SetConfig+0xb2>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	4a24      	ldr	r2, [pc, #144]	@ (8002150 <TIM_Base_SetConfig+0x138>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d003      	beq.n	80020ca <TIM_Base_SetConfig+0xb2>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	4a23      	ldr	r2, [pc, #140]	@ (8002154 <TIM_Base_SetConfig+0x13c>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d108      	bne.n	80020dc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80020d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	68db      	ldr	r3, [r3, #12]
 80020d6:	68fa      	ldr	r2, [r7, #12]
 80020d8:	4313      	orrs	r3, r2
 80020da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	695b      	ldr	r3, [r3, #20]
 80020e6:	4313      	orrs	r3, r2
 80020e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	68fa      	ldr	r2, [r7, #12]
 80020ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	689a      	ldr	r2, [r3, #8]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	681a      	ldr	r2, [r3, #0]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	4a0a      	ldr	r2, [pc, #40]	@ (800212c <TIM_Base_SetConfig+0x114>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d003      	beq.n	8002110 <TIM_Base_SetConfig+0xf8>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	4a0c      	ldr	r2, [pc, #48]	@ (800213c <TIM_Base_SetConfig+0x124>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d103      	bne.n	8002118 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	691a      	ldr	r2, [r3, #16]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2201      	movs	r2, #1
 800211c:	615a      	str	r2, [r3, #20]
}
 800211e:	bf00      	nop
 8002120:	3714      	adds	r7, #20
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr
 800212a:	bf00      	nop
 800212c:	40010000 	.word	0x40010000
 8002130:	40000400 	.word	0x40000400
 8002134:	40000800 	.word	0x40000800
 8002138:	40000c00 	.word	0x40000c00
 800213c:	40010400 	.word	0x40010400
 8002140:	40014000 	.word	0x40014000
 8002144:	40014400 	.word	0x40014400
 8002148:	40014800 	.word	0x40014800
 800214c:	40001800 	.word	0x40001800
 8002150:	40001c00 	.word	0x40001c00
 8002154:	40002000 	.word	0x40002000

08002158 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002158:	b480      	push	{r7}
 800215a:	b083      	sub	sp, #12
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002160:	bf00      	nop
 8002162:	370c      	adds	r7, #12
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr

0800216c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800216c:	b480      	push	{r7}
 800216e:	b083      	sub	sp, #12
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002174:	bf00      	nop
 8002176:	370c      	adds	r7, #12
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr

08002180 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002180:	b480      	push	{r7}
 8002182:	b083      	sub	sp, #12
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	f103 0208 	add.w	r2, r3, #8
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	f04f 32ff 	mov.w	r2, #4294967295
 8002198:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	f103 0208 	add.w	r2, r3, #8
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	f103 0208 	add.w	r2, r3, #8
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2200      	movs	r2, #0
 80021b2:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80021b4:	bf00      	nop
 80021b6:	370c      	adds	r7, #12
 80021b8:	46bd      	mov	sp, r7
 80021ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021be:	4770      	bx	lr

080021c0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80021c0:	b480      	push	{r7}
 80021c2:	b083      	sub	sp, #12
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2200      	movs	r2, #0
 80021cc:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80021ce:	bf00      	nop
 80021d0:	370c      	adds	r7, #12
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr

080021da <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80021da:	b480      	push	{r7}
 80021dc:	b085      	sub	sp, #20
 80021de:	af00      	add	r7, sp, #0
 80021e0:	6078      	str	r0, [r7, #4]
 80021e2:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	68fa      	ldr	r2, [r7, #12]
 80021ee:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	689a      	ldr	r2, [r3, #8]
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	683a      	ldr	r2, [r7, #0]
 80021fe:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	683a      	ldr	r2, [r7, #0]
 8002204:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	687a      	ldr	r2, [r7, #4]
 800220a:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	1c5a      	adds	r2, r3, #1
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	601a      	str	r2, [r3, #0]
}
 8002216:	bf00      	nop
 8002218:	3714      	adds	r7, #20
 800221a:	46bd      	mov	sp, r7
 800221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002220:	4770      	bx	lr

08002222 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8002222:	b480      	push	{r7}
 8002224:	b085      	sub	sp, #20
 8002226:	af00      	add	r7, sp, #0
 8002228:	6078      	str	r0, [r7, #4]
 800222a:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002238:	d103      	bne.n	8002242 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	691b      	ldr	r3, [r3, #16]
 800223e:	60fb      	str	r3, [r7, #12]
 8002240:	e00c      	b.n	800225c <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	3308      	adds	r3, #8
 8002246:	60fb      	str	r3, [r7, #12]
 8002248:	e002      	b.n	8002250 <vListInsert+0x2e>
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	60fb      	str	r3, [r7, #12]
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	68ba      	ldr	r2, [r7, #8]
 8002258:	429a      	cmp	r2, r3
 800225a:	d2f6      	bcs.n	800224a <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	685a      	ldr	r2, [r3, #4]
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	683a      	ldr	r2, [r7, #0]
 800226a:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	68fa      	ldr	r2, [r7, #12]
 8002270:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	683a      	ldr	r2, [r7, #0]
 8002276:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	687a      	ldr	r2, [r7, #4]
 800227c:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	1c5a      	adds	r2, r3, #1
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	601a      	str	r2, [r3, #0]
}
 8002288:	bf00      	nop
 800228a:	3714      	adds	r7, #20
 800228c:	46bd      	mov	sp, r7
 800228e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002292:	4770      	bx	lr

08002294 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002294:	b480      	push	{r7}
 8002296:	b085      	sub	sp, #20
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	691b      	ldr	r3, [r3, #16]
 80022a0:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	687a      	ldr	r2, [r7, #4]
 80022a8:	6892      	ldr	r2, [r2, #8]
 80022aa:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	687a      	ldr	r2, [r7, #4]
 80022b2:	6852      	ldr	r2, [r2, #4]
 80022b4:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	687a      	ldr	r2, [r7, #4]
 80022bc:	429a      	cmp	r2, r3
 80022be:	d103      	bne.n	80022c8 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	689a      	ldr	r2, [r3, #8]
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2200      	movs	r2, #0
 80022cc:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	1e5a      	subs	r2, r3, #1
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
}
 80022dc:	4618      	mov	r0, r3
 80022de:	3714      	adds	r7, #20
 80022e0:	46bd      	mov	sp, r7
 80022e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e6:	4770      	bx	lr

080022e8 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b084      	sub	sp, #16
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
 80022f0:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d10b      	bne.n	8002314 <xQueueGenericReset+0x2c>
        __asm volatile
 80022fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002300:	f383 8811 	msr	BASEPRI, r3
 8002304:	f3bf 8f6f 	isb	sy
 8002308:	f3bf 8f4f 	dsb	sy
 800230c:	60bb      	str	r3, [r7, #8]
    }
 800230e:	bf00      	nop
 8002310:	bf00      	nop
 8002312:	e7fd      	b.n	8002310 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 8002314:	f001 feaa 	bl	800406c <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002320:	68f9      	ldr	r1, [r7, #12]
 8002322:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002324:	fb01 f303 	mul.w	r3, r1, r3
 8002328:	441a      	add	r2, r3
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	2200      	movs	r2, #0
 8002332:	639a      	str	r2, [r3, #56]	@ 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681a      	ldr	r2, [r3, #0]
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681a      	ldr	r2, [r3, #0]
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002344:	3b01      	subs	r3, #1
 8002346:	68f9      	ldr	r1, [r7, #12]
 8002348:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800234a:	fb01 f303 	mul.w	r3, r1, r3
 800234e:	441a      	add	r2, r3
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	22ff      	movs	r2, #255	@ 0xff
 8002358:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	22ff      	movs	r2, #255	@ 0xff
 8002360:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

        if( xNewQueue == pdFALSE )
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d114      	bne.n	8002394 <xQueueGenericReset+0xac>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	691b      	ldr	r3, [r3, #16]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d01a      	beq.n	80023a8 <xQueueGenericReset+0xc0>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	3310      	adds	r3, #16
 8002376:	4618      	mov	r0, r3
 8002378:	f001 f8fc 	bl	8003574 <xTaskRemoveFromEventList>
 800237c:	4603      	mov	r3, r0
 800237e:	2b00      	cmp	r3, #0
 8002380:	d012      	beq.n	80023a8 <xQueueGenericReset+0xc0>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8002382:	4b0d      	ldr	r3, [pc, #52]	@ (80023b8 <xQueueGenericReset+0xd0>)
 8002384:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002388:	601a      	str	r2, [r3, #0]
 800238a:	f3bf 8f4f 	dsb	sy
 800238e:	f3bf 8f6f 	isb	sy
 8002392:	e009      	b.n	80023a8 <xQueueGenericReset+0xc0>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	3310      	adds	r3, #16
 8002398:	4618      	mov	r0, r3
 800239a:	f7ff fef1 	bl	8002180 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	3324      	adds	r3, #36	@ 0x24
 80023a2:	4618      	mov	r0, r3
 80023a4:	f7ff feec 	bl	8002180 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 80023a8:	f001 fe92 	bl	80040d0 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 80023ac:	2301      	movs	r3, #1
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	3710      	adds	r7, #16
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	bf00      	nop
 80023b8:	e000ed04 	.word	0xe000ed04

080023bc <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80023bc:	b580      	push	{r7, lr}
 80023be:	b08c      	sub	sp, #48	@ 0x30
 80023c0:	af02      	add	r7, sp, #8
 80023c2:	60f8      	str	r0, [r7, #12]
 80023c4:	60b9      	str	r1, [r7, #8]
 80023c6:	4613      	mov	r3, r2
 80023c8:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d10b      	bne.n	80023e8 <xQueueGenericCreate+0x2c>
        __asm volatile
 80023d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80023d4:	f383 8811 	msr	BASEPRI, r3
 80023d8:	f3bf 8f6f 	isb	sy
 80023dc:	f3bf 8f4f 	dsb	sy
 80023e0:	61bb      	str	r3, [r7, #24]
    }
 80023e2:	bf00      	nop
 80023e4:	bf00      	nop
 80023e6:	e7fd      	b.n	80023e4 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	68ba      	ldr	r2, [r7, #8]
 80023ec:	fb02 f303 	mul.w	r3, r2, r3
 80023f0:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 80023f2:	68bb      	ldr	r3, [r7, #8]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d006      	beq.n	8002406 <xQueueGenericCreate+0x4a>
 80023f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80023fa:	68bb      	ldr	r3, [r7, #8]
 80023fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002400:	68fa      	ldr	r2, [r7, #12]
 8002402:	429a      	cmp	r2, r3
 8002404:	d101      	bne.n	800240a <xQueueGenericCreate+0x4e>
 8002406:	2301      	movs	r3, #1
 8002408:	e000      	b.n	800240c <xQueueGenericCreate+0x50>
 800240a:	2300      	movs	r3, #0
 800240c:	2b00      	cmp	r3, #0
 800240e:	d10b      	bne.n	8002428 <xQueueGenericCreate+0x6c>
        __asm volatile
 8002410:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002414:	f383 8811 	msr	BASEPRI, r3
 8002418:	f3bf 8f6f 	isb	sy
 800241c:	f3bf 8f4f 	dsb	sy
 8002420:	617b      	str	r3, [r7, #20]
    }
 8002422:	bf00      	nop
 8002424:	bf00      	nop
 8002426:	e7fd      	b.n	8002424 <xQueueGenericCreate+0x68>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8002428:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800242a:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 800242e:	d90b      	bls.n	8002448 <xQueueGenericCreate+0x8c>
        __asm volatile
 8002430:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002434:	f383 8811 	msr	BASEPRI, r3
 8002438:	f3bf 8f6f 	isb	sy
 800243c:	f3bf 8f4f 	dsb	sy
 8002440:	613b      	str	r3, [r7, #16]
    }
 8002442:	bf00      	nop
 8002444:	bf00      	nop
 8002446:	e7fd      	b.n	8002444 <xQueueGenericCreate+0x88>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002448:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800244a:	3350      	adds	r3, #80	@ 0x50
 800244c:	4618      	mov	r0, r3
 800244e:	f001 fefd 	bl	800424c <pvPortMalloc>
 8002452:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8002454:	6a3b      	ldr	r3, [r7, #32]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d00d      	beq.n	8002476 <xQueueGenericCreate+0xba>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800245a:	6a3b      	ldr	r3, [r7, #32]
 800245c:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800245e:	69fb      	ldr	r3, [r7, #28]
 8002460:	3350      	adds	r3, #80	@ 0x50
 8002462:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002464:	79fa      	ldrb	r2, [r7, #7]
 8002466:	6a3b      	ldr	r3, [r7, #32]
 8002468:	9300      	str	r3, [sp, #0]
 800246a:	4613      	mov	r3, r2
 800246c:	69fa      	ldr	r2, [r7, #28]
 800246e:	68b9      	ldr	r1, [r7, #8]
 8002470:	68f8      	ldr	r0, [r7, #12]
 8002472:	f000 f805 	bl	8002480 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8002476:	6a3b      	ldr	r3, [r7, #32]
    }
 8002478:	4618      	mov	r0, r3
 800247a:	3728      	adds	r7, #40	@ 0x28
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}

08002480 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b084      	sub	sp, #16
 8002484:	af00      	add	r7, sp, #0
 8002486:	60f8      	str	r0, [r7, #12]
 8002488:	60b9      	str	r1, [r7, #8]
 800248a:	607a      	str	r2, [r7, #4]
 800248c:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 800248e:	68bb      	ldr	r3, [r7, #8]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d103      	bne.n	800249c <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002494:	69bb      	ldr	r3, [r7, #24]
 8002496:	69ba      	ldr	r2, [r7, #24]
 8002498:	601a      	str	r2, [r3, #0]
 800249a:	e002      	b.n	80024a2 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800249c:	69bb      	ldr	r3, [r7, #24]
 800249e:	687a      	ldr	r2, [r7, #4]
 80024a0:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80024a2:	69bb      	ldr	r3, [r7, #24]
 80024a4:	68fa      	ldr	r2, [r7, #12]
 80024a6:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80024a8:	69bb      	ldr	r3, [r7, #24]
 80024aa:	68ba      	ldr	r2, [r7, #8]
 80024ac:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80024ae:	2101      	movs	r1, #1
 80024b0:	69b8      	ldr	r0, [r7, #24]
 80024b2:	f7ff ff19 	bl	80022e8 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 80024b6:	69bb      	ldr	r3, [r7, #24]
 80024b8:	78fa      	ldrb	r2, [r7, #3]
 80024ba:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 80024be:	78fb      	ldrb	r3, [r7, #3]
 80024c0:	68ba      	ldr	r2, [r7, #8]
 80024c2:	68f9      	ldr	r1, [r7, #12]
 80024c4:	2073      	movs	r0, #115	@ 0x73
 80024c6:	f002 fe9d 	bl	8005204 <SEGGER_SYSVIEW_RecordU32x3>
}
 80024ca:	bf00      	nop
 80024cc:	3710      	adds	r7, #16
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}
	...

080024d4 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b08e      	sub	sp, #56	@ 0x38
 80024d8:	af02      	add	r7, sp, #8
 80024da:	60f8      	str	r0, [r7, #12]
 80024dc:	60b9      	str	r1, [r7, #8]
 80024de:	607a      	str	r2, [r7, #4]
 80024e0:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80024e2:	2300      	movs	r3, #0
 80024e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	62bb      	str	r3, [r7, #40]	@ 0x28

    configASSERT( pxQueue );
 80024ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d10b      	bne.n	8002508 <xQueueGenericSend+0x34>
        __asm volatile
 80024f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80024f4:	f383 8811 	msr	BASEPRI, r3
 80024f8:	f3bf 8f6f 	isb	sy
 80024fc:	f3bf 8f4f 	dsb	sy
 8002500:	623b      	str	r3, [r7, #32]
    }
 8002502:	bf00      	nop
 8002504:	bf00      	nop
 8002506:	e7fd      	b.n	8002504 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d103      	bne.n	8002516 <xQueueGenericSend+0x42>
 800250e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002510:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002512:	2b00      	cmp	r3, #0
 8002514:	d101      	bne.n	800251a <xQueueGenericSend+0x46>
 8002516:	2301      	movs	r3, #1
 8002518:	e000      	b.n	800251c <xQueueGenericSend+0x48>
 800251a:	2300      	movs	r3, #0
 800251c:	2b00      	cmp	r3, #0
 800251e:	d10b      	bne.n	8002538 <xQueueGenericSend+0x64>
        __asm volatile
 8002520:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002524:	f383 8811 	msr	BASEPRI, r3
 8002528:	f3bf 8f6f 	isb	sy
 800252c:	f3bf 8f4f 	dsb	sy
 8002530:	61fb      	str	r3, [r7, #28]
    }
 8002532:	bf00      	nop
 8002534:	bf00      	nop
 8002536:	e7fd      	b.n	8002534 <xQueueGenericSend+0x60>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	2b02      	cmp	r3, #2
 800253c:	d103      	bne.n	8002546 <xQueueGenericSend+0x72>
 800253e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002540:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002542:	2b01      	cmp	r3, #1
 8002544:	d101      	bne.n	800254a <xQueueGenericSend+0x76>
 8002546:	2301      	movs	r3, #1
 8002548:	e000      	b.n	800254c <xQueueGenericSend+0x78>
 800254a:	2300      	movs	r3, #0
 800254c:	2b00      	cmp	r3, #0
 800254e:	d10b      	bne.n	8002568 <xQueueGenericSend+0x94>
        __asm volatile
 8002550:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002554:	f383 8811 	msr	BASEPRI, r3
 8002558:	f3bf 8f6f 	isb	sy
 800255c:	f3bf 8f4f 	dsb	sy
 8002560:	61bb      	str	r3, [r7, #24]
    }
 8002562:	bf00      	nop
 8002564:	bf00      	nop
 8002566:	e7fd      	b.n	8002564 <xQueueGenericSend+0x90>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002568:	f001 fd80 	bl	800406c <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800256c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800256e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002570:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002572:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002574:	429a      	cmp	r2, r3
 8002576:	d302      	bcc.n	800257e <xQueueGenericSend+0xaa>
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	2b02      	cmp	r3, #2
 800257c:	d136      	bne.n	80025ec <xQueueGenericSend+0x118>
            {
                traceQUEUE_SEND( pxQueue );
 800257e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002580:	4618      	mov	r0, r3
 8002582:	f003 fba9 	bl	8005cd8 <SEGGER_SYSVIEW_ShrinkId>
 8002586:	68ba      	ldr	r2, [r7, #8]
 8002588:	6879      	ldr	r1, [r7, #4]
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	9300      	str	r3, [sp, #0]
 800258e:	460b      	mov	r3, r1
 8002590:	4601      	mov	r1, r0
 8002592:	205a      	movs	r0, #90	@ 0x5a
 8002594:	f002 feac 	bl	80052f0 <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002598:	683a      	ldr	r2, [r7, #0]
 800259a:	68b9      	ldr	r1, [r7, #8]
 800259c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800259e:	f000 fae1 	bl	8002b64 <prvCopyDataToQueue>
 80025a2:	6278      	str	r0, [r7, #36]	@ 0x24

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80025a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d010      	beq.n	80025ce <xQueueGenericSend+0xfa>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80025ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025ae:	3324      	adds	r3, #36	@ 0x24
 80025b0:	4618      	mov	r0, r3
 80025b2:	f000 ffdf 	bl	8003574 <xTaskRemoveFromEventList>
 80025b6:	4603      	mov	r3, r0
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d013      	beq.n	80025e4 <xQueueGenericSend+0x110>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 80025bc:	4b4c      	ldr	r3, [pc, #304]	@ (80026f0 <xQueueGenericSend+0x21c>)
 80025be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80025c2:	601a      	str	r2, [r3, #0]
 80025c4:	f3bf 8f4f 	dsb	sy
 80025c8:	f3bf 8f6f 	isb	sy
 80025cc:	e00a      	b.n	80025e4 <xQueueGenericSend+0x110>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 80025ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d007      	beq.n	80025e4 <xQueueGenericSend+0x110>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 80025d4:	4b46      	ldr	r3, [pc, #280]	@ (80026f0 <xQueueGenericSend+0x21c>)
 80025d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80025da:	601a      	str	r2, [r3, #0]
 80025dc:	f3bf 8f4f 	dsb	sy
 80025e0:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 80025e4:	f001 fd74 	bl	80040d0 <vPortExitCritical>
                return pdPASS;
 80025e8:	2301      	movs	r3, #1
 80025ea:	e07d      	b.n	80026e8 <xQueueGenericSend+0x214>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d110      	bne.n	8002614 <xQueueGenericSend+0x140>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80025f2:	f001 fd6d 	bl	80040d0 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 80025f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025f8:	4618      	mov	r0, r3
 80025fa:	f003 fb6d 	bl	8005cd8 <SEGGER_SYSVIEW_ShrinkId>
 80025fe:	68ba      	ldr	r2, [r7, #8]
 8002600:	6879      	ldr	r1, [r7, #4]
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	9300      	str	r3, [sp, #0]
 8002606:	460b      	mov	r3, r1
 8002608:	4601      	mov	r1, r0
 800260a:	205a      	movs	r0, #90	@ 0x5a
 800260c:	f002 fe70 	bl	80052f0 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 8002610:	2300      	movs	r3, #0
 8002612:	e069      	b.n	80026e8 <xQueueGenericSend+0x214>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002614:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002616:	2b00      	cmp	r3, #0
 8002618:	d106      	bne.n	8002628 <xQueueGenericSend+0x154>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800261a:	f107 0310 	add.w	r3, r7, #16
 800261e:	4618      	mov	r0, r3
 8002620:	f001 f810 	bl	8003644 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002624:	2301      	movs	r3, #1
 8002626:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002628:	f001 fd52 	bl	80040d0 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800262c:	f000 fda4 	bl	8003178 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002630:	f001 fd1c 	bl	800406c <vPortEnterCritical>
 8002634:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002636:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800263a:	b25b      	sxtb	r3, r3
 800263c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002640:	d103      	bne.n	800264a <xQueueGenericSend+0x176>
 8002642:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002644:	2200      	movs	r2, #0
 8002646:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800264a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800264c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002650:	b25b      	sxtb	r3, r3
 8002652:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002656:	d103      	bne.n	8002660 <xQueueGenericSend+0x18c>
 8002658:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800265a:	2200      	movs	r2, #0
 800265c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002660:	f001 fd36 	bl	80040d0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002664:	1d3a      	adds	r2, r7, #4
 8002666:	f107 0310 	add.w	r3, r7, #16
 800266a:	4611      	mov	r1, r2
 800266c:	4618      	mov	r0, r3
 800266e:	f000 ffff 	bl	8003670 <xTaskCheckForTimeOut>
 8002672:	4603      	mov	r3, r0
 8002674:	2b00      	cmp	r3, #0
 8002676:	d124      	bne.n	80026c2 <xQueueGenericSend+0x1ee>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002678:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800267a:	f000 fb6b 	bl	8002d54 <prvIsQueueFull>
 800267e:	4603      	mov	r3, r0
 8002680:	2b00      	cmp	r3, #0
 8002682:	d018      	beq.n	80026b6 <xQueueGenericSend+0x1e2>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002684:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002686:	3310      	adds	r3, #16
 8002688:	687a      	ldr	r2, [r7, #4]
 800268a:	4611      	mov	r1, r2
 800268c:	4618      	mov	r0, r3
 800268e:	f000 ff4b 	bl	8003528 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8002692:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002694:	f000 faf6 	bl	8002c84 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8002698:	f000 fd7c 	bl	8003194 <xTaskResumeAll>
 800269c:	4603      	mov	r3, r0
 800269e:	2b00      	cmp	r3, #0
 80026a0:	f47f af62 	bne.w	8002568 <xQueueGenericSend+0x94>
                {
                    portYIELD_WITHIN_API();
 80026a4:	4b12      	ldr	r3, [pc, #72]	@ (80026f0 <xQueueGenericSend+0x21c>)
 80026a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80026aa:	601a      	str	r2, [r3, #0]
 80026ac:	f3bf 8f4f 	dsb	sy
 80026b0:	f3bf 8f6f 	isb	sy
 80026b4:	e758      	b.n	8002568 <xQueueGenericSend+0x94>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 80026b6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80026b8:	f000 fae4 	bl	8002c84 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80026bc:	f000 fd6a 	bl	8003194 <xTaskResumeAll>
 80026c0:	e752      	b.n	8002568 <xQueueGenericSend+0x94>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 80026c2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80026c4:	f000 fade 	bl	8002c84 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80026c8:	f000 fd64 	bl	8003194 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 80026cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026ce:	4618      	mov	r0, r3
 80026d0:	f003 fb02 	bl	8005cd8 <SEGGER_SYSVIEW_ShrinkId>
 80026d4:	68ba      	ldr	r2, [r7, #8]
 80026d6:	6879      	ldr	r1, [r7, #4]
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	9300      	str	r3, [sp, #0]
 80026dc:	460b      	mov	r3, r1
 80026de:	4601      	mov	r1, r0
 80026e0:	205a      	movs	r0, #90	@ 0x5a
 80026e2:	f002 fe05 	bl	80052f0 <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 80026e6:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	3730      	adds	r7, #48	@ 0x30
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}
 80026f0:	e000ed04 	.word	0xe000ed04

080026f4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80026f4:	b590      	push	{r4, r7, lr}
 80026f6:	b08f      	sub	sp, #60	@ 0x3c
 80026f8:	af02      	add	r7, sp, #8
 80026fa:	60f8      	str	r0, [r7, #12]
 80026fc:	60b9      	str	r1, [r7, #8]
 80026fe:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002700:	2300      	movs	r3, #0
 8002702:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002708:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800270a:	2b00      	cmp	r3, #0
 800270c:	d10b      	bne.n	8002726 <xQueueReceive+0x32>
        __asm volatile
 800270e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002712:	f383 8811 	msr	BASEPRI, r3
 8002716:	f3bf 8f6f 	isb	sy
 800271a:	f3bf 8f4f 	dsb	sy
 800271e:	623b      	str	r3, [r7, #32]
    }
 8002720:	bf00      	nop
 8002722:	bf00      	nop
 8002724:	e7fd      	b.n	8002722 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002726:	68bb      	ldr	r3, [r7, #8]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d103      	bne.n	8002734 <xQueueReceive+0x40>
 800272c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800272e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002730:	2b00      	cmp	r3, #0
 8002732:	d101      	bne.n	8002738 <xQueueReceive+0x44>
 8002734:	2301      	movs	r3, #1
 8002736:	e000      	b.n	800273a <xQueueReceive+0x46>
 8002738:	2300      	movs	r3, #0
 800273a:	2b00      	cmp	r3, #0
 800273c:	d10b      	bne.n	8002756 <xQueueReceive+0x62>
        __asm volatile
 800273e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002742:	f383 8811 	msr	BASEPRI, r3
 8002746:	f3bf 8f6f 	isb	sy
 800274a:	f3bf 8f4f 	dsb	sy
 800274e:	61fb      	str	r3, [r7, #28]
    }
 8002750:	bf00      	nop
 8002752:	bf00      	nop
 8002754:	e7fd      	b.n	8002752 <xQueueReceive+0x5e>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002756:	f001 fc89 	bl	800406c <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800275a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800275c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800275e:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002760:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002762:	2b00      	cmp	r3, #0
 8002764:	d02f      	beq.n	80027c6 <xQueueReceive+0xd2>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002766:	68b9      	ldr	r1, [r7, #8]
 8002768:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800276a:	f000 fa65 	bl	8002c38 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 800276e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002770:	4618      	mov	r0, r3
 8002772:	f003 fab1 	bl	8005cd8 <SEGGER_SYSVIEW_ShrinkId>
 8002776:	4604      	mov	r4, r0
 8002778:	2000      	movs	r0, #0
 800277a:	f003 faad 	bl	8005cd8 <SEGGER_SYSVIEW_ShrinkId>
 800277e:	4602      	mov	r2, r0
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2101      	movs	r1, #1
 8002784:	9100      	str	r1, [sp, #0]
 8002786:	4621      	mov	r1, r4
 8002788:	205c      	movs	r0, #92	@ 0x5c
 800278a:	f002 fdb1 	bl	80052f0 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800278e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002790:	1e5a      	subs	r2, r3, #1
 8002792:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002794:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002796:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002798:	691b      	ldr	r3, [r3, #16]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d00f      	beq.n	80027be <xQueueReceive+0xca>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800279e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027a0:	3310      	adds	r3, #16
 80027a2:	4618      	mov	r0, r3
 80027a4:	f000 fee6 	bl	8003574 <xTaskRemoveFromEventList>
 80027a8:	4603      	mov	r3, r0
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d007      	beq.n	80027be <xQueueReceive+0xca>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80027ae:	4b4d      	ldr	r3, [pc, #308]	@ (80028e4 <xQueueReceive+0x1f0>)
 80027b0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80027b4:	601a      	str	r2, [r3, #0]
 80027b6:	f3bf 8f4f 	dsb	sy
 80027ba:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80027be:	f001 fc87 	bl	80040d0 <vPortExitCritical>
                return pdPASS;
 80027c2:	2301      	movs	r3, #1
 80027c4:	e08a      	b.n	80028dc <xQueueReceive+0x1e8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d113      	bne.n	80027f4 <xQueueReceive+0x100>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80027cc:	f001 fc80 	bl	80040d0 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 80027d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027d2:	4618      	mov	r0, r3
 80027d4:	f003 fa80 	bl	8005cd8 <SEGGER_SYSVIEW_ShrinkId>
 80027d8:	4604      	mov	r4, r0
 80027da:	2000      	movs	r0, #0
 80027dc:	f003 fa7c 	bl	8005cd8 <SEGGER_SYSVIEW_ShrinkId>
 80027e0:	4602      	mov	r2, r0
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2101      	movs	r1, #1
 80027e6:	9100      	str	r1, [sp, #0]
 80027e8:	4621      	mov	r1, r4
 80027ea:	205c      	movs	r0, #92	@ 0x5c
 80027ec:	f002 fd80 	bl	80052f0 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 80027f0:	2300      	movs	r3, #0
 80027f2:	e073      	b.n	80028dc <xQueueReceive+0x1e8>
                }
                else if( xEntryTimeSet == pdFALSE )
 80027f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d106      	bne.n	8002808 <xQueueReceive+0x114>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80027fa:	f107 0314 	add.w	r3, r7, #20
 80027fe:	4618      	mov	r0, r3
 8002800:	f000 ff20 	bl	8003644 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002804:	2301      	movs	r3, #1
 8002806:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002808:	f001 fc62 	bl	80040d0 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800280c:	f000 fcb4 	bl	8003178 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002810:	f001 fc2c 	bl	800406c <vPortEnterCritical>
 8002814:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002816:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800281a:	b25b      	sxtb	r3, r3
 800281c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002820:	d103      	bne.n	800282a <xQueueReceive+0x136>
 8002822:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002824:	2200      	movs	r2, #0
 8002826:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800282a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800282c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002830:	b25b      	sxtb	r3, r3
 8002832:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002836:	d103      	bne.n	8002840 <xQueueReceive+0x14c>
 8002838:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800283a:	2200      	movs	r2, #0
 800283c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002840:	f001 fc46 	bl	80040d0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002844:	1d3a      	adds	r2, r7, #4
 8002846:	f107 0314 	add.w	r3, r7, #20
 800284a:	4611      	mov	r1, r2
 800284c:	4618      	mov	r0, r3
 800284e:	f000 ff0f 	bl	8003670 <xTaskCheckForTimeOut>
 8002852:	4603      	mov	r3, r0
 8002854:	2b00      	cmp	r3, #0
 8002856:	d124      	bne.n	80028a2 <xQueueReceive+0x1ae>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002858:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800285a:	f000 fa65 	bl	8002d28 <prvIsQueueEmpty>
 800285e:	4603      	mov	r3, r0
 8002860:	2b00      	cmp	r3, #0
 8002862:	d018      	beq.n	8002896 <xQueueReceive+0x1a2>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002864:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002866:	3324      	adds	r3, #36	@ 0x24
 8002868:	687a      	ldr	r2, [r7, #4]
 800286a:	4611      	mov	r1, r2
 800286c:	4618      	mov	r0, r3
 800286e:	f000 fe5b 	bl	8003528 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002872:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002874:	f000 fa06 	bl	8002c84 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002878:	f000 fc8c 	bl	8003194 <xTaskResumeAll>
 800287c:	4603      	mov	r3, r0
 800287e:	2b00      	cmp	r3, #0
 8002880:	f47f af69 	bne.w	8002756 <xQueueReceive+0x62>
                {
                    portYIELD_WITHIN_API();
 8002884:	4b17      	ldr	r3, [pc, #92]	@ (80028e4 <xQueueReceive+0x1f0>)
 8002886:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800288a:	601a      	str	r2, [r3, #0]
 800288c:	f3bf 8f4f 	dsb	sy
 8002890:	f3bf 8f6f 	isb	sy
 8002894:	e75f      	b.n	8002756 <xQueueReceive+0x62>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8002896:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002898:	f000 f9f4 	bl	8002c84 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800289c:	f000 fc7a 	bl	8003194 <xTaskResumeAll>
 80028a0:	e759      	b.n	8002756 <xQueueReceive+0x62>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80028a2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80028a4:	f000 f9ee 	bl	8002c84 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80028a8:	f000 fc74 	bl	8003194 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80028ac:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80028ae:	f000 fa3b 	bl	8002d28 <prvIsQueueEmpty>
 80028b2:	4603      	mov	r3, r0
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	f43f af4e 	beq.w	8002756 <xQueueReceive+0x62>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 80028ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028bc:	4618      	mov	r0, r3
 80028be:	f003 fa0b 	bl	8005cd8 <SEGGER_SYSVIEW_ShrinkId>
 80028c2:	4604      	mov	r4, r0
 80028c4:	2000      	movs	r0, #0
 80028c6:	f003 fa07 	bl	8005cd8 <SEGGER_SYSVIEW_ShrinkId>
 80028ca:	4602      	mov	r2, r0
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2101      	movs	r1, #1
 80028d0:	9100      	str	r1, [sp, #0]
 80028d2:	4621      	mov	r1, r4
 80028d4:	205c      	movs	r0, #92	@ 0x5c
 80028d6:	f002 fd0b 	bl	80052f0 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 80028da:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80028dc:	4618      	mov	r0, r3
 80028de:	3734      	adds	r7, #52	@ 0x34
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd90      	pop	{r4, r7, pc}
 80028e4:	e000ed04 	.word	0xe000ed04

080028e8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 80028e8:	b590      	push	{r4, r7, lr}
 80028ea:	b08f      	sub	sp, #60	@ 0x3c
 80028ec:	af02      	add	r7, sp, #8
 80028ee:	6078      	str	r0, [r7, #4]
 80028f0:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 80028f2:	2300      	movs	r3, #0
 80028f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	627b      	str	r3, [r7, #36]	@ 0x24

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 80028fa:	2300      	movs	r3, #0
 80028fc:	62bb      	str	r3, [r7, #40]	@ 0x28
    #endif

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80028fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002900:	2b00      	cmp	r3, #0
 8002902:	d10b      	bne.n	800291c <xQueueSemaphoreTake+0x34>
        __asm volatile
 8002904:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002908:	f383 8811 	msr	BASEPRI, r3
 800290c:	f3bf 8f6f 	isb	sy
 8002910:	f3bf 8f4f 	dsb	sy
 8002914:	61bb      	str	r3, [r7, #24]
    }
 8002916:	bf00      	nop
 8002918:	bf00      	nop
 800291a:	e7fd      	b.n	8002918 <xQueueSemaphoreTake+0x30>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 800291c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800291e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002920:	2b00      	cmp	r3, #0
 8002922:	d00b      	beq.n	800293c <xQueueSemaphoreTake+0x54>
        __asm volatile
 8002924:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002928:	f383 8811 	msr	BASEPRI, r3
 800292c:	f3bf 8f6f 	isb	sy
 8002930:	f3bf 8f4f 	dsb	sy
 8002934:	617b      	str	r3, [r7, #20]
    }
 8002936:	bf00      	nop
 8002938:	bf00      	nop
 800293a:	e7fd      	b.n	8002938 <xQueueSemaphoreTake+0x50>
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800293c:	f001 fb96 	bl	800406c <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8002940:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002942:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002944:	623b      	str	r3, [r7, #32]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8002946:	6a3b      	ldr	r3, [r7, #32]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d034      	beq.n	80029b6 <xQueueSemaphoreTake+0xce>
            {
                traceQUEUE_RECEIVE( pxQueue );
 800294c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800294e:	4618      	mov	r0, r3
 8002950:	f003 f9c2 	bl	8005cd8 <SEGGER_SYSVIEW_ShrinkId>
 8002954:	4604      	mov	r4, r0
 8002956:	2000      	movs	r0, #0
 8002958:	f003 f9be 	bl	8005cd8 <SEGGER_SYSVIEW_ShrinkId>
 800295c:	4602      	mov	r2, r0
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	2101      	movs	r1, #1
 8002962:	9100      	str	r1, [sp, #0]
 8002964:	4621      	mov	r1, r4
 8002966:	205c      	movs	r0, #92	@ 0x5c
 8002968:	f002 fcc2 	bl	80052f0 <SEGGER_SYSVIEW_RecordU32x4>

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800296c:	6a3b      	ldr	r3, [r7, #32]
 800296e:	1e5a      	subs	r2, r3, #1
 8002970:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002972:	639a      	str	r2, [r3, #56]	@ 0x38

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002974:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d104      	bne.n	8002986 <xQueueSemaphoreTake+0x9e>
                        {
                            /* Record the information required to implement
                             * priority inheritance should it become necessary. */
                            pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800297c:	f001 f934 	bl	8003be8 <pvTaskIncrementMutexHeldCount>
 8002980:	4602      	mov	r2, r0
 8002982:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002984:	609a      	str	r2, [r3, #8]
                    }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002988:	691b      	ldr	r3, [r3, #16]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d00f      	beq.n	80029ae <xQueueSemaphoreTake+0xc6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800298e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002990:	3310      	adds	r3, #16
 8002992:	4618      	mov	r0, r3
 8002994:	f000 fdee 	bl	8003574 <xTaskRemoveFromEventList>
 8002998:	4603      	mov	r3, r0
 800299a:	2b00      	cmp	r3, #0
 800299c:	d007      	beq.n	80029ae <xQueueSemaphoreTake+0xc6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800299e:	4b64      	ldr	r3, [pc, #400]	@ (8002b30 <xQueueSemaphoreTake+0x248>)
 80029a0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80029a4:	601a      	str	r2, [r3, #0]
 80029a6:	f3bf 8f4f 	dsb	sy
 80029aa:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80029ae:	f001 fb8f 	bl	80040d0 <vPortExitCritical>
                return pdPASS;
 80029b2:	2301      	movs	r3, #1
 80029b4:	e0b8      	b.n	8002b28 <xQueueSemaphoreTake+0x240>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d122      	bne.n	8002a02 <xQueueSemaphoreTake+0x11a>
                    /* For inheritance to have occurred there must have been an
                     * initial timeout, and an adjusted timeout cannot become 0, as
                     * if it were 0 the function would have exited. */
                    #if ( configUSE_MUTEXES == 1 )
                        {
                            configASSERT( xInheritanceOccurred == pdFALSE );
 80029bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d00b      	beq.n	80029da <xQueueSemaphoreTake+0xf2>
        __asm volatile
 80029c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80029c6:	f383 8811 	msr	BASEPRI, r3
 80029ca:	f3bf 8f6f 	isb	sy
 80029ce:	f3bf 8f4f 	dsb	sy
 80029d2:	613b      	str	r3, [r7, #16]
    }
 80029d4:	bf00      	nop
 80029d6:	bf00      	nop
 80029d8:	e7fd      	b.n	80029d6 <xQueueSemaphoreTake+0xee>
                        }
                    #endif /* configUSE_MUTEXES */

                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 80029da:	f001 fb79 	bl	80040d0 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 80029de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029e0:	4618      	mov	r0, r3
 80029e2:	f003 f979 	bl	8005cd8 <SEGGER_SYSVIEW_ShrinkId>
 80029e6:	4604      	mov	r4, r0
 80029e8:	2000      	movs	r0, #0
 80029ea:	f003 f975 	bl	8005cd8 <SEGGER_SYSVIEW_ShrinkId>
 80029ee:	4602      	mov	r2, r0
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	2101      	movs	r1, #1
 80029f4:	9100      	str	r1, [sp, #0]
 80029f6:	4621      	mov	r1, r4
 80029f8:	205c      	movs	r0, #92	@ 0x5c
 80029fa:	f002 fc79 	bl	80052f0 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 80029fe:	2300      	movs	r3, #0
 8002a00:	e092      	b.n	8002b28 <xQueueSemaphoreTake+0x240>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002a02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d106      	bne.n	8002a16 <xQueueSemaphoreTake+0x12e>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002a08:	f107 0308 	add.w	r3, r7, #8
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f000 fe19 	bl	8003644 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002a12:	2301      	movs	r3, #1
 8002a14:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002a16:	f001 fb5b 	bl	80040d0 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002a1a:	f000 fbad 	bl	8003178 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002a1e:	f001 fb25 	bl	800406c <vPortEnterCritical>
 8002a22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a24:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002a28:	b25b      	sxtb	r3, r3
 8002a2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a2e:	d103      	bne.n	8002a38 <xQueueSemaphoreTake+0x150>
 8002a30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a32:	2200      	movs	r2, #0
 8002a34:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002a38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a3a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002a3e:	b25b      	sxtb	r3, r3
 8002a40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a44:	d103      	bne.n	8002a4e <xQueueSemaphoreTake+0x166>
 8002a46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a48:	2200      	movs	r2, #0
 8002a4a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002a4e:	f001 fb3f 	bl	80040d0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002a52:	463a      	mov	r2, r7
 8002a54:	f107 0308 	add.w	r3, r7, #8
 8002a58:	4611      	mov	r1, r2
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f000 fe08 	bl	8003670 <xTaskCheckForTimeOut>
 8002a60:	4603      	mov	r3, r0
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d132      	bne.n	8002acc <xQueueSemaphoreTake+0x1e4>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002a66:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002a68:	f000 f95e 	bl	8002d28 <prvIsQueueEmpty>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d026      	beq.n	8002ac0 <xQueueSemaphoreTake+0x1d8>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002a72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d109      	bne.n	8002a8e <xQueueSemaphoreTake+0x1a6>
                        {
                            taskENTER_CRITICAL();
 8002a7a:	f001 faf7 	bl	800406c <vPortEnterCritical>
                            {
                                xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002a7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	4618      	mov	r0, r3
 8002a84:	f000 ff1a 	bl	80038bc <xTaskPriorityInherit>
 8002a88:	62b8      	str	r0, [r7, #40]	@ 0x28
                            }
                            taskEXIT_CRITICAL();
 8002a8a:	f001 fb21 	bl	80040d0 <vPortExitCritical>
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002a8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a90:	3324      	adds	r3, #36	@ 0x24
 8002a92:	683a      	ldr	r2, [r7, #0]
 8002a94:	4611      	mov	r1, r2
 8002a96:	4618      	mov	r0, r3
 8002a98:	f000 fd46 	bl	8003528 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002a9c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002a9e:	f000 f8f1 	bl	8002c84 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002aa2:	f000 fb77 	bl	8003194 <xTaskResumeAll>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	f47f af47 	bne.w	800293c <xQueueSemaphoreTake+0x54>
                {
                    portYIELD_WITHIN_API();
 8002aae:	4b20      	ldr	r3, [pc, #128]	@ (8002b30 <xQueueSemaphoreTake+0x248>)
 8002ab0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002ab4:	601a      	str	r2, [r3, #0]
 8002ab6:	f3bf 8f4f 	dsb	sy
 8002aba:	f3bf 8f6f 	isb	sy
 8002abe:	e73d      	b.n	800293c <xQueueSemaphoreTake+0x54>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 8002ac0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002ac2:	f000 f8df 	bl	8002c84 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002ac6:	f000 fb65 	bl	8003194 <xTaskResumeAll>
 8002aca:	e737      	b.n	800293c <xQueueSemaphoreTake+0x54>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 8002acc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002ace:	f000 f8d9 	bl	8002c84 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002ad2:	f000 fb5f 	bl	8003194 <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002ad6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002ad8:	f000 f926 	bl	8002d28 <prvIsQueueEmpty>
 8002adc:	4603      	mov	r3, r0
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	f43f af2c 	beq.w	800293c <xQueueSemaphoreTake+0x54>
                #if ( configUSE_MUTEXES == 1 )
                    {
                        /* xInheritanceOccurred could only have be set if
                         * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                         * test the mutex type again to check it is actually a mutex. */
                        if( xInheritanceOccurred != pdFALSE )
 8002ae4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d00d      	beq.n	8002b06 <xQueueSemaphoreTake+0x21e>
                        {
                            taskENTER_CRITICAL();
 8002aea:	f001 fabf 	bl	800406c <vPortEnterCritical>
                                /* This task blocking on the mutex caused another
                                 * task to inherit this task's priority.  Now this task
                                 * has timed out the priority should be disinherited
                                 * again, but only as low as the next highest priority
                                 * task that is waiting for the same mutex. */
                                uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8002aee:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002af0:	f000 f820 	bl	8002b34 <prvGetDisinheritPriorityAfterTimeout>
 8002af4:	61f8      	str	r0, [r7, #28]
                                vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8002af6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	69f9      	ldr	r1, [r7, #28]
 8002afc:	4618      	mov	r0, r3
 8002afe:	f000 ffd9 	bl	8003ab4 <vTaskPriorityDisinheritAfterTimeout>
                            }
                            taskEXIT_CRITICAL();
 8002b02:	f001 fae5 	bl	80040d0 <vPortExitCritical>
                        }
                    }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002b06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f003 f8e5 	bl	8005cd8 <SEGGER_SYSVIEW_ShrinkId>
 8002b0e:	4604      	mov	r4, r0
 8002b10:	2000      	movs	r0, #0
 8002b12:	f003 f8e1 	bl	8005cd8 <SEGGER_SYSVIEW_ShrinkId>
 8002b16:	4602      	mov	r2, r0
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	2101      	movs	r1, #1
 8002b1c:	9100      	str	r1, [sp, #0]
 8002b1e:	4621      	mov	r1, r4
 8002b20:	205c      	movs	r0, #92	@ 0x5c
 8002b22:	f002 fbe5 	bl	80052f0 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8002b26:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	3734      	adds	r7, #52	@ 0x34
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd90      	pop	{r4, r7, pc}
 8002b30:	e000ed04 	.word	0xe000ed04

08002b34 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 8002b34:	b480      	push	{r7}
 8002b36:	b085      	sub	sp, #20
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d006      	beq.n	8002b52 <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f1c3 0305 	rsb	r3, r3, #5
 8002b4e:	60fb      	str	r3, [r7, #12]
 8002b50:	e001      	b.n	8002b56 <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8002b52:	2300      	movs	r3, #0
 8002b54:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 8002b56:	68fb      	ldr	r3, [r7, #12]
    }
 8002b58:	4618      	mov	r0, r3
 8002b5a:	3714      	adds	r7, #20
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b62:	4770      	bx	lr

08002b64 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b086      	sub	sp, #24
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	60f8      	str	r0, [r7, #12]
 8002b6c:	60b9      	str	r1, [r7, #8]
 8002b6e:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8002b70:	2300      	movs	r3, #0
 8002b72:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b78:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d10d      	bne.n	8002b9e <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d14d      	bne.n	8002c26 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f000 ff0e 	bl	80039b0 <xTaskPriorityDisinherit>
 8002b94:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	609a      	str	r2, [r3, #8]
 8002b9c:	e043      	b.n	8002c26 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d119      	bne.n	8002bd8 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	6858      	ldr	r0, [r3, #4]
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bac:	461a      	mov	r2, r3
 8002bae:	68b9      	ldr	r1, [r7, #8]
 8002bb0:	f003 fbbb 	bl	800632a <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	685a      	ldr	r2, [r3, #4]
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bbc:	441a      	add	r2, r3
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	685a      	ldr	r2, [r3, #4]
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	429a      	cmp	r2, r3
 8002bcc:	d32b      	bcc.n	8002c26 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681a      	ldr	r2, [r3, #0]
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	605a      	str	r2, [r3, #4]
 8002bd6:	e026      	b.n	8002c26 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	68d8      	ldr	r0, [r3, #12]
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002be0:	461a      	mov	r2, r3
 8002be2:	68b9      	ldr	r1, [r7, #8]
 8002be4:	f003 fba1 	bl	800632a <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	68da      	ldr	r2, [r3, #12]
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bf0:	425b      	negs	r3, r3
 8002bf2:	441a      	add	r2, r3
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	68da      	ldr	r2, [r3, #12]
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	429a      	cmp	r2, r3
 8002c02:	d207      	bcs.n	8002c14 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	689a      	ldr	r2, [r3, #8]
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c0c:	425b      	negs	r3, r3
 8002c0e:	441a      	add	r2, r3
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2b02      	cmp	r3, #2
 8002c18:	d105      	bne.n	8002c26 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d002      	beq.n	8002c26 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8002c20:	693b      	ldr	r3, [r7, #16]
 8002c22:	3b01      	subs	r3, #1
 8002c24:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	1c5a      	adds	r2, r3, #1
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 8002c2e:	697b      	ldr	r3, [r7, #20]
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	3718      	adds	r7, #24
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}

08002c38 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b082      	sub	sp, #8
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
 8002c40:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d018      	beq.n	8002c7c <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	68da      	ldr	r2, [r3, #12]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c52:	441a      	add	r2, r3
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	68da      	ldr	r2, [r3, #12]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	429a      	cmp	r2, r3
 8002c62:	d303      	bcc.n	8002c6c <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	68d9      	ldr	r1, [r3, #12]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c74:	461a      	mov	r2, r3
 8002c76:	6838      	ldr	r0, [r7, #0]
 8002c78:	f003 fb57 	bl	800632a <memcpy>
    }
}
 8002c7c:	bf00      	nop
 8002c7e:	3708      	adds	r7, #8
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bd80      	pop	{r7, pc}

08002c84 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b084      	sub	sp, #16
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002c8c:	f001 f9ee 	bl	800406c <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002c96:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002c98:	e011      	b.n	8002cbe <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d012      	beq.n	8002cc8 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	3324      	adds	r3, #36	@ 0x24
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f000 fc64 	bl	8003574 <xTaskRemoveFromEventList>
 8002cac:	4603      	mov	r3, r0
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d001      	beq.n	8002cb6 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8002cb2:	f000 fd45 	bl	8003740 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8002cb6:	7bfb      	ldrb	r3, [r7, #15]
 8002cb8:	3b01      	subs	r3, #1
 8002cba:	b2db      	uxtb	r3, r3
 8002cbc:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002cbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	dce9      	bgt.n	8002c9a <prvUnlockQueue+0x16>
 8002cc6:	e000      	b.n	8002cca <prvUnlockQueue+0x46>
                        break;
 8002cc8:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	22ff      	movs	r2, #255	@ 0xff
 8002cce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 8002cd2:	f001 f9fd 	bl	80040d0 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002cd6:	f001 f9c9 	bl	800406c <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002ce0:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002ce2:	e011      	b.n	8002d08 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	691b      	ldr	r3, [r3, #16]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d012      	beq.n	8002d12 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	3310      	adds	r3, #16
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f000 fc3f 	bl	8003574 <xTaskRemoveFromEventList>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d001      	beq.n	8002d00 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002cfc:	f000 fd20 	bl	8003740 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002d00:	7bbb      	ldrb	r3, [r7, #14]
 8002d02:	3b01      	subs	r3, #1
 8002d04:	b2db      	uxtb	r3, r3
 8002d06:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002d08:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	dce9      	bgt.n	8002ce4 <prvUnlockQueue+0x60>
 8002d10:	e000      	b.n	8002d14 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8002d12:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	22ff      	movs	r2, #255	@ 0xff
 8002d18:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 8002d1c:	f001 f9d8 	bl	80040d0 <vPortExitCritical>
}
 8002d20:	bf00      	nop
 8002d22:	3710      	adds	r7, #16
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}

08002d28 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b084      	sub	sp, #16
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002d30:	f001 f99c 	bl	800406c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d102      	bne.n	8002d42 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	60fb      	str	r3, [r7, #12]
 8002d40:	e001      	b.n	8002d46 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002d42:	2300      	movs	r3, #0
 8002d44:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002d46:	f001 f9c3 	bl	80040d0 <vPortExitCritical>

    return xReturn;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	3710      	adds	r7, #16
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}

08002d54 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b084      	sub	sp, #16
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002d5c:	f001 f986 	bl	800406c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d68:	429a      	cmp	r2, r3
 8002d6a:	d102      	bne.n	8002d72 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	60fb      	str	r3, [r7, #12]
 8002d70:	e001      	b.n	8002d76 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8002d72:	2300      	movs	r3, #0
 8002d74:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002d76:	f001 f9ab 	bl	80040d0 <vPortExitCritical>

    return xReturn;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	3710      	adds	r7, #16
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}

08002d84 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b08c      	sub	sp, #48	@ 0x30
 8002d88:	af04      	add	r7, sp, #16
 8002d8a:	60f8      	str	r0, [r7, #12]
 8002d8c:	60b9      	str	r1, [r7, #8]
 8002d8e:	603b      	str	r3, [r7, #0]
 8002d90:	4613      	mov	r3, r2
 8002d92:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002d94:	88fb      	ldrh	r3, [r7, #6]
 8002d96:	009b      	lsls	r3, r3, #2
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f001 fa57 	bl	800424c <pvPortMalloc>
 8002d9e:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d00e      	beq.n	8002dc4 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002da6:	2058      	movs	r0, #88	@ 0x58
 8002da8:	f001 fa50 	bl	800424c <pvPortMalloc>
 8002dac:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8002dae:	69fb      	ldr	r3, [r7, #28]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d003      	beq.n	8002dbc <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8002db4:	69fb      	ldr	r3, [r7, #28]
 8002db6:	697a      	ldr	r2, [r7, #20]
 8002db8:	631a      	str	r2, [r3, #48]	@ 0x30
 8002dba:	e005      	b.n	8002dc8 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8002dbc:	6978      	ldr	r0, [r7, #20]
 8002dbe:	f001 fb27 	bl	8004410 <vPortFree>
 8002dc2:	e001      	b.n	8002dc8 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002dc8:	69fb      	ldr	r3, [r7, #28]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d013      	beq.n	8002df6 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002dce:	88fa      	ldrh	r2, [r7, #6]
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	9303      	str	r3, [sp, #12]
 8002dd4:	69fb      	ldr	r3, [r7, #28]
 8002dd6:	9302      	str	r3, [sp, #8]
 8002dd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002dda:	9301      	str	r3, [sp, #4]
 8002ddc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002dde:	9300      	str	r3, [sp, #0]
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	68b9      	ldr	r1, [r7, #8]
 8002de4:	68f8      	ldr	r0, [r7, #12]
 8002de6:	f000 f80e 	bl	8002e06 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002dea:	69f8      	ldr	r0, [r7, #28]
 8002dec:	f000 f8a2 	bl	8002f34 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002df0:	2301      	movs	r3, #1
 8002df2:	61bb      	str	r3, [r7, #24]
 8002df4:	e002      	b.n	8002dfc <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002df6:	f04f 33ff 	mov.w	r3, #4294967295
 8002dfa:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002dfc:	69bb      	ldr	r3, [r7, #24]
    }
 8002dfe:	4618      	mov	r0, r3
 8002e00:	3720      	adds	r7, #32
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}

08002e06 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002e06:	b580      	push	{r7, lr}
 8002e08:	b088      	sub	sp, #32
 8002e0a:	af00      	add	r7, sp, #0
 8002e0c:	60f8      	str	r0, [r7, #12]
 8002e0e:	60b9      	str	r1, [r7, #8]
 8002e10:	607a      	str	r2, [r7, #4]
 8002e12:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002e14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e16:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	009b      	lsls	r3, r3, #2
 8002e1c:	461a      	mov	r2, r3
 8002e1e:	21a5      	movs	r1, #165	@ 0xa5
 8002e20:	f003 fa19 	bl	8006256 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002e24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e26:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002e2e:	3b01      	subs	r3, #1
 8002e30:	009b      	lsls	r3, r3, #2
 8002e32:	4413      	add	r3, r2
 8002e34:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002e36:	69bb      	ldr	r3, [r7, #24]
 8002e38:	f023 0307 	bic.w	r3, r3, #7
 8002e3c:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002e3e:	69bb      	ldr	r3, [r7, #24]
 8002e40:	f003 0307 	and.w	r3, r3, #7
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d00b      	beq.n	8002e60 <prvInitialiseNewTask+0x5a>
        __asm volatile
 8002e48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e4c:	f383 8811 	msr	BASEPRI, r3
 8002e50:	f3bf 8f6f 	isb	sy
 8002e54:	f3bf 8f4f 	dsb	sy
 8002e58:	617b      	str	r3, [r7, #20]
    }
 8002e5a:	bf00      	nop
 8002e5c:	bf00      	nop
 8002e5e:	e7fd      	b.n	8002e5c <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d01f      	beq.n	8002ea6 <prvInitialiseNewTask+0xa0>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002e66:	2300      	movs	r3, #0
 8002e68:	61fb      	str	r3, [r7, #28]
 8002e6a:	e012      	b.n	8002e92 <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002e6c:	68ba      	ldr	r2, [r7, #8]
 8002e6e:	69fb      	ldr	r3, [r7, #28]
 8002e70:	4413      	add	r3, r2
 8002e72:	7819      	ldrb	r1, [r3, #0]
 8002e74:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002e76:	69fb      	ldr	r3, [r7, #28]
 8002e78:	4413      	add	r3, r2
 8002e7a:	3334      	adds	r3, #52	@ 0x34
 8002e7c:	460a      	mov	r2, r1
 8002e7e:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002e80:	68ba      	ldr	r2, [r7, #8]
 8002e82:	69fb      	ldr	r3, [r7, #28]
 8002e84:	4413      	add	r3, r2
 8002e86:	781b      	ldrb	r3, [r3, #0]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d006      	beq.n	8002e9a <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002e8c:	69fb      	ldr	r3, [r7, #28]
 8002e8e:	3301      	adds	r3, #1
 8002e90:	61fb      	str	r3, [r7, #28]
 8002e92:	69fb      	ldr	r3, [r7, #28]
 8002e94:	2b09      	cmp	r3, #9
 8002e96:	d9e9      	bls.n	8002e6c <prvInitialiseNewTask+0x66>
 8002e98:	e000      	b.n	8002e9c <prvInitialiseNewTask+0x96>
            {
                break;
 8002e9a:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002e9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8002ea4:	e003      	b.n	8002eae <prvInitialiseNewTask+0xa8>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002ea6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002eae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002eb0:	2b04      	cmp	r3, #4
 8002eb2:	d901      	bls.n	8002eb8 <prvInitialiseNewTask+0xb2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002eb4:	2304      	movs	r3, #4
 8002eb6:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002eb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002eba:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002ebc:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8002ebe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ec0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002ec2:	649a      	str	r2, [r3, #72]	@ 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8002ec4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	64da      	str	r2, [r3, #76]	@ 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002eca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ecc:	3304      	adds	r3, #4
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f7ff f976 	bl	80021c0 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002ed4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ed6:	3318      	adds	r3, #24
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f7ff f971 	bl	80021c0 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002ede:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ee0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002ee2:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002ee4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ee6:	f1c3 0205 	rsb	r2, r3, #5
 8002eea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002eec:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002eee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ef0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002ef2:	625a      	str	r2, [r3, #36]	@ 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8002ef4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ef6:	3350      	adds	r3, #80	@ 0x50
 8002ef8:	2204      	movs	r2, #4
 8002efa:	2100      	movs	r1, #0
 8002efc:	4618      	mov	r0, r3
 8002efe:	f003 f9aa 	bl	8006256 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8002f02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f04:	3354      	adds	r3, #84	@ 0x54
 8002f06:	2201      	movs	r2, #1
 8002f08:	2100      	movs	r1, #0
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f003 f9a3 	bl	8006256 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002f10:	683a      	ldr	r2, [r7, #0]
 8002f12:	68f9      	ldr	r1, [r7, #12]
 8002f14:	69b8      	ldr	r0, [r7, #24]
 8002f16:	f000 fef3 	bl	8003d00 <pxPortInitialiseStack>
 8002f1a:	4602      	mov	r2, r0
 8002f1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f1e:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002f20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d002      	beq.n	8002f2c <prvInitialiseNewTask+0x126>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002f26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f28:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002f2a:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002f2c:	bf00      	nop
 8002f2e:	3720      	adds	r7, #32
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}

08002f34 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002f34:	b5b0      	push	{r4, r5, r7, lr}
 8002f36:	b084      	sub	sp, #16
 8002f38:	af02      	add	r7, sp, #8
 8002f3a:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002f3c:	f001 f896 	bl	800406c <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002f40:	4b3b      	ldr	r3, [pc, #236]	@ (8003030 <prvAddNewTaskToReadyList+0xfc>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	3301      	adds	r3, #1
 8002f46:	4a3a      	ldr	r2, [pc, #232]	@ (8003030 <prvAddNewTaskToReadyList+0xfc>)
 8002f48:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002f4a:	4b3a      	ldr	r3, [pc, #232]	@ (8003034 <prvAddNewTaskToReadyList+0x100>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d109      	bne.n	8002f66 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002f52:	4a38      	ldr	r2, [pc, #224]	@ (8003034 <prvAddNewTaskToReadyList+0x100>)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002f58:	4b35      	ldr	r3, [pc, #212]	@ (8003030 <prvAddNewTaskToReadyList+0xfc>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	2b01      	cmp	r3, #1
 8002f5e:	d110      	bne.n	8002f82 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002f60:	f000 fc12 	bl	8003788 <prvInitialiseTaskLists>
 8002f64:	e00d      	b.n	8002f82 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002f66:	4b34      	ldr	r3, [pc, #208]	@ (8003038 <prvAddNewTaskToReadyList+0x104>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d109      	bne.n	8002f82 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002f6e:	4b31      	ldr	r3, [pc, #196]	@ (8003034 <prvAddNewTaskToReadyList+0x100>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f78:	429a      	cmp	r2, r3
 8002f7a:	d802      	bhi.n	8002f82 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002f7c:	4a2d      	ldr	r2, [pc, #180]	@ (8003034 <prvAddNewTaskToReadyList+0x100>)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002f82:	4b2e      	ldr	r3, [pc, #184]	@ (800303c <prvAddNewTaskToReadyList+0x108>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	3301      	adds	r3, #1
 8002f88:	4a2c      	ldr	r2, [pc, #176]	@ (800303c <prvAddNewTaskToReadyList+0x108>)
 8002f8a:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002f8c:	4b2b      	ldr	r3, [pc, #172]	@ (800303c <prvAddNewTaskToReadyList+0x108>)
 8002f8e:	681a      	ldr	r2, [r3, #0]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	641a      	str	r2, [r3, #64]	@ 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d016      	beq.n	8002fc8 <prvAddNewTaskToReadyList+0x94>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f002 fd75 	bl	8005a8c <SEGGER_SYSVIEW_OnTaskCreate>
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fb2:	461d      	mov	r5, r3
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	461c      	mov	r4, r3
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fbe:	1ae3      	subs	r3, r4, r3
 8002fc0:	9300      	str	r3, [sp, #0]
 8002fc2:	462b      	mov	r3, r5
 8002fc4:	f001 fb44 	bl	8004650 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f002 fde2 	bl	8005b94 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fd4:	2201      	movs	r2, #1
 8002fd6:	409a      	lsls	r2, r3
 8002fd8:	4b19      	ldr	r3, [pc, #100]	@ (8003040 <prvAddNewTaskToReadyList+0x10c>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	4a18      	ldr	r2, [pc, #96]	@ (8003040 <prvAddNewTaskToReadyList+0x10c>)
 8002fe0:	6013      	str	r3, [r2, #0]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002fe6:	4613      	mov	r3, r2
 8002fe8:	009b      	lsls	r3, r3, #2
 8002fea:	4413      	add	r3, r2
 8002fec:	009b      	lsls	r3, r3, #2
 8002fee:	4a15      	ldr	r2, [pc, #84]	@ (8003044 <prvAddNewTaskToReadyList+0x110>)
 8002ff0:	441a      	add	r2, r3
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	3304      	adds	r3, #4
 8002ff6:	4619      	mov	r1, r3
 8002ff8:	4610      	mov	r0, r2
 8002ffa:	f7ff f8ee 	bl	80021da <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002ffe:	f001 f867 	bl	80040d0 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8003002:	4b0d      	ldr	r3, [pc, #52]	@ (8003038 <prvAddNewTaskToReadyList+0x104>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d00e      	beq.n	8003028 <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800300a:	4b0a      	ldr	r3, [pc, #40]	@ (8003034 <prvAddNewTaskToReadyList+0x100>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003014:	429a      	cmp	r2, r3
 8003016:	d207      	bcs.n	8003028 <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8003018:	4b0b      	ldr	r3, [pc, #44]	@ (8003048 <prvAddNewTaskToReadyList+0x114>)
 800301a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800301e:	601a      	str	r2, [r3, #0]
 8003020:	f3bf 8f4f 	dsb	sy
 8003024:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003028:	bf00      	nop
 800302a:	3708      	adds	r7, #8
 800302c:	46bd      	mov	sp, r7
 800302e:	bdb0      	pop	{r4, r5, r7, pc}
 8003030:	200001b0 	.word	0x200001b0
 8003034:	200000d8 	.word	0x200000d8
 8003038:	200001bc 	.word	0x200001bc
 800303c:	200001cc 	.word	0x200001cc
 8003040:	200001b8 	.word	0x200001b8
 8003044:	200000dc 	.word	0x200000dc
 8003048:	e000ed04 	.word	0xe000ed04

0800304c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 800304c:	b580      	push	{r7, lr}
 800304e:	b084      	sub	sp, #16
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8003054:	2300      	movs	r3, #0
 8003056:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d01c      	beq.n	8003098 <vTaskDelay+0x4c>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 800305e:	4b16      	ldr	r3, [pc, #88]	@ (80030b8 <vTaskDelay+0x6c>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d00b      	beq.n	800307e <vTaskDelay+0x32>
        __asm volatile
 8003066:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800306a:	f383 8811 	msr	BASEPRI, r3
 800306e:	f3bf 8f6f 	isb	sy
 8003072:	f3bf 8f4f 	dsb	sy
 8003076:	60bb      	str	r3, [r7, #8]
    }
 8003078:	bf00      	nop
 800307a:	bf00      	nop
 800307c:	e7fd      	b.n	800307a <vTaskDelay+0x2e>
            vTaskSuspendAll();
 800307e:	f000 f87b 	bl	8003178 <vTaskSuspendAll>
            {
                traceTASK_DELAY();
 8003082:	6879      	ldr	r1, [r7, #4]
 8003084:	2023      	movs	r0, #35	@ 0x23
 8003086:	f002 f827 	bl	80050d8 <SEGGER_SYSVIEW_RecordU32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800308a:	2100      	movs	r1, #0
 800308c:	6878      	ldr	r0, [r7, #4]
 800308e:	f000 fdbf 	bl	8003c10 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8003092:	f000 f87f 	bl	8003194 <xTaskResumeAll>
 8003096:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d107      	bne.n	80030ae <vTaskDelay+0x62>
        {
            portYIELD_WITHIN_API();
 800309e:	4b07      	ldr	r3, [pc, #28]	@ (80030bc <vTaskDelay+0x70>)
 80030a0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80030a4:	601a      	str	r2, [r3, #0]
 80030a6:	f3bf 8f4f 	dsb	sy
 80030aa:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 80030ae:	bf00      	nop
 80030b0:	3710      	adds	r7, #16
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}
 80030b6:	bf00      	nop
 80030b8:	200001d8 	.word	0x200001d8
 80030bc:	e000ed04 	.word	0xe000ed04

080030c0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b086      	sub	sp, #24
 80030c4:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 80030c6:	4b24      	ldr	r3, [pc, #144]	@ (8003158 <vTaskStartScheduler+0x98>)
 80030c8:	9301      	str	r3, [sp, #4]
 80030ca:	2300      	movs	r3, #0
 80030cc:	9300      	str	r3, [sp, #0]
 80030ce:	2300      	movs	r3, #0
 80030d0:	2282      	movs	r2, #130	@ 0x82
 80030d2:	4922      	ldr	r1, [pc, #136]	@ (800315c <vTaskStartScheduler+0x9c>)
 80030d4:	4822      	ldr	r0, [pc, #136]	@ (8003160 <vTaskStartScheduler+0xa0>)
 80030d6:	f7ff fe55 	bl	8002d84 <xTaskCreate>
 80030da:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	2b01      	cmp	r3, #1
 80030e0:	d124      	bne.n	800312c <vTaskStartScheduler+0x6c>
        __asm volatile
 80030e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030e6:	f383 8811 	msr	BASEPRI, r3
 80030ea:	f3bf 8f6f 	isb	sy
 80030ee:	f3bf 8f4f 	dsb	sy
 80030f2:	60bb      	str	r3, [r7, #8]
    }
 80030f4:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 80030f6:	4b1b      	ldr	r3, [pc, #108]	@ (8003164 <vTaskStartScheduler+0xa4>)
 80030f8:	f04f 32ff 	mov.w	r2, #4294967295
 80030fc:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80030fe:	4b1a      	ldr	r3, [pc, #104]	@ (8003168 <vTaskStartScheduler+0xa8>)
 8003100:	2201      	movs	r2, #1
 8003102:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003104:	4b19      	ldr	r3, [pc, #100]	@ (800316c <vTaskStartScheduler+0xac>)
 8003106:	2200      	movs	r2, #0
 8003108:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 800310a:	4b19      	ldr	r3, [pc, #100]	@ (8003170 <vTaskStartScheduler+0xb0>)
 800310c:	681a      	ldr	r2, [r3, #0]
 800310e:	4b12      	ldr	r3, [pc, #72]	@ (8003158 <vTaskStartScheduler+0x98>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	429a      	cmp	r2, r3
 8003114:	d102      	bne.n	800311c <vTaskStartScheduler+0x5c>
 8003116:	f002 fc9d 	bl	8005a54 <SEGGER_SYSVIEW_OnIdle>
 800311a:	e004      	b.n	8003126 <vTaskStartScheduler+0x66>
 800311c:	4b14      	ldr	r3, [pc, #80]	@ (8003170 <vTaskStartScheduler+0xb0>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4618      	mov	r0, r3
 8003122:	f002 fcf5 	bl	8005b10 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8003126:	f000 fe7d 	bl	8003e24 <xPortStartScheduler>
 800312a:	e00f      	b.n	800314c <vTaskStartScheduler+0x8c>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003132:	d10b      	bne.n	800314c <vTaskStartScheduler+0x8c>
        __asm volatile
 8003134:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003138:	f383 8811 	msr	BASEPRI, r3
 800313c:	f3bf 8f6f 	isb	sy
 8003140:	f3bf 8f4f 	dsb	sy
 8003144:	607b      	str	r3, [r7, #4]
    }
 8003146:	bf00      	nop
 8003148:	bf00      	nop
 800314a:	e7fd      	b.n	8003148 <vTaskStartScheduler+0x88>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800314c:	4b09      	ldr	r3, [pc, #36]	@ (8003174 <vTaskStartScheduler+0xb4>)
 800314e:	681b      	ldr	r3, [r3, #0]
}
 8003150:	bf00      	nop
 8003152:	3710      	adds	r7, #16
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}
 8003158:	200001d4 	.word	0x200001d4
 800315c:	08006fec 	.word	0x08006fec
 8003160:	08003759 	.word	0x08003759
 8003164:	200001d0 	.word	0x200001d0
 8003168:	200001bc 	.word	0x200001bc
 800316c:	200001b4 	.word	0x200001b4
 8003170:	200000d8 	.word	0x200000d8
 8003174:	2000000c 	.word	0x2000000c

08003178 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003178:	b480      	push	{r7}
 800317a:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 800317c:	4b04      	ldr	r3, [pc, #16]	@ (8003190 <vTaskSuspendAll+0x18>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	3301      	adds	r3, #1
 8003182:	4a03      	ldr	r2, [pc, #12]	@ (8003190 <vTaskSuspendAll+0x18>)
 8003184:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8003186:	bf00      	nop
 8003188:	46bd      	mov	sp, r7
 800318a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318e:	4770      	bx	lr
 8003190:	200001d8 	.word	0x200001d8

08003194 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b084      	sub	sp, #16
 8003198:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800319a:	2300      	movs	r3, #0
 800319c:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 800319e:	2300      	movs	r3, #0
 80031a0:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80031a2:	4b44      	ldr	r3, [pc, #272]	@ (80032b4 <xTaskResumeAll+0x120>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d10b      	bne.n	80031c2 <xTaskResumeAll+0x2e>
        __asm volatile
 80031aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031ae:	f383 8811 	msr	BASEPRI, r3
 80031b2:	f3bf 8f6f 	isb	sy
 80031b6:	f3bf 8f4f 	dsb	sy
 80031ba:	603b      	str	r3, [r7, #0]
    }
 80031bc:	bf00      	nop
 80031be:	bf00      	nop
 80031c0:	e7fd      	b.n	80031be <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80031c2:	f000 ff53 	bl	800406c <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80031c6:	4b3b      	ldr	r3, [pc, #236]	@ (80032b4 <xTaskResumeAll+0x120>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	3b01      	subs	r3, #1
 80031cc:	4a39      	ldr	r2, [pc, #228]	@ (80032b4 <xTaskResumeAll+0x120>)
 80031ce:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80031d0:	4b38      	ldr	r3, [pc, #224]	@ (80032b4 <xTaskResumeAll+0x120>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d165      	bne.n	80032a4 <xTaskResumeAll+0x110>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80031d8:	4b37      	ldr	r3, [pc, #220]	@ (80032b8 <xTaskResumeAll+0x124>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d061      	beq.n	80032a4 <xTaskResumeAll+0x110>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80031e0:	e032      	b.n	8003248 <xTaskResumeAll+0xb4>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80031e2:	4b36      	ldr	r3, [pc, #216]	@ (80032bc <xTaskResumeAll+0x128>)
 80031e4:	68db      	ldr	r3, [r3, #12]
 80031e6:	68db      	ldr	r3, [r3, #12]
 80031e8:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	3318      	adds	r3, #24
 80031ee:	4618      	mov	r0, r3
 80031f0:	f7ff f850 	bl	8002294 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	3304      	adds	r3, #4
 80031f8:	4618      	mov	r0, r3
 80031fa:	f7ff f84b 	bl	8002294 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	4618      	mov	r0, r3
 8003202:	f002 fcc7 	bl	8005b94 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800320a:	2201      	movs	r2, #1
 800320c:	409a      	lsls	r2, r3
 800320e:	4b2c      	ldr	r3, [pc, #176]	@ (80032c0 <xTaskResumeAll+0x12c>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4313      	orrs	r3, r2
 8003214:	4a2a      	ldr	r2, [pc, #168]	@ (80032c0 <xTaskResumeAll+0x12c>)
 8003216:	6013      	str	r3, [r2, #0]
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800321c:	4613      	mov	r3, r2
 800321e:	009b      	lsls	r3, r3, #2
 8003220:	4413      	add	r3, r2
 8003222:	009b      	lsls	r3, r3, #2
 8003224:	4a27      	ldr	r2, [pc, #156]	@ (80032c4 <xTaskResumeAll+0x130>)
 8003226:	441a      	add	r2, r3
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	3304      	adds	r3, #4
 800322c:	4619      	mov	r1, r3
 800322e:	4610      	mov	r0, r2
 8003230:	f7fe ffd3 	bl	80021da <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003238:	4b23      	ldr	r3, [pc, #140]	@ (80032c8 <xTaskResumeAll+0x134>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800323e:	429a      	cmp	r2, r3
 8003240:	d302      	bcc.n	8003248 <xTaskResumeAll+0xb4>
                    {
                        xYieldPending = pdTRUE;
 8003242:	4b22      	ldr	r3, [pc, #136]	@ (80032cc <xTaskResumeAll+0x138>)
 8003244:	2201      	movs	r2, #1
 8003246:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003248:	4b1c      	ldr	r3, [pc, #112]	@ (80032bc <xTaskResumeAll+0x128>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d1c8      	bne.n	80031e2 <xTaskResumeAll+0x4e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d001      	beq.n	800325a <xTaskResumeAll+0xc6>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8003256:	f000 fb15 	bl	8003884 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800325a:	4b1d      	ldr	r3, [pc, #116]	@ (80032d0 <xTaskResumeAll+0x13c>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d010      	beq.n	8003288 <xTaskResumeAll+0xf4>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8003266:	f000 f837 	bl	80032d8 <xTaskIncrementTick>
 800326a:	4603      	mov	r3, r0
 800326c:	2b00      	cmp	r3, #0
 800326e:	d002      	beq.n	8003276 <xTaskResumeAll+0xe2>
                            {
                                xYieldPending = pdTRUE;
 8003270:	4b16      	ldr	r3, [pc, #88]	@ (80032cc <xTaskResumeAll+0x138>)
 8003272:	2201      	movs	r2, #1
 8003274:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	3b01      	subs	r3, #1
 800327a:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d1f1      	bne.n	8003266 <xTaskResumeAll+0xd2>

                        xPendedTicks = 0;
 8003282:	4b13      	ldr	r3, [pc, #76]	@ (80032d0 <xTaskResumeAll+0x13c>)
 8003284:	2200      	movs	r2, #0
 8003286:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8003288:	4b10      	ldr	r3, [pc, #64]	@ (80032cc <xTaskResumeAll+0x138>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d009      	beq.n	80032a4 <xTaskResumeAll+0x110>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8003290:	2301      	movs	r3, #1
 8003292:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8003294:	4b0f      	ldr	r3, [pc, #60]	@ (80032d4 <xTaskResumeAll+0x140>)
 8003296:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800329a:	601a      	str	r2, [r3, #0]
 800329c:	f3bf 8f4f 	dsb	sy
 80032a0:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80032a4:	f000 ff14 	bl	80040d0 <vPortExitCritical>

    return xAlreadyYielded;
 80032a8:	68bb      	ldr	r3, [r7, #8]
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	3710      	adds	r7, #16
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}
 80032b2:	bf00      	nop
 80032b4:	200001d8 	.word	0x200001d8
 80032b8:	200001b0 	.word	0x200001b0
 80032bc:	20000170 	.word	0x20000170
 80032c0:	200001b8 	.word	0x200001b8
 80032c4:	200000dc 	.word	0x200000dc
 80032c8:	200000d8 	.word	0x200000d8
 80032cc:	200001c4 	.word	0x200001c4
 80032d0:	200001c0 	.word	0x200001c0
 80032d4:	e000ed04 	.word	0xe000ed04

080032d8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b086      	sub	sp, #24
 80032dc:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80032de:	2300      	movs	r3, #0
 80032e0:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80032e2:	4b51      	ldr	r3, [pc, #324]	@ (8003428 <xTaskIncrementTick+0x150>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	f040 8093 	bne.w	8003412 <xTaskIncrementTick+0x13a>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80032ec:	4b4f      	ldr	r3, [pc, #316]	@ (800342c <xTaskIncrementTick+0x154>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	3301      	adds	r3, #1
 80032f2:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80032f4:	4a4d      	ldr	r2, [pc, #308]	@ (800342c <xTaskIncrementTick+0x154>)
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d121      	bne.n	8003344 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 8003300:	4b4b      	ldr	r3, [pc, #300]	@ (8003430 <xTaskIncrementTick+0x158>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d00b      	beq.n	8003322 <xTaskIncrementTick+0x4a>
        __asm volatile
 800330a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800330e:	f383 8811 	msr	BASEPRI, r3
 8003312:	f3bf 8f6f 	isb	sy
 8003316:	f3bf 8f4f 	dsb	sy
 800331a:	603b      	str	r3, [r7, #0]
    }
 800331c:	bf00      	nop
 800331e:	bf00      	nop
 8003320:	e7fd      	b.n	800331e <xTaskIncrementTick+0x46>
 8003322:	4b43      	ldr	r3, [pc, #268]	@ (8003430 <xTaskIncrementTick+0x158>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	60fb      	str	r3, [r7, #12]
 8003328:	4b42      	ldr	r3, [pc, #264]	@ (8003434 <xTaskIncrementTick+0x15c>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a40      	ldr	r2, [pc, #256]	@ (8003430 <xTaskIncrementTick+0x158>)
 800332e:	6013      	str	r3, [r2, #0]
 8003330:	4a40      	ldr	r2, [pc, #256]	@ (8003434 <xTaskIncrementTick+0x15c>)
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	6013      	str	r3, [r2, #0]
 8003336:	4b40      	ldr	r3, [pc, #256]	@ (8003438 <xTaskIncrementTick+0x160>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	3301      	adds	r3, #1
 800333c:	4a3e      	ldr	r2, [pc, #248]	@ (8003438 <xTaskIncrementTick+0x160>)
 800333e:	6013      	str	r3, [r2, #0]
 8003340:	f000 faa0 	bl	8003884 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8003344:	4b3d      	ldr	r3, [pc, #244]	@ (800343c <xTaskIncrementTick+0x164>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	693a      	ldr	r2, [r7, #16]
 800334a:	429a      	cmp	r2, r3
 800334c:	d34c      	bcc.n	80033e8 <xTaskIncrementTick+0x110>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800334e:	4b38      	ldr	r3, [pc, #224]	@ (8003430 <xTaskIncrementTick+0x158>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d104      	bne.n	8003362 <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003358:	4b38      	ldr	r3, [pc, #224]	@ (800343c <xTaskIncrementTick+0x164>)
 800335a:	f04f 32ff 	mov.w	r2, #4294967295
 800335e:	601a      	str	r2, [r3, #0]
                    break;
 8003360:	e042      	b.n	80033e8 <xTaskIncrementTick+0x110>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003362:	4b33      	ldr	r3, [pc, #204]	@ (8003430 <xTaskIncrementTick+0x158>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	68db      	ldr	r3, [r3, #12]
 8003368:	68db      	ldr	r3, [r3, #12]
 800336a:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8003372:	693a      	ldr	r2, [r7, #16]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	429a      	cmp	r2, r3
 8003378:	d203      	bcs.n	8003382 <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800337a:	4a30      	ldr	r2, [pc, #192]	@ (800343c <xTaskIncrementTick+0x164>)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003380:	e032      	b.n	80033e8 <xTaskIncrementTick+0x110>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	3304      	adds	r3, #4
 8003386:	4618      	mov	r0, r3
 8003388:	f7fe ff84 	bl	8002294 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003390:	2b00      	cmp	r3, #0
 8003392:	d004      	beq.n	800339e <xTaskIncrementTick+0xc6>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	3318      	adds	r3, #24
 8003398:	4618      	mov	r0, r3
 800339a:	f7fe ff7b 	bl	8002294 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800339e:	68bb      	ldr	r3, [r7, #8]
 80033a0:	4618      	mov	r0, r3
 80033a2:	f002 fbf7 	bl	8005b94 <SEGGER_SYSVIEW_OnTaskStartReady>
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033aa:	2201      	movs	r2, #1
 80033ac:	409a      	lsls	r2, r3
 80033ae:	4b24      	ldr	r3, [pc, #144]	@ (8003440 <xTaskIncrementTick+0x168>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4313      	orrs	r3, r2
 80033b4:	4a22      	ldr	r2, [pc, #136]	@ (8003440 <xTaskIncrementTick+0x168>)
 80033b6:	6013      	str	r3, [r2, #0]
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80033bc:	4613      	mov	r3, r2
 80033be:	009b      	lsls	r3, r3, #2
 80033c0:	4413      	add	r3, r2
 80033c2:	009b      	lsls	r3, r3, #2
 80033c4:	4a1f      	ldr	r2, [pc, #124]	@ (8003444 <xTaskIncrementTick+0x16c>)
 80033c6:	441a      	add	r2, r3
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	3304      	adds	r3, #4
 80033cc:	4619      	mov	r1, r3
 80033ce:	4610      	mov	r0, r2
 80033d0:	f7fe ff03 	bl	80021da <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80033d8:	4b1b      	ldr	r3, [pc, #108]	@ (8003448 <xTaskIncrementTick+0x170>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033de:	429a      	cmp	r2, r3
 80033e0:	d3b5      	bcc.n	800334e <xTaskIncrementTick+0x76>
                            {
                                xSwitchRequired = pdTRUE;
 80033e2:	2301      	movs	r3, #1
 80033e4:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80033e6:	e7b2      	b.n	800334e <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80033e8:	4b17      	ldr	r3, [pc, #92]	@ (8003448 <xTaskIncrementTick+0x170>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80033ee:	4915      	ldr	r1, [pc, #84]	@ (8003444 <xTaskIncrementTick+0x16c>)
 80033f0:	4613      	mov	r3, r2
 80033f2:	009b      	lsls	r3, r3, #2
 80033f4:	4413      	add	r3, r2
 80033f6:	009b      	lsls	r3, r3, #2
 80033f8:	440b      	add	r3, r1
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	2b01      	cmp	r3, #1
 80033fe:	d901      	bls.n	8003404 <xTaskIncrementTick+0x12c>
                {
                    xSwitchRequired = pdTRUE;
 8003400:	2301      	movs	r3, #1
 8003402:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8003404:	4b11      	ldr	r3, [pc, #68]	@ (800344c <xTaskIncrementTick+0x174>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d007      	beq.n	800341c <xTaskIncrementTick+0x144>
                {
                    xSwitchRequired = pdTRUE;
 800340c:	2301      	movs	r3, #1
 800340e:	617b      	str	r3, [r7, #20]
 8003410:	e004      	b.n	800341c <xTaskIncrementTick+0x144>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8003412:	4b0f      	ldr	r3, [pc, #60]	@ (8003450 <xTaskIncrementTick+0x178>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	3301      	adds	r3, #1
 8003418:	4a0d      	ldr	r2, [pc, #52]	@ (8003450 <xTaskIncrementTick+0x178>)
 800341a:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 800341c:	697b      	ldr	r3, [r7, #20]
}
 800341e:	4618      	mov	r0, r3
 8003420:	3718      	adds	r7, #24
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}
 8003426:	bf00      	nop
 8003428:	200001d8 	.word	0x200001d8
 800342c:	200001b4 	.word	0x200001b4
 8003430:	20000168 	.word	0x20000168
 8003434:	2000016c 	.word	0x2000016c
 8003438:	200001c8 	.word	0x200001c8
 800343c:	200001d0 	.word	0x200001d0
 8003440:	200001b8 	.word	0x200001b8
 8003444:	200000dc 	.word	0x200000dc
 8003448:	200000d8 	.word	0x200000d8
 800344c:	200001c4 	.word	0x200001c4
 8003450:	200001c0 	.word	0x200001c0

08003454 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b086      	sub	sp, #24
 8003458:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800345a:	4b2d      	ldr	r3, [pc, #180]	@ (8003510 <vTaskSwitchContext+0xbc>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d003      	beq.n	800346a <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8003462:	4b2c      	ldr	r3, [pc, #176]	@ (8003514 <vTaskSwitchContext+0xc0>)
 8003464:	2201      	movs	r2, #1
 8003466:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8003468:	e04e      	b.n	8003508 <vTaskSwitchContext+0xb4>
        xYieldPending = pdFALSE;
 800346a:	4b2a      	ldr	r3, [pc, #168]	@ (8003514 <vTaskSwitchContext+0xc0>)
 800346c:	2200      	movs	r2, #0
 800346e:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003470:	4b29      	ldr	r3, [pc, #164]	@ (8003518 <vTaskSwitchContext+0xc4>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	fab3 f383 	clz	r3, r3
 800347c:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 800347e:	7afb      	ldrb	r3, [r7, #11]
 8003480:	f1c3 031f 	rsb	r3, r3, #31
 8003484:	617b      	str	r3, [r7, #20]
 8003486:	4925      	ldr	r1, [pc, #148]	@ (800351c <vTaskSwitchContext+0xc8>)
 8003488:	697a      	ldr	r2, [r7, #20]
 800348a:	4613      	mov	r3, r2
 800348c:	009b      	lsls	r3, r3, #2
 800348e:	4413      	add	r3, r2
 8003490:	009b      	lsls	r3, r3, #2
 8003492:	440b      	add	r3, r1
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d10b      	bne.n	80034b2 <vTaskSwitchContext+0x5e>
        __asm volatile
 800349a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800349e:	f383 8811 	msr	BASEPRI, r3
 80034a2:	f3bf 8f6f 	isb	sy
 80034a6:	f3bf 8f4f 	dsb	sy
 80034aa:	607b      	str	r3, [r7, #4]
    }
 80034ac:	bf00      	nop
 80034ae:	bf00      	nop
 80034b0:	e7fd      	b.n	80034ae <vTaskSwitchContext+0x5a>
 80034b2:	697a      	ldr	r2, [r7, #20]
 80034b4:	4613      	mov	r3, r2
 80034b6:	009b      	lsls	r3, r3, #2
 80034b8:	4413      	add	r3, r2
 80034ba:	009b      	lsls	r3, r3, #2
 80034bc:	4a17      	ldr	r2, [pc, #92]	@ (800351c <vTaskSwitchContext+0xc8>)
 80034be:	4413      	add	r3, r2
 80034c0:	613b      	str	r3, [r7, #16]
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	685a      	ldr	r2, [r3, #4]
 80034c8:	693b      	ldr	r3, [r7, #16]
 80034ca:	605a      	str	r2, [r3, #4]
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	685a      	ldr	r2, [r3, #4]
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	3308      	adds	r3, #8
 80034d4:	429a      	cmp	r2, r3
 80034d6:	d104      	bne.n	80034e2 <vTaskSwitchContext+0x8e>
 80034d8:	693b      	ldr	r3, [r7, #16]
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	685a      	ldr	r2, [r3, #4]
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	605a      	str	r2, [r3, #4]
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	68db      	ldr	r3, [r3, #12]
 80034e8:	4a0d      	ldr	r2, [pc, #52]	@ (8003520 <vTaskSwitchContext+0xcc>)
 80034ea:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 80034ec:	4b0c      	ldr	r3, [pc, #48]	@ (8003520 <vTaskSwitchContext+0xcc>)
 80034ee:	681a      	ldr	r2, [r3, #0]
 80034f0:	4b0c      	ldr	r3, [pc, #48]	@ (8003524 <vTaskSwitchContext+0xd0>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	429a      	cmp	r2, r3
 80034f6:	d102      	bne.n	80034fe <vTaskSwitchContext+0xaa>
 80034f8:	f002 faac 	bl	8005a54 <SEGGER_SYSVIEW_OnIdle>
}
 80034fc:	e004      	b.n	8003508 <vTaskSwitchContext+0xb4>
        traceTASK_SWITCHED_IN();
 80034fe:	4b08      	ldr	r3, [pc, #32]	@ (8003520 <vTaskSwitchContext+0xcc>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4618      	mov	r0, r3
 8003504:	f002 fb04 	bl	8005b10 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8003508:	bf00      	nop
 800350a:	3718      	adds	r7, #24
 800350c:	46bd      	mov	sp, r7
 800350e:	bd80      	pop	{r7, pc}
 8003510:	200001d8 	.word	0x200001d8
 8003514:	200001c4 	.word	0x200001c4
 8003518:	200001b8 	.word	0x200001b8
 800351c:	200000dc 	.word	0x200000dc
 8003520:	200000d8 	.word	0x200000d8
 8003524:	200001d4 	.word	0x200001d4

08003528 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b084      	sub	sp, #16
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
 8003530:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d10b      	bne.n	8003550 <vTaskPlaceOnEventList+0x28>
        __asm volatile
 8003538:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800353c:	f383 8811 	msr	BASEPRI, r3
 8003540:	f3bf 8f6f 	isb	sy
 8003544:	f3bf 8f4f 	dsb	sy
 8003548:	60fb      	str	r3, [r7, #12]
    }
 800354a:	bf00      	nop
 800354c:	bf00      	nop
 800354e:	e7fd      	b.n	800354c <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003550:	4b07      	ldr	r3, [pc, #28]	@ (8003570 <vTaskPlaceOnEventList+0x48>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	3318      	adds	r3, #24
 8003556:	4619      	mov	r1, r3
 8003558:	6878      	ldr	r0, [r7, #4]
 800355a:	f7fe fe62 	bl	8002222 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800355e:	2101      	movs	r1, #1
 8003560:	6838      	ldr	r0, [r7, #0]
 8003562:	f000 fb55 	bl	8003c10 <prvAddCurrentTaskToDelayedList>
}
 8003566:	bf00      	nop
 8003568:	3710      	adds	r7, #16
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}
 800356e:	bf00      	nop
 8003570:	200000d8 	.word	0x200000d8

08003574 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b086      	sub	sp, #24
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	68db      	ldr	r3, [r3, #12]
 8003580:	68db      	ldr	r3, [r3, #12]
 8003582:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d10b      	bne.n	80035a2 <xTaskRemoveFromEventList+0x2e>
        __asm volatile
 800358a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800358e:	f383 8811 	msr	BASEPRI, r3
 8003592:	f3bf 8f6f 	isb	sy
 8003596:	f3bf 8f4f 	dsb	sy
 800359a:	60fb      	str	r3, [r7, #12]
    }
 800359c:	bf00      	nop
 800359e:	bf00      	nop
 80035a0:	e7fd      	b.n	800359e <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80035a2:	693b      	ldr	r3, [r7, #16]
 80035a4:	3318      	adds	r3, #24
 80035a6:	4618      	mov	r0, r3
 80035a8:	f7fe fe74 	bl	8002294 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80035ac:	4b1f      	ldr	r3, [pc, #124]	@ (800362c <xTaskRemoveFromEventList+0xb8>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d120      	bne.n	80035f6 <xTaskRemoveFromEventList+0x82>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80035b4:	693b      	ldr	r3, [r7, #16]
 80035b6:	3304      	adds	r3, #4
 80035b8:	4618      	mov	r0, r3
 80035ba:	f7fe fe6b 	bl	8002294 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	4618      	mov	r0, r3
 80035c2:	f002 fae7 	bl	8005b94 <SEGGER_SYSVIEW_OnTaskStartReady>
 80035c6:	693b      	ldr	r3, [r7, #16]
 80035c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035ca:	2201      	movs	r2, #1
 80035cc:	409a      	lsls	r2, r3
 80035ce:	4b18      	ldr	r3, [pc, #96]	@ (8003630 <xTaskRemoveFromEventList+0xbc>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4313      	orrs	r3, r2
 80035d4:	4a16      	ldr	r2, [pc, #88]	@ (8003630 <xTaskRemoveFromEventList+0xbc>)
 80035d6:	6013      	str	r3, [r2, #0]
 80035d8:	693b      	ldr	r3, [r7, #16]
 80035da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80035dc:	4613      	mov	r3, r2
 80035de:	009b      	lsls	r3, r3, #2
 80035e0:	4413      	add	r3, r2
 80035e2:	009b      	lsls	r3, r3, #2
 80035e4:	4a13      	ldr	r2, [pc, #76]	@ (8003634 <xTaskRemoveFromEventList+0xc0>)
 80035e6:	441a      	add	r2, r3
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	3304      	adds	r3, #4
 80035ec:	4619      	mov	r1, r3
 80035ee:	4610      	mov	r0, r2
 80035f0:	f7fe fdf3 	bl	80021da <vListInsertEnd>
 80035f4:	e005      	b.n	8003602 <xTaskRemoveFromEventList+0x8e>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	3318      	adds	r3, #24
 80035fa:	4619      	mov	r1, r3
 80035fc:	480e      	ldr	r0, [pc, #56]	@ (8003638 <xTaskRemoveFromEventList+0xc4>)
 80035fe:	f7fe fdec 	bl	80021da <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003606:	4b0d      	ldr	r3, [pc, #52]	@ (800363c <xTaskRemoveFromEventList+0xc8>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800360c:	429a      	cmp	r2, r3
 800360e:	d905      	bls.n	800361c <xTaskRemoveFromEventList+0xa8>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8003610:	2301      	movs	r3, #1
 8003612:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8003614:	4b0a      	ldr	r3, [pc, #40]	@ (8003640 <xTaskRemoveFromEventList+0xcc>)
 8003616:	2201      	movs	r2, #1
 8003618:	601a      	str	r2, [r3, #0]
 800361a:	e001      	b.n	8003620 <xTaskRemoveFromEventList+0xac>
    }
    else
    {
        xReturn = pdFALSE;
 800361c:	2300      	movs	r3, #0
 800361e:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8003620:	697b      	ldr	r3, [r7, #20]
}
 8003622:	4618      	mov	r0, r3
 8003624:	3718      	adds	r7, #24
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}
 800362a:	bf00      	nop
 800362c:	200001d8 	.word	0x200001d8
 8003630:	200001b8 	.word	0x200001b8
 8003634:	200000dc 	.word	0x200000dc
 8003638:	20000170 	.word	0x20000170
 800363c:	200000d8 	.word	0x200000d8
 8003640:	200001c4 	.word	0x200001c4

08003644 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003644:	b480      	push	{r7}
 8003646:	b083      	sub	sp, #12
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 800364c:	4b06      	ldr	r3, [pc, #24]	@ (8003668 <vTaskInternalSetTimeOutState+0x24>)
 800364e:	681a      	ldr	r2, [r3, #0]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8003654:	4b05      	ldr	r3, [pc, #20]	@ (800366c <vTaskInternalSetTimeOutState+0x28>)
 8003656:	681a      	ldr	r2, [r3, #0]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	605a      	str	r2, [r3, #4]
}
 800365c:	bf00      	nop
 800365e:	370c      	adds	r7, #12
 8003660:	46bd      	mov	sp, r7
 8003662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003666:	4770      	bx	lr
 8003668:	200001c8 	.word	0x200001c8
 800366c:	200001b4 	.word	0x200001b4

08003670 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b088      	sub	sp, #32
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
 8003678:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d10b      	bne.n	8003698 <xTaskCheckForTimeOut+0x28>
        __asm volatile
 8003680:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003684:	f383 8811 	msr	BASEPRI, r3
 8003688:	f3bf 8f6f 	isb	sy
 800368c:	f3bf 8f4f 	dsb	sy
 8003690:	613b      	str	r3, [r7, #16]
    }
 8003692:	bf00      	nop
 8003694:	bf00      	nop
 8003696:	e7fd      	b.n	8003694 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d10b      	bne.n	80036b6 <xTaskCheckForTimeOut+0x46>
        __asm volatile
 800369e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036a2:	f383 8811 	msr	BASEPRI, r3
 80036a6:	f3bf 8f6f 	isb	sy
 80036aa:	f3bf 8f4f 	dsb	sy
 80036ae:	60fb      	str	r3, [r7, #12]
    }
 80036b0:	bf00      	nop
 80036b2:	bf00      	nop
 80036b4:	e7fd      	b.n	80036b2 <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 80036b6:	f000 fcd9 	bl	800406c <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80036ba:	4b1f      	ldr	r3, [pc, #124]	@ (8003738 <xTaskCheckForTimeOut+0xc8>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	69ba      	ldr	r2, [r7, #24]
 80036c6:	1ad3      	subs	r3, r2, r3
 80036c8:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036d2:	d102      	bne.n	80036da <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80036d4:	2300      	movs	r3, #0
 80036d6:	61fb      	str	r3, [r7, #28]
 80036d8:	e026      	b.n	8003728 <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	4b17      	ldr	r3, [pc, #92]	@ (800373c <xTaskCheckForTimeOut+0xcc>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	429a      	cmp	r2, r3
 80036e4:	d00a      	beq.n	80036fc <xTaskCheckForTimeOut+0x8c>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	69ba      	ldr	r2, [r7, #24]
 80036ec:	429a      	cmp	r2, r3
 80036ee:	d305      	bcc.n	80036fc <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80036f0:	2301      	movs	r3, #1
 80036f2:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	2200      	movs	r2, #0
 80036f8:	601a      	str	r2, [r3, #0]
 80036fa:	e015      	b.n	8003728 <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	697a      	ldr	r2, [r7, #20]
 8003702:	429a      	cmp	r2, r3
 8003704:	d20b      	bcs.n	800371e <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	1ad2      	subs	r2, r2, r3
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8003712:	6878      	ldr	r0, [r7, #4]
 8003714:	f7ff ff96 	bl	8003644 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003718:	2300      	movs	r3, #0
 800371a:	61fb      	str	r3, [r7, #28]
 800371c:	e004      	b.n	8003728 <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	2200      	movs	r2, #0
 8003722:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8003724:	2301      	movs	r3, #1
 8003726:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8003728:	f000 fcd2 	bl	80040d0 <vPortExitCritical>

    return xReturn;
 800372c:	69fb      	ldr	r3, [r7, #28]
}
 800372e:	4618      	mov	r0, r3
 8003730:	3720      	adds	r7, #32
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}
 8003736:	bf00      	nop
 8003738:	200001b4 	.word	0x200001b4
 800373c:	200001c8 	.word	0x200001c8

08003740 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003740:	b480      	push	{r7}
 8003742:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8003744:	4b03      	ldr	r3, [pc, #12]	@ (8003754 <vTaskMissedYield+0x14>)
 8003746:	2201      	movs	r2, #1
 8003748:	601a      	str	r2, [r3, #0]
}
 800374a:	bf00      	nop
 800374c:	46bd      	mov	sp, r7
 800374e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003752:	4770      	bx	lr
 8003754:	200001c4 	.word	0x200001c4

08003758 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b082      	sub	sp, #8
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003760:	f000 f852 	bl	8003808 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003764:	4b06      	ldr	r3, [pc, #24]	@ (8003780 <prvIdleTask+0x28>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	2b01      	cmp	r3, #1
 800376a:	d9f9      	bls.n	8003760 <prvIdleTask+0x8>
                {
                    taskYIELD();
 800376c:	4b05      	ldr	r3, [pc, #20]	@ (8003784 <prvIdleTask+0x2c>)
 800376e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003772:	601a      	str	r2, [r3, #0]
 8003774:	f3bf 8f4f 	dsb	sy
 8003778:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 800377c:	e7f0      	b.n	8003760 <prvIdleTask+0x8>
 800377e:	bf00      	nop
 8003780:	200000dc 	.word	0x200000dc
 8003784:	e000ed04 	.word	0xe000ed04

08003788 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b082      	sub	sp, #8
 800378c:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800378e:	2300      	movs	r3, #0
 8003790:	607b      	str	r3, [r7, #4]
 8003792:	e00c      	b.n	80037ae <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003794:	687a      	ldr	r2, [r7, #4]
 8003796:	4613      	mov	r3, r2
 8003798:	009b      	lsls	r3, r3, #2
 800379a:	4413      	add	r3, r2
 800379c:	009b      	lsls	r3, r3, #2
 800379e:	4a12      	ldr	r2, [pc, #72]	@ (80037e8 <prvInitialiseTaskLists+0x60>)
 80037a0:	4413      	add	r3, r2
 80037a2:	4618      	mov	r0, r3
 80037a4:	f7fe fcec 	bl	8002180 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	3301      	adds	r3, #1
 80037ac:	607b      	str	r3, [r7, #4]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2b04      	cmp	r3, #4
 80037b2:	d9ef      	bls.n	8003794 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80037b4:	480d      	ldr	r0, [pc, #52]	@ (80037ec <prvInitialiseTaskLists+0x64>)
 80037b6:	f7fe fce3 	bl	8002180 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80037ba:	480d      	ldr	r0, [pc, #52]	@ (80037f0 <prvInitialiseTaskLists+0x68>)
 80037bc:	f7fe fce0 	bl	8002180 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80037c0:	480c      	ldr	r0, [pc, #48]	@ (80037f4 <prvInitialiseTaskLists+0x6c>)
 80037c2:	f7fe fcdd 	bl	8002180 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 80037c6:	480c      	ldr	r0, [pc, #48]	@ (80037f8 <prvInitialiseTaskLists+0x70>)
 80037c8:	f7fe fcda 	bl	8002180 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 80037cc:	480b      	ldr	r0, [pc, #44]	@ (80037fc <prvInitialiseTaskLists+0x74>)
 80037ce:	f7fe fcd7 	bl	8002180 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80037d2:	4b0b      	ldr	r3, [pc, #44]	@ (8003800 <prvInitialiseTaskLists+0x78>)
 80037d4:	4a05      	ldr	r2, [pc, #20]	@ (80037ec <prvInitialiseTaskLists+0x64>)
 80037d6:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80037d8:	4b0a      	ldr	r3, [pc, #40]	@ (8003804 <prvInitialiseTaskLists+0x7c>)
 80037da:	4a05      	ldr	r2, [pc, #20]	@ (80037f0 <prvInitialiseTaskLists+0x68>)
 80037dc:	601a      	str	r2, [r3, #0]
}
 80037de:	bf00      	nop
 80037e0:	3708      	adds	r7, #8
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}
 80037e6:	bf00      	nop
 80037e8:	200000dc 	.word	0x200000dc
 80037ec:	20000140 	.word	0x20000140
 80037f0:	20000154 	.word	0x20000154
 80037f4:	20000170 	.word	0x20000170
 80037f8:	20000184 	.word	0x20000184
 80037fc:	2000019c 	.word	0x2000019c
 8003800:	20000168 	.word	0x20000168
 8003804:	2000016c 	.word	0x2000016c

08003808 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b082      	sub	sp, #8
 800380c:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800380e:	e019      	b.n	8003844 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8003810:	f000 fc2c 	bl	800406c <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003814:	4b10      	ldr	r3, [pc, #64]	@ (8003858 <prvCheckTasksWaitingTermination+0x50>)
 8003816:	68db      	ldr	r3, [r3, #12]
 8003818:	68db      	ldr	r3, [r3, #12]
 800381a:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	3304      	adds	r3, #4
 8003820:	4618      	mov	r0, r3
 8003822:	f7fe fd37 	bl	8002294 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8003826:	4b0d      	ldr	r3, [pc, #52]	@ (800385c <prvCheckTasksWaitingTermination+0x54>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	3b01      	subs	r3, #1
 800382c:	4a0b      	ldr	r2, [pc, #44]	@ (800385c <prvCheckTasksWaitingTermination+0x54>)
 800382e:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8003830:	4b0b      	ldr	r3, [pc, #44]	@ (8003860 <prvCheckTasksWaitingTermination+0x58>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	3b01      	subs	r3, #1
 8003836:	4a0a      	ldr	r2, [pc, #40]	@ (8003860 <prvCheckTasksWaitingTermination+0x58>)
 8003838:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 800383a:	f000 fc49 	bl	80040d0 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	f000 f810 	bl	8003864 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003844:	4b06      	ldr	r3, [pc, #24]	@ (8003860 <prvCheckTasksWaitingTermination+0x58>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d1e1      	bne.n	8003810 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 800384c:	bf00      	nop
 800384e:	bf00      	nop
 8003850:	3708      	adds	r7, #8
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}
 8003856:	bf00      	nop
 8003858:	20000184 	.word	0x20000184
 800385c:	200001b0 	.word	0x200001b0
 8003860:	20000198 	.word	0x20000198

08003864 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003864:	b580      	push	{r7, lr}
 8003866:	b082      	sub	sp, #8
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003870:	4618      	mov	r0, r3
 8003872:	f000 fdcd 	bl	8004410 <vPortFree>
                vPortFree( pxTCB );
 8003876:	6878      	ldr	r0, [r7, #4]
 8003878:	f000 fdca 	bl	8004410 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 800387c:	bf00      	nop
 800387e:	3708      	adds	r7, #8
 8003880:	46bd      	mov	sp, r7
 8003882:	bd80      	pop	{r7, pc}

08003884 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003884:	b480      	push	{r7}
 8003886:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003888:	4b0a      	ldr	r3, [pc, #40]	@ (80038b4 <prvResetNextTaskUnblockTime+0x30>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d104      	bne.n	800389c <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003892:	4b09      	ldr	r3, [pc, #36]	@ (80038b8 <prvResetNextTaskUnblockTime+0x34>)
 8003894:	f04f 32ff 	mov.w	r2, #4294967295
 8003898:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800389a:	e005      	b.n	80038a8 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 800389c:	4b05      	ldr	r3, [pc, #20]	@ (80038b4 <prvResetNextTaskUnblockTime+0x30>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	68db      	ldr	r3, [r3, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a04      	ldr	r2, [pc, #16]	@ (80038b8 <prvResetNextTaskUnblockTime+0x34>)
 80038a6:	6013      	str	r3, [r2, #0]
}
 80038a8:	bf00      	nop
 80038aa:	46bd      	mov	sp, r7
 80038ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b0:	4770      	bx	lr
 80038b2:	bf00      	nop
 80038b4:	20000168 	.word	0x20000168
 80038b8:	200001d0 	.word	0x200001d0

080038bc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 80038bc:	b580      	push	{r7, lr}
 80038be:	b084      	sub	sp, #16
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn = pdFALSE;
 80038c8:	2300      	movs	r3, #0
 80038ca:	60fb      	str	r3, [r7, #12]

        /* If the mutex was given back by an interrupt while the queue was
         * locked then the mutex holder might now be NULL.  _RB_ Is this still
         * needed as interrupts can no longer use mutexes? */
        if( pxMutexHolder != NULL )
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d063      	beq.n	800399a <xTaskPriorityInherit+0xde>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80038d6:	4b33      	ldr	r3, [pc, #204]	@ (80039a4 <xTaskPriorityInherit+0xe8>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038dc:	429a      	cmp	r2, r3
 80038de:	d253      	bcs.n	8003988 <xTaskPriorityInherit+0xcc>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	699b      	ldr	r3, [r3, #24]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	db06      	blt.n	80038f6 <xTaskPriorityInherit+0x3a>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80038e8:	4b2e      	ldr	r3, [pc, #184]	@ (80039a4 <xTaskPriorityInherit+0xe8>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038ee:	f1c3 0205 	rsb	r2, r3, #5
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	6959      	ldr	r1, [r3, #20]
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80038fe:	4613      	mov	r3, r2
 8003900:	009b      	lsls	r3, r3, #2
 8003902:	4413      	add	r3, r2
 8003904:	009b      	lsls	r3, r3, #2
 8003906:	4a28      	ldr	r2, [pc, #160]	@ (80039a8 <xTaskPriorityInherit+0xec>)
 8003908:	4413      	add	r3, r2
 800390a:	4299      	cmp	r1, r3
 800390c:	d12f      	bne.n	800396e <xTaskPriorityInherit+0xb2>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	3304      	adds	r3, #4
 8003912:	4618      	mov	r0, r3
 8003914:	f7fe fcbe 	bl	8002294 <uxListRemove>
 8003918:	4603      	mov	r3, r0
 800391a:	2b00      	cmp	r3, #0
 800391c:	d10a      	bne.n	8003934 <xTaskPriorityInherit+0x78>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800391e:	68bb      	ldr	r3, [r7, #8]
 8003920:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003922:	2201      	movs	r2, #1
 8003924:	fa02 f303 	lsl.w	r3, r2, r3
 8003928:	43da      	mvns	r2, r3
 800392a:	4b20      	ldr	r3, [pc, #128]	@ (80039ac <xTaskPriorityInherit+0xf0>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4013      	ands	r3, r2
 8003930:	4a1e      	ldr	r2, [pc, #120]	@ (80039ac <xTaskPriorityInherit+0xf0>)
 8003932:	6013      	str	r3, [r2, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003934:	4b1b      	ldr	r3, [pc, #108]	@ (80039a4 <xTaskPriorityInherit+0xe8>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	62da      	str	r2, [r3, #44]	@ 0x2c
                    prvReaddTaskToReadyList( pxMutexHolderTCB );
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003942:	2201      	movs	r2, #1
 8003944:	409a      	lsls	r2, r3
 8003946:	4b19      	ldr	r3, [pc, #100]	@ (80039ac <xTaskPriorityInherit+0xf0>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4313      	orrs	r3, r2
 800394c:	4a17      	ldr	r2, [pc, #92]	@ (80039ac <xTaskPriorityInherit+0xf0>)
 800394e:	6013      	str	r3, [r2, #0]
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003954:	4613      	mov	r3, r2
 8003956:	009b      	lsls	r3, r3, #2
 8003958:	4413      	add	r3, r2
 800395a:	009b      	lsls	r3, r3, #2
 800395c:	4a12      	ldr	r2, [pc, #72]	@ (80039a8 <xTaskPriorityInherit+0xec>)
 800395e:	441a      	add	r2, r3
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	3304      	adds	r3, #4
 8003964:	4619      	mov	r1, r3
 8003966:	4610      	mov	r0, r2
 8003968:	f7fe fc37 	bl	80021da <vListInsertEnd>
 800396c:	e004      	b.n	8003978 <xTaskPriorityInherit+0xbc>
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800396e:	4b0d      	ldr	r3, [pc, #52]	@ (80039a4 <xTaskPriorityInherit+0xe8>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	62da      	str	r2, [r3, #44]	@ 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	4619      	mov	r1, r3
 800397c:	2049      	movs	r0, #73	@ 0x49
 800397e:	f001 fbab 	bl	80050d8 <SEGGER_SYSVIEW_RecordU32>

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 8003982:	2301      	movs	r3, #1
 8003984:	60fb      	str	r3, [r7, #12]
 8003986:	e008      	b.n	800399a <xTaskPriorityInherit+0xde>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800398c:	4b05      	ldr	r3, [pc, #20]	@ (80039a4 <xTaskPriorityInherit+0xe8>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003992:	429a      	cmp	r2, r3
 8003994:	d201      	bcs.n	800399a <xTaskPriorityInherit+0xde>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 8003996:	2301      	movs	r3, #1
 8003998:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800399a:	68fb      	ldr	r3, [r7, #12]
    }
 800399c:	4618      	mov	r0, r3
 800399e:	3710      	adds	r7, #16
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bd80      	pop	{r7, pc}
 80039a4:	200000d8 	.word	0x200000d8
 80039a8:	200000dc 	.word	0x200000dc
 80039ac:	200001b8 	.word	0x200001b8

080039b0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b086      	sub	sp, #24
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 80039bc:	2300      	movs	r3, #0
 80039be:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d06a      	beq.n	8003a9c <xTaskPriorityDisinherit+0xec>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 80039c6:	4b38      	ldr	r3, [pc, #224]	@ (8003aa8 <xTaskPriorityDisinherit+0xf8>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	693a      	ldr	r2, [r7, #16]
 80039cc:	429a      	cmp	r2, r3
 80039ce:	d00b      	beq.n	80039e8 <xTaskPriorityDisinherit+0x38>
        __asm volatile
 80039d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039d4:	f383 8811 	msr	BASEPRI, r3
 80039d8:	f3bf 8f6f 	isb	sy
 80039dc:	f3bf 8f4f 	dsb	sy
 80039e0:	60fb      	str	r3, [r7, #12]
    }
 80039e2:	bf00      	nop
 80039e4:	bf00      	nop
 80039e6:	e7fd      	b.n	80039e4 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 80039e8:	693b      	ldr	r3, [r7, #16]
 80039ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d10b      	bne.n	8003a08 <xTaskPriorityDisinherit+0x58>
        __asm volatile
 80039f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039f4:	f383 8811 	msr	BASEPRI, r3
 80039f8:	f3bf 8f6f 	isb	sy
 80039fc:	f3bf 8f4f 	dsb	sy
 8003a00:	60bb      	str	r3, [r7, #8]
    }
 8003a02:	bf00      	nop
 8003a04:	bf00      	nop
 8003a06:	e7fd      	b.n	8003a04 <xTaskPriorityDisinherit+0x54>
            ( pxTCB->uxMutexesHeld )--;
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a0c:	1e5a      	subs	r2, r3, #1
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003a12:	693b      	ldr	r3, [r7, #16]
 8003a14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a1a:	429a      	cmp	r2, r3
 8003a1c:	d03e      	beq.n	8003a9c <xTaskPriorityDisinherit+0xec>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d13a      	bne.n	8003a9c <xTaskPriorityDisinherit+0xec>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	3304      	adds	r3, #4
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f7fe fc32 	bl	8002294 <uxListRemove>
 8003a30:	4603      	mov	r3, r0
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d10a      	bne.n	8003a4c <xTaskPriorityDisinherit+0x9c>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8003a36:	693b      	ldr	r3, [r7, #16]
 8003a38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a40:	43da      	mvns	r2, r3
 8003a42:	4b1a      	ldr	r3, [pc, #104]	@ (8003aac <xTaskPriorityDisinherit+0xfc>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4013      	ands	r3, r2
 8003a48:	4a18      	ldr	r2, [pc, #96]	@ (8003aac <xTaskPriorityDisinherit+0xfc>)
 8003a4a:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	4619      	mov	r1, r3
 8003a50:	204a      	movs	r0, #74	@ 0x4a
 8003a52:	f001 fb41 	bl	80050d8 <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a62:	f1c3 0205 	rsb	r2, r3, #5
 8003a66:	693b      	ldr	r3, [r7, #16]
 8003a68:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a6e:	2201      	movs	r2, #1
 8003a70:	409a      	lsls	r2, r3
 8003a72:	4b0e      	ldr	r3, [pc, #56]	@ (8003aac <xTaskPriorityDisinherit+0xfc>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4313      	orrs	r3, r2
 8003a78:	4a0c      	ldr	r2, [pc, #48]	@ (8003aac <xTaskPriorityDisinherit+0xfc>)
 8003a7a:	6013      	str	r3, [r2, #0]
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a80:	4613      	mov	r3, r2
 8003a82:	009b      	lsls	r3, r3, #2
 8003a84:	4413      	add	r3, r2
 8003a86:	009b      	lsls	r3, r3, #2
 8003a88:	4a09      	ldr	r2, [pc, #36]	@ (8003ab0 <xTaskPriorityDisinherit+0x100>)
 8003a8a:	441a      	add	r2, r3
 8003a8c:	693b      	ldr	r3, [r7, #16]
 8003a8e:	3304      	adds	r3, #4
 8003a90:	4619      	mov	r1, r3
 8003a92:	4610      	mov	r0, r2
 8003a94:	f7fe fba1 	bl	80021da <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003a9c:	697b      	ldr	r3, [r7, #20]
    }
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	3718      	adds	r7, #24
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}
 8003aa6:	bf00      	nop
 8003aa8:	200000d8 	.word	0x200000d8
 8003aac:	200001b8 	.word	0x200001b8
 8003ab0:	200000dc 	.word	0x200000dc

08003ab4 <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b088      	sub	sp, #32
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
 8003abc:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	61bb      	str	r3, [r7, #24]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	f000 8083 	beq.w	8003bd4 <vTaskPriorityDisinheritAfterTimeout+0x120>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 8003ace:	69bb      	ldr	r3, [r7, #24]
 8003ad0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d10b      	bne.n	8003aee <vTaskPriorityDisinheritAfterTimeout+0x3a>
        __asm volatile
 8003ad6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ada:	f383 8811 	msr	BASEPRI, r3
 8003ade:	f3bf 8f6f 	isb	sy
 8003ae2:	f3bf 8f4f 	dsb	sy
 8003ae6:	60fb      	str	r3, [r7, #12]
    }
 8003ae8:	bf00      	nop
 8003aea:	bf00      	nop
 8003aec:	e7fd      	b.n	8003aea <vTaskPriorityDisinheritAfterTimeout+0x36>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8003aee:	69bb      	ldr	r3, [r7, #24]
 8003af0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003af2:	683a      	ldr	r2, [r7, #0]
 8003af4:	429a      	cmp	r2, r3
 8003af6:	d902      	bls.n	8003afe <vTaskPriorityDisinheritAfterTimeout+0x4a>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	61fb      	str	r3, [r7, #28]
 8003afc:	e002      	b.n	8003b04 <vTaskPriorityDisinheritAfterTimeout+0x50>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 8003afe:	69bb      	ldr	r3, [r7, #24]
 8003b00:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b02:	61fb      	str	r3, [r7, #28]
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 8003b04:	69bb      	ldr	r3, [r7, #24]
 8003b06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b08:	69fa      	ldr	r2, [r7, #28]
 8003b0a:	429a      	cmp	r2, r3
 8003b0c:	d062      	beq.n	8003bd4 <vTaskPriorityDisinheritAfterTimeout+0x120>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8003b0e:	69bb      	ldr	r3, [r7, #24]
 8003b10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b12:	697a      	ldr	r2, [r7, #20]
 8003b14:	429a      	cmp	r2, r3
 8003b16:	d15d      	bne.n	8003bd4 <vTaskPriorityDisinheritAfterTimeout+0x120>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 8003b18:	4b30      	ldr	r3, [pc, #192]	@ (8003bdc <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	69ba      	ldr	r2, [r7, #24]
 8003b1e:	429a      	cmp	r2, r3
 8003b20:	d10b      	bne.n	8003b3a <vTaskPriorityDisinheritAfterTimeout+0x86>
        __asm volatile
 8003b22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b26:	f383 8811 	msr	BASEPRI, r3
 8003b2a:	f3bf 8f6f 	isb	sy
 8003b2e:	f3bf 8f4f 	dsb	sy
 8003b32:	60bb      	str	r3, [r7, #8]
    }
 8003b34:	bf00      	nop
 8003b36:	bf00      	nop
 8003b38:	e7fd      	b.n	8003b36 <vTaskPriorityDisinheritAfterTimeout+0x82>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	4619      	mov	r1, r3
 8003b3e:	204a      	movs	r0, #74	@ 0x4a
 8003b40:	f001 faca 	bl	80050d8 <SEGGER_SYSVIEW_RecordU32>
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8003b44:	69bb      	ldr	r3, [r7, #24]
 8003b46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b48:	613b      	str	r3, [r7, #16]
                    pxTCB->uxPriority = uxPriorityToUse;
 8003b4a:	69bb      	ldr	r3, [r7, #24]
 8003b4c:	69fa      	ldr	r2, [r7, #28]
 8003b4e:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003b50:	69bb      	ldr	r3, [r7, #24]
 8003b52:	699b      	ldr	r3, [r3, #24]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	db04      	blt.n	8003b62 <vTaskPriorityDisinheritAfterTimeout+0xae>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b58:	69fb      	ldr	r3, [r7, #28]
 8003b5a:	f1c3 0205 	rsb	r2, r3, #5
 8003b5e:	69bb      	ldr	r3, [r7, #24]
 8003b60:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003b62:	69bb      	ldr	r3, [r7, #24]
 8003b64:	6959      	ldr	r1, [r3, #20]
 8003b66:	693a      	ldr	r2, [r7, #16]
 8003b68:	4613      	mov	r3, r2
 8003b6a:	009b      	lsls	r3, r3, #2
 8003b6c:	4413      	add	r3, r2
 8003b6e:	009b      	lsls	r3, r3, #2
 8003b70:	4a1b      	ldr	r2, [pc, #108]	@ (8003be0 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8003b72:	4413      	add	r3, r2
 8003b74:	4299      	cmp	r1, r3
 8003b76:	d12d      	bne.n	8003bd4 <vTaskPriorityDisinheritAfterTimeout+0x120>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003b78:	69bb      	ldr	r3, [r7, #24]
 8003b7a:	3304      	adds	r3, #4
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	f7fe fb89 	bl	8002294 <uxListRemove>
 8003b82:	4603      	mov	r3, r0
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d10a      	bne.n	8003b9e <vTaskPriorityDisinheritAfterTimeout+0xea>
                        {
                            /* It is known that the task is in its ready list so
                             * there is no need to check again and the port level
                             * reset macro can be called directly. */
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8003b88:	69bb      	ldr	r3, [r7, #24]
 8003b8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b8c:	2201      	movs	r2, #1
 8003b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b92:	43da      	mvns	r2, r3
 8003b94:	4b13      	ldr	r3, [pc, #76]	@ (8003be4 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4013      	ands	r3, r2
 8003b9a:	4a12      	ldr	r2, [pc, #72]	@ (8003be4 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8003b9c:	6013      	str	r3, [r2, #0]
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 8003b9e:	69bb      	ldr	r3, [r7, #24]
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	f001 fff7 	bl	8005b94 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003ba6:	69bb      	ldr	r3, [r7, #24]
 8003ba8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003baa:	2201      	movs	r2, #1
 8003bac:	409a      	lsls	r2, r3
 8003bae:	4b0d      	ldr	r3, [pc, #52]	@ (8003be4 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	4a0b      	ldr	r2, [pc, #44]	@ (8003be4 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8003bb6:	6013      	str	r3, [r2, #0]
 8003bb8:	69bb      	ldr	r3, [r7, #24]
 8003bba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003bbc:	4613      	mov	r3, r2
 8003bbe:	009b      	lsls	r3, r3, #2
 8003bc0:	4413      	add	r3, r2
 8003bc2:	009b      	lsls	r3, r3, #2
 8003bc4:	4a06      	ldr	r2, [pc, #24]	@ (8003be0 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8003bc6:	441a      	add	r2, r3
 8003bc8:	69bb      	ldr	r3, [r7, #24]
 8003bca:	3304      	adds	r3, #4
 8003bcc:	4619      	mov	r1, r3
 8003bce:	4610      	mov	r0, r2
 8003bd0:	f7fe fb03 	bl	80021da <vListInsertEnd>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8003bd4:	bf00      	nop
 8003bd6:	3720      	adds	r7, #32
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd80      	pop	{r7, pc}
 8003bdc:	200000d8 	.word	0x200000d8
 8003be0:	200000dc 	.word	0x200000dc
 8003be4:	200001b8 	.word	0x200001b8

08003be8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 8003be8:	b480      	push	{r7}
 8003bea:	af00      	add	r7, sp, #0
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
 8003bec:	4b07      	ldr	r3, [pc, #28]	@ (8003c0c <pvTaskIncrementMutexHeldCount+0x24>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d004      	beq.n	8003bfe <pvTaskIncrementMutexHeldCount+0x16>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
 8003bf4:	4b05      	ldr	r3, [pc, #20]	@ (8003c0c <pvTaskIncrementMutexHeldCount+0x24>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003bfa:	3201      	adds	r2, #1
 8003bfc:	64da      	str	r2, [r3, #76]	@ 0x4c
        }

        return pxCurrentTCB;
 8003bfe:	4b03      	ldr	r3, [pc, #12]	@ (8003c0c <pvTaskIncrementMutexHeldCount+0x24>)
 8003c00:	681b      	ldr	r3, [r3, #0]
    }
 8003c02:	4618      	mov	r0, r3
 8003c04:	46bd      	mov	sp, r7
 8003c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0a:	4770      	bx	lr
 8003c0c:	200000d8 	.word	0x200000d8

08003c10 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b084      	sub	sp, #16
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
 8003c18:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8003c1a:	4b32      	ldr	r3, [pc, #200]	@ (8003ce4 <prvAddCurrentTaskToDelayedList+0xd4>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003c20:	4b31      	ldr	r3, [pc, #196]	@ (8003ce8 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	3304      	adds	r3, #4
 8003c26:	4618      	mov	r0, r3
 8003c28:	f7fe fb34 	bl	8002294 <uxListRemove>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d10b      	bne.n	8003c4a <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003c32:	4b2d      	ldr	r3, [pc, #180]	@ (8003ce8 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c38:	2201      	movs	r2, #1
 8003c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c3e:	43da      	mvns	r2, r3
 8003c40:	4b2a      	ldr	r3, [pc, #168]	@ (8003cec <prvAddCurrentTaskToDelayedList+0xdc>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4013      	ands	r3, r2
 8003c46:	4a29      	ldr	r2, [pc, #164]	@ (8003cec <prvAddCurrentTaskToDelayedList+0xdc>)
 8003c48:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c50:	d110      	bne.n	8003c74 <prvAddCurrentTaskToDelayedList+0x64>
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d00d      	beq.n	8003c74 <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8003c58:	4b23      	ldr	r3, [pc, #140]	@ (8003ce8 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	211b      	movs	r1, #27
 8003c5e:	4618      	mov	r0, r3
 8003c60:	f001 ffda 	bl	8005c18 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003c64:	4b20      	ldr	r3, [pc, #128]	@ (8003ce8 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	3304      	adds	r3, #4
 8003c6a:	4619      	mov	r1, r3
 8003c6c:	4820      	ldr	r0, [pc, #128]	@ (8003cf0 <prvAddCurrentTaskToDelayedList+0xe0>)
 8003c6e:	f7fe fab4 	bl	80021da <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8003c72:	e032      	b.n	8003cda <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8003c74:	68fa      	ldr	r2, [r7, #12]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	4413      	add	r3, r2
 8003c7a:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003c7c:	4b1a      	ldr	r3, [pc, #104]	@ (8003ce8 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	68ba      	ldr	r2, [r7, #8]
 8003c82:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8003c84:	68ba      	ldr	r2, [r7, #8]
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	429a      	cmp	r2, r3
 8003c8a:	d20f      	bcs.n	8003cac <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8003c8c:	4b16      	ldr	r3, [pc, #88]	@ (8003ce8 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	2104      	movs	r1, #4
 8003c92:	4618      	mov	r0, r3
 8003c94:	f001 ffc0 	bl	8005c18 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003c98:	4b16      	ldr	r3, [pc, #88]	@ (8003cf4 <prvAddCurrentTaskToDelayedList+0xe4>)
 8003c9a:	681a      	ldr	r2, [r3, #0]
 8003c9c:	4b12      	ldr	r3, [pc, #72]	@ (8003ce8 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	3304      	adds	r3, #4
 8003ca2:	4619      	mov	r1, r3
 8003ca4:	4610      	mov	r0, r2
 8003ca6:	f7fe fabc 	bl	8002222 <vListInsert>
}
 8003caa:	e016      	b.n	8003cda <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 8003cac:	4b0e      	ldr	r3, [pc, #56]	@ (8003ce8 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	2104      	movs	r1, #4
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	f001 ffb0 	bl	8005c18 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003cb8:	4b0f      	ldr	r3, [pc, #60]	@ (8003cf8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003cba:	681a      	ldr	r2, [r3, #0]
 8003cbc:	4b0a      	ldr	r3, [pc, #40]	@ (8003ce8 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	3304      	adds	r3, #4
 8003cc2:	4619      	mov	r1, r3
 8003cc4:	4610      	mov	r0, r2
 8003cc6:	f7fe faac 	bl	8002222 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8003cca:	4b0c      	ldr	r3, [pc, #48]	@ (8003cfc <prvAddCurrentTaskToDelayedList+0xec>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	68ba      	ldr	r2, [r7, #8]
 8003cd0:	429a      	cmp	r2, r3
 8003cd2:	d202      	bcs.n	8003cda <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 8003cd4:	4a09      	ldr	r2, [pc, #36]	@ (8003cfc <prvAddCurrentTaskToDelayedList+0xec>)
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	6013      	str	r3, [r2, #0]
}
 8003cda:	bf00      	nop
 8003cdc:	3710      	adds	r7, #16
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}
 8003ce2:	bf00      	nop
 8003ce4:	200001b4 	.word	0x200001b4
 8003ce8:	200000d8 	.word	0x200000d8
 8003cec:	200001b8 	.word	0x200001b8
 8003cf0:	2000019c 	.word	0x2000019c
 8003cf4:	2000016c 	.word	0x2000016c
 8003cf8:	20000168 	.word	0x20000168
 8003cfc:	200001d0 	.word	0x200001d0

08003d00 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8003d00:	b480      	push	{r7}
 8003d02:	b085      	sub	sp, #20
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	60f8      	str	r0, [r7, #12]
 8003d08:	60b9      	str	r1, [r7, #8]
 8003d0a:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	3b04      	subs	r3, #4
 8003d10:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003d18:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	3b04      	subs	r3, #4
 8003d1e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	f023 0201 	bic.w	r2, r3, #1
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	3b04      	subs	r3, #4
 8003d2e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8003d30:	4a0c      	ldr	r2, [pc, #48]	@ (8003d64 <pxPortInitialiseStack+0x64>)
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	3b14      	subs	r3, #20
 8003d3a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8003d3c:	687a      	ldr	r2, [r7, #4]
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	3b04      	subs	r3, #4
 8003d46:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	f06f 0202 	mvn.w	r2, #2
 8003d4e:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	3b20      	subs	r3, #32
 8003d54:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8003d56:	68fb      	ldr	r3, [r7, #12]
}
 8003d58:	4618      	mov	r0, r3
 8003d5a:	3714      	adds	r7, #20
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d62:	4770      	bx	lr
 8003d64:	08003d69 	.word	0x08003d69

08003d68 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b085      	sub	sp, #20
 8003d6c:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8003d6e:	2300      	movs	r3, #0
 8003d70:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8003d72:	4b13      	ldr	r3, [pc, #76]	@ (8003dc0 <prvTaskExitError+0x58>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d7a:	d00b      	beq.n	8003d94 <prvTaskExitError+0x2c>
        __asm volatile
 8003d7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d80:	f383 8811 	msr	BASEPRI, r3
 8003d84:	f3bf 8f6f 	isb	sy
 8003d88:	f3bf 8f4f 	dsb	sy
 8003d8c:	60fb      	str	r3, [r7, #12]
    }
 8003d8e:	bf00      	nop
 8003d90:	bf00      	nop
 8003d92:	e7fd      	b.n	8003d90 <prvTaskExitError+0x28>
        __asm volatile
 8003d94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d98:	f383 8811 	msr	BASEPRI, r3
 8003d9c:	f3bf 8f6f 	isb	sy
 8003da0:	f3bf 8f4f 	dsb	sy
 8003da4:	60bb      	str	r3, [r7, #8]
    }
 8003da6:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8003da8:	bf00      	nop
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d0fc      	beq.n	8003daa <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8003db0:	bf00      	nop
 8003db2:	bf00      	nop
 8003db4:	3714      	adds	r7, #20
 8003db6:	46bd      	mov	sp, r7
 8003db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbc:	4770      	bx	lr
 8003dbe:	bf00      	nop
 8003dc0:	20000010 	.word	0x20000010
	...

08003dd0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8003dd0:	4b07      	ldr	r3, [pc, #28]	@ (8003df0 <pxCurrentTCBConst2>)
 8003dd2:	6819      	ldr	r1, [r3, #0]
 8003dd4:	6808      	ldr	r0, [r1, #0]
 8003dd6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003dda:	f380 8809 	msr	PSP, r0
 8003dde:	f3bf 8f6f 	isb	sy
 8003de2:	f04f 0000 	mov.w	r0, #0
 8003de6:	f380 8811 	msr	BASEPRI, r0
 8003dea:	4770      	bx	lr
 8003dec:	f3af 8000 	nop.w

08003df0 <pxCurrentTCBConst2>:
 8003df0:	200000d8 	.word	0x200000d8
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8003df4:	bf00      	nop
 8003df6:	bf00      	nop

08003df8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8003df8:	4808      	ldr	r0, [pc, #32]	@ (8003e1c <prvPortStartFirstTask+0x24>)
 8003dfa:	6800      	ldr	r0, [r0, #0]
 8003dfc:	6800      	ldr	r0, [r0, #0]
 8003dfe:	f380 8808 	msr	MSP, r0
 8003e02:	f04f 0000 	mov.w	r0, #0
 8003e06:	f380 8814 	msr	CONTROL, r0
 8003e0a:	b662      	cpsie	i
 8003e0c:	b661      	cpsie	f
 8003e0e:	f3bf 8f4f 	dsb	sy
 8003e12:	f3bf 8f6f 	isb	sy
 8003e16:	df00      	svc	0
 8003e18:	bf00      	nop
 8003e1a:	0000      	.short	0x0000
 8003e1c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8003e20:	bf00      	nop
 8003e22:	bf00      	nop

08003e24 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b086      	sub	sp, #24
 8003e28:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003e2a:	4b47      	ldr	r3, [pc, #284]	@ (8003f48 <xPortStartScheduler+0x124>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a47      	ldr	r2, [pc, #284]	@ (8003f4c <xPortStartScheduler+0x128>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d10b      	bne.n	8003e4c <xPortStartScheduler+0x28>
        __asm volatile
 8003e34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e38:	f383 8811 	msr	BASEPRI, r3
 8003e3c:	f3bf 8f6f 	isb	sy
 8003e40:	f3bf 8f4f 	dsb	sy
 8003e44:	613b      	str	r3, [r7, #16]
    }
 8003e46:	bf00      	nop
 8003e48:	bf00      	nop
 8003e4a:	e7fd      	b.n	8003e48 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003e4c:	4b3e      	ldr	r3, [pc, #248]	@ (8003f48 <xPortStartScheduler+0x124>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a3f      	ldr	r2, [pc, #252]	@ (8003f50 <xPortStartScheduler+0x12c>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d10b      	bne.n	8003e6e <xPortStartScheduler+0x4a>
        __asm volatile
 8003e56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e5a:	f383 8811 	msr	BASEPRI, r3
 8003e5e:	f3bf 8f6f 	isb	sy
 8003e62:	f3bf 8f4f 	dsb	sy
 8003e66:	60fb      	str	r3, [r7, #12]
    }
 8003e68:	bf00      	nop
 8003e6a:	bf00      	nop
 8003e6c:	e7fd      	b.n	8003e6a <xPortStartScheduler+0x46>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003e6e:	4b39      	ldr	r3, [pc, #228]	@ (8003f54 <xPortStartScheduler+0x130>)
 8003e70:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	781b      	ldrb	r3, [r3, #0]
 8003e76:	b2db      	uxtb	r3, r3
 8003e78:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003e7a:	697b      	ldr	r3, [r7, #20]
 8003e7c:	22ff      	movs	r2, #255	@ 0xff
 8003e7e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	781b      	ldrb	r3, [r3, #0]
 8003e84:	b2db      	uxtb	r3, r3
 8003e86:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003e88:	78fb      	ldrb	r3, [r7, #3]
 8003e8a:	b2db      	uxtb	r3, r3
 8003e8c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003e90:	b2da      	uxtb	r2, r3
 8003e92:	4b31      	ldr	r3, [pc, #196]	@ (8003f58 <xPortStartScheduler+0x134>)
 8003e94:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003e96:	4b31      	ldr	r3, [pc, #196]	@ (8003f5c <xPortStartScheduler+0x138>)
 8003e98:	2207      	movs	r2, #7
 8003e9a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003e9c:	e009      	b.n	8003eb2 <xPortStartScheduler+0x8e>
            {
                ulMaxPRIGROUPValue--;
 8003e9e:	4b2f      	ldr	r3, [pc, #188]	@ (8003f5c <xPortStartScheduler+0x138>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	3b01      	subs	r3, #1
 8003ea4:	4a2d      	ldr	r2, [pc, #180]	@ (8003f5c <xPortStartScheduler+0x138>)
 8003ea6:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003ea8:	78fb      	ldrb	r3, [r7, #3]
 8003eaa:	b2db      	uxtb	r3, r3
 8003eac:	005b      	lsls	r3, r3, #1
 8003eae:	b2db      	uxtb	r3, r3
 8003eb0:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003eb2:	78fb      	ldrb	r3, [r7, #3]
 8003eb4:	b2db      	uxtb	r3, r3
 8003eb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003eba:	2b80      	cmp	r3, #128	@ 0x80
 8003ebc:	d0ef      	beq.n	8003e9e <xPortStartScheduler+0x7a>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003ebe:	4b27      	ldr	r3, [pc, #156]	@ (8003f5c <xPortStartScheduler+0x138>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f1c3 0307 	rsb	r3, r3, #7
 8003ec6:	2b04      	cmp	r3, #4
 8003ec8:	d00b      	beq.n	8003ee2 <xPortStartScheduler+0xbe>
        __asm volatile
 8003eca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ece:	f383 8811 	msr	BASEPRI, r3
 8003ed2:	f3bf 8f6f 	isb	sy
 8003ed6:	f3bf 8f4f 	dsb	sy
 8003eda:	60bb      	str	r3, [r7, #8]
    }
 8003edc:	bf00      	nop
 8003ede:	bf00      	nop
 8003ee0:	e7fd      	b.n	8003ede <xPortStartScheduler+0xba>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003ee2:	4b1e      	ldr	r3, [pc, #120]	@ (8003f5c <xPortStartScheduler+0x138>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	021b      	lsls	r3, r3, #8
 8003ee8:	4a1c      	ldr	r2, [pc, #112]	@ (8003f5c <xPortStartScheduler+0x138>)
 8003eea:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003eec:	4b1b      	ldr	r3, [pc, #108]	@ (8003f5c <xPortStartScheduler+0x138>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003ef4:	4a19      	ldr	r2, [pc, #100]	@ (8003f5c <xPortStartScheduler+0x138>)
 8003ef6:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	b2da      	uxtb	r2, r3
 8003efc:	697b      	ldr	r3, [r7, #20]
 8003efe:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8003f00:	4b17      	ldr	r3, [pc, #92]	@ (8003f60 <xPortStartScheduler+0x13c>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a16      	ldr	r2, [pc, #88]	@ (8003f60 <xPortStartScheduler+0x13c>)
 8003f06:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003f0a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8003f0c:	4b14      	ldr	r3, [pc, #80]	@ (8003f60 <xPortStartScheduler+0x13c>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a13      	ldr	r2, [pc, #76]	@ (8003f60 <xPortStartScheduler+0x13c>)
 8003f12:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8003f16:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8003f18:	f000 f968 	bl	80041ec <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8003f1c:	4b11      	ldr	r3, [pc, #68]	@ (8003f64 <xPortStartScheduler+0x140>)
 8003f1e:	2200      	movs	r2, #0
 8003f20:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8003f22:	f000 f987 	bl	8004234 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003f26:	4b10      	ldr	r3, [pc, #64]	@ (8003f68 <xPortStartScheduler+0x144>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a0f      	ldr	r2, [pc, #60]	@ (8003f68 <xPortStartScheduler+0x144>)
 8003f2c:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8003f30:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8003f32:	f7ff ff61 	bl	8003df8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8003f36:	f7ff fa8d 	bl	8003454 <vTaskSwitchContext>
    prvTaskExitError();
 8003f3a:	f7ff ff15 	bl	8003d68 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8003f3e:	2300      	movs	r3, #0
}
 8003f40:	4618      	mov	r0, r3
 8003f42:	3718      	adds	r7, #24
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bd80      	pop	{r7, pc}
 8003f48:	e000ed00 	.word	0xe000ed00
 8003f4c:	410fc271 	.word	0x410fc271
 8003f50:	410fc270 	.word	0x410fc270
 8003f54:	e000e400 	.word	0xe000e400
 8003f58:	200001dc 	.word	0x200001dc
 8003f5c:	200001e0 	.word	0x200001e0
 8003f60:	e000ed20 	.word	0xe000ed20
 8003f64:	20000010 	.word	0x20000010
 8003f68:	e000ef34 	.word	0xe000ef34

08003f6c <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	b087      	sub	sp, #28
 8003f70:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003f72:	4b38      	ldr	r3, [pc, #224]	@ (8004054 <vInitPrioGroupValue+0xe8>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a38      	ldr	r2, [pc, #224]	@ (8004058 <vInitPrioGroupValue+0xec>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d10b      	bne.n	8003f94 <vInitPrioGroupValue+0x28>
        __asm volatile
 8003f7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f80:	f383 8811 	msr	BASEPRI, r3
 8003f84:	f3bf 8f6f 	isb	sy
 8003f88:	f3bf 8f4f 	dsb	sy
 8003f8c:	613b      	str	r3, [r7, #16]
    }
 8003f8e:	bf00      	nop
 8003f90:	bf00      	nop
 8003f92:	e7fd      	b.n	8003f90 <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003f94:	4b2f      	ldr	r3, [pc, #188]	@ (8004054 <vInitPrioGroupValue+0xe8>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a30      	ldr	r2, [pc, #192]	@ (800405c <vInitPrioGroupValue+0xf0>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d10b      	bne.n	8003fb6 <vInitPrioGroupValue+0x4a>
        __asm volatile
 8003f9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fa2:	f383 8811 	msr	BASEPRI, r3
 8003fa6:	f3bf 8f6f 	isb	sy
 8003faa:	f3bf 8f4f 	dsb	sy
 8003fae:	60fb      	str	r3, [r7, #12]
    }
 8003fb0:	bf00      	nop
 8003fb2:	bf00      	nop
 8003fb4:	e7fd      	b.n	8003fb2 <vInitPrioGroupValue+0x46>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003fb6:	4b2a      	ldr	r3, [pc, #168]	@ (8004060 <vInitPrioGroupValue+0xf4>)
 8003fb8:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	781b      	ldrb	r3, [r3, #0]
 8003fbe:	b2db      	uxtb	r3, r3
 8003fc0:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003fc2:	697b      	ldr	r3, [r7, #20]
 8003fc4:	22ff      	movs	r2, #255	@ 0xff
 8003fc6:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003fc8:	697b      	ldr	r3, [r7, #20]
 8003fca:	781b      	ldrb	r3, [r3, #0]
 8003fcc:	b2db      	uxtb	r3, r3
 8003fce:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003fd0:	78fb      	ldrb	r3, [r7, #3]
 8003fd2:	b2db      	uxtb	r3, r3
 8003fd4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003fd8:	b2da      	uxtb	r2, r3
 8003fda:	4b22      	ldr	r3, [pc, #136]	@ (8004064 <vInitPrioGroupValue+0xf8>)
 8003fdc:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003fde:	4b22      	ldr	r3, [pc, #136]	@ (8004068 <vInitPrioGroupValue+0xfc>)
 8003fe0:	2207      	movs	r2, #7
 8003fe2:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003fe4:	e009      	b.n	8003ffa <vInitPrioGroupValue+0x8e>
            {
                ulMaxPRIGROUPValue--;
 8003fe6:	4b20      	ldr	r3, [pc, #128]	@ (8004068 <vInitPrioGroupValue+0xfc>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	3b01      	subs	r3, #1
 8003fec:	4a1e      	ldr	r2, [pc, #120]	@ (8004068 <vInitPrioGroupValue+0xfc>)
 8003fee:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003ff0:	78fb      	ldrb	r3, [r7, #3]
 8003ff2:	b2db      	uxtb	r3, r3
 8003ff4:	005b      	lsls	r3, r3, #1
 8003ff6:	b2db      	uxtb	r3, r3
 8003ff8:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003ffa:	78fb      	ldrb	r3, [r7, #3]
 8003ffc:	b2db      	uxtb	r3, r3
 8003ffe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004002:	2b80      	cmp	r3, #128	@ 0x80
 8004004:	d0ef      	beq.n	8003fe6 <vInitPrioGroupValue+0x7a>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004006:	4b18      	ldr	r3, [pc, #96]	@ (8004068 <vInitPrioGroupValue+0xfc>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f1c3 0307 	rsb	r3, r3, #7
 800400e:	2b04      	cmp	r3, #4
 8004010:	d00b      	beq.n	800402a <vInitPrioGroupValue+0xbe>
        __asm volatile
 8004012:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004016:	f383 8811 	msr	BASEPRI, r3
 800401a:	f3bf 8f6f 	isb	sy
 800401e:	f3bf 8f4f 	dsb	sy
 8004022:	60bb      	str	r3, [r7, #8]
    }
 8004024:	bf00      	nop
 8004026:	bf00      	nop
 8004028:	e7fd      	b.n	8004026 <vInitPrioGroupValue+0xba>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800402a:	4b0f      	ldr	r3, [pc, #60]	@ (8004068 <vInitPrioGroupValue+0xfc>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	021b      	lsls	r3, r3, #8
 8004030:	4a0d      	ldr	r2, [pc, #52]	@ (8004068 <vInitPrioGroupValue+0xfc>)
 8004032:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004034:	4b0c      	ldr	r3, [pc, #48]	@ (8004068 <vInitPrioGroupValue+0xfc>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800403c:	4a0a      	ldr	r2, [pc, #40]	@ (8004068 <vInitPrioGroupValue+0xfc>)
 800403e:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	b2da      	uxtb	r2, r3
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 8004048:	bf00      	nop
 800404a:	371c      	adds	r7, #28
 800404c:	46bd      	mov	sp, r7
 800404e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004052:	4770      	bx	lr
 8004054:	e000ed00 	.word	0xe000ed00
 8004058:	410fc271 	.word	0x410fc271
 800405c:	410fc270 	.word	0x410fc270
 8004060:	e000e400 	.word	0xe000e400
 8004064:	200001dc 	.word	0x200001dc
 8004068:	200001e0 	.word	0x200001e0

0800406c <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800406c:	b480      	push	{r7}
 800406e:	b083      	sub	sp, #12
 8004070:	af00      	add	r7, sp, #0
        __asm volatile
 8004072:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004076:	f383 8811 	msr	BASEPRI, r3
 800407a:	f3bf 8f6f 	isb	sy
 800407e:	f3bf 8f4f 	dsb	sy
 8004082:	607b      	str	r3, [r7, #4]
    }
 8004084:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8004086:	4b10      	ldr	r3, [pc, #64]	@ (80040c8 <vPortEnterCritical+0x5c>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	3301      	adds	r3, #1
 800408c:	4a0e      	ldr	r2, [pc, #56]	@ (80040c8 <vPortEnterCritical+0x5c>)
 800408e:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8004090:	4b0d      	ldr	r3, [pc, #52]	@ (80040c8 <vPortEnterCritical+0x5c>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	2b01      	cmp	r3, #1
 8004096:	d110      	bne.n	80040ba <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004098:	4b0c      	ldr	r3, [pc, #48]	@ (80040cc <vPortEnterCritical+0x60>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	b2db      	uxtb	r3, r3
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d00b      	beq.n	80040ba <vPortEnterCritical+0x4e>
        __asm volatile
 80040a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040a6:	f383 8811 	msr	BASEPRI, r3
 80040aa:	f3bf 8f6f 	isb	sy
 80040ae:	f3bf 8f4f 	dsb	sy
 80040b2:	603b      	str	r3, [r7, #0]
    }
 80040b4:	bf00      	nop
 80040b6:	bf00      	nop
 80040b8:	e7fd      	b.n	80040b6 <vPortEnterCritical+0x4a>
    }
}
 80040ba:	bf00      	nop
 80040bc:	370c      	adds	r7, #12
 80040be:	46bd      	mov	sp, r7
 80040c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c4:	4770      	bx	lr
 80040c6:	bf00      	nop
 80040c8:	20000010 	.word	0x20000010
 80040cc:	e000ed04 	.word	0xe000ed04

080040d0 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80040d0:	b480      	push	{r7}
 80040d2:	b083      	sub	sp, #12
 80040d4:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80040d6:	4b12      	ldr	r3, [pc, #72]	@ (8004120 <vPortExitCritical+0x50>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d10b      	bne.n	80040f6 <vPortExitCritical+0x26>
        __asm volatile
 80040de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040e2:	f383 8811 	msr	BASEPRI, r3
 80040e6:	f3bf 8f6f 	isb	sy
 80040ea:	f3bf 8f4f 	dsb	sy
 80040ee:	607b      	str	r3, [r7, #4]
    }
 80040f0:	bf00      	nop
 80040f2:	bf00      	nop
 80040f4:	e7fd      	b.n	80040f2 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80040f6:	4b0a      	ldr	r3, [pc, #40]	@ (8004120 <vPortExitCritical+0x50>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	3b01      	subs	r3, #1
 80040fc:	4a08      	ldr	r2, [pc, #32]	@ (8004120 <vPortExitCritical+0x50>)
 80040fe:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8004100:	4b07      	ldr	r3, [pc, #28]	@ (8004120 <vPortExitCritical+0x50>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d105      	bne.n	8004114 <vPortExitCritical+0x44>
 8004108:	2300      	movs	r3, #0
 800410a:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8004112:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8004114:	bf00      	nop
 8004116:	370c      	adds	r7, #12
 8004118:	46bd      	mov	sp, r7
 800411a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411e:	4770      	bx	lr
 8004120:	20000010 	.word	0x20000010
	...

08004130 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004130:	f3ef 8009 	mrs	r0, PSP
 8004134:	f3bf 8f6f 	isb	sy
 8004138:	4b15      	ldr	r3, [pc, #84]	@ (8004190 <pxCurrentTCBConst>)
 800413a:	681a      	ldr	r2, [r3, #0]
 800413c:	f01e 0f10 	tst.w	lr, #16
 8004140:	bf08      	it	eq
 8004142:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004146:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800414a:	6010      	str	r0, [r2, #0]
 800414c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004150:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004154:	f380 8811 	msr	BASEPRI, r0
 8004158:	f3bf 8f4f 	dsb	sy
 800415c:	f3bf 8f6f 	isb	sy
 8004160:	f7ff f978 	bl	8003454 <vTaskSwitchContext>
 8004164:	f04f 0000 	mov.w	r0, #0
 8004168:	f380 8811 	msr	BASEPRI, r0
 800416c:	bc09      	pop	{r0, r3}
 800416e:	6819      	ldr	r1, [r3, #0]
 8004170:	6808      	ldr	r0, [r1, #0]
 8004172:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004176:	f01e 0f10 	tst.w	lr, #16
 800417a:	bf08      	it	eq
 800417c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004180:	f380 8809 	msr	PSP, r0
 8004184:	f3bf 8f6f 	isb	sy
 8004188:	4770      	bx	lr
 800418a:	bf00      	nop
 800418c:	f3af 8000 	nop.w

08004190 <pxCurrentTCBConst>:
 8004190:	200000d8 	.word	0x200000d8
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004194:	bf00      	nop
 8004196:	bf00      	nop

08004198 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b082      	sub	sp, #8
 800419c:	af00      	add	r7, sp, #0
        __asm volatile
 800419e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041a2:	f383 8811 	msr	BASEPRI, r3
 80041a6:	f3bf 8f6f 	isb	sy
 80041aa:	f3bf 8f4f 	dsb	sy
 80041ae:	607b      	str	r3, [r7, #4]
    }
 80041b0:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 80041b2:	f001 fbd5 	bl	8005960 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80041b6:	f7ff f88f 	bl	80032d8 <xTaskIncrementTick>
 80041ba:	4603      	mov	r3, r0
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d006      	beq.n	80041ce <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 80041c0:	f001 fc2c 	bl	8005a1c <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80041c4:	4b08      	ldr	r3, [pc, #32]	@ (80041e8 <SysTick_Handler+0x50>)
 80041c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80041ca:	601a      	str	r2, [r3, #0]
 80041cc:	e001      	b.n	80041d2 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 80041ce:	f001 fc09 	bl	80059e4 <SEGGER_SYSVIEW_RecordExitISR>
 80041d2:	2300      	movs	r3, #0
 80041d4:	603b      	str	r3, [r7, #0]
        __asm volatile
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	f383 8811 	msr	BASEPRI, r3
    }
 80041dc:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 80041de:	bf00      	nop
 80041e0:	3708      	adds	r7, #8
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bd80      	pop	{r7, pc}
 80041e6:	bf00      	nop
 80041e8:	e000ed04 	.word	0xe000ed04

080041ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80041ec:	b480      	push	{r7}
 80041ee:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80041f0:	4b0b      	ldr	r3, [pc, #44]	@ (8004220 <vPortSetupTimerInterrupt+0x34>)
 80041f2:	2200      	movs	r2, #0
 80041f4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80041f6:	4b0b      	ldr	r3, [pc, #44]	@ (8004224 <vPortSetupTimerInterrupt+0x38>)
 80041f8:	2200      	movs	r2, #0
 80041fa:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80041fc:	4b0a      	ldr	r3, [pc, #40]	@ (8004228 <vPortSetupTimerInterrupt+0x3c>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a0a      	ldr	r2, [pc, #40]	@ (800422c <vPortSetupTimerInterrupt+0x40>)
 8004202:	fba2 2303 	umull	r2, r3, r2, r3
 8004206:	099b      	lsrs	r3, r3, #6
 8004208:	4a09      	ldr	r2, [pc, #36]	@ (8004230 <vPortSetupTimerInterrupt+0x44>)
 800420a:	3b01      	subs	r3, #1
 800420c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800420e:	4b04      	ldr	r3, [pc, #16]	@ (8004220 <vPortSetupTimerInterrupt+0x34>)
 8004210:	2207      	movs	r2, #7
 8004212:	601a      	str	r2, [r3, #0]
}
 8004214:	bf00      	nop
 8004216:	46bd      	mov	sp, r7
 8004218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421c:	4770      	bx	lr
 800421e:	bf00      	nop
 8004220:	e000e010 	.word	0xe000e010
 8004224:	e000e018 	.word	0xe000e018
 8004228:	20000000 	.word	0x20000000
 800422c:	10624dd3 	.word	0x10624dd3
 8004230:	e000e014 	.word	0xe000e014

08004234 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8004234:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8004244 <vPortEnableVFP+0x10>
 8004238:	6801      	ldr	r1, [r0, #0]
 800423a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800423e:	6001      	str	r1, [r0, #0]
 8004240:	4770      	bx	lr
 8004242:	0000      	.short	0x0000
 8004244:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8004248:	bf00      	nop
 800424a:	bf00      	nop

0800424c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b08a      	sub	sp, #40	@ 0x28
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8004254:	2300      	movs	r3, #0
 8004256:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8004258:	f7fe ff8e 	bl	8003178 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800425c:	4b66      	ldr	r3, [pc, #408]	@ (80043f8 <pvPortMalloc+0x1ac>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d101      	bne.n	8004268 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8004264:	f000 f938 	bl	80044d8 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004268:	4b64      	ldr	r3, [pc, #400]	@ (80043fc <pvPortMalloc+0x1b0>)
 800426a:	681a      	ldr	r2, [r3, #0]
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	4013      	ands	r3, r2
 8004270:	2b00      	cmp	r3, #0
 8004272:	f040 80a9 	bne.w	80043c8 <pvPortMalloc+0x17c>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d02e      	beq.n	80042da <pvPortMalloc+0x8e>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 800427c:	2208      	movs	r2, #8
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8004282:	687a      	ldr	r2, [r7, #4]
 8004284:	429a      	cmp	r2, r3
 8004286:	d228      	bcs.n	80042da <pvPortMalloc+0x8e>
            {
                xWantedSize += xHeapStructSize;
 8004288:	2208      	movs	r2, #8
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	4413      	add	r3, r2
 800428e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	f003 0307 	and.w	r3, r3, #7
 8004296:	2b00      	cmp	r3, #0
 8004298:	d022      	beq.n	80042e0 <pvPortMalloc+0x94>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	f023 0307 	bic.w	r3, r3, #7
 80042a0:	3308      	adds	r3, #8
 80042a2:	687a      	ldr	r2, [r7, #4]
 80042a4:	429a      	cmp	r2, r3
 80042a6:	d215      	bcs.n	80042d4 <pvPortMalloc+0x88>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	f023 0307 	bic.w	r3, r3, #7
 80042ae:	3308      	adds	r3, #8
 80042b0:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	f003 0307 	and.w	r3, r3, #7
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d011      	beq.n	80042e0 <pvPortMalloc+0x94>
        __asm volatile
 80042bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042c0:	f383 8811 	msr	BASEPRI, r3
 80042c4:	f3bf 8f6f 	isb	sy
 80042c8:	f3bf 8f4f 	dsb	sy
 80042cc:	617b      	str	r3, [r7, #20]
    }
 80042ce:	bf00      	nop
 80042d0:	bf00      	nop
 80042d2:	e7fd      	b.n	80042d0 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 80042d4:	2300      	movs	r3, #0
 80042d6:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80042d8:	e002      	b.n	80042e0 <pvPortMalloc+0x94>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 80042da:	2300      	movs	r3, #0
 80042dc:	607b      	str	r3, [r7, #4]
 80042de:	e000      	b.n	80042e2 <pvPortMalloc+0x96>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80042e0:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d06f      	beq.n	80043c8 <pvPortMalloc+0x17c>
 80042e8:	4b45      	ldr	r3, [pc, #276]	@ (8004400 <pvPortMalloc+0x1b4>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	687a      	ldr	r2, [r7, #4]
 80042ee:	429a      	cmp	r2, r3
 80042f0:	d86a      	bhi.n	80043c8 <pvPortMalloc+0x17c>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80042f2:	4b44      	ldr	r3, [pc, #272]	@ (8004404 <pvPortMalloc+0x1b8>)
 80042f4:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80042f6:	4b43      	ldr	r3, [pc, #268]	@ (8004404 <pvPortMalloc+0x1b8>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	627b      	str	r3, [r7, #36]	@ 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80042fc:	e004      	b.n	8004308 <pvPortMalloc+0xbc>
                {
                    pxPreviousBlock = pxBlock;
 80042fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004300:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8004302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	627b      	str	r3, [r7, #36]	@ 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004308:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	687a      	ldr	r2, [r7, #4]
 800430e:	429a      	cmp	r2, r3
 8004310:	d903      	bls.n	800431a <pvPortMalloc+0xce>
 8004312:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d1f1      	bne.n	80042fe <pvPortMalloc+0xb2>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 800431a:	4b37      	ldr	r3, [pc, #220]	@ (80043f8 <pvPortMalloc+0x1ac>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004320:	429a      	cmp	r2, r3
 8004322:	d051      	beq.n	80043c8 <pvPortMalloc+0x17c>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004324:	6a3b      	ldr	r3, [r7, #32]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	2208      	movs	r2, #8
 800432a:	4413      	add	r3, r2
 800432c:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800432e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004330:	681a      	ldr	r2, [r3, #0]
 8004332:	6a3b      	ldr	r3, [r7, #32]
 8004334:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004338:	685a      	ldr	r2, [r3, #4]
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	1ad2      	subs	r2, r2, r3
 800433e:	2308      	movs	r3, #8
 8004340:	005b      	lsls	r3, r3, #1
 8004342:	429a      	cmp	r2, r3
 8004344:	d920      	bls.n	8004388 <pvPortMalloc+0x13c>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004346:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	4413      	add	r3, r2
 800434c:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800434e:	69bb      	ldr	r3, [r7, #24]
 8004350:	f003 0307 	and.w	r3, r3, #7
 8004354:	2b00      	cmp	r3, #0
 8004356:	d00b      	beq.n	8004370 <pvPortMalloc+0x124>
        __asm volatile
 8004358:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800435c:	f383 8811 	msr	BASEPRI, r3
 8004360:	f3bf 8f6f 	isb	sy
 8004364:	f3bf 8f4f 	dsb	sy
 8004368:	613b      	str	r3, [r7, #16]
    }
 800436a:	bf00      	nop
 800436c:	bf00      	nop
 800436e:	e7fd      	b.n	800436c <pvPortMalloc+0x120>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004370:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004372:	685a      	ldr	r2, [r3, #4]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	1ad2      	subs	r2, r2, r3
 8004378:	69bb      	ldr	r3, [r7, #24]
 800437a:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 800437c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800437e:	687a      	ldr	r2, [r7, #4]
 8004380:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004382:	69b8      	ldr	r0, [r7, #24]
 8004384:	f000 f90a 	bl	800459c <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004388:	4b1d      	ldr	r3, [pc, #116]	@ (8004400 <pvPortMalloc+0x1b4>)
 800438a:	681a      	ldr	r2, [r3, #0]
 800438c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	1ad3      	subs	r3, r2, r3
 8004392:	4a1b      	ldr	r2, [pc, #108]	@ (8004400 <pvPortMalloc+0x1b4>)
 8004394:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004396:	4b1a      	ldr	r3, [pc, #104]	@ (8004400 <pvPortMalloc+0x1b4>)
 8004398:	681a      	ldr	r2, [r3, #0]
 800439a:	4b1b      	ldr	r3, [pc, #108]	@ (8004408 <pvPortMalloc+0x1bc>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	429a      	cmp	r2, r3
 80043a0:	d203      	bcs.n	80043aa <pvPortMalloc+0x15e>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80043a2:	4b17      	ldr	r3, [pc, #92]	@ (8004400 <pvPortMalloc+0x1b4>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a18      	ldr	r2, [pc, #96]	@ (8004408 <pvPortMalloc+0x1bc>)
 80043a8:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 80043aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043ac:	685a      	ldr	r2, [r3, #4]
 80043ae:	4b13      	ldr	r3, [pc, #76]	@ (80043fc <pvPortMalloc+0x1b0>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	431a      	orrs	r2, r3
 80043b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043b6:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80043b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043ba:	2200      	movs	r2, #0
 80043bc:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80043be:	4b13      	ldr	r3, [pc, #76]	@ (800440c <pvPortMalloc+0x1c0>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	3301      	adds	r3, #1
 80043c4:	4a11      	ldr	r2, [pc, #68]	@ (800440c <pvPortMalloc+0x1c0>)
 80043c6:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80043c8:	f7fe fee4 	bl	8003194 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80043cc:	69fb      	ldr	r3, [r7, #28]
 80043ce:	f003 0307 	and.w	r3, r3, #7
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d00b      	beq.n	80043ee <pvPortMalloc+0x1a2>
        __asm volatile
 80043d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043da:	f383 8811 	msr	BASEPRI, r3
 80043de:	f3bf 8f6f 	isb	sy
 80043e2:	f3bf 8f4f 	dsb	sy
 80043e6:	60fb      	str	r3, [r7, #12]
    }
 80043e8:	bf00      	nop
 80043ea:	bf00      	nop
 80043ec:	e7fd      	b.n	80043ea <pvPortMalloc+0x19e>
    return pvReturn;
 80043ee:	69fb      	ldr	r3, [r7, #28]
}
 80043f0:	4618      	mov	r0, r3
 80043f2:	3728      	adds	r7, #40	@ 0x28
 80043f4:	46bd      	mov	sp, r7
 80043f6:	bd80      	pop	{r7, pc}
 80043f8:	20012dec 	.word	0x20012dec
 80043fc:	20012e00 	.word	0x20012e00
 8004400:	20012df0 	.word	0x20012df0
 8004404:	20012de4 	.word	0x20012de4
 8004408:	20012df4 	.word	0x20012df4
 800440c:	20012df8 	.word	0x20012df8

08004410 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b086      	sub	sp, #24
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d04f      	beq.n	80044c2 <vPortFree+0xb2>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8004422:	2308      	movs	r3, #8
 8004424:	425b      	negs	r3, r3
 8004426:	697a      	ldr	r2, [r7, #20]
 8004428:	4413      	add	r3, r2
 800442a:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004430:	693b      	ldr	r3, [r7, #16]
 8004432:	685a      	ldr	r2, [r3, #4]
 8004434:	4b25      	ldr	r3, [pc, #148]	@ (80044cc <vPortFree+0xbc>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4013      	ands	r3, r2
 800443a:	2b00      	cmp	r3, #0
 800443c:	d10b      	bne.n	8004456 <vPortFree+0x46>
        __asm volatile
 800443e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004442:	f383 8811 	msr	BASEPRI, r3
 8004446:	f3bf 8f6f 	isb	sy
 800444a:	f3bf 8f4f 	dsb	sy
 800444e:	60fb      	str	r3, [r7, #12]
    }
 8004450:	bf00      	nop
 8004452:	bf00      	nop
 8004454:	e7fd      	b.n	8004452 <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004456:	693b      	ldr	r3, [r7, #16]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d00b      	beq.n	8004476 <vPortFree+0x66>
        __asm volatile
 800445e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004462:	f383 8811 	msr	BASEPRI, r3
 8004466:	f3bf 8f6f 	isb	sy
 800446a:	f3bf 8f4f 	dsb	sy
 800446e:	60bb      	str	r3, [r7, #8]
    }
 8004470:	bf00      	nop
 8004472:	bf00      	nop
 8004474:	e7fd      	b.n	8004472 <vPortFree+0x62>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	685a      	ldr	r2, [r3, #4]
 800447a:	4b14      	ldr	r3, [pc, #80]	@ (80044cc <vPortFree+0xbc>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4013      	ands	r3, r2
 8004480:	2b00      	cmp	r3, #0
 8004482:	d01e      	beq.n	80044c2 <vPortFree+0xb2>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8004484:	693b      	ldr	r3, [r7, #16]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d11a      	bne.n	80044c2 <vPortFree+0xb2>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800448c:	693b      	ldr	r3, [r7, #16]
 800448e:	685a      	ldr	r2, [r3, #4]
 8004490:	4b0e      	ldr	r3, [pc, #56]	@ (80044cc <vPortFree+0xbc>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	43db      	mvns	r3, r3
 8004496:	401a      	ands	r2, r3
 8004498:	693b      	ldr	r3, [r7, #16]
 800449a:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 800449c:	f7fe fe6c 	bl	8003178 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80044a0:	693b      	ldr	r3, [r7, #16]
 80044a2:	685a      	ldr	r2, [r3, #4]
 80044a4:	4b0a      	ldr	r3, [pc, #40]	@ (80044d0 <vPortFree+0xc0>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4413      	add	r3, r2
 80044aa:	4a09      	ldr	r2, [pc, #36]	@ (80044d0 <vPortFree+0xc0>)
 80044ac:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80044ae:	6938      	ldr	r0, [r7, #16]
 80044b0:	f000 f874 	bl	800459c <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80044b4:	4b07      	ldr	r3, [pc, #28]	@ (80044d4 <vPortFree+0xc4>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	3301      	adds	r3, #1
 80044ba:	4a06      	ldr	r2, [pc, #24]	@ (80044d4 <vPortFree+0xc4>)
 80044bc:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80044be:	f7fe fe69 	bl	8003194 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80044c2:	bf00      	nop
 80044c4:	3718      	adds	r7, #24
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}
 80044ca:	bf00      	nop
 80044cc:	20012e00 	.word	0x20012e00
 80044d0:	20012df0 	.word	0x20012df0
 80044d4:	20012dfc 	.word	0x20012dfc

080044d8 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80044d8:	b480      	push	{r7}
 80044da:	b085      	sub	sp, #20
 80044dc:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80044de:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 80044e2:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 80044e4:	4b27      	ldr	r3, [pc, #156]	@ (8004584 <prvHeapInit+0xac>)
 80044e6:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	f003 0307 	and.w	r3, r3, #7
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d00c      	beq.n	800450c <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	3307      	adds	r3, #7
 80044f6:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	f023 0307 	bic.w	r3, r3, #7
 80044fe:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004500:	68ba      	ldr	r2, [r7, #8]
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	1ad3      	subs	r3, r2, r3
 8004506:	4a1f      	ldr	r2, [pc, #124]	@ (8004584 <prvHeapInit+0xac>)
 8004508:	4413      	add	r3, r2
 800450a:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004510:	4a1d      	ldr	r2, [pc, #116]	@ (8004588 <prvHeapInit+0xb0>)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8004516:	4b1c      	ldr	r3, [pc, #112]	@ (8004588 <prvHeapInit+0xb0>)
 8004518:	2200      	movs	r2, #0
 800451a:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	68ba      	ldr	r2, [r7, #8]
 8004520:	4413      	add	r3, r2
 8004522:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8004524:	2208      	movs	r2, #8
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	1a9b      	subs	r3, r3, r2
 800452a:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	f023 0307 	bic.w	r3, r3, #7
 8004532:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	4a15      	ldr	r2, [pc, #84]	@ (800458c <prvHeapInit+0xb4>)
 8004538:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800453a:	4b14      	ldr	r3, [pc, #80]	@ (800458c <prvHeapInit+0xb4>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	2200      	movs	r2, #0
 8004540:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8004542:	4b12      	ldr	r3, [pc, #72]	@ (800458c <prvHeapInit+0xb4>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	2200      	movs	r2, #0
 8004548:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	68fa      	ldr	r2, [r7, #12]
 8004552:	1ad2      	subs	r2, r2, r3
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004558:	4b0c      	ldr	r3, [pc, #48]	@ (800458c <prvHeapInit+0xb4>)
 800455a:	681a      	ldr	r2, [r3, #0]
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	4a0a      	ldr	r2, [pc, #40]	@ (8004590 <prvHeapInit+0xb8>)
 8004566:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	4a09      	ldr	r2, [pc, #36]	@ (8004594 <prvHeapInit+0xbc>)
 800456e:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004570:	4b09      	ldr	r3, [pc, #36]	@ (8004598 <prvHeapInit+0xc0>)
 8004572:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8004576:	601a      	str	r2, [r3, #0]
}
 8004578:	bf00      	nop
 800457a:	3714      	adds	r7, #20
 800457c:	46bd      	mov	sp, r7
 800457e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004582:	4770      	bx	lr
 8004584:	200001e4 	.word	0x200001e4
 8004588:	20012de4 	.word	0x20012de4
 800458c:	20012dec 	.word	0x20012dec
 8004590:	20012df4 	.word	0x20012df4
 8004594:	20012df0 	.word	0x20012df0
 8004598:	20012e00 	.word	0x20012e00

0800459c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 800459c:	b480      	push	{r7}
 800459e:	b085      	sub	sp, #20
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80045a4:	4b28      	ldr	r3, [pc, #160]	@ (8004648 <prvInsertBlockIntoFreeList+0xac>)
 80045a6:	60fb      	str	r3, [r7, #12]
 80045a8:	e002      	b.n	80045b0 <prvInsertBlockIntoFreeList+0x14>
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	60fb      	str	r3, [r7, #12]
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	687a      	ldr	r2, [r7, #4]
 80045b6:	429a      	cmp	r2, r3
 80045b8:	d8f7      	bhi.n	80045aa <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	68ba      	ldr	r2, [r7, #8]
 80045c4:	4413      	add	r3, r2
 80045c6:	687a      	ldr	r2, [r7, #4]
 80045c8:	429a      	cmp	r2, r3
 80045ca:	d108      	bne.n	80045de <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	685a      	ldr	r2, [r3, #4]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	441a      	add	r2, r3
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	68ba      	ldr	r2, [r7, #8]
 80045e8:	441a      	add	r2, r3
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	429a      	cmp	r2, r3
 80045f0:	d118      	bne.n	8004624 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681a      	ldr	r2, [r3, #0]
 80045f6:	4b15      	ldr	r3, [pc, #84]	@ (800464c <prvInsertBlockIntoFreeList+0xb0>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	429a      	cmp	r2, r3
 80045fc:	d00d      	beq.n	800461a <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	685a      	ldr	r2, [r3, #4]
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	441a      	add	r2, r3
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	681a      	ldr	r2, [r3, #0]
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	601a      	str	r2, [r3, #0]
 8004618:	e008      	b.n	800462c <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800461a:	4b0c      	ldr	r3, [pc, #48]	@ (800464c <prvInsertBlockIntoFreeList+0xb0>)
 800461c:	681a      	ldr	r2, [r3, #0]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	601a      	str	r2, [r3, #0]
 8004622:	e003      	b.n	800462c <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681a      	ldr	r2, [r3, #0]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 800462c:	68fa      	ldr	r2, [r7, #12]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	429a      	cmp	r2, r3
 8004632:	d002      	beq.n	800463a <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	687a      	ldr	r2, [r7, #4]
 8004638:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800463a:	bf00      	nop
 800463c:	3714      	adds	r7, #20
 800463e:	46bd      	mov	sp, r7
 8004640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004644:	4770      	bx	lr
 8004646:	bf00      	nop
 8004648:	20012de4 	.word	0x20012de4
 800464c:	20012dec 	.word	0x20012dec

08004650 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8004650:	b580      	push	{r7, lr}
 8004652:	b086      	sub	sp, #24
 8004654:	af02      	add	r7, sp, #8
 8004656:	60f8      	str	r0, [r7, #12]
 8004658:	60b9      	str	r1, [r7, #8]
 800465a:	607a      	str	r2, [r7, #4]
 800465c:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 800465e:	2205      	movs	r2, #5
 8004660:	492b      	ldr	r1, [pc, #172]	@ (8004710 <SYSVIEW_AddTask+0xc0>)
 8004662:	68b8      	ldr	r0, [r7, #8]
 8004664:	f001 fde7 	bl	8006236 <memcmp>
 8004668:	4603      	mov	r3, r0
 800466a:	2b00      	cmp	r3, #0
 800466c:	d04b      	beq.n	8004706 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 800466e:	4b29      	ldr	r3, [pc, #164]	@ (8004714 <SYSVIEW_AddTask+0xc4>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	2b07      	cmp	r3, #7
 8004674:	d903      	bls.n	800467e <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8004676:	4828      	ldr	r0, [pc, #160]	@ (8004718 <SYSVIEW_AddTask+0xc8>)
 8004678:	f001 fc1a 	bl	8005eb0 <SEGGER_SYSVIEW_Warn>
    return;
 800467c:	e044      	b.n	8004708 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 800467e:	4b25      	ldr	r3, [pc, #148]	@ (8004714 <SYSVIEW_AddTask+0xc4>)
 8004680:	681a      	ldr	r2, [r3, #0]
 8004682:	4926      	ldr	r1, [pc, #152]	@ (800471c <SYSVIEW_AddTask+0xcc>)
 8004684:	4613      	mov	r3, r2
 8004686:	009b      	lsls	r3, r3, #2
 8004688:	4413      	add	r3, r2
 800468a:	009b      	lsls	r3, r3, #2
 800468c:	440b      	add	r3, r1
 800468e:	68fa      	ldr	r2, [r7, #12]
 8004690:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8004692:	4b20      	ldr	r3, [pc, #128]	@ (8004714 <SYSVIEW_AddTask+0xc4>)
 8004694:	681a      	ldr	r2, [r3, #0]
 8004696:	4921      	ldr	r1, [pc, #132]	@ (800471c <SYSVIEW_AddTask+0xcc>)
 8004698:	4613      	mov	r3, r2
 800469a:	009b      	lsls	r3, r3, #2
 800469c:	4413      	add	r3, r2
 800469e:	009b      	lsls	r3, r3, #2
 80046a0:	440b      	add	r3, r1
 80046a2:	3304      	adds	r3, #4
 80046a4:	68ba      	ldr	r2, [r7, #8]
 80046a6:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 80046a8:	4b1a      	ldr	r3, [pc, #104]	@ (8004714 <SYSVIEW_AddTask+0xc4>)
 80046aa:	681a      	ldr	r2, [r3, #0]
 80046ac:	491b      	ldr	r1, [pc, #108]	@ (800471c <SYSVIEW_AddTask+0xcc>)
 80046ae:	4613      	mov	r3, r2
 80046b0:	009b      	lsls	r3, r3, #2
 80046b2:	4413      	add	r3, r2
 80046b4:	009b      	lsls	r3, r3, #2
 80046b6:	440b      	add	r3, r1
 80046b8:	3308      	adds	r3, #8
 80046ba:	687a      	ldr	r2, [r7, #4]
 80046bc:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 80046be:	4b15      	ldr	r3, [pc, #84]	@ (8004714 <SYSVIEW_AddTask+0xc4>)
 80046c0:	681a      	ldr	r2, [r3, #0]
 80046c2:	4916      	ldr	r1, [pc, #88]	@ (800471c <SYSVIEW_AddTask+0xcc>)
 80046c4:	4613      	mov	r3, r2
 80046c6:	009b      	lsls	r3, r3, #2
 80046c8:	4413      	add	r3, r2
 80046ca:	009b      	lsls	r3, r3, #2
 80046cc:	440b      	add	r3, r1
 80046ce:	330c      	adds	r3, #12
 80046d0:	683a      	ldr	r2, [r7, #0]
 80046d2:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 80046d4:	4b0f      	ldr	r3, [pc, #60]	@ (8004714 <SYSVIEW_AddTask+0xc4>)
 80046d6:	681a      	ldr	r2, [r3, #0]
 80046d8:	4910      	ldr	r1, [pc, #64]	@ (800471c <SYSVIEW_AddTask+0xcc>)
 80046da:	4613      	mov	r3, r2
 80046dc:	009b      	lsls	r3, r3, #2
 80046de:	4413      	add	r3, r2
 80046e0:	009b      	lsls	r3, r3, #2
 80046e2:	440b      	add	r3, r1
 80046e4:	3310      	adds	r3, #16
 80046e6:	69ba      	ldr	r2, [r7, #24]
 80046e8:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 80046ea:	4b0a      	ldr	r3, [pc, #40]	@ (8004714 <SYSVIEW_AddTask+0xc4>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	3301      	adds	r3, #1
 80046f0:	4a08      	ldr	r2, [pc, #32]	@ (8004714 <SYSVIEW_AddTask+0xc4>)
 80046f2:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 80046f4:	69bb      	ldr	r3, [r7, #24]
 80046f6:	9300      	str	r3, [sp, #0]
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	687a      	ldr	r2, [r7, #4]
 80046fc:	68b9      	ldr	r1, [r7, #8]
 80046fe:	68f8      	ldr	r0, [r7, #12]
 8004700:	f000 f80e 	bl	8004720 <SYSVIEW_SendTaskInfo>
 8004704:	e000      	b.n	8004708 <SYSVIEW_AddTask+0xb8>
    return;
 8004706:	bf00      	nop

}
 8004708:	3710      	adds	r7, #16
 800470a:	46bd      	mov	sp, r7
 800470c:	bd80      	pop	{r7, pc}
 800470e:	bf00      	nop
 8004710:	08006ff4 	.word	0x08006ff4
 8004714:	20012ea4 	.word	0x20012ea4
 8004718:	08006ffc 	.word	0x08006ffc
 800471c:	20012e04 	.word	0x20012e04

08004720 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8004720:	b580      	push	{r7, lr}
 8004722:	b08a      	sub	sp, #40	@ 0x28
 8004724:	af00      	add	r7, sp, #0
 8004726:	60f8      	str	r0, [r7, #12]
 8004728:	60b9      	str	r1, [r7, #8]
 800472a:	607a      	str	r2, [r7, #4]
 800472c:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 800472e:	f107 0314 	add.w	r3, r7, #20
 8004732:	2214      	movs	r2, #20
 8004734:	2100      	movs	r1, #0
 8004736:	4618      	mov	r0, r3
 8004738:	f001 fd8d 	bl	8006256 <memset>
  TaskInfo.TaskID     = TaskID;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 800474c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800474e:	627b      	str	r3, [r7, #36]	@ 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8004750:	f107 0314 	add.w	r3, r7, #20
 8004754:	4618      	mov	r0, r3
 8004756:	f000 ffd9 	bl	800570c <SEGGER_SYSVIEW_SendTaskInfo>
}
 800475a:	bf00      	nop
 800475c:	3728      	adds	r7, #40	@ 0x28
 800475e:	46bd      	mov	sp, r7
 8004760:	bd80      	pop	{r7, pc}
	...

08004764 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 8004764:	b580      	push	{r7, lr}
 8004766:	b084      	sub	sp, #16
 8004768:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 800476a:	4b1e      	ldr	r3, [pc, #120]	@ (80047e4 <USART2_IRQHandler+0x80>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	f003 0320 	and.w	r3, r3, #32
 8004776:	2b00      	cmp	r3, #0
 8004778:	d011      	beq.n	800479e <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 800477a:	4b1b      	ldr	r3, [pc, #108]	@ (80047e8 <USART2_IRQHandler+0x84>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	b2db      	uxtb	r3, r3
 8004780:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	f003 030b 	and.w	r3, r3, #11
 8004788:	2b00      	cmp	r3, #0
 800478a:	d108      	bne.n	800479e <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 800478c:	4b17      	ldr	r3, [pc, #92]	@ (80047ec <USART2_IRQHandler+0x88>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d004      	beq.n	800479e <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8004794:	4b15      	ldr	r3, [pc, #84]	@ (80047ec <USART2_IRQHandler+0x88>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	79fa      	ldrb	r2, [r7, #7]
 800479a:	4610      	mov	r0, r2
 800479c:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d01a      	beq.n	80047de <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 80047a8:	4b11      	ldr	r3, [pc, #68]	@ (80047f0 <USART2_IRQHandler+0x8c>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d015      	beq.n	80047dc <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 80047b0:	4b0f      	ldr	r3, [pc, #60]	@ (80047f0 <USART2_IRQHandler+0x8c>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	1dfa      	adds	r2, r7, #7
 80047b6:	4610      	mov	r0, r2
 80047b8:	4798      	blx	r3
 80047ba:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 80047bc:	68bb      	ldr	r3, [r7, #8]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d106      	bne.n	80047d0 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 80047c2:	4b0c      	ldr	r3, [pc, #48]	@ (80047f4 <USART2_IRQHandler+0x90>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4a0b      	ldr	r2, [pc, #44]	@ (80047f4 <USART2_IRQHandler+0x90>)
 80047c8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80047cc:	6013      	str	r3, [r2, #0]
 80047ce:	e006      	b.n	80047de <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 80047d0:	4b04      	ldr	r3, [pc, #16]	@ (80047e4 <USART2_IRQHandler+0x80>)
 80047d2:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 80047d4:	79fa      	ldrb	r2, [r7, #7]
 80047d6:	4b04      	ldr	r3, [pc, #16]	@ (80047e8 <USART2_IRQHandler+0x84>)
 80047d8:	601a      	str	r2, [r3, #0]
 80047da:	e000      	b.n	80047de <USART2_IRQHandler+0x7a>
      return;
 80047dc:	bf00      	nop
    }
  }
}
 80047de:	3710      	adds	r7, #16
 80047e0:	46bd      	mov	sp, r7
 80047e2:	bd80      	pop	{r7, pc}
 80047e4:	40004400 	.word	0x40004400
 80047e8:	40004404 	.word	0x40004404
 80047ec:	20012ea8 	.word	0x20012ea8
 80047f0:	20012eac 	.word	0x20012eac
 80047f4:	4000440c 	.word	0x4000440c

080047f8 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 80047f8:	b480      	push	{r7}
 80047fa:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 80047fc:	4b05      	ldr	r3, [pc, #20]	@ (8004814 <HIF_UART_EnableTXEInterrupt+0x1c>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a04      	ldr	r2, [pc, #16]	@ (8004814 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8004802:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004806:	6013      	str	r3, [r2, #0]
}
 8004808:	bf00      	nop
 800480a:	46bd      	mov	sp, r7
 800480c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004810:	4770      	bx	lr
 8004812:	bf00      	nop
 8004814:	4000440c 	.word	0x4000440c

08004818 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8004818:	b480      	push	{r7}
 800481a:	b083      	sub	sp, #12
 800481c:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 800481e:	4b24      	ldr	r3, [pc, #144]	@ (80048b0 <_DoInit+0x98>)
 8004820:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2203      	movs	r2, #3
 8004826:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2203      	movs	r2, #3
 800482c:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	4a20      	ldr	r2, [pc, #128]	@ (80048b4 <_DoInit+0x9c>)
 8004832:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	4a20      	ldr	r2, [pc, #128]	@ (80048b8 <_DoInit+0xa0>)
 8004838:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004840:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2200      	movs	r2, #0
 8004846:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2200      	movs	r2, #0
 800484c:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2200      	movs	r2, #0
 8004852:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	4a17      	ldr	r2, [pc, #92]	@ (80048b4 <_DoInit+0x9c>)
 8004858:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	4a17      	ldr	r2, [pc, #92]	@ (80048bc <_DoInit+0xa4>)
 800485e:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2210      	movs	r2, #16
 8004864:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2200      	movs	r2, #0
 800486a:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2200      	movs	r2, #0
 8004870:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2200      	movs	r2, #0
 8004876:	675a      	str	r2, [r3, #116]	@ 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	3307      	adds	r3, #7
 800487c:	4a10      	ldr	r2, [pc, #64]	@ (80048c0 <_DoInit+0xa8>)
 800487e:	6810      	ldr	r0, [r2, #0]
 8004880:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004882:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	4a0e      	ldr	r2, [pc, #56]	@ (80048c4 <_DoInit+0xac>)
 800488a:	6810      	ldr	r0, [r2, #0]
 800488c:	6018      	str	r0, [r3, #0]
 800488e:	8891      	ldrh	r1, [r2, #4]
 8004890:	7992      	ldrb	r2, [r2, #6]
 8004892:	8099      	strh	r1, [r3, #4]
 8004894:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004896:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2220      	movs	r2, #32
 800489e:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80048a0:	f3bf 8f5f 	dmb	sy
}
 80048a4:	bf00      	nop
 80048a6:	370c      	adds	r7, #12
 80048a8:	46bd      	mov	sp, r7
 80048aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ae:	4770      	bx	lr
 80048b0:	20012eb0 	.word	0x20012eb0
 80048b4:	0800704c 	.word	0x0800704c
 80048b8:	20012f58 	.word	0x20012f58
 80048bc:	20013358 	.word	0x20013358
 80048c0:	08007058 	.word	0x08007058
 80048c4:	0800705c 	.word	0x0800705c

080048c8 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b08a      	sub	sp, #40	@ 0x28
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	60f8      	str	r0, [r7, #12]
 80048d0:	60b9      	str	r1, [r7, #8]
 80048d2:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 80048d4:	2300      	movs	r3, #0
 80048d6:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	68db      	ldr	r3, [r3, #12]
 80048dc:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	691b      	ldr	r3, [r3, #16]
 80048e2:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 80048e4:	69ba      	ldr	r2, [r7, #24]
 80048e6:	69fb      	ldr	r3, [r7, #28]
 80048e8:	429a      	cmp	r2, r3
 80048ea:	d905      	bls.n	80048f8 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 80048ec:	69ba      	ldr	r2, [r7, #24]
 80048ee:	69fb      	ldr	r3, [r7, #28]
 80048f0:	1ad3      	subs	r3, r2, r3
 80048f2:	3b01      	subs	r3, #1
 80048f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80048f6:	e007      	b.n	8004908 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	689a      	ldr	r2, [r3, #8]
 80048fc:	69b9      	ldr	r1, [r7, #24]
 80048fe:	69fb      	ldr	r3, [r7, #28]
 8004900:	1acb      	subs	r3, r1, r3
 8004902:	4413      	add	r3, r2
 8004904:	3b01      	subs	r3, #1
 8004906:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	689a      	ldr	r2, [r3, #8]
 800490c:	69fb      	ldr	r3, [r7, #28]
 800490e:	1ad3      	subs	r3, r2, r3
 8004910:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004912:	4293      	cmp	r3, r2
 8004914:	bf28      	it	cs
 8004916:	4613      	movcs	r3, r2
 8004918:	627b      	str	r3, [r7, #36]	@ 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 800491a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	4293      	cmp	r3, r2
 8004920:	bf28      	it	cs
 8004922:	4613      	movcs	r3, r2
 8004924:	627b      	str	r3, [r7, #36]	@ 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	685a      	ldr	r2, [r3, #4]
 800492a:	69fb      	ldr	r3, [r7, #28]
 800492c:	4413      	add	r3, r2
 800492e:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8004930:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004932:	68b9      	ldr	r1, [r7, #8]
 8004934:	6978      	ldr	r0, [r7, #20]
 8004936:	f001 fcf8 	bl	800632a <memcpy>
    NumBytesWritten += NumBytesToWrite;
 800493a:	6a3a      	ldr	r2, [r7, #32]
 800493c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800493e:	4413      	add	r3, r2
 8004940:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8004942:	68ba      	ldr	r2, [r7, #8]
 8004944:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004946:	4413      	add	r3, r2
 8004948:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 800494a:	687a      	ldr	r2, [r7, #4]
 800494c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800494e:	1ad3      	subs	r3, r2, r3
 8004950:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8004952:	69fa      	ldr	r2, [r7, #28]
 8004954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004956:	4413      	add	r3, r2
 8004958:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	689b      	ldr	r3, [r3, #8]
 800495e:	69fa      	ldr	r2, [r7, #28]
 8004960:	429a      	cmp	r2, r3
 8004962:	d101      	bne.n	8004968 <_WriteBlocking+0xa0>
      WrOff = 0u;
 8004964:	2300      	movs	r3, #0
 8004966:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004968:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	69fa      	ldr	r2, [r7, #28]
 8004970:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d1b2      	bne.n	80048de <_WriteBlocking+0x16>
  return NumBytesWritten;
 8004978:	6a3b      	ldr	r3, [r7, #32]
}
 800497a:	4618      	mov	r0, r3
 800497c:	3728      	adds	r7, #40	@ 0x28
 800497e:	46bd      	mov	sp, r7
 8004980:	bd80      	pop	{r7, pc}

08004982 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8004982:	b580      	push	{r7, lr}
 8004984:	b088      	sub	sp, #32
 8004986:	af00      	add	r7, sp, #0
 8004988:	60f8      	str	r0, [r7, #12]
 800498a:	60b9      	str	r1, [r7, #8]
 800498c:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	68db      	ldr	r3, [r3, #12]
 8004992:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	689a      	ldr	r2, [r3, #8]
 8004998:	69fb      	ldr	r3, [r7, #28]
 800499a:	1ad3      	subs	r3, r2, r3
 800499c:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 800499e:	69ba      	ldr	r2, [r7, #24]
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	429a      	cmp	r2, r3
 80049a4:	d911      	bls.n	80049ca <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	685a      	ldr	r2, [r3, #4]
 80049aa:	69fb      	ldr	r3, [r7, #28]
 80049ac:	4413      	add	r3, r2
 80049ae:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 80049b0:	687a      	ldr	r2, [r7, #4]
 80049b2:	68b9      	ldr	r1, [r7, #8]
 80049b4:	6938      	ldr	r0, [r7, #16]
 80049b6:	f001 fcb8 	bl	800632a <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80049ba:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 80049be:	69fa      	ldr	r2, [r7, #28]
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	441a      	add	r2, r3
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 80049c8:	e01f      	b.n	8004a0a <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 80049ca:	69bb      	ldr	r3, [r7, #24]
 80049cc:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	685a      	ldr	r2, [r3, #4]
 80049d2:	69fb      	ldr	r3, [r7, #28]
 80049d4:	4413      	add	r3, r2
 80049d6:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 80049d8:	697a      	ldr	r2, [r7, #20]
 80049da:	68b9      	ldr	r1, [r7, #8]
 80049dc:	6938      	ldr	r0, [r7, #16]
 80049de:	f001 fca4 	bl	800632a <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 80049e2:	687a      	ldr	r2, [r7, #4]
 80049e4:	69bb      	ldr	r3, [r7, #24]
 80049e6:	1ad3      	subs	r3, r2, r3
 80049e8:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 80049f0:	68ba      	ldr	r2, [r7, #8]
 80049f2:	69bb      	ldr	r3, [r7, #24]
 80049f4:	4413      	add	r3, r2
 80049f6:	697a      	ldr	r2, [r7, #20]
 80049f8:	4619      	mov	r1, r3
 80049fa:	6938      	ldr	r0, [r7, #16]
 80049fc:	f001 fc95 	bl	800632a <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004a00:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	697a      	ldr	r2, [r7, #20]
 8004a08:	60da      	str	r2, [r3, #12]
}
 8004a0a:	bf00      	nop
 8004a0c:	3720      	adds	r7, #32
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}

08004a12 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8004a12:	b480      	push	{r7}
 8004a14:	b087      	sub	sp, #28
 8004a16:	af00      	add	r7, sp, #0
 8004a18:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	691b      	ldr	r3, [r3, #16]
 8004a1e:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	68db      	ldr	r3, [r3, #12]
 8004a24:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8004a26:	693a      	ldr	r2, [r7, #16]
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	429a      	cmp	r2, r3
 8004a2c:	d808      	bhi.n	8004a40 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	689a      	ldr	r2, [r3, #8]
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	1ad2      	subs	r2, r2, r3
 8004a36:	693b      	ldr	r3, [r7, #16]
 8004a38:	4413      	add	r3, r2
 8004a3a:	3b01      	subs	r3, #1
 8004a3c:	617b      	str	r3, [r7, #20]
 8004a3e:	e004      	b.n	8004a4a <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8004a40:	693a      	ldr	r2, [r7, #16]
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	1ad3      	subs	r3, r2, r3
 8004a46:	3b01      	subs	r3, #1
 8004a48:	617b      	str	r3, [r7, #20]
  }
  return r;
 8004a4a:	697b      	ldr	r3, [r7, #20]
}
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	371c      	adds	r7, #28
 8004a50:	46bd      	mov	sp, r7
 8004a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a56:	4770      	bx	lr

08004a58 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b08c      	sub	sp, #48	@ 0x30
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	60f8      	str	r0, [r7, #12]
 8004a60:	60b9      	str	r1, [r7, #8]
 8004a62:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8004a64:	4b3e      	ldr	r3, [pc, #248]	@ (8004b60 <SEGGER_RTT_ReadNoLock+0x108>)
 8004a66:	623b      	str	r3, [r7, #32]
 8004a68:	6a3b      	ldr	r3, [r7, #32]
 8004a6a:	781b      	ldrb	r3, [r3, #0]
 8004a6c:	b2db      	uxtb	r3, r3
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d101      	bne.n	8004a76 <SEGGER_RTT_ReadNoLock+0x1e>
 8004a72:	f7ff fed1 	bl	8004818 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004a76:	68fa      	ldr	r2, [r7, #12]
 8004a78:	4613      	mov	r3, r2
 8004a7a:	005b      	lsls	r3, r3, #1
 8004a7c:	4413      	add	r3, r2
 8004a7e:	00db      	lsls	r3, r3, #3
 8004a80:	3360      	adds	r3, #96	@ 0x60
 8004a82:	4a37      	ldr	r2, [pc, #220]	@ (8004b60 <SEGGER_RTT_ReadNoLock+0x108>)
 8004a84:	4413      	add	r3, r2
 8004a86:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 8004a8c:	69fb      	ldr	r3, [r7, #28]
 8004a8e:	691b      	ldr	r3, [r3, #16]
 8004a90:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 8004a92:	69fb      	ldr	r3, [r7, #28]
 8004a94:	68db      	ldr	r3, [r3, #12]
 8004a96:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8004a98:	2300      	movs	r3, #0
 8004a9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8004a9c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004a9e:	69bb      	ldr	r3, [r7, #24]
 8004aa0:	429a      	cmp	r2, r3
 8004aa2:	d92b      	bls.n	8004afc <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8004aa4:	69fb      	ldr	r3, [r7, #28]
 8004aa6:	689a      	ldr	r2, [r3, #8]
 8004aa8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004aaa:	1ad3      	subs	r3, r2, r3
 8004aac:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004aae:	697a      	ldr	r2, [r7, #20]
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	bf28      	it	cs
 8004ab6:	4613      	movcs	r3, r2
 8004ab8:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004aba:	69fb      	ldr	r3, [r7, #28]
 8004abc:	685a      	ldr	r2, [r3, #4]
 8004abe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ac0:	4413      	add	r3, r2
 8004ac2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004ac4:	697a      	ldr	r2, [r7, #20]
 8004ac6:	6939      	ldr	r1, [r7, #16]
 8004ac8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004aca:	f001 fc2e 	bl	800632a <memcpy>
    NumBytesRead += NumBytesRem;
 8004ace:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004ad0:	697b      	ldr	r3, [r7, #20]
 8004ad2:	4413      	add	r3, r2
 8004ad4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8004ad6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	4413      	add	r3, r2
 8004adc:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8004ade:	687a      	ldr	r2, [r7, #4]
 8004ae0:	697b      	ldr	r3, [r7, #20]
 8004ae2:	1ad3      	subs	r3, r2, r3
 8004ae4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004ae6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004ae8:	697b      	ldr	r3, [r7, #20]
 8004aea:	4413      	add	r3, r2
 8004aec:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8004aee:	69fb      	ldr	r3, [r7, #28]
 8004af0:	689b      	ldr	r3, [r3, #8]
 8004af2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004af4:	429a      	cmp	r2, r3
 8004af6:	d101      	bne.n	8004afc <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8004af8:	2300      	movs	r3, #0
 8004afa:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8004afc:	69ba      	ldr	r2, [r7, #24]
 8004afe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b00:	1ad3      	subs	r3, r2, r3
 8004b02:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004b04:	697a      	ldr	r2, [r7, #20]
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	bf28      	it	cs
 8004b0c:	4613      	movcs	r3, r2
 8004b0e:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8004b10:	697b      	ldr	r3, [r7, #20]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d019      	beq.n	8004b4a <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004b16:	69fb      	ldr	r3, [r7, #28]
 8004b18:	685a      	ldr	r2, [r3, #4]
 8004b1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b1c:	4413      	add	r3, r2
 8004b1e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004b20:	697a      	ldr	r2, [r7, #20]
 8004b22:	6939      	ldr	r1, [r7, #16]
 8004b24:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004b26:	f001 fc00 	bl	800632a <memcpy>
    NumBytesRead += NumBytesRem;
 8004b2a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004b2c:	697b      	ldr	r3, [r7, #20]
 8004b2e:	4413      	add	r3, r2
 8004b30:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8004b32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b34:	697b      	ldr	r3, [r7, #20]
 8004b36:	4413      	add	r3, r2
 8004b38:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8004b3a:	687a      	ldr	r2, [r7, #4]
 8004b3c:	697b      	ldr	r3, [r7, #20]
 8004b3e:	1ad3      	subs	r3, r2, r3
 8004b40:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004b42:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004b44:	697b      	ldr	r3, [r7, #20]
 8004b46:	4413      	add	r3, r2
 8004b48:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  if (NumBytesRead) {
 8004b4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d002      	beq.n	8004b56 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8004b50:	69fb      	ldr	r3, [r7, #28]
 8004b52:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004b54:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8004b56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8004b58:	4618      	mov	r0, r3
 8004b5a:	3730      	adds	r7, #48	@ 0x30
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bd80      	pop	{r7, pc}
 8004b60:	20012eb0 	.word	0x20012eb0

08004b64 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b088      	sub	sp, #32
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	60f8      	str	r0, [r7, #12]
 8004b6c:	60b9      	str	r1, [r7, #8]
 8004b6e:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	1c5a      	adds	r2, r3, #1
 8004b78:	4613      	mov	r3, r2
 8004b7a:	005b      	lsls	r3, r3, #1
 8004b7c:	4413      	add	r3, r2
 8004b7e:	00db      	lsls	r3, r3, #3
 8004b80:	4a1f      	ldr	r2, [pc, #124]	@ (8004c00 <SEGGER_RTT_WriteNoLock+0x9c>)
 8004b82:	4413      	add	r3, r2
 8004b84:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8004b86:	697b      	ldr	r3, [r7, #20]
 8004b88:	695b      	ldr	r3, [r3, #20]
 8004b8a:	2b02      	cmp	r3, #2
 8004b8c:	d029      	beq.n	8004be2 <SEGGER_RTT_WriteNoLock+0x7e>
 8004b8e:	2b02      	cmp	r3, #2
 8004b90:	d82e      	bhi.n	8004bf0 <SEGGER_RTT_WriteNoLock+0x8c>
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d002      	beq.n	8004b9c <SEGGER_RTT_WriteNoLock+0x38>
 8004b96:	2b01      	cmp	r3, #1
 8004b98:	d013      	beq.n	8004bc2 <SEGGER_RTT_WriteNoLock+0x5e>
 8004b9a:	e029      	b.n	8004bf0 <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8004b9c:	6978      	ldr	r0, [r7, #20]
 8004b9e:	f7ff ff38 	bl	8004a12 <_GetAvailWriteSpace>
 8004ba2:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8004ba4:	693a      	ldr	r2, [r7, #16]
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	429a      	cmp	r2, r3
 8004baa:	d202      	bcs.n	8004bb2 <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 8004bac:	2300      	movs	r3, #0
 8004bae:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8004bb0:	e021      	b.n	8004bf6 <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8004bb6:	687a      	ldr	r2, [r7, #4]
 8004bb8:	69b9      	ldr	r1, [r7, #24]
 8004bba:	6978      	ldr	r0, [r7, #20]
 8004bbc:	f7ff fee1 	bl	8004982 <_WriteNoCheck>
    break;
 8004bc0:	e019      	b.n	8004bf6 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8004bc2:	6978      	ldr	r0, [r7, #20]
 8004bc4:	f7ff ff25 	bl	8004a12 <_GetAvailWriteSpace>
 8004bc8:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8004bca:	687a      	ldr	r2, [r7, #4]
 8004bcc:	693b      	ldr	r3, [r7, #16]
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	bf28      	it	cs
 8004bd2:	4613      	movcs	r3, r2
 8004bd4:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8004bd6:	69fa      	ldr	r2, [r7, #28]
 8004bd8:	69b9      	ldr	r1, [r7, #24]
 8004bda:	6978      	ldr	r0, [r7, #20]
 8004bdc:	f7ff fed1 	bl	8004982 <_WriteNoCheck>
    break;
 8004be0:	e009      	b.n	8004bf6 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8004be2:	687a      	ldr	r2, [r7, #4]
 8004be4:	69b9      	ldr	r1, [r7, #24]
 8004be6:	6978      	ldr	r0, [r7, #20]
 8004be8:	f7ff fe6e 	bl	80048c8 <_WriteBlocking>
 8004bec:	61f8      	str	r0, [r7, #28]
    break;
 8004bee:	e002      	b.n	8004bf6 <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	61fb      	str	r3, [r7, #28]
    break;
 8004bf4:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8004bf6:	69fb      	ldr	r3, [r7, #28]
}
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	3720      	adds	r7, #32
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	bd80      	pop	{r7, pc}
 8004c00:	20012eb0 	.word	0x20012eb0

08004c04 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b088      	sub	sp, #32
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	60f8      	str	r0, [r7, #12]
 8004c0c:	60b9      	str	r1, [r7, #8]
 8004c0e:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8004c10:	4b0e      	ldr	r3, [pc, #56]	@ (8004c4c <SEGGER_RTT_Write+0x48>)
 8004c12:	61fb      	str	r3, [r7, #28]
 8004c14:	69fb      	ldr	r3, [r7, #28]
 8004c16:	781b      	ldrb	r3, [r3, #0]
 8004c18:	b2db      	uxtb	r3, r3
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d101      	bne.n	8004c22 <SEGGER_RTT_Write+0x1e>
 8004c1e:	f7ff fdfb 	bl	8004818 <_DoInit>
  SEGGER_RTT_LOCK();
 8004c22:	f3ef 8311 	mrs	r3, BASEPRI
 8004c26:	f04f 0120 	mov.w	r1, #32
 8004c2a:	f381 8811 	msr	BASEPRI, r1
 8004c2e:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8004c30:	687a      	ldr	r2, [r7, #4]
 8004c32:	68b9      	ldr	r1, [r7, #8]
 8004c34:	68f8      	ldr	r0, [r7, #12]
 8004c36:	f7ff ff95 	bl	8004b64 <SEGGER_RTT_WriteNoLock>
 8004c3a:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8004c3c:	69bb      	ldr	r3, [r7, #24]
 8004c3e:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8004c42:	697b      	ldr	r3, [r7, #20]
}
 8004c44:	4618      	mov	r0, r3
 8004c46:	3720      	adds	r7, #32
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	bd80      	pop	{r7, pc}
 8004c4c:	20012eb0 	.word	0x20012eb0

08004c50 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8004c50:	b480      	push	{r7}
 8004c52:	b087      	sub	sp, #28
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	60f8      	str	r0, [r7, #12]
 8004c58:	60b9      	str	r1, [r7, #8]
 8004c5a:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8004c60:	e002      	b.n	8004c68 <_EncodeStr+0x18>
    Len++;
 8004c62:	693b      	ldr	r3, [r7, #16]
 8004c64:	3301      	adds	r3, #1
 8004c66:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8004c68:	68ba      	ldr	r2, [r7, #8]
 8004c6a:	693b      	ldr	r3, [r7, #16]
 8004c6c:	4413      	add	r3, r2
 8004c6e:	781b      	ldrb	r3, [r3, #0]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d1f6      	bne.n	8004c62 <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 8004c74:	693a      	ldr	r2, [r7, #16]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	429a      	cmp	r2, r3
 8004c7a:	d901      	bls.n	8004c80 <_EncodeStr+0x30>
    Len = Limit;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8004c80:	693b      	ldr	r3, [r7, #16]
 8004c82:	2bfe      	cmp	r3, #254	@ 0xfe
 8004c84:	d806      	bhi.n	8004c94 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	1c5a      	adds	r2, r3, #1
 8004c8a:	60fa      	str	r2, [r7, #12]
 8004c8c:	693a      	ldr	r2, [r7, #16]
 8004c8e:	b2d2      	uxtb	r2, r2
 8004c90:	701a      	strb	r2, [r3, #0]
 8004c92:	e011      	b.n	8004cb8 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	1c5a      	adds	r2, r3, #1
 8004c98:	60fa      	str	r2, [r7, #12]
 8004c9a:	22ff      	movs	r2, #255	@ 0xff
 8004c9c:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	1c5a      	adds	r2, r3, #1
 8004ca2:	60fa      	str	r2, [r7, #12]
 8004ca4:	693a      	ldr	r2, [r7, #16]
 8004ca6:	b2d2      	uxtb	r2, r2
 8004ca8:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8004caa:	693b      	ldr	r3, [r7, #16]
 8004cac:	0a19      	lsrs	r1, r3, #8
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	1c5a      	adds	r2, r3, #1
 8004cb2:	60fa      	str	r2, [r7, #12]
 8004cb4:	b2ca      	uxtb	r2, r1
 8004cb6:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8004cb8:	2300      	movs	r3, #0
 8004cba:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8004cbc:	e00a      	b.n	8004cd4 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 8004cbe:	68ba      	ldr	r2, [r7, #8]
 8004cc0:	1c53      	adds	r3, r2, #1
 8004cc2:	60bb      	str	r3, [r7, #8]
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	1c59      	adds	r1, r3, #1
 8004cc8:	60f9      	str	r1, [r7, #12]
 8004cca:	7812      	ldrb	r2, [r2, #0]
 8004ccc:	701a      	strb	r2, [r3, #0]
    n++;
 8004cce:	697b      	ldr	r3, [r7, #20]
 8004cd0:	3301      	adds	r3, #1
 8004cd2:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8004cd4:	697a      	ldr	r2, [r7, #20]
 8004cd6:	693b      	ldr	r3, [r7, #16]
 8004cd8:	429a      	cmp	r2, r3
 8004cda:	d3f0      	bcc.n	8004cbe <_EncodeStr+0x6e>
  }
  return pPayload;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
}
 8004cde:	4618      	mov	r0, r3
 8004ce0:	371c      	adds	r7, #28
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce8:	4770      	bx	lr

08004cea <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8004cea:	b480      	push	{r7}
 8004cec:	b083      	sub	sp, #12
 8004cee:	af00      	add	r7, sp, #0
 8004cf0:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	3304      	adds	r3, #4
}
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	370c      	adds	r7, #12
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d00:	4770      	bx	lr
	...

08004d04 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b082      	sub	sp, #8
 8004d08:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004d0a:	4b35      	ldr	r3, [pc, #212]	@ (8004de0 <_HandleIncomingPacket+0xdc>)
 8004d0c:	7e1b      	ldrb	r3, [r3, #24]
 8004d0e:	4618      	mov	r0, r3
 8004d10:	1cfb      	adds	r3, r7, #3
 8004d12:	2201      	movs	r2, #1
 8004d14:	4619      	mov	r1, r3
 8004d16:	f7ff fe9f 	bl	8004a58 <SEGGER_RTT_ReadNoLock>
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	dd59      	ble.n	8004dd8 <_HandleIncomingPacket+0xd4>
    switch (Cmd) {
 8004d24:	78fb      	ldrb	r3, [r7, #3]
 8004d26:	2b80      	cmp	r3, #128	@ 0x80
 8004d28:	d032      	beq.n	8004d90 <_HandleIncomingPacket+0x8c>
 8004d2a:	2b80      	cmp	r3, #128	@ 0x80
 8004d2c:	dc42      	bgt.n	8004db4 <_HandleIncomingPacket+0xb0>
 8004d2e:	2b07      	cmp	r3, #7
 8004d30:	dc16      	bgt.n	8004d60 <_HandleIncomingPacket+0x5c>
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	dd3e      	ble.n	8004db4 <_HandleIncomingPacket+0xb0>
 8004d36:	3b01      	subs	r3, #1
 8004d38:	2b06      	cmp	r3, #6
 8004d3a:	d83b      	bhi.n	8004db4 <_HandleIncomingPacket+0xb0>
 8004d3c:	a201      	add	r2, pc, #4	@ (adr r2, 8004d44 <_HandleIncomingPacket+0x40>)
 8004d3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d42:	bf00      	nop
 8004d44:	08004d67 	.word	0x08004d67
 8004d48:	08004d6d 	.word	0x08004d6d
 8004d4c:	08004d73 	.word	0x08004d73
 8004d50:	08004d79 	.word	0x08004d79
 8004d54:	08004d7f 	.word	0x08004d7f
 8004d58:	08004d85 	.word	0x08004d85
 8004d5c:	08004d8b 	.word	0x08004d8b
 8004d60:	2b7f      	cmp	r3, #127	@ 0x7f
 8004d62:	d034      	beq.n	8004dce <_HandleIncomingPacket+0xca>
 8004d64:	e026      	b.n	8004db4 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8004d66:	f000 fb55 	bl	8005414 <SEGGER_SYSVIEW_Start>
      break;
 8004d6a:	e035      	b.n	8004dd8 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8004d6c:	f000 fc0e 	bl	800558c <SEGGER_SYSVIEW_Stop>
      break;
 8004d70:	e032      	b.n	8004dd8 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8004d72:	f000 fdc3 	bl	80058fc <SEGGER_SYSVIEW_RecordSystime>
      break;
 8004d76:	e02f      	b.n	8004dd8 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8004d78:	f000 fdac 	bl	80058d4 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8004d7c:	e02c      	b.n	8004dd8 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8004d7e:	f000 fc2b 	bl	80055d8 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8004d82:	e029      	b.n	8004dd8 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8004d84:	f001 f856 	bl	8005e34 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8004d88:	e026      	b.n	8004dd8 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8004d8a:	f001 f835 	bl	8005df8 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8004d8e:	e023      	b.n	8004dd8 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004d90:	4b13      	ldr	r3, [pc, #76]	@ (8004de0 <_HandleIncomingPacket+0xdc>)
 8004d92:	7e1b      	ldrb	r3, [r3, #24]
 8004d94:	4618      	mov	r0, r3
 8004d96:	1cfb      	adds	r3, r7, #3
 8004d98:	2201      	movs	r2, #1
 8004d9a:	4619      	mov	r1, r3
 8004d9c:	f7ff fe5c 	bl	8004a58 <SEGGER_RTT_ReadNoLock>
 8004da0:	4603      	mov	r3, r0
 8004da2:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	dd13      	ble.n	8004dd2 <_HandleIncomingPacket+0xce>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8004daa:	78fb      	ldrb	r3, [r7, #3]
 8004dac:	4618      	mov	r0, r3
 8004dae:	f000 ffa3 	bl	8005cf8 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8004db2:	e00e      	b.n	8004dd2 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8004db4:	78fb      	ldrb	r3, [r7, #3]
 8004db6:	b25b      	sxtb	r3, r3
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	da0c      	bge.n	8004dd6 <_HandleIncomingPacket+0xd2>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004dbc:	4b08      	ldr	r3, [pc, #32]	@ (8004de0 <_HandleIncomingPacket+0xdc>)
 8004dbe:	7e1b      	ldrb	r3, [r3, #24]
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	1cfb      	adds	r3, r7, #3
 8004dc4:	2201      	movs	r2, #1
 8004dc6:	4619      	mov	r1, r3
 8004dc8:	f7ff fe46 	bl	8004a58 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8004dcc:	e003      	b.n	8004dd6 <_HandleIncomingPacket+0xd2>
      break;
 8004dce:	bf00      	nop
 8004dd0:	e002      	b.n	8004dd8 <_HandleIncomingPacket+0xd4>
      break;
 8004dd2:	bf00      	nop
 8004dd4:	e000      	b.n	8004dd8 <_HandleIncomingPacket+0xd4>
      break;
 8004dd6:	bf00      	nop
    }
  }
}
 8004dd8:	bf00      	nop
 8004dda:	3708      	adds	r7, #8
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	bd80      	pop	{r7, pc}
 8004de0:	20013368 	.word	0x20013368

08004de4 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b08c      	sub	sp, #48	@ 0x30
 8004de8:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8004dea:	2301      	movs	r3, #1
 8004dec:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8004dee:	1d3b      	adds	r3, r7, #4
 8004df0:	3301      	adds	r3, #1
 8004df2:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8004df4:	69fb      	ldr	r3, [r7, #28]
 8004df6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004df8:	4b32      	ldr	r3, [pc, #200]	@ (8004ec4 <_TrySendOverflowPacket+0xe0>)
 8004dfa:	695b      	ldr	r3, [r3, #20]
 8004dfc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004dfe:	e00b      	b.n	8004e18 <_TrySendOverflowPacket+0x34>
 8004e00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e02:	b2da      	uxtb	r2, r3
 8004e04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e06:	1c59      	adds	r1, r3, #1
 8004e08:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8004e0a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004e0e:	b2d2      	uxtb	r2, r2
 8004e10:	701a      	strb	r2, [r3, #0]
 8004e12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e14:	09db      	lsrs	r3, r3, #7
 8004e16:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004e18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e1a:	2b7f      	cmp	r3, #127	@ 0x7f
 8004e1c:	d8f0      	bhi.n	8004e00 <_TrySendOverflowPacket+0x1c>
 8004e1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e20:	1c5a      	adds	r2, r3, #1
 8004e22:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004e24:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004e26:	b2d2      	uxtb	r2, r2
 8004e28:	701a      	strb	r2, [r3, #0]
 8004e2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e2c:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004e2e:	4b26      	ldr	r3, [pc, #152]	@ (8004ec8 <_TrySendOverflowPacket+0xe4>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004e34:	4b23      	ldr	r3, [pc, #140]	@ (8004ec4 <_TrySendOverflowPacket+0xe0>)
 8004e36:	68db      	ldr	r3, [r3, #12]
 8004e38:	69ba      	ldr	r2, [r7, #24]
 8004e3a:	1ad3      	subs	r3, r2, r3
 8004e3c:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8004e3e:	69fb      	ldr	r3, [r7, #28]
 8004e40:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e42:	697b      	ldr	r3, [r7, #20]
 8004e44:	623b      	str	r3, [r7, #32]
 8004e46:	e00b      	b.n	8004e60 <_TrySendOverflowPacket+0x7c>
 8004e48:	6a3b      	ldr	r3, [r7, #32]
 8004e4a:	b2da      	uxtb	r2, r3
 8004e4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e4e:	1c59      	adds	r1, r3, #1
 8004e50:	6279      	str	r1, [r7, #36]	@ 0x24
 8004e52:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004e56:	b2d2      	uxtb	r2, r2
 8004e58:	701a      	strb	r2, [r3, #0]
 8004e5a:	6a3b      	ldr	r3, [r7, #32]
 8004e5c:	09db      	lsrs	r3, r3, #7
 8004e5e:	623b      	str	r3, [r7, #32]
 8004e60:	6a3b      	ldr	r3, [r7, #32]
 8004e62:	2b7f      	cmp	r3, #127	@ 0x7f
 8004e64:	d8f0      	bhi.n	8004e48 <_TrySendOverflowPacket+0x64>
 8004e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e68:	1c5a      	adds	r2, r3, #1
 8004e6a:	627a      	str	r2, [r7, #36]	@ 0x24
 8004e6c:	6a3a      	ldr	r2, [r7, #32]
 8004e6e:	b2d2      	uxtb	r2, r2
 8004e70:	701a      	strb	r2, [r3, #0]
 8004e72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e74:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8004e76:	4b13      	ldr	r3, [pc, #76]	@ (8004ec4 <_TrySendOverflowPacket+0xe0>)
 8004e78:	785b      	ldrb	r3, [r3, #1]
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	1d3b      	adds	r3, r7, #4
 8004e7e:	69fa      	ldr	r2, [r7, #28]
 8004e80:	1ad3      	subs	r3, r2, r3
 8004e82:	461a      	mov	r2, r3
 8004e84:	1d3b      	adds	r3, r7, #4
 8004e86:	4619      	mov	r1, r3
 8004e88:	f7fb f9a2 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 8004e90:	f7ff fcb2 	bl	80047f8 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8004e94:	693b      	ldr	r3, [r7, #16]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d009      	beq.n	8004eae <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8004e9a:	4a0a      	ldr	r2, [pc, #40]	@ (8004ec4 <_TrySendOverflowPacket+0xe0>)
 8004e9c:	69bb      	ldr	r3, [r7, #24]
 8004e9e:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8004ea0:	4b08      	ldr	r3, [pc, #32]	@ (8004ec4 <_TrySendOverflowPacket+0xe0>)
 8004ea2:	781b      	ldrb	r3, [r3, #0]
 8004ea4:	3b01      	subs	r3, #1
 8004ea6:	b2da      	uxtb	r2, r3
 8004ea8:	4b06      	ldr	r3, [pc, #24]	@ (8004ec4 <_TrySendOverflowPacket+0xe0>)
 8004eaa:	701a      	strb	r2, [r3, #0]
 8004eac:	e004      	b.n	8004eb8 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8004eae:	4b05      	ldr	r3, [pc, #20]	@ (8004ec4 <_TrySendOverflowPacket+0xe0>)
 8004eb0:	695b      	ldr	r3, [r3, #20]
 8004eb2:	3301      	adds	r3, #1
 8004eb4:	4a03      	ldr	r2, [pc, #12]	@ (8004ec4 <_TrySendOverflowPacket+0xe0>)
 8004eb6:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8004eb8:	693b      	ldr	r3, [r7, #16]
}
 8004eba:	4618      	mov	r0, r3
 8004ebc:	3730      	adds	r7, #48	@ 0x30
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bd80      	pop	{r7, pc}
 8004ec2:	bf00      	nop
 8004ec4:	20013368 	.word	0x20013368
 8004ec8:	e0001004 	.word	0xe0001004

08004ecc <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b08a      	sub	sp, #40	@ 0x28
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	60f8      	str	r0, [r7, #12]
 8004ed4:	60b9      	str	r1, [r7, #8]
 8004ed6:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8004ed8:	4b6d      	ldr	r3, [pc, #436]	@ (8005090 <_SendPacket+0x1c4>)
 8004eda:	781b      	ldrb	r3, [r3, #0]
 8004edc:	2b01      	cmp	r3, #1
 8004ede:	d010      	beq.n	8004f02 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8004ee0:	4b6b      	ldr	r3, [pc, #428]	@ (8005090 <_SendPacket+0x1c4>)
 8004ee2:	781b      	ldrb	r3, [r3, #0]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	f000 80a5 	beq.w	8005034 <_SendPacket+0x168>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8004eea:	4b69      	ldr	r3, [pc, #420]	@ (8005090 <_SendPacket+0x1c4>)
 8004eec:	781b      	ldrb	r3, [r3, #0]
 8004eee:	2b02      	cmp	r3, #2
 8004ef0:	d109      	bne.n	8004f06 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8004ef2:	f7ff ff77 	bl	8004de4 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8004ef6:	4b66      	ldr	r3, [pc, #408]	@ (8005090 <_SendPacket+0x1c4>)
 8004ef8:	781b      	ldrb	r3, [r3, #0]
 8004efa:	2b01      	cmp	r3, #1
 8004efc:	f040 809c 	bne.w	8005038 <_SendPacket+0x16c>
      goto SendDone;
    }
  }
Send:
 8004f00:	e001      	b.n	8004f06 <_SendPacket+0x3a>
    goto Send;
 8004f02:	bf00      	nop
 8004f04:	e000      	b.n	8004f08 <_SendPacket+0x3c>
Send:
 8004f06:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2b1f      	cmp	r3, #31
 8004f0c:	d809      	bhi.n	8004f22 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8004f0e:	4b60      	ldr	r3, [pc, #384]	@ (8005090 <_SendPacket+0x1c4>)
 8004f10:	69da      	ldr	r2, [r3, #28]
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	fa22 f303 	lsr.w	r3, r2, r3
 8004f18:	f003 0301 	and.w	r3, r3, #1
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	f040 808d 	bne.w	800503c <_SendPacket+0x170>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2b17      	cmp	r3, #23
 8004f26:	d807      	bhi.n	8004f38 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	3b01      	subs	r3, #1
 8004f2c:	60fb      	str	r3, [r7, #12]
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	b2da      	uxtb	r2, r3
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	701a      	strb	r2, [r3, #0]
 8004f36:	e03d      	b.n	8004fb4 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8004f38:	68ba      	ldr	r2, [r7, #8]
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	1ad3      	subs	r3, r2, r3
 8004f3e:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8004f40:	69fb      	ldr	r3, [r7, #28]
 8004f42:	2b7f      	cmp	r3, #127	@ 0x7f
 8004f44:	d912      	bls.n	8004f6c <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8004f46:	69fb      	ldr	r3, [r7, #28]
 8004f48:	09da      	lsrs	r2, r3, #7
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	3b01      	subs	r3, #1
 8004f4e:	60fb      	str	r3, [r7, #12]
 8004f50:	b2d2      	uxtb	r2, r2
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8004f56:	69fb      	ldr	r3, [r7, #28]
 8004f58:	b2db      	uxtb	r3, r3
 8004f5a:	68fa      	ldr	r2, [r7, #12]
 8004f5c:	3a01      	subs	r2, #1
 8004f5e:	60fa      	str	r2, [r7, #12]
 8004f60:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004f64:	b2da      	uxtb	r2, r3
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	701a      	strb	r2, [r3, #0]
 8004f6a:	e006      	b.n	8004f7a <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	3b01      	subs	r3, #1
 8004f70:	60fb      	str	r3, [r7, #12]
 8004f72:	69fb      	ldr	r3, [r7, #28]
 8004f74:	b2da      	uxtb	r2, r3
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2b7f      	cmp	r3, #127	@ 0x7f
 8004f7e:	d912      	bls.n	8004fa6 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	09da      	lsrs	r2, r3, #7
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	3b01      	subs	r3, #1
 8004f88:	60fb      	str	r3, [r7, #12]
 8004f8a:	b2d2      	uxtb	r2, r2
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	b2db      	uxtb	r3, r3
 8004f94:	68fa      	ldr	r2, [r7, #12]
 8004f96:	3a01      	subs	r2, #1
 8004f98:	60fa      	str	r2, [r7, #12]
 8004f9a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004f9e:	b2da      	uxtb	r2, r3
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	701a      	strb	r2, [r3, #0]
 8004fa4:	e006      	b.n	8004fb4 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	3b01      	subs	r3, #1
 8004faa:	60fb      	str	r3, [r7, #12]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	b2da      	uxtb	r2, r3
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004fb4:	4b37      	ldr	r3, [pc, #220]	@ (8005094 <_SendPacket+0x1c8>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004fba:	4b35      	ldr	r3, [pc, #212]	@ (8005090 <_SendPacket+0x1c4>)
 8004fbc:	68db      	ldr	r3, [r3, #12]
 8004fbe:	69ba      	ldr	r2, [r7, #24]
 8004fc0:	1ad3      	subs	r3, r2, r3
 8004fc2:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8004fc4:	68bb      	ldr	r3, [r7, #8]
 8004fc6:	627b      	str	r3, [r7, #36]	@ 0x24
 8004fc8:	697b      	ldr	r3, [r7, #20]
 8004fca:	623b      	str	r3, [r7, #32]
 8004fcc:	e00b      	b.n	8004fe6 <_SendPacket+0x11a>
 8004fce:	6a3b      	ldr	r3, [r7, #32]
 8004fd0:	b2da      	uxtb	r2, r3
 8004fd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fd4:	1c59      	adds	r1, r3, #1
 8004fd6:	6279      	str	r1, [r7, #36]	@ 0x24
 8004fd8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004fdc:	b2d2      	uxtb	r2, r2
 8004fde:	701a      	strb	r2, [r3, #0]
 8004fe0:	6a3b      	ldr	r3, [r7, #32]
 8004fe2:	09db      	lsrs	r3, r3, #7
 8004fe4:	623b      	str	r3, [r7, #32]
 8004fe6:	6a3b      	ldr	r3, [r7, #32]
 8004fe8:	2b7f      	cmp	r3, #127	@ 0x7f
 8004fea:	d8f0      	bhi.n	8004fce <_SendPacket+0x102>
 8004fec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fee:	1c5a      	adds	r2, r3, #1
 8004ff0:	627a      	str	r2, [r7, #36]	@ 0x24
 8004ff2:	6a3a      	ldr	r2, [r7, #32]
 8004ff4:	b2d2      	uxtb	r2, r2
 8004ff6:	701a      	strb	r2, [r3, #0]
 8004ff8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ffa:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8004ffc:	4b24      	ldr	r3, [pc, #144]	@ (8005090 <_SendPacket+0x1c4>)
 8004ffe:	785b      	ldrb	r3, [r3, #1]
 8005000:	4618      	mov	r0, r3
 8005002:	68ba      	ldr	r2, [r7, #8]
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	1ad3      	subs	r3, r2, r3
 8005008:	461a      	mov	r2, r3
 800500a:	68f9      	ldr	r1, [r7, #12]
 800500c:	f7fb f8e0 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005010:	4603      	mov	r3, r0
 8005012:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 8005014:	f7ff fbf0 	bl	80047f8 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8005018:	693b      	ldr	r3, [r7, #16]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d003      	beq.n	8005026 <_SendPacket+0x15a>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800501e:	4a1c      	ldr	r2, [pc, #112]	@ (8005090 <_SendPacket+0x1c4>)
 8005020:	69bb      	ldr	r3, [r7, #24]
 8005022:	60d3      	str	r3, [r2, #12]
 8005024:	e00b      	b.n	800503e <_SendPacket+0x172>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8005026:	4b1a      	ldr	r3, [pc, #104]	@ (8005090 <_SendPacket+0x1c4>)
 8005028:	781b      	ldrb	r3, [r3, #0]
 800502a:	3301      	adds	r3, #1
 800502c:	b2da      	uxtb	r2, r3
 800502e:	4b18      	ldr	r3, [pc, #96]	@ (8005090 <_SendPacket+0x1c4>)
 8005030:	701a      	strb	r2, [r3, #0]
 8005032:	e004      	b.n	800503e <_SendPacket+0x172>
    goto SendDone;
 8005034:	bf00      	nop
 8005036:	e002      	b.n	800503e <_SendPacket+0x172>
      goto SendDone;
 8005038:	bf00      	nop
 800503a:	e000      	b.n	800503e <_SendPacket+0x172>
      goto SendDone;
 800503c:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800503e:	4b14      	ldr	r3, [pc, #80]	@ (8005090 <_SendPacket+0x1c4>)
 8005040:	7e1b      	ldrb	r3, [r3, #24]
 8005042:	4619      	mov	r1, r3
 8005044:	4a14      	ldr	r2, [pc, #80]	@ (8005098 <_SendPacket+0x1cc>)
 8005046:	460b      	mov	r3, r1
 8005048:	005b      	lsls	r3, r3, #1
 800504a:	440b      	add	r3, r1
 800504c:	00db      	lsls	r3, r3, #3
 800504e:	4413      	add	r3, r2
 8005050:	336c      	adds	r3, #108	@ 0x6c
 8005052:	681a      	ldr	r2, [r3, #0]
 8005054:	4b0e      	ldr	r3, [pc, #56]	@ (8005090 <_SendPacket+0x1c4>)
 8005056:	7e1b      	ldrb	r3, [r3, #24]
 8005058:	4618      	mov	r0, r3
 800505a:	490f      	ldr	r1, [pc, #60]	@ (8005098 <_SendPacket+0x1cc>)
 800505c:	4603      	mov	r3, r0
 800505e:	005b      	lsls	r3, r3, #1
 8005060:	4403      	add	r3, r0
 8005062:	00db      	lsls	r3, r3, #3
 8005064:	440b      	add	r3, r1
 8005066:	3370      	adds	r3, #112	@ 0x70
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	429a      	cmp	r2, r3
 800506c:	d00b      	beq.n	8005086 <_SendPacket+0x1ba>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800506e:	4b08      	ldr	r3, [pc, #32]	@ (8005090 <_SendPacket+0x1c4>)
 8005070:	789b      	ldrb	r3, [r3, #2]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d107      	bne.n	8005086 <_SendPacket+0x1ba>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8005076:	4b06      	ldr	r3, [pc, #24]	@ (8005090 <_SendPacket+0x1c4>)
 8005078:	2201      	movs	r2, #1
 800507a:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 800507c:	f7ff fe42 	bl	8004d04 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8005080:	4b03      	ldr	r3, [pc, #12]	@ (8005090 <_SendPacket+0x1c4>)
 8005082:	2200      	movs	r2, #0
 8005084:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8005086:	bf00      	nop
 8005088:	3728      	adds	r7, #40	@ 0x28
 800508a:	46bd      	mov	sp, r7
 800508c:	bd80      	pop	{r7, pc}
 800508e:	bf00      	nop
 8005090:	20013368 	.word	0x20013368
 8005094:	e0001004 	.word	0xe0001004
 8005098:	20012eb0 	.word	0x20012eb0

0800509c <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 800509c:	b580      	push	{r7, lr}
 800509e:	b084      	sub	sp, #16
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80050a4:	f3ef 8311 	mrs	r3, BASEPRI
 80050a8:	f04f 0120 	mov.w	r1, #32
 80050ac:	f381 8811 	msr	BASEPRI, r1
 80050b0:	60fb      	str	r3, [r7, #12]
 80050b2:	4808      	ldr	r0, [pc, #32]	@ (80050d4 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 80050b4:	f7ff fe19 	bl	8004cea <_PreparePacket>
 80050b8:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 80050ba:	687a      	ldr	r2, [r7, #4]
 80050bc:	68b9      	ldr	r1, [r7, #8]
 80050be:	68b8      	ldr	r0, [r7, #8]
 80050c0:	f7ff ff04 	bl	8004ecc <_SendPacket>
  RECORD_END();
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	f383 8811 	msr	BASEPRI, r3
}
 80050ca:	bf00      	nop
 80050cc:	3710      	adds	r7, #16
 80050ce:	46bd      	mov	sp, r7
 80050d0:	bd80      	pop	{r7, pc}
 80050d2:	bf00      	nop
 80050d4:	20013398 	.word	0x20013398

080050d8 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 80050d8:	b580      	push	{r7, lr}
 80050da:	b088      	sub	sp, #32
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
 80050e0:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80050e2:	f3ef 8311 	mrs	r3, BASEPRI
 80050e6:	f04f 0120 	mov.w	r1, #32
 80050ea:	f381 8811 	msr	BASEPRI, r1
 80050ee:	617b      	str	r3, [r7, #20]
 80050f0:	4816      	ldr	r0, [pc, #88]	@ (800514c <SEGGER_SYSVIEW_RecordU32+0x74>)
 80050f2:	f7ff fdfa 	bl	8004cea <_PreparePacket>
 80050f6:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80050f8:	693b      	ldr	r3, [r7, #16]
 80050fa:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	61fb      	str	r3, [r7, #28]
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	61bb      	str	r3, [r7, #24]
 8005104:	e00b      	b.n	800511e <SEGGER_SYSVIEW_RecordU32+0x46>
 8005106:	69bb      	ldr	r3, [r7, #24]
 8005108:	b2da      	uxtb	r2, r3
 800510a:	69fb      	ldr	r3, [r7, #28]
 800510c:	1c59      	adds	r1, r3, #1
 800510e:	61f9      	str	r1, [r7, #28]
 8005110:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005114:	b2d2      	uxtb	r2, r2
 8005116:	701a      	strb	r2, [r3, #0]
 8005118:	69bb      	ldr	r3, [r7, #24]
 800511a:	09db      	lsrs	r3, r3, #7
 800511c:	61bb      	str	r3, [r7, #24]
 800511e:	69bb      	ldr	r3, [r7, #24]
 8005120:	2b7f      	cmp	r3, #127	@ 0x7f
 8005122:	d8f0      	bhi.n	8005106 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8005124:	69fb      	ldr	r3, [r7, #28]
 8005126:	1c5a      	adds	r2, r3, #1
 8005128:	61fa      	str	r2, [r7, #28]
 800512a:	69ba      	ldr	r2, [r7, #24]
 800512c:	b2d2      	uxtb	r2, r2
 800512e:	701a      	strb	r2, [r3, #0]
 8005130:	69fb      	ldr	r3, [r7, #28]
 8005132:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005134:	687a      	ldr	r2, [r7, #4]
 8005136:	68f9      	ldr	r1, [r7, #12]
 8005138:	6938      	ldr	r0, [r7, #16]
 800513a:	f7ff fec7 	bl	8004ecc <_SendPacket>
  RECORD_END();
 800513e:	697b      	ldr	r3, [r7, #20]
 8005140:	f383 8811 	msr	BASEPRI, r3
}
 8005144:	bf00      	nop
 8005146:	3720      	adds	r7, #32
 8005148:	46bd      	mov	sp, r7
 800514a:	bd80      	pop	{r7, pc}
 800514c:	20013398 	.word	0x20013398

08005150 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8005150:	b580      	push	{r7, lr}
 8005152:	b08c      	sub	sp, #48	@ 0x30
 8005154:	af00      	add	r7, sp, #0
 8005156:	60f8      	str	r0, [r7, #12]
 8005158:	60b9      	str	r1, [r7, #8]
 800515a:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800515c:	f3ef 8311 	mrs	r3, BASEPRI
 8005160:	f04f 0120 	mov.w	r1, #32
 8005164:	f381 8811 	msr	BASEPRI, r1
 8005168:	61fb      	str	r3, [r7, #28]
 800516a:	4825      	ldr	r0, [pc, #148]	@ (8005200 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 800516c:	f7ff fdbd 	bl	8004cea <_PreparePacket>
 8005170:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005172:	69bb      	ldr	r3, [r7, #24]
 8005174:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005176:	697b      	ldr	r3, [r7, #20]
 8005178:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800517e:	e00b      	b.n	8005198 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8005180:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005182:	b2da      	uxtb	r2, r3
 8005184:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005186:	1c59      	adds	r1, r3, #1
 8005188:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800518a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800518e:	b2d2      	uxtb	r2, r2
 8005190:	701a      	strb	r2, [r3, #0]
 8005192:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005194:	09db      	lsrs	r3, r3, #7
 8005196:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005198:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800519a:	2b7f      	cmp	r3, #127	@ 0x7f
 800519c:	d8f0      	bhi.n	8005180 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 800519e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051a0:	1c5a      	adds	r2, r3, #1
 80051a2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80051a4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80051a6:	b2d2      	uxtb	r2, r2
 80051a8:	701a      	strb	r2, [r3, #0]
 80051aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051ac:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80051ae:	697b      	ldr	r3, [r7, #20]
 80051b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	623b      	str	r3, [r7, #32]
 80051b6:	e00b      	b.n	80051d0 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 80051b8:	6a3b      	ldr	r3, [r7, #32]
 80051ba:	b2da      	uxtb	r2, r3
 80051bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051be:	1c59      	adds	r1, r3, #1
 80051c0:	6279      	str	r1, [r7, #36]	@ 0x24
 80051c2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80051c6:	b2d2      	uxtb	r2, r2
 80051c8:	701a      	strb	r2, [r3, #0]
 80051ca:	6a3b      	ldr	r3, [r7, #32]
 80051cc:	09db      	lsrs	r3, r3, #7
 80051ce:	623b      	str	r3, [r7, #32]
 80051d0:	6a3b      	ldr	r3, [r7, #32]
 80051d2:	2b7f      	cmp	r3, #127	@ 0x7f
 80051d4:	d8f0      	bhi.n	80051b8 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 80051d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051d8:	1c5a      	adds	r2, r3, #1
 80051da:	627a      	str	r2, [r7, #36]	@ 0x24
 80051dc:	6a3a      	ldr	r2, [r7, #32]
 80051de:	b2d2      	uxtb	r2, r2
 80051e0:	701a      	strb	r2, [r3, #0]
 80051e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051e4:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80051e6:	68fa      	ldr	r2, [r7, #12]
 80051e8:	6979      	ldr	r1, [r7, #20]
 80051ea:	69b8      	ldr	r0, [r7, #24]
 80051ec:	f7ff fe6e 	bl	8004ecc <_SendPacket>
  RECORD_END();
 80051f0:	69fb      	ldr	r3, [r7, #28]
 80051f2:	f383 8811 	msr	BASEPRI, r3
}
 80051f6:	bf00      	nop
 80051f8:	3730      	adds	r7, #48	@ 0x30
 80051fa:	46bd      	mov	sp, r7
 80051fc:	bd80      	pop	{r7, pc}
 80051fe:	bf00      	nop
 8005200:	20013398 	.word	0x20013398

08005204 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8005204:	b580      	push	{r7, lr}
 8005206:	b08e      	sub	sp, #56	@ 0x38
 8005208:	af00      	add	r7, sp, #0
 800520a:	60f8      	str	r0, [r7, #12]
 800520c:	60b9      	str	r1, [r7, #8]
 800520e:	607a      	str	r2, [r7, #4]
 8005210:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8005212:	f3ef 8311 	mrs	r3, BASEPRI
 8005216:	f04f 0120 	mov.w	r1, #32
 800521a:	f381 8811 	msr	BASEPRI, r1
 800521e:	61fb      	str	r3, [r7, #28]
 8005220:	4832      	ldr	r0, [pc, #200]	@ (80052ec <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8005222:	f7ff fd62 	bl	8004cea <_PreparePacket>
 8005226:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005228:	69bb      	ldr	r3, [r7, #24]
 800522a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800522c:	697b      	ldr	r3, [r7, #20]
 800522e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	633b      	str	r3, [r7, #48]	@ 0x30
 8005234:	e00b      	b.n	800524e <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8005236:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005238:	b2da      	uxtb	r2, r3
 800523a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800523c:	1c59      	adds	r1, r3, #1
 800523e:	6379      	str	r1, [r7, #52]	@ 0x34
 8005240:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005244:	b2d2      	uxtb	r2, r2
 8005246:	701a      	strb	r2, [r3, #0]
 8005248:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800524a:	09db      	lsrs	r3, r3, #7
 800524c:	633b      	str	r3, [r7, #48]	@ 0x30
 800524e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005250:	2b7f      	cmp	r3, #127	@ 0x7f
 8005252:	d8f0      	bhi.n	8005236 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8005254:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005256:	1c5a      	adds	r2, r3, #1
 8005258:	637a      	str	r2, [r7, #52]	@ 0x34
 800525a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800525c:	b2d2      	uxtb	r2, r2
 800525e:	701a      	strb	r2, [r3, #0]
 8005260:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005262:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005264:	697b      	ldr	r3, [r7, #20]
 8005266:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800526c:	e00b      	b.n	8005286 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 800526e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005270:	b2da      	uxtb	r2, r3
 8005272:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005274:	1c59      	adds	r1, r3, #1
 8005276:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8005278:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800527c:	b2d2      	uxtb	r2, r2
 800527e:	701a      	strb	r2, [r3, #0]
 8005280:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005282:	09db      	lsrs	r3, r3, #7
 8005284:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005286:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005288:	2b7f      	cmp	r3, #127	@ 0x7f
 800528a:	d8f0      	bhi.n	800526e <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 800528c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800528e:	1c5a      	adds	r2, r3, #1
 8005290:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005292:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005294:	b2d2      	uxtb	r2, r2
 8005296:	701a      	strb	r2, [r3, #0]
 8005298:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800529a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 800529c:	697b      	ldr	r3, [r7, #20]
 800529e:	627b      	str	r3, [r7, #36]	@ 0x24
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	623b      	str	r3, [r7, #32]
 80052a4:	e00b      	b.n	80052be <SEGGER_SYSVIEW_RecordU32x3+0xba>
 80052a6:	6a3b      	ldr	r3, [r7, #32]
 80052a8:	b2da      	uxtb	r2, r3
 80052aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052ac:	1c59      	adds	r1, r3, #1
 80052ae:	6279      	str	r1, [r7, #36]	@ 0x24
 80052b0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80052b4:	b2d2      	uxtb	r2, r2
 80052b6:	701a      	strb	r2, [r3, #0]
 80052b8:	6a3b      	ldr	r3, [r7, #32]
 80052ba:	09db      	lsrs	r3, r3, #7
 80052bc:	623b      	str	r3, [r7, #32]
 80052be:	6a3b      	ldr	r3, [r7, #32]
 80052c0:	2b7f      	cmp	r3, #127	@ 0x7f
 80052c2:	d8f0      	bhi.n	80052a6 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 80052c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052c6:	1c5a      	adds	r2, r3, #1
 80052c8:	627a      	str	r2, [r7, #36]	@ 0x24
 80052ca:	6a3a      	ldr	r2, [r7, #32]
 80052cc:	b2d2      	uxtb	r2, r2
 80052ce:	701a      	strb	r2, [r3, #0]
 80052d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052d2:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80052d4:	68fa      	ldr	r2, [r7, #12]
 80052d6:	6979      	ldr	r1, [r7, #20]
 80052d8:	69b8      	ldr	r0, [r7, #24]
 80052da:	f7ff fdf7 	bl	8004ecc <_SendPacket>
  RECORD_END();
 80052de:	69fb      	ldr	r3, [r7, #28]
 80052e0:	f383 8811 	msr	BASEPRI, r3
}
 80052e4:	bf00      	nop
 80052e6:	3738      	adds	r7, #56	@ 0x38
 80052e8:	46bd      	mov	sp, r7
 80052ea:	bd80      	pop	{r7, pc}
 80052ec:	20013398 	.word	0x20013398

080052f0 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b090      	sub	sp, #64	@ 0x40
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	60f8      	str	r0, [r7, #12]
 80052f8:	60b9      	str	r1, [r7, #8]
 80052fa:	607a      	str	r2, [r7, #4]
 80052fc:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80052fe:	f3ef 8311 	mrs	r3, BASEPRI
 8005302:	f04f 0120 	mov.w	r1, #32
 8005306:	f381 8811 	msr	BASEPRI, r1
 800530a:	61fb      	str	r3, [r7, #28]
 800530c:	4840      	ldr	r0, [pc, #256]	@ (8005410 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 800530e:	f7ff fcec 	bl	8004cea <_PreparePacket>
 8005312:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005314:	69bb      	ldr	r3, [r7, #24]
 8005316:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005318:	697b      	ldr	r3, [r7, #20]
 800531a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005320:	e00b      	b.n	800533a <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8005322:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005324:	b2da      	uxtb	r2, r3
 8005326:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005328:	1c59      	adds	r1, r3, #1
 800532a:	63f9      	str	r1, [r7, #60]	@ 0x3c
 800532c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005330:	b2d2      	uxtb	r2, r2
 8005332:	701a      	strb	r2, [r3, #0]
 8005334:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005336:	09db      	lsrs	r3, r3, #7
 8005338:	63bb      	str	r3, [r7, #56]	@ 0x38
 800533a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800533c:	2b7f      	cmp	r3, #127	@ 0x7f
 800533e:	d8f0      	bhi.n	8005322 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8005340:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005342:	1c5a      	adds	r2, r3, #1
 8005344:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005346:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005348:	b2d2      	uxtb	r2, r2
 800534a:	701a      	strb	r2, [r3, #0]
 800534c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800534e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005350:	697b      	ldr	r3, [r7, #20]
 8005352:	637b      	str	r3, [r7, #52]	@ 0x34
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	633b      	str	r3, [r7, #48]	@ 0x30
 8005358:	e00b      	b.n	8005372 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 800535a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800535c:	b2da      	uxtb	r2, r3
 800535e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005360:	1c59      	adds	r1, r3, #1
 8005362:	6379      	str	r1, [r7, #52]	@ 0x34
 8005364:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005368:	b2d2      	uxtb	r2, r2
 800536a:	701a      	strb	r2, [r3, #0]
 800536c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800536e:	09db      	lsrs	r3, r3, #7
 8005370:	633b      	str	r3, [r7, #48]	@ 0x30
 8005372:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005374:	2b7f      	cmp	r3, #127	@ 0x7f
 8005376:	d8f0      	bhi.n	800535a <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8005378:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800537a:	1c5a      	adds	r2, r3, #1
 800537c:	637a      	str	r2, [r7, #52]	@ 0x34
 800537e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005380:	b2d2      	uxtb	r2, r2
 8005382:	701a      	strb	r2, [r3, #0]
 8005384:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005386:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8005388:	697b      	ldr	r3, [r7, #20]
 800538a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005390:	e00b      	b.n	80053aa <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8005392:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005394:	b2da      	uxtb	r2, r3
 8005396:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005398:	1c59      	adds	r1, r3, #1
 800539a:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800539c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80053a0:	b2d2      	uxtb	r2, r2
 80053a2:	701a      	strb	r2, [r3, #0]
 80053a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053a6:	09db      	lsrs	r3, r3, #7
 80053a8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80053aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053ac:	2b7f      	cmp	r3, #127	@ 0x7f
 80053ae:	d8f0      	bhi.n	8005392 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 80053b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053b2:	1c5a      	adds	r2, r3, #1
 80053b4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80053b6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80053b8:	b2d2      	uxtb	r2, r2
 80053ba:	701a      	strb	r2, [r3, #0]
 80053bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053be:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 80053c0:	697b      	ldr	r3, [r7, #20]
 80053c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80053c4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80053c6:	623b      	str	r3, [r7, #32]
 80053c8:	e00b      	b.n	80053e2 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 80053ca:	6a3b      	ldr	r3, [r7, #32]
 80053cc:	b2da      	uxtb	r2, r3
 80053ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053d0:	1c59      	adds	r1, r3, #1
 80053d2:	6279      	str	r1, [r7, #36]	@ 0x24
 80053d4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80053d8:	b2d2      	uxtb	r2, r2
 80053da:	701a      	strb	r2, [r3, #0]
 80053dc:	6a3b      	ldr	r3, [r7, #32]
 80053de:	09db      	lsrs	r3, r3, #7
 80053e0:	623b      	str	r3, [r7, #32]
 80053e2:	6a3b      	ldr	r3, [r7, #32]
 80053e4:	2b7f      	cmp	r3, #127	@ 0x7f
 80053e6:	d8f0      	bhi.n	80053ca <SEGGER_SYSVIEW_RecordU32x4+0xda>
 80053e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053ea:	1c5a      	adds	r2, r3, #1
 80053ec:	627a      	str	r2, [r7, #36]	@ 0x24
 80053ee:	6a3a      	ldr	r2, [r7, #32]
 80053f0:	b2d2      	uxtb	r2, r2
 80053f2:	701a      	strb	r2, [r3, #0]
 80053f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053f6:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80053f8:	68fa      	ldr	r2, [r7, #12]
 80053fa:	6979      	ldr	r1, [r7, #20]
 80053fc:	69b8      	ldr	r0, [r7, #24]
 80053fe:	f7ff fd65 	bl	8004ecc <_SendPacket>
  RECORD_END();
 8005402:	69fb      	ldr	r3, [r7, #28]
 8005404:	f383 8811 	msr	BASEPRI, r3
}
 8005408:	bf00      	nop
 800540a:	3740      	adds	r7, #64	@ 0x40
 800540c:	46bd      	mov	sp, r7
 800540e:	bd80      	pop	{r7, pc}
 8005410:	20013398 	.word	0x20013398

08005414 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8005414:	b580      	push	{r7, lr}
 8005416:	b08c      	sub	sp, #48	@ 0x30
 8005418:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 800541a:	4b59      	ldr	r3, [pc, #356]	@ (8005580 <SEGGER_SYSVIEW_Start+0x16c>)
 800541c:	2201      	movs	r2, #1
 800541e:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8005420:	f3ef 8311 	mrs	r3, BASEPRI
 8005424:	f04f 0120 	mov.w	r1, #32
 8005428:	f381 8811 	msr	BASEPRI, r1
 800542c:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 800542e:	4b54      	ldr	r3, [pc, #336]	@ (8005580 <SEGGER_SYSVIEW_Start+0x16c>)
 8005430:	785b      	ldrb	r3, [r3, #1]
 8005432:	220a      	movs	r2, #10
 8005434:	4953      	ldr	r1, [pc, #332]	@ (8005584 <SEGGER_SYSVIEW_Start+0x170>)
 8005436:	4618      	mov	r0, r3
 8005438:	f7fa feca 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 8005442:	f7ff f9d9 	bl	80047f8 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8005446:	200a      	movs	r0, #10
 8005448:	f7ff fe28 	bl	800509c <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800544c:	f3ef 8311 	mrs	r3, BASEPRI
 8005450:	f04f 0120 	mov.w	r1, #32
 8005454:	f381 8811 	msr	BASEPRI, r1
 8005458:	60bb      	str	r3, [r7, #8]
 800545a:	484b      	ldr	r0, [pc, #300]	@ (8005588 <SEGGER_SYSVIEW_Start+0x174>)
 800545c:	f7ff fc45 	bl	8004cea <_PreparePacket>
 8005460:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800546a:	4b45      	ldr	r3, [pc, #276]	@ (8005580 <SEGGER_SYSVIEW_Start+0x16c>)
 800546c:	685b      	ldr	r3, [r3, #4]
 800546e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005470:	e00b      	b.n	800548a <SEGGER_SYSVIEW_Start+0x76>
 8005472:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005474:	b2da      	uxtb	r2, r3
 8005476:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005478:	1c59      	adds	r1, r3, #1
 800547a:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800547c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005480:	b2d2      	uxtb	r2, r2
 8005482:	701a      	strb	r2, [r3, #0]
 8005484:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005486:	09db      	lsrs	r3, r3, #7
 8005488:	62bb      	str	r3, [r7, #40]	@ 0x28
 800548a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800548c:	2b7f      	cmp	r3, #127	@ 0x7f
 800548e:	d8f0      	bhi.n	8005472 <SEGGER_SYSVIEW_Start+0x5e>
 8005490:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005492:	1c5a      	adds	r2, r3, #1
 8005494:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005496:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005498:	b2d2      	uxtb	r2, r2
 800549a:	701a      	strb	r2, [r3, #0]
 800549c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800549e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80054a4:	4b36      	ldr	r3, [pc, #216]	@ (8005580 <SEGGER_SYSVIEW_Start+0x16c>)
 80054a6:	689b      	ldr	r3, [r3, #8]
 80054a8:	623b      	str	r3, [r7, #32]
 80054aa:	e00b      	b.n	80054c4 <SEGGER_SYSVIEW_Start+0xb0>
 80054ac:	6a3b      	ldr	r3, [r7, #32]
 80054ae:	b2da      	uxtb	r2, r3
 80054b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054b2:	1c59      	adds	r1, r3, #1
 80054b4:	6279      	str	r1, [r7, #36]	@ 0x24
 80054b6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80054ba:	b2d2      	uxtb	r2, r2
 80054bc:	701a      	strb	r2, [r3, #0]
 80054be:	6a3b      	ldr	r3, [r7, #32]
 80054c0:	09db      	lsrs	r3, r3, #7
 80054c2:	623b      	str	r3, [r7, #32]
 80054c4:	6a3b      	ldr	r3, [r7, #32]
 80054c6:	2b7f      	cmp	r3, #127	@ 0x7f
 80054c8:	d8f0      	bhi.n	80054ac <SEGGER_SYSVIEW_Start+0x98>
 80054ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054cc:	1c5a      	adds	r2, r3, #1
 80054ce:	627a      	str	r2, [r7, #36]	@ 0x24
 80054d0:	6a3a      	ldr	r2, [r7, #32]
 80054d2:	b2d2      	uxtb	r2, r2
 80054d4:	701a      	strb	r2, [r3, #0]
 80054d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054d8:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	61fb      	str	r3, [r7, #28]
 80054de:	4b28      	ldr	r3, [pc, #160]	@ (8005580 <SEGGER_SYSVIEW_Start+0x16c>)
 80054e0:	691b      	ldr	r3, [r3, #16]
 80054e2:	61bb      	str	r3, [r7, #24]
 80054e4:	e00b      	b.n	80054fe <SEGGER_SYSVIEW_Start+0xea>
 80054e6:	69bb      	ldr	r3, [r7, #24]
 80054e8:	b2da      	uxtb	r2, r3
 80054ea:	69fb      	ldr	r3, [r7, #28]
 80054ec:	1c59      	adds	r1, r3, #1
 80054ee:	61f9      	str	r1, [r7, #28]
 80054f0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80054f4:	b2d2      	uxtb	r2, r2
 80054f6:	701a      	strb	r2, [r3, #0]
 80054f8:	69bb      	ldr	r3, [r7, #24]
 80054fa:	09db      	lsrs	r3, r3, #7
 80054fc:	61bb      	str	r3, [r7, #24]
 80054fe:	69bb      	ldr	r3, [r7, #24]
 8005500:	2b7f      	cmp	r3, #127	@ 0x7f
 8005502:	d8f0      	bhi.n	80054e6 <SEGGER_SYSVIEW_Start+0xd2>
 8005504:	69fb      	ldr	r3, [r7, #28]
 8005506:	1c5a      	adds	r2, r3, #1
 8005508:	61fa      	str	r2, [r7, #28]
 800550a:	69ba      	ldr	r2, [r7, #24]
 800550c:	b2d2      	uxtb	r2, r2
 800550e:	701a      	strb	r2, [r3, #0]
 8005510:	69fb      	ldr	r3, [r7, #28]
 8005512:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	617b      	str	r3, [r7, #20]
 8005518:	2300      	movs	r3, #0
 800551a:	613b      	str	r3, [r7, #16]
 800551c:	e00b      	b.n	8005536 <SEGGER_SYSVIEW_Start+0x122>
 800551e:	693b      	ldr	r3, [r7, #16]
 8005520:	b2da      	uxtb	r2, r3
 8005522:	697b      	ldr	r3, [r7, #20]
 8005524:	1c59      	adds	r1, r3, #1
 8005526:	6179      	str	r1, [r7, #20]
 8005528:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800552c:	b2d2      	uxtb	r2, r2
 800552e:	701a      	strb	r2, [r3, #0]
 8005530:	693b      	ldr	r3, [r7, #16]
 8005532:	09db      	lsrs	r3, r3, #7
 8005534:	613b      	str	r3, [r7, #16]
 8005536:	693b      	ldr	r3, [r7, #16]
 8005538:	2b7f      	cmp	r3, #127	@ 0x7f
 800553a:	d8f0      	bhi.n	800551e <SEGGER_SYSVIEW_Start+0x10a>
 800553c:	697b      	ldr	r3, [r7, #20]
 800553e:	1c5a      	adds	r2, r3, #1
 8005540:	617a      	str	r2, [r7, #20]
 8005542:	693a      	ldr	r2, [r7, #16]
 8005544:	b2d2      	uxtb	r2, r2
 8005546:	701a      	strb	r2, [r3, #0]
 8005548:	697b      	ldr	r3, [r7, #20]
 800554a:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800554c:	2218      	movs	r2, #24
 800554e:	6839      	ldr	r1, [r7, #0]
 8005550:	6878      	ldr	r0, [r7, #4]
 8005552:	f7ff fcbb 	bl	8004ecc <_SendPacket>
      RECORD_END();
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 800555c:	4b08      	ldr	r3, [pc, #32]	@ (8005580 <SEGGER_SYSVIEW_Start+0x16c>)
 800555e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005560:	2b00      	cmp	r3, #0
 8005562:	d002      	beq.n	800556a <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8005564:	4b06      	ldr	r3, [pc, #24]	@ (8005580 <SEGGER_SYSVIEW_Start+0x16c>)
 8005566:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005568:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800556a:	f000 f9c7 	bl	80058fc <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 800556e:	f000 f9b1 	bl	80058d4 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8005572:	f000 fc5f 	bl	8005e34 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8005576:	bf00      	nop
 8005578:	3730      	adds	r7, #48	@ 0x30
 800557a:	46bd      	mov	sp, r7
 800557c:	bd80      	pop	{r7, pc}
 800557e:	bf00      	nop
 8005580:	20013368 	.word	0x20013368
 8005584:	0800707c 	.word	0x0800707c
 8005588:	20013398 	.word	0x20013398

0800558c <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 800558c:	b580      	push	{r7, lr}
 800558e:	b082      	sub	sp, #8
 8005590:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005592:	f3ef 8311 	mrs	r3, BASEPRI
 8005596:	f04f 0120 	mov.w	r1, #32
 800559a:	f381 8811 	msr	BASEPRI, r1
 800559e:	607b      	str	r3, [r7, #4]
 80055a0:	480b      	ldr	r0, [pc, #44]	@ (80055d0 <SEGGER_SYSVIEW_Stop+0x44>)
 80055a2:	f7ff fba2 	bl	8004cea <_PreparePacket>
 80055a6:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 80055a8:	4b0a      	ldr	r3, [pc, #40]	@ (80055d4 <SEGGER_SYSVIEW_Stop+0x48>)
 80055aa:	781b      	ldrb	r3, [r3, #0]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d007      	beq.n	80055c0 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 80055b0:	220b      	movs	r2, #11
 80055b2:	6839      	ldr	r1, [r7, #0]
 80055b4:	6838      	ldr	r0, [r7, #0]
 80055b6:	f7ff fc89 	bl	8004ecc <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 80055ba:	4b06      	ldr	r3, [pc, #24]	@ (80055d4 <SEGGER_SYSVIEW_Stop+0x48>)
 80055bc:	2200      	movs	r2, #0
 80055be:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	f383 8811 	msr	BASEPRI, r3
}
 80055c6:	bf00      	nop
 80055c8:	3708      	adds	r7, #8
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bd80      	pop	{r7, pc}
 80055ce:	bf00      	nop
 80055d0:	20013398 	.word	0x20013398
 80055d4:	20013368 	.word	0x20013368

080055d8 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 80055d8:	b580      	push	{r7, lr}
 80055da:	b08c      	sub	sp, #48	@ 0x30
 80055dc:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80055de:	f3ef 8311 	mrs	r3, BASEPRI
 80055e2:	f04f 0120 	mov.w	r1, #32
 80055e6:	f381 8811 	msr	BASEPRI, r1
 80055ea:	60fb      	str	r3, [r7, #12]
 80055ec:	4845      	ldr	r0, [pc, #276]	@ (8005704 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 80055ee:	f7ff fb7c 	bl	8004cea <_PreparePacket>
 80055f2:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80055fc:	4b42      	ldr	r3, [pc, #264]	@ (8005708 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80055fe:	685b      	ldr	r3, [r3, #4]
 8005600:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005602:	e00b      	b.n	800561c <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8005604:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005606:	b2da      	uxtb	r2, r3
 8005608:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800560a:	1c59      	adds	r1, r3, #1
 800560c:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800560e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005612:	b2d2      	uxtb	r2, r2
 8005614:	701a      	strb	r2, [r3, #0]
 8005616:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005618:	09db      	lsrs	r3, r3, #7
 800561a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800561c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800561e:	2b7f      	cmp	r3, #127	@ 0x7f
 8005620:	d8f0      	bhi.n	8005604 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8005622:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005624:	1c5a      	adds	r2, r3, #1
 8005626:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005628:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800562a:	b2d2      	uxtb	r2, r2
 800562c:	701a      	strb	r2, [r3, #0]
 800562e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005630:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	627b      	str	r3, [r7, #36]	@ 0x24
 8005636:	4b34      	ldr	r3, [pc, #208]	@ (8005708 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005638:	689b      	ldr	r3, [r3, #8]
 800563a:	623b      	str	r3, [r7, #32]
 800563c:	e00b      	b.n	8005656 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 800563e:	6a3b      	ldr	r3, [r7, #32]
 8005640:	b2da      	uxtb	r2, r3
 8005642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005644:	1c59      	adds	r1, r3, #1
 8005646:	6279      	str	r1, [r7, #36]	@ 0x24
 8005648:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800564c:	b2d2      	uxtb	r2, r2
 800564e:	701a      	strb	r2, [r3, #0]
 8005650:	6a3b      	ldr	r3, [r7, #32]
 8005652:	09db      	lsrs	r3, r3, #7
 8005654:	623b      	str	r3, [r7, #32]
 8005656:	6a3b      	ldr	r3, [r7, #32]
 8005658:	2b7f      	cmp	r3, #127	@ 0x7f
 800565a:	d8f0      	bhi.n	800563e <SEGGER_SYSVIEW_GetSysDesc+0x66>
 800565c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800565e:	1c5a      	adds	r2, r3, #1
 8005660:	627a      	str	r2, [r7, #36]	@ 0x24
 8005662:	6a3a      	ldr	r2, [r7, #32]
 8005664:	b2d2      	uxtb	r2, r2
 8005666:	701a      	strb	r2, [r3, #0]
 8005668:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800566a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	61fb      	str	r3, [r7, #28]
 8005670:	4b25      	ldr	r3, [pc, #148]	@ (8005708 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005672:	691b      	ldr	r3, [r3, #16]
 8005674:	61bb      	str	r3, [r7, #24]
 8005676:	e00b      	b.n	8005690 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8005678:	69bb      	ldr	r3, [r7, #24]
 800567a:	b2da      	uxtb	r2, r3
 800567c:	69fb      	ldr	r3, [r7, #28]
 800567e:	1c59      	adds	r1, r3, #1
 8005680:	61f9      	str	r1, [r7, #28]
 8005682:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005686:	b2d2      	uxtb	r2, r2
 8005688:	701a      	strb	r2, [r3, #0]
 800568a:	69bb      	ldr	r3, [r7, #24]
 800568c:	09db      	lsrs	r3, r3, #7
 800568e:	61bb      	str	r3, [r7, #24]
 8005690:	69bb      	ldr	r3, [r7, #24]
 8005692:	2b7f      	cmp	r3, #127	@ 0x7f
 8005694:	d8f0      	bhi.n	8005678 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8005696:	69fb      	ldr	r3, [r7, #28]
 8005698:	1c5a      	adds	r2, r3, #1
 800569a:	61fa      	str	r2, [r7, #28]
 800569c:	69ba      	ldr	r2, [r7, #24]
 800569e:	b2d2      	uxtb	r2, r2
 80056a0:	701a      	strb	r2, [r3, #0]
 80056a2:	69fb      	ldr	r3, [r7, #28]
 80056a4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	617b      	str	r3, [r7, #20]
 80056aa:	2300      	movs	r3, #0
 80056ac:	613b      	str	r3, [r7, #16]
 80056ae:	e00b      	b.n	80056c8 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 80056b0:	693b      	ldr	r3, [r7, #16]
 80056b2:	b2da      	uxtb	r2, r3
 80056b4:	697b      	ldr	r3, [r7, #20]
 80056b6:	1c59      	adds	r1, r3, #1
 80056b8:	6179      	str	r1, [r7, #20]
 80056ba:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80056be:	b2d2      	uxtb	r2, r2
 80056c0:	701a      	strb	r2, [r3, #0]
 80056c2:	693b      	ldr	r3, [r7, #16]
 80056c4:	09db      	lsrs	r3, r3, #7
 80056c6:	613b      	str	r3, [r7, #16]
 80056c8:	693b      	ldr	r3, [r7, #16]
 80056ca:	2b7f      	cmp	r3, #127	@ 0x7f
 80056cc:	d8f0      	bhi.n	80056b0 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	1c5a      	adds	r2, r3, #1
 80056d2:	617a      	str	r2, [r7, #20]
 80056d4:	693a      	ldr	r2, [r7, #16]
 80056d6:	b2d2      	uxtb	r2, r2
 80056d8:	701a      	strb	r2, [r3, #0]
 80056da:	697b      	ldr	r3, [r7, #20]
 80056dc:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80056de:	2218      	movs	r2, #24
 80056e0:	6879      	ldr	r1, [r7, #4]
 80056e2:	68b8      	ldr	r0, [r7, #8]
 80056e4:	f7ff fbf2 	bl	8004ecc <_SendPacket>
  RECORD_END();
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 80056ee:	4b06      	ldr	r3, [pc, #24]	@ (8005708 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80056f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d002      	beq.n	80056fc <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 80056f6:	4b04      	ldr	r3, [pc, #16]	@ (8005708 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80056f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056fa:	4798      	blx	r3
  }
}
 80056fc:	bf00      	nop
 80056fe:	3730      	adds	r7, #48	@ 0x30
 8005700:	46bd      	mov	sp, r7
 8005702:	bd80      	pop	{r7, pc}
 8005704:	20013398 	.word	0x20013398
 8005708:	20013368 	.word	0x20013368

0800570c <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 800570c:	b580      	push	{r7, lr}
 800570e:	b092      	sub	sp, #72	@ 0x48
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8005714:	f3ef 8311 	mrs	r3, BASEPRI
 8005718:	f04f 0120 	mov.w	r1, #32
 800571c:	f381 8811 	msr	BASEPRI, r1
 8005720:	617b      	str	r3, [r7, #20]
 8005722:	486a      	ldr	r0, [pc, #424]	@ (80058cc <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8005724:	f7ff fae1 	bl	8004cea <_PreparePacket>
 8005728:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800572a:	693b      	ldr	r3, [r7, #16]
 800572c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	647b      	str	r3, [r7, #68]	@ 0x44
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681a      	ldr	r2, [r3, #0]
 8005736:	4b66      	ldr	r3, [pc, #408]	@ (80058d0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005738:	691b      	ldr	r3, [r3, #16]
 800573a:	1ad3      	subs	r3, r2, r3
 800573c:	643b      	str	r3, [r7, #64]	@ 0x40
 800573e:	e00b      	b.n	8005758 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8005740:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005742:	b2da      	uxtb	r2, r3
 8005744:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005746:	1c59      	adds	r1, r3, #1
 8005748:	6479      	str	r1, [r7, #68]	@ 0x44
 800574a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800574e:	b2d2      	uxtb	r2, r2
 8005750:	701a      	strb	r2, [r3, #0]
 8005752:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005754:	09db      	lsrs	r3, r3, #7
 8005756:	643b      	str	r3, [r7, #64]	@ 0x40
 8005758:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800575a:	2b7f      	cmp	r3, #127	@ 0x7f
 800575c:	d8f0      	bhi.n	8005740 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 800575e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005760:	1c5a      	adds	r2, r3, #1
 8005762:	647a      	str	r2, [r7, #68]	@ 0x44
 8005764:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005766:	b2d2      	uxtb	r2, r2
 8005768:	701a      	strb	r2, [r3, #0]
 800576a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800576c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	689b      	ldr	r3, [r3, #8]
 8005776:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005778:	e00b      	b.n	8005792 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 800577a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800577c:	b2da      	uxtb	r2, r3
 800577e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005780:	1c59      	adds	r1, r3, #1
 8005782:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8005784:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005788:	b2d2      	uxtb	r2, r2
 800578a:	701a      	strb	r2, [r3, #0]
 800578c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800578e:	09db      	lsrs	r3, r3, #7
 8005790:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005792:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005794:	2b7f      	cmp	r3, #127	@ 0x7f
 8005796:	d8f0      	bhi.n	800577a <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8005798:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800579a:	1c5a      	adds	r2, r3, #1
 800579c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800579e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80057a0:	b2d2      	uxtb	r2, r2
 80057a2:	701a      	strb	r2, [r3, #0]
 80057a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80057a6:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	685b      	ldr	r3, [r3, #4]
 80057ac:	2220      	movs	r2, #32
 80057ae:	4619      	mov	r1, r3
 80057b0:	68f8      	ldr	r0, [r7, #12]
 80057b2:	f7ff fa4d 	bl	8004c50 <_EncodeStr>
 80057b6:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 80057b8:	2209      	movs	r2, #9
 80057ba:	68f9      	ldr	r1, [r7, #12]
 80057bc:	6938      	ldr	r0, [r7, #16]
 80057be:	f7ff fb85 	bl	8004ecc <_SendPacket>
  //
  pPayload = pPayloadStart;
 80057c2:	693b      	ldr	r3, [r7, #16]
 80057c4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681a      	ldr	r2, [r3, #0]
 80057ce:	4b40      	ldr	r3, [pc, #256]	@ (80058d0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80057d0:	691b      	ldr	r3, [r3, #16]
 80057d2:	1ad3      	subs	r3, r2, r3
 80057d4:	633b      	str	r3, [r7, #48]	@ 0x30
 80057d6:	e00b      	b.n	80057f0 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 80057d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057da:	b2da      	uxtb	r2, r3
 80057dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057de:	1c59      	adds	r1, r3, #1
 80057e0:	6379      	str	r1, [r7, #52]	@ 0x34
 80057e2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80057e6:	b2d2      	uxtb	r2, r2
 80057e8:	701a      	strb	r2, [r3, #0]
 80057ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057ec:	09db      	lsrs	r3, r3, #7
 80057ee:	633b      	str	r3, [r7, #48]	@ 0x30
 80057f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057f2:	2b7f      	cmp	r3, #127	@ 0x7f
 80057f4:	d8f0      	bhi.n	80057d8 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 80057f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057f8:	1c5a      	adds	r2, r3, #1
 80057fa:	637a      	str	r2, [r7, #52]	@ 0x34
 80057fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80057fe:	b2d2      	uxtb	r2, r2
 8005800:	701a      	strb	r2, [r3, #0]
 8005802:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005804:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	68db      	ldr	r3, [r3, #12]
 800580e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005810:	e00b      	b.n	800582a <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8005812:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005814:	b2da      	uxtb	r2, r3
 8005816:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005818:	1c59      	adds	r1, r3, #1
 800581a:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800581c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005820:	b2d2      	uxtb	r2, r2
 8005822:	701a      	strb	r2, [r3, #0]
 8005824:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005826:	09db      	lsrs	r3, r3, #7
 8005828:	62bb      	str	r3, [r7, #40]	@ 0x28
 800582a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800582c:	2b7f      	cmp	r3, #127	@ 0x7f
 800582e:	d8f0      	bhi.n	8005812 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8005830:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005832:	1c5a      	adds	r2, r3, #1
 8005834:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005836:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005838:	b2d2      	uxtb	r2, r2
 800583a:	701a      	strb	r2, [r3, #0]
 800583c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800583e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	627b      	str	r3, [r7, #36]	@ 0x24
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	691b      	ldr	r3, [r3, #16]
 8005848:	623b      	str	r3, [r7, #32]
 800584a:	e00b      	b.n	8005864 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 800584c:	6a3b      	ldr	r3, [r7, #32]
 800584e:	b2da      	uxtb	r2, r3
 8005850:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005852:	1c59      	adds	r1, r3, #1
 8005854:	6279      	str	r1, [r7, #36]	@ 0x24
 8005856:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800585a:	b2d2      	uxtb	r2, r2
 800585c:	701a      	strb	r2, [r3, #0]
 800585e:	6a3b      	ldr	r3, [r7, #32]
 8005860:	09db      	lsrs	r3, r3, #7
 8005862:	623b      	str	r3, [r7, #32]
 8005864:	6a3b      	ldr	r3, [r7, #32]
 8005866:	2b7f      	cmp	r3, #127	@ 0x7f
 8005868:	d8f0      	bhi.n	800584c <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 800586a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800586c:	1c5a      	adds	r2, r3, #1
 800586e:	627a      	str	r2, [r7, #36]	@ 0x24
 8005870:	6a3a      	ldr	r2, [r7, #32]
 8005872:	b2d2      	uxtb	r2, r2
 8005874:	701a      	strb	r2, [r3, #0]
 8005876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005878:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	61fb      	str	r3, [r7, #28]
 800587e:	2300      	movs	r3, #0
 8005880:	61bb      	str	r3, [r7, #24]
 8005882:	e00b      	b.n	800589c <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8005884:	69bb      	ldr	r3, [r7, #24]
 8005886:	b2da      	uxtb	r2, r3
 8005888:	69fb      	ldr	r3, [r7, #28]
 800588a:	1c59      	adds	r1, r3, #1
 800588c:	61f9      	str	r1, [r7, #28]
 800588e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005892:	b2d2      	uxtb	r2, r2
 8005894:	701a      	strb	r2, [r3, #0]
 8005896:	69bb      	ldr	r3, [r7, #24]
 8005898:	09db      	lsrs	r3, r3, #7
 800589a:	61bb      	str	r3, [r7, #24]
 800589c:	69bb      	ldr	r3, [r7, #24]
 800589e:	2b7f      	cmp	r3, #127	@ 0x7f
 80058a0:	d8f0      	bhi.n	8005884 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 80058a2:	69fb      	ldr	r3, [r7, #28]
 80058a4:	1c5a      	adds	r2, r3, #1
 80058a6:	61fa      	str	r2, [r7, #28]
 80058a8:	69ba      	ldr	r2, [r7, #24]
 80058aa:	b2d2      	uxtb	r2, r2
 80058ac:	701a      	strb	r2, [r3, #0]
 80058ae:	69fb      	ldr	r3, [r7, #28]
 80058b0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 80058b2:	2215      	movs	r2, #21
 80058b4:	68f9      	ldr	r1, [r7, #12]
 80058b6:	6938      	ldr	r0, [r7, #16]
 80058b8:	f7ff fb08 	bl	8004ecc <_SendPacket>
  RECORD_END();
 80058bc:	697b      	ldr	r3, [r7, #20]
 80058be:	f383 8811 	msr	BASEPRI, r3
}
 80058c2:	bf00      	nop
 80058c4:	3748      	adds	r7, #72	@ 0x48
 80058c6:	46bd      	mov	sp, r7
 80058c8:	bd80      	pop	{r7, pc}
 80058ca:	bf00      	nop
 80058cc:	20013398 	.word	0x20013398
 80058d0:	20013368 	.word	0x20013368

080058d4 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 80058d4:	b580      	push	{r7, lr}
 80058d6:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 80058d8:	4b07      	ldr	r3, [pc, #28]	@ (80058f8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80058da:	6a1b      	ldr	r3, [r3, #32]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d008      	beq.n	80058f2 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 80058e0:	4b05      	ldr	r3, [pc, #20]	@ (80058f8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80058e2:	6a1b      	ldr	r3, [r3, #32]
 80058e4:	685b      	ldr	r3, [r3, #4]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d003      	beq.n	80058f2 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 80058ea:	4b03      	ldr	r3, [pc, #12]	@ (80058f8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80058ec:	6a1b      	ldr	r3, [r3, #32]
 80058ee:	685b      	ldr	r3, [r3, #4]
 80058f0:	4798      	blx	r3
  }
}
 80058f2:	bf00      	nop
 80058f4:	bd80      	pop	{r7, pc}
 80058f6:	bf00      	nop
 80058f8:	20013368 	.word	0x20013368

080058fc <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 80058fc:	b590      	push	{r4, r7, lr}
 80058fe:	b083      	sub	sp, #12
 8005900:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8005902:	4b15      	ldr	r3, [pc, #84]	@ (8005958 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005904:	6a1b      	ldr	r3, [r3, #32]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d01a      	beq.n	8005940 <SEGGER_SYSVIEW_RecordSystime+0x44>
 800590a:	4b13      	ldr	r3, [pc, #76]	@ (8005958 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800590c:	6a1b      	ldr	r3, [r3, #32]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d015      	beq.n	8005940 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8005914:	4b10      	ldr	r3, [pc, #64]	@ (8005958 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005916:	6a1b      	ldr	r3, [r3, #32]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	4798      	blx	r3
 800591c:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8005920:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8005922:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005926:	f04f 0200 	mov.w	r2, #0
 800592a:	f04f 0300 	mov.w	r3, #0
 800592e:	000a      	movs	r2, r1
 8005930:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8005932:	4613      	mov	r3, r2
 8005934:	461a      	mov	r2, r3
 8005936:	4621      	mov	r1, r4
 8005938:	200d      	movs	r0, #13
 800593a:	f7ff fc09 	bl	8005150 <SEGGER_SYSVIEW_RecordU32x2>
 800593e:	e006      	b.n	800594e <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8005940:	4b06      	ldr	r3, [pc, #24]	@ (800595c <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	4619      	mov	r1, r3
 8005946:	200c      	movs	r0, #12
 8005948:	f7ff fbc6 	bl	80050d8 <SEGGER_SYSVIEW_RecordU32>
  }
}
 800594c:	bf00      	nop
 800594e:	bf00      	nop
 8005950:	370c      	adds	r7, #12
 8005952:	46bd      	mov	sp, r7
 8005954:	bd90      	pop	{r4, r7, pc}
 8005956:	bf00      	nop
 8005958:	20013368 	.word	0x20013368
 800595c:	e0001004 	.word	0xe0001004

08005960 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8005960:	b580      	push	{r7, lr}
 8005962:	b086      	sub	sp, #24
 8005964:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005966:	f3ef 8311 	mrs	r3, BASEPRI
 800596a:	f04f 0120 	mov.w	r1, #32
 800596e:	f381 8811 	msr	BASEPRI, r1
 8005972:	60fb      	str	r3, [r7, #12]
 8005974:	4819      	ldr	r0, [pc, #100]	@ (80059dc <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8005976:	f7ff f9b8 	bl	8004cea <_PreparePacket>
 800597a:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800597c:	68bb      	ldr	r3, [r7, #8]
 800597e:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8005980:	4b17      	ldr	r3, [pc, #92]	@ (80059e0 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005988:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	617b      	str	r3, [r7, #20]
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	613b      	str	r3, [r7, #16]
 8005992:	e00b      	b.n	80059ac <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8005994:	693b      	ldr	r3, [r7, #16]
 8005996:	b2da      	uxtb	r2, r3
 8005998:	697b      	ldr	r3, [r7, #20]
 800599a:	1c59      	adds	r1, r3, #1
 800599c:	6179      	str	r1, [r7, #20]
 800599e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80059a2:	b2d2      	uxtb	r2, r2
 80059a4:	701a      	strb	r2, [r3, #0]
 80059a6:	693b      	ldr	r3, [r7, #16]
 80059a8:	09db      	lsrs	r3, r3, #7
 80059aa:	613b      	str	r3, [r7, #16]
 80059ac:	693b      	ldr	r3, [r7, #16]
 80059ae:	2b7f      	cmp	r3, #127	@ 0x7f
 80059b0:	d8f0      	bhi.n	8005994 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 80059b2:	697b      	ldr	r3, [r7, #20]
 80059b4:	1c5a      	adds	r2, r3, #1
 80059b6:	617a      	str	r2, [r7, #20]
 80059b8:	693a      	ldr	r2, [r7, #16]
 80059ba:	b2d2      	uxtb	r2, r2
 80059bc:	701a      	strb	r2, [r3, #0]
 80059be:	697b      	ldr	r3, [r7, #20]
 80059c0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 80059c2:	2202      	movs	r2, #2
 80059c4:	6879      	ldr	r1, [r7, #4]
 80059c6:	68b8      	ldr	r0, [r7, #8]
 80059c8:	f7ff fa80 	bl	8004ecc <_SendPacket>
  RECORD_END();
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	f383 8811 	msr	BASEPRI, r3
}
 80059d2:	bf00      	nop
 80059d4:	3718      	adds	r7, #24
 80059d6:	46bd      	mov	sp, r7
 80059d8:	bd80      	pop	{r7, pc}
 80059da:	bf00      	nop
 80059dc:	20013398 	.word	0x20013398
 80059e0:	e000ed04 	.word	0xe000ed04

080059e4 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b082      	sub	sp, #8
 80059e8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80059ea:	f3ef 8311 	mrs	r3, BASEPRI
 80059ee:	f04f 0120 	mov.w	r1, #32
 80059f2:	f381 8811 	msr	BASEPRI, r1
 80059f6:	607b      	str	r3, [r7, #4]
 80059f8:	4807      	ldr	r0, [pc, #28]	@ (8005a18 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 80059fa:	f7ff f976 	bl	8004cea <_PreparePacket>
 80059fe:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8005a00:	2203      	movs	r2, #3
 8005a02:	6839      	ldr	r1, [r7, #0]
 8005a04:	6838      	ldr	r0, [r7, #0]
 8005a06:	f7ff fa61 	bl	8004ecc <_SendPacket>
  RECORD_END();
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	f383 8811 	msr	BASEPRI, r3
}
 8005a10:	bf00      	nop
 8005a12:	3708      	adds	r7, #8
 8005a14:	46bd      	mov	sp, r7
 8005a16:	bd80      	pop	{r7, pc}
 8005a18:	20013398 	.word	0x20013398

08005a1c <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b082      	sub	sp, #8
 8005a20:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005a22:	f3ef 8311 	mrs	r3, BASEPRI
 8005a26:	f04f 0120 	mov.w	r1, #32
 8005a2a:	f381 8811 	msr	BASEPRI, r1
 8005a2e:	607b      	str	r3, [r7, #4]
 8005a30:	4807      	ldr	r0, [pc, #28]	@ (8005a50 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8005a32:	f7ff f95a 	bl	8004cea <_PreparePacket>
 8005a36:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8005a38:	2212      	movs	r2, #18
 8005a3a:	6839      	ldr	r1, [r7, #0]
 8005a3c:	6838      	ldr	r0, [r7, #0]
 8005a3e:	f7ff fa45 	bl	8004ecc <_SendPacket>
  RECORD_END();
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	f383 8811 	msr	BASEPRI, r3
}
 8005a48:	bf00      	nop
 8005a4a:	3708      	adds	r7, #8
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	bd80      	pop	{r7, pc}
 8005a50:	20013398 	.word	0x20013398

08005a54 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b082      	sub	sp, #8
 8005a58:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005a5a:	f3ef 8311 	mrs	r3, BASEPRI
 8005a5e:	f04f 0120 	mov.w	r1, #32
 8005a62:	f381 8811 	msr	BASEPRI, r1
 8005a66:	607b      	str	r3, [r7, #4]
 8005a68:	4807      	ldr	r0, [pc, #28]	@ (8005a88 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8005a6a:	f7ff f93e 	bl	8004cea <_PreparePacket>
 8005a6e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8005a70:	2211      	movs	r2, #17
 8005a72:	6839      	ldr	r1, [r7, #0]
 8005a74:	6838      	ldr	r0, [r7, #0]
 8005a76:	f7ff fa29 	bl	8004ecc <_SendPacket>
  RECORD_END();
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	f383 8811 	msr	BASEPRI, r3
}
 8005a80:	bf00      	nop
 8005a82:	3708      	adds	r7, #8
 8005a84:	46bd      	mov	sp, r7
 8005a86:	bd80      	pop	{r7, pc}
 8005a88:	20013398 	.word	0x20013398

08005a8c <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b088      	sub	sp, #32
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005a94:	f3ef 8311 	mrs	r3, BASEPRI
 8005a98:	f04f 0120 	mov.w	r1, #32
 8005a9c:	f381 8811 	msr	BASEPRI, r1
 8005aa0:	617b      	str	r3, [r7, #20]
 8005aa2:	4819      	ldr	r0, [pc, #100]	@ (8005b08 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8005aa4:	f7ff f921 	bl	8004cea <_PreparePacket>
 8005aa8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005aaa:	693b      	ldr	r3, [r7, #16]
 8005aac:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005aae:	4b17      	ldr	r3, [pc, #92]	@ (8005b0c <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8005ab0:	691b      	ldr	r3, [r3, #16]
 8005ab2:	687a      	ldr	r2, [r7, #4]
 8005ab4:	1ad3      	subs	r3, r2, r3
 8005ab6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	61fb      	str	r3, [r7, #28]
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	61bb      	str	r3, [r7, #24]
 8005ac0:	e00b      	b.n	8005ada <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8005ac2:	69bb      	ldr	r3, [r7, #24]
 8005ac4:	b2da      	uxtb	r2, r3
 8005ac6:	69fb      	ldr	r3, [r7, #28]
 8005ac8:	1c59      	adds	r1, r3, #1
 8005aca:	61f9      	str	r1, [r7, #28]
 8005acc:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005ad0:	b2d2      	uxtb	r2, r2
 8005ad2:	701a      	strb	r2, [r3, #0]
 8005ad4:	69bb      	ldr	r3, [r7, #24]
 8005ad6:	09db      	lsrs	r3, r3, #7
 8005ad8:	61bb      	str	r3, [r7, #24]
 8005ada:	69bb      	ldr	r3, [r7, #24]
 8005adc:	2b7f      	cmp	r3, #127	@ 0x7f
 8005ade:	d8f0      	bhi.n	8005ac2 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8005ae0:	69fb      	ldr	r3, [r7, #28]
 8005ae2:	1c5a      	adds	r2, r3, #1
 8005ae4:	61fa      	str	r2, [r7, #28]
 8005ae6:	69ba      	ldr	r2, [r7, #24]
 8005ae8:	b2d2      	uxtb	r2, r2
 8005aea:	701a      	strb	r2, [r3, #0]
 8005aec:	69fb      	ldr	r3, [r7, #28]
 8005aee:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8005af0:	2208      	movs	r2, #8
 8005af2:	68f9      	ldr	r1, [r7, #12]
 8005af4:	6938      	ldr	r0, [r7, #16]
 8005af6:	f7ff f9e9 	bl	8004ecc <_SendPacket>
  RECORD_END();
 8005afa:	697b      	ldr	r3, [r7, #20]
 8005afc:	f383 8811 	msr	BASEPRI, r3
}
 8005b00:	bf00      	nop
 8005b02:	3720      	adds	r7, #32
 8005b04:	46bd      	mov	sp, r7
 8005b06:	bd80      	pop	{r7, pc}
 8005b08:	20013398 	.word	0x20013398
 8005b0c:	20013368 	.word	0x20013368

08005b10 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b088      	sub	sp, #32
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005b18:	f3ef 8311 	mrs	r3, BASEPRI
 8005b1c:	f04f 0120 	mov.w	r1, #32
 8005b20:	f381 8811 	msr	BASEPRI, r1
 8005b24:	617b      	str	r3, [r7, #20]
 8005b26:	4819      	ldr	r0, [pc, #100]	@ (8005b8c <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8005b28:	f7ff f8df 	bl	8004cea <_PreparePacket>
 8005b2c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005b2e:	693b      	ldr	r3, [r7, #16]
 8005b30:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005b32:	4b17      	ldr	r3, [pc, #92]	@ (8005b90 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8005b34:	691b      	ldr	r3, [r3, #16]
 8005b36:	687a      	ldr	r2, [r7, #4]
 8005b38:	1ad3      	subs	r3, r2, r3
 8005b3a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	61fb      	str	r3, [r7, #28]
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	61bb      	str	r3, [r7, #24]
 8005b44:	e00b      	b.n	8005b5e <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8005b46:	69bb      	ldr	r3, [r7, #24]
 8005b48:	b2da      	uxtb	r2, r3
 8005b4a:	69fb      	ldr	r3, [r7, #28]
 8005b4c:	1c59      	adds	r1, r3, #1
 8005b4e:	61f9      	str	r1, [r7, #28]
 8005b50:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005b54:	b2d2      	uxtb	r2, r2
 8005b56:	701a      	strb	r2, [r3, #0]
 8005b58:	69bb      	ldr	r3, [r7, #24]
 8005b5a:	09db      	lsrs	r3, r3, #7
 8005b5c:	61bb      	str	r3, [r7, #24]
 8005b5e:	69bb      	ldr	r3, [r7, #24]
 8005b60:	2b7f      	cmp	r3, #127	@ 0x7f
 8005b62:	d8f0      	bhi.n	8005b46 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8005b64:	69fb      	ldr	r3, [r7, #28]
 8005b66:	1c5a      	adds	r2, r3, #1
 8005b68:	61fa      	str	r2, [r7, #28]
 8005b6a:	69ba      	ldr	r2, [r7, #24]
 8005b6c:	b2d2      	uxtb	r2, r2
 8005b6e:	701a      	strb	r2, [r3, #0]
 8005b70:	69fb      	ldr	r3, [r7, #28]
 8005b72:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8005b74:	2204      	movs	r2, #4
 8005b76:	68f9      	ldr	r1, [r7, #12]
 8005b78:	6938      	ldr	r0, [r7, #16]
 8005b7a:	f7ff f9a7 	bl	8004ecc <_SendPacket>
  RECORD_END();
 8005b7e:	697b      	ldr	r3, [r7, #20]
 8005b80:	f383 8811 	msr	BASEPRI, r3
}
 8005b84:	bf00      	nop
 8005b86:	3720      	adds	r7, #32
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	bd80      	pop	{r7, pc}
 8005b8c:	20013398 	.word	0x20013398
 8005b90:	20013368 	.word	0x20013368

08005b94 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b088      	sub	sp, #32
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005b9c:	f3ef 8311 	mrs	r3, BASEPRI
 8005ba0:	f04f 0120 	mov.w	r1, #32
 8005ba4:	f381 8811 	msr	BASEPRI, r1
 8005ba8:	617b      	str	r3, [r7, #20]
 8005baa:	4819      	ldr	r0, [pc, #100]	@ (8005c10 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8005bac:	f7ff f89d 	bl	8004cea <_PreparePacket>
 8005bb0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005bb2:	693b      	ldr	r3, [r7, #16]
 8005bb4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005bb6:	4b17      	ldr	r3, [pc, #92]	@ (8005c14 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8005bb8:	691b      	ldr	r3, [r3, #16]
 8005bba:	687a      	ldr	r2, [r7, #4]
 8005bbc:	1ad3      	subs	r3, r2, r3
 8005bbe:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	61fb      	str	r3, [r7, #28]
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	61bb      	str	r3, [r7, #24]
 8005bc8:	e00b      	b.n	8005be2 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8005bca:	69bb      	ldr	r3, [r7, #24]
 8005bcc:	b2da      	uxtb	r2, r3
 8005bce:	69fb      	ldr	r3, [r7, #28]
 8005bd0:	1c59      	adds	r1, r3, #1
 8005bd2:	61f9      	str	r1, [r7, #28]
 8005bd4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005bd8:	b2d2      	uxtb	r2, r2
 8005bda:	701a      	strb	r2, [r3, #0]
 8005bdc:	69bb      	ldr	r3, [r7, #24]
 8005bde:	09db      	lsrs	r3, r3, #7
 8005be0:	61bb      	str	r3, [r7, #24]
 8005be2:	69bb      	ldr	r3, [r7, #24]
 8005be4:	2b7f      	cmp	r3, #127	@ 0x7f
 8005be6:	d8f0      	bhi.n	8005bca <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8005be8:	69fb      	ldr	r3, [r7, #28]
 8005bea:	1c5a      	adds	r2, r3, #1
 8005bec:	61fa      	str	r2, [r7, #28]
 8005bee:	69ba      	ldr	r2, [r7, #24]
 8005bf0:	b2d2      	uxtb	r2, r2
 8005bf2:	701a      	strb	r2, [r3, #0]
 8005bf4:	69fb      	ldr	r3, [r7, #28]
 8005bf6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8005bf8:	2206      	movs	r2, #6
 8005bfa:	68f9      	ldr	r1, [r7, #12]
 8005bfc:	6938      	ldr	r0, [r7, #16]
 8005bfe:	f7ff f965 	bl	8004ecc <_SendPacket>
  RECORD_END();
 8005c02:	697b      	ldr	r3, [r7, #20]
 8005c04:	f383 8811 	msr	BASEPRI, r3
}
 8005c08:	bf00      	nop
 8005c0a:	3720      	adds	r7, #32
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	bd80      	pop	{r7, pc}
 8005c10:	20013398 	.word	0x20013398
 8005c14:	20013368 	.word	0x20013368

08005c18 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b08a      	sub	sp, #40	@ 0x28
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
 8005c20:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005c22:	f3ef 8311 	mrs	r3, BASEPRI
 8005c26:	f04f 0120 	mov.w	r1, #32
 8005c2a:	f381 8811 	msr	BASEPRI, r1
 8005c2e:	617b      	str	r3, [r7, #20]
 8005c30:	4827      	ldr	r0, [pc, #156]	@ (8005cd0 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8005c32:	f7ff f85a 	bl	8004cea <_PreparePacket>
 8005c36:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005c38:	693b      	ldr	r3, [r7, #16]
 8005c3a:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005c3c:	4b25      	ldr	r3, [pc, #148]	@ (8005cd4 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8005c3e:	691b      	ldr	r3, [r3, #16]
 8005c40:	687a      	ldr	r2, [r7, #4]
 8005c42:	1ad3      	subs	r3, r2, r3
 8005c44:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	623b      	str	r3, [r7, #32]
 8005c4e:	e00b      	b.n	8005c68 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8005c50:	6a3b      	ldr	r3, [r7, #32]
 8005c52:	b2da      	uxtb	r2, r3
 8005c54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c56:	1c59      	adds	r1, r3, #1
 8005c58:	6279      	str	r1, [r7, #36]	@ 0x24
 8005c5a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005c5e:	b2d2      	uxtb	r2, r2
 8005c60:	701a      	strb	r2, [r3, #0]
 8005c62:	6a3b      	ldr	r3, [r7, #32]
 8005c64:	09db      	lsrs	r3, r3, #7
 8005c66:	623b      	str	r3, [r7, #32]
 8005c68:	6a3b      	ldr	r3, [r7, #32]
 8005c6a:	2b7f      	cmp	r3, #127	@ 0x7f
 8005c6c:	d8f0      	bhi.n	8005c50 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8005c6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c70:	1c5a      	adds	r2, r3, #1
 8005c72:	627a      	str	r2, [r7, #36]	@ 0x24
 8005c74:	6a3a      	ldr	r2, [r7, #32]
 8005c76:	b2d2      	uxtb	r2, r2
 8005c78:	701a      	strb	r2, [r3, #0]
 8005c7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c7c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	61fb      	str	r3, [r7, #28]
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	61bb      	str	r3, [r7, #24]
 8005c86:	e00b      	b.n	8005ca0 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8005c88:	69bb      	ldr	r3, [r7, #24]
 8005c8a:	b2da      	uxtb	r2, r3
 8005c8c:	69fb      	ldr	r3, [r7, #28]
 8005c8e:	1c59      	adds	r1, r3, #1
 8005c90:	61f9      	str	r1, [r7, #28]
 8005c92:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005c96:	b2d2      	uxtb	r2, r2
 8005c98:	701a      	strb	r2, [r3, #0]
 8005c9a:	69bb      	ldr	r3, [r7, #24]
 8005c9c:	09db      	lsrs	r3, r3, #7
 8005c9e:	61bb      	str	r3, [r7, #24]
 8005ca0:	69bb      	ldr	r3, [r7, #24]
 8005ca2:	2b7f      	cmp	r3, #127	@ 0x7f
 8005ca4:	d8f0      	bhi.n	8005c88 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 8005ca6:	69fb      	ldr	r3, [r7, #28]
 8005ca8:	1c5a      	adds	r2, r3, #1
 8005caa:	61fa      	str	r2, [r7, #28]
 8005cac:	69ba      	ldr	r2, [r7, #24]
 8005cae:	b2d2      	uxtb	r2, r2
 8005cb0:	701a      	strb	r2, [r3, #0]
 8005cb2:	69fb      	ldr	r3, [r7, #28]
 8005cb4:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8005cb6:	2207      	movs	r2, #7
 8005cb8:	68f9      	ldr	r1, [r7, #12]
 8005cba:	6938      	ldr	r0, [r7, #16]
 8005cbc:	f7ff f906 	bl	8004ecc <_SendPacket>
  RECORD_END();
 8005cc0:	697b      	ldr	r3, [r7, #20]
 8005cc2:	f383 8811 	msr	BASEPRI, r3
}
 8005cc6:	bf00      	nop
 8005cc8:	3728      	adds	r7, #40	@ 0x28
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	bd80      	pop	{r7, pc}
 8005cce:	bf00      	nop
 8005cd0:	20013398 	.word	0x20013398
 8005cd4:	20013368 	.word	0x20013368

08005cd8 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8005cd8:	b480      	push	{r7}
 8005cda:	b083      	sub	sp, #12
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8005ce0:	4b04      	ldr	r3, [pc, #16]	@ (8005cf4 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8005ce2:	691b      	ldr	r3, [r3, #16]
 8005ce4:	687a      	ldr	r2, [r7, #4]
 8005ce6:	1ad3      	subs	r3, r2, r3
}
 8005ce8:	4618      	mov	r0, r3
 8005cea:	370c      	adds	r7, #12
 8005cec:	46bd      	mov	sp, r7
 8005cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf2:	4770      	bx	lr
 8005cf4:	20013368 	.word	0x20013368

08005cf8 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b08c      	sub	sp, #48	@ 0x30
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	4603      	mov	r3, r0
 8005d00:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8005d02:	4b3b      	ldr	r3, [pc, #236]	@ (8005df0 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d06d      	beq.n	8005de6 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8005d0a:	4b39      	ldr	r3, [pc, #228]	@ (8005df0 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (n = 0; n < ModuleId; n++) {
 8005d10:	2300      	movs	r3, #0
 8005d12:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005d14:	e008      	b.n	8005d28 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8005d16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d18:	691b      	ldr	r3, [r3, #16]
 8005d1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (pModule == 0) {
 8005d1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d007      	beq.n	8005d32 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8005d22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d24:	3301      	adds	r3, #1
 8005d26:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005d28:	79fb      	ldrb	r3, [r7, #7]
 8005d2a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005d2c:	429a      	cmp	r2, r3
 8005d2e:	d3f2      	bcc.n	8005d16 <SEGGER_SYSVIEW_SendModule+0x1e>
 8005d30:	e000      	b.n	8005d34 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8005d32:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8005d34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d055      	beq.n	8005de6 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005d3a:	f3ef 8311 	mrs	r3, BASEPRI
 8005d3e:	f04f 0120 	mov.w	r1, #32
 8005d42:	f381 8811 	msr	BASEPRI, r1
 8005d46:	617b      	str	r3, [r7, #20]
 8005d48:	482a      	ldr	r0, [pc, #168]	@ (8005df4 <SEGGER_SYSVIEW_SendModule+0xfc>)
 8005d4a:	f7fe ffce 	bl	8004cea <_PreparePacket>
 8005d4e:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8005d50:	693b      	ldr	r3, [r7, #16]
 8005d52:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d58:	79fb      	ldrb	r3, [r7, #7]
 8005d5a:	623b      	str	r3, [r7, #32]
 8005d5c:	e00b      	b.n	8005d76 <SEGGER_SYSVIEW_SendModule+0x7e>
 8005d5e:	6a3b      	ldr	r3, [r7, #32]
 8005d60:	b2da      	uxtb	r2, r3
 8005d62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d64:	1c59      	adds	r1, r3, #1
 8005d66:	6279      	str	r1, [r7, #36]	@ 0x24
 8005d68:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005d6c:	b2d2      	uxtb	r2, r2
 8005d6e:	701a      	strb	r2, [r3, #0]
 8005d70:	6a3b      	ldr	r3, [r7, #32]
 8005d72:	09db      	lsrs	r3, r3, #7
 8005d74:	623b      	str	r3, [r7, #32]
 8005d76:	6a3b      	ldr	r3, [r7, #32]
 8005d78:	2b7f      	cmp	r3, #127	@ 0x7f
 8005d7a:	d8f0      	bhi.n	8005d5e <SEGGER_SYSVIEW_SendModule+0x66>
 8005d7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d7e:	1c5a      	adds	r2, r3, #1
 8005d80:	627a      	str	r2, [r7, #36]	@ 0x24
 8005d82:	6a3a      	ldr	r2, [r7, #32]
 8005d84:	b2d2      	uxtb	r2, r2
 8005d86:	701a      	strb	r2, [r3, #0]
 8005d88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d8a:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	61fb      	str	r3, [r7, #28]
 8005d90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d92:	689b      	ldr	r3, [r3, #8]
 8005d94:	61bb      	str	r3, [r7, #24]
 8005d96:	e00b      	b.n	8005db0 <SEGGER_SYSVIEW_SendModule+0xb8>
 8005d98:	69bb      	ldr	r3, [r7, #24]
 8005d9a:	b2da      	uxtb	r2, r3
 8005d9c:	69fb      	ldr	r3, [r7, #28]
 8005d9e:	1c59      	adds	r1, r3, #1
 8005da0:	61f9      	str	r1, [r7, #28]
 8005da2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005da6:	b2d2      	uxtb	r2, r2
 8005da8:	701a      	strb	r2, [r3, #0]
 8005daa:	69bb      	ldr	r3, [r7, #24]
 8005dac:	09db      	lsrs	r3, r3, #7
 8005dae:	61bb      	str	r3, [r7, #24]
 8005db0:	69bb      	ldr	r3, [r7, #24]
 8005db2:	2b7f      	cmp	r3, #127	@ 0x7f
 8005db4:	d8f0      	bhi.n	8005d98 <SEGGER_SYSVIEW_SendModule+0xa0>
 8005db6:	69fb      	ldr	r3, [r7, #28]
 8005db8:	1c5a      	adds	r2, r3, #1
 8005dba:	61fa      	str	r2, [r7, #28]
 8005dbc:	69ba      	ldr	r2, [r7, #24]
 8005dbe:	b2d2      	uxtb	r2, r2
 8005dc0:	701a      	strb	r2, [r3, #0]
 8005dc2:	69fb      	ldr	r3, [r7, #28]
 8005dc4:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005dc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	2280      	movs	r2, #128	@ 0x80
 8005dcc:	4619      	mov	r1, r3
 8005dce:	68f8      	ldr	r0, [r7, #12]
 8005dd0:	f7fe ff3e 	bl	8004c50 <_EncodeStr>
 8005dd4:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8005dd6:	2216      	movs	r2, #22
 8005dd8:	68f9      	ldr	r1, [r7, #12]
 8005dda:	6938      	ldr	r0, [r7, #16]
 8005ddc:	f7ff f876 	bl	8004ecc <_SendPacket>
      RECORD_END();
 8005de0:	697b      	ldr	r3, [r7, #20]
 8005de2:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8005de6:	bf00      	nop
 8005de8:	3730      	adds	r7, #48	@ 0x30
 8005dea:	46bd      	mov	sp, r7
 8005dec:	bd80      	pop	{r7, pc}
 8005dee:	bf00      	nop
 8005df0:	20013390 	.word	0x20013390
 8005df4:	20013398 	.word	0x20013398

08005df8 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b082      	sub	sp, #8
 8005dfc:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8005dfe:	4b0c      	ldr	r3, [pc, #48]	@ (8005e30 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d00f      	beq.n	8005e26 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8005e06:	4b0a      	ldr	r3, [pc, #40]	@ (8005e30 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	68db      	ldr	r3, [r3, #12]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d002      	beq.n	8005e1a <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	68db      	ldr	r3, [r3, #12]
 8005e18:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	691b      	ldr	r3, [r3, #16]
 8005e1e:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d1f2      	bne.n	8005e0c <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8005e26:	bf00      	nop
 8005e28:	3708      	adds	r7, #8
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	bd80      	pop	{r7, pc}
 8005e2e:	bf00      	nop
 8005e30:	20013390 	.word	0x20013390

08005e34 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b086      	sub	sp, #24
 8005e38:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8005e3a:	f3ef 8311 	mrs	r3, BASEPRI
 8005e3e:	f04f 0120 	mov.w	r1, #32
 8005e42:	f381 8811 	msr	BASEPRI, r1
 8005e46:	60fb      	str	r3, [r7, #12]
 8005e48:	4817      	ldr	r0, [pc, #92]	@ (8005ea8 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8005e4a:	f7fe ff4e 	bl	8004cea <_PreparePacket>
 8005e4e:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	617b      	str	r3, [r7, #20]
 8005e58:	4b14      	ldr	r3, [pc, #80]	@ (8005eac <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8005e5a:	781b      	ldrb	r3, [r3, #0]
 8005e5c:	613b      	str	r3, [r7, #16]
 8005e5e:	e00b      	b.n	8005e78 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8005e60:	693b      	ldr	r3, [r7, #16]
 8005e62:	b2da      	uxtb	r2, r3
 8005e64:	697b      	ldr	r3, [r7, #20]
 8005e66:	1c59      	adds	r1, r3, #1
 8005e68:	6179      	str	r1, [r7, #20]
 8005e6a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005e6e:	b2d2      	uxtb	r2, r2
 8005e70:	701a      	strb	r2, [r3, #0]
 8005e72:	693b      	ldr	r3, [r7, #16]
 8005e74:	09db      	lsrs	r3, r3, #7
 8005e76:	613b      	str	r3, [r7, #16]
 8005e78:	693b      	ldr	r3, [r7, #16]
 8005e7a:	2b7f      	cmp	r3, #127	@ 0x7f
 8005e7c:	d8f0      	bhi.n	8005e60 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8005e7e:	697b      	ldr	r3, [r7, #20]
 8005e80:	1c5a      	adds	r2, r3, #1
 8005e82:	617a      	str	r2, [r7, #20]
 8005e84:	693a      	ldr	r2, [r7, #16]
 8005e86:	b2d2      	uxtb	r2, r2
 8005e88:	701a      	strb	r2, [r3, #0]
 8005e8a:	697b      	ldr	r3, [r7, #20]
 8005e8c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8005e8e:	221b      	movs	r2, #27
 8005e90:	6879      	ldr	r1, [r7, #4]
 8005e92:	68b8      	ldr	r0, [r7, #8]
 8005e94:	f7ff f81a 	bl	8004ecc <_SendPacket>
  RECORD_END();
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	f383 8811 	msr	BASEPRI, r3
}
 8005e9e:	bf00      	nop
 8005ea0:	3718      	adds	r7, #24
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	bd80      	pop	{r7, pc}
 8005ea6:	bf00      	nop
 8005ea8:	20013398 	.word	0x20013398
 8005eac:	20013394 	.word	0x20013394

08005eb0 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b08a      	sub	sp, #40	@ 0x28
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005eb8:	f3ef 8311 	mrs	r3, BASEPRI
 8005ebc:	f04f 0120 	mov.w	r1, #32
 8005ec0:	f381 8811 	msr	BASEPRI, r1
 8005ec4:	617b      	str	r3, [r7, #20]
 8005ec6:	4827      	ldr	r0, [pc, #156]	@ (8005f64 <SEGGER_SYSVIEW_Warn+0xb4>)
 8005ec8:	f7fe ff0f 	bl	8004cea <_PreparePacket>
 8005ecc:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005ece:	2280      	movs	r2, #128	@ 0x80
 8005ed0:	6879      	ldr	r1, [r7, #4]
 8005ed2:	6938      	ldr	r0, [r7, #16]
 8005ed4:	f7fe febc 	bl	8004c50 <_EncodeStr>
 8005ed8:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	627b      	str	r3, [r7, #36]	@ 0x24
 8005ede:	2301      	movs	r3, #1
 8005ee0:	623b      	str	r3, [r7, #32]
 8005ee2:	e00b      	b.n	8005efc <SEGGER_SYSVIEW_Warn+0x4c>
 8005ee4:	6a3b      	ldr	r3, [r7, #32]
 8005ee6:	b2da      	uxtb	r2, r3
 8005ee8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005eea:	1c59      	adds	r1, r3, #1
 8005eec:	6279      	str	r1, [r7, #36]	@ 0x24
 8005eee:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005ef2:	b2d2      	uxtb	r2, r2
 8005ef4:	701a      	strb	r2, [r3, #0]
 8005ef6:	6a3b      	ldr	r3, [r7, #32]
 8005ef8:	09db      	lsrs	r3, r3, #7
 8005efa:	623b      	str	r3, [r7, #32]
 8005efc:	6a3b      	ldr	r3, [r7, #32]
 8005efe:	2b7f      	cmp	r3, #127	@ 0x7f
 8005f00:	d8f0      	bhi.n	8005ee4 <SEGGER_SYSVIEW_Warn+0x34>
 8005f02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f04:	1c5a      	adds	r2, r3, #1
 8005f06:	627a      	str	r2, [r7, #36]	@ 0x24
 8005f08:	6a3a      	ldr	r2, [r7, #32]
 8005f0a:	b2d2      	uxtb	r2, r2
 8005f0c:	701a      	strb	r2, [r3, #0]
 8005f0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f10:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	61fb      	str	r3, [r7, #28]
 8005f16:	2300      	movs	r3, #0
 8005f18:	61bb      	str	r3, [r7, #24]
 8005f1a:	e00b      	b.n	8005f34 <SEGGER_SYSVIEW_Warn+0x84>
 8005f1c:	69bb      	ldr	r3, [r7, #24]
 8005f1e:	b2da      	uxtb	r2, r3
 8005f20:	69fb      	ldr	r3, [r7, #28]
 8005f22:	1c59      	adds	r1, r3, #1
 8005f24:	61f9      	str	r1, [r7, #28]
 8005f26:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005f2a:	b2d2      	uxtb	r2, r2
 8005f2c:	701a      	strb	r2, [r3, #0]
 8005f2e:	69bb      	ldr	r3, [r7, #24]
 8005f30:	09db      	lsrs	r3, r3, #7
 8005f32:	61bb      	str	r3, [r7, #24]
 8005f34:	69bb      	ldr	r3, [r7, #24]
 8005f36:	2b7f      	cmp	r3, #127	@ 0x7f
 8005f38:	d8f0      	bhi.n	8005f1c <SEGGER_SYSVIEW_Warn+0x6c>
 8005f3a:	69fb      	ldr	r3, [r7, #28]
 8005f3c:	1c5a      	adds	r2, r3, #1
 8005f3e:	61fa      	str	r2, [r7, #28]
 8005f40:	69ba      	ldr	r2, [r7, #24]
 8005f42:	b2d2      	uxtb	r2, r2
 8005f44:	701a      	strb	r2, [r3, #0]
 8005f46:	69fb      	ldr	r3, [r7, #28]
 8005f48:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005f4a:	221a      	movs	r2, #26
 8005f4c:	68f9      	ldr	r1, [r7, #12]
 8005f4e:	6938      	ldr	r0, [r7, #16]
 8005f50:	f7fe ffbc 	bl	8004ecc <_SendPacket>
  RECORD_END();
 8005f54:	697b      	ldr	r3, [r7, #20]
 8005f56:	f383 8811 	msr	BASEPRI, r3
}
 8005f5a:	bf00      	nop
 8005f5c:	3728      	adds	r7, #40	@ 0x28
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	bd80      	pop	{r7, pc}
 8005f62:	bf00      	nop
 8005f64:	20013398 	.word	0x20013398

08005f68 <_write_r>:
*   Low-level reentrant write function.
*   libc subroutines will use this system routine for output to all files,
*   including stdout.
*   Write data via RTT.
*/
_ssize_t _write_r(struct _reent *r, int file, const void *ptr, size_t len) {
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b084      	sub	sp, #16
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	60f8      	str	r0, [r7, #12]
 8005f70:	60b9      	str	r1, [r7, #8]
 8005f72:	607a      	str	r2, [r7, #4]
 8005f74:	603b      	str	r3, [r7, #0]
  (void) file;  /* Not used, avoid warning */
  (void) r;     /* Not used, avoid warning */
  SEGGER_RTT_Write(0, ptr, len);
 8005f76:	683a      	ldr	r2, [r7, #0]
 8005f78:	6879      	ldr	r1, [r7, #4]
 8005f7a:	2000      	movs	r0, #0
 8005f7c:	f7fe fe42 	bl	8004c04 <SEGGER_RTT_Write>
  return len;
 8005f80:	683b      	ldr	r3, [r7, #0]
}
 8005f82:	4618      	mov	r0, r3
 8005f84:	3710      	adds	r7, #16
 8005f86:	46bd      	mov	sp, r7
 8005f88:	bd80      	pop	{r7, pc}
	...

08005f8c <rand>:
 8005f8c:	4b16      	ldr	r3, [pc, #88]	@ (8005fe8 <rand+0x5c>)
 8005f8e:	b510      	push	{r4, lr}
 8005f90:	681c      	ldr	r4, [r3, #0]
 8005f92:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8005f94:	b9b3      	cbnz	r3, 8005fc4 <rand+0x38>
 8005f96:	2018      	movs	r0, #24
 8005f98:	f000 fa3e 	bl	8006418 <malloc>
 8005f9c:	4602      	mov	r2, r0
 8005f9e:	6320      	str	r0, [r4, #48]	@ 0x30
 8005fa0:	b920      	cbnz	r0, 8005fac <rand+0x20>
 8005fa2:	4b12      	ldr	r3, [pc, #72]	@ (8005fec <rand+0x60>)
 8005fa4:	4812      	ldr	r0, [pc, #72]	@ (8005ff0 <rand+0x64>)
 8005fa6:	2152      	movs	r1, #82	@ 0x52
 8005fa8:	f000 f9ce 	bl	8006348 <__assert_func>
 8005fac:	4911      	ldr	r1, [pc, #68]	@ (8005ff4 <rand+0x68>)
 8005fae:	4b12      	ldr	r3, [pc, #72]	@ (8005ff8 <rand+0x6c>)
 8005fb0:	e9c0 1300 	strd	r1, r3, [r0]
 8005fb4:	4b11      	ldr	r3, [pc, #68]	@ (8005ffc <rand+0x70>)
 8005fb6:	6083      	str	r3, [r0, #8]
 8005fb8:	230b      	movs	r3, #11
 8005fba:	8183      	strh	r3, [r0, #12]
 8005fbc:	2100      	movs	r1, #0
 8005fbe:	2001      	movs	r0, #1
 8005fc0:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8005fc4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8005fc6:	480e      	ldr	r0, [pc, #56]	@ (8006000 <rand+0x74>)
 8005fc8:	690b      	ldr	r3, [r1, #16]
 8005fca:	694c      	ldr	r4, [r1, #20]
 8005fcc:	4a0d      	ldr	r2, [pc, #52]	@ (8006004 <rand+0x78>)
 8005fce:	4358      	muls	r0, r3
 8005fd0:	fb02 0004 	mla	r0, r2, r4, r0
 8005fd4:	fba3 3202 	umull	r3, r2, r3, r2
 8005fd8:	3301      	adds	r3, #1
 8005fda:	eb40 0002 	adc.w	r0, r0, r2
 8005fde:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8005fe2:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8005fe6:	bd10      	pop	{r4, pc}
 8005fe8:	20000020 	.word	0x20000020
 8005fec:	08007086 	.word	0x08007086
 8005ff0:	0800709d 	.word	0x0800709d
 8005ff4:	abcd330e 	.word	0xabcd330e
 8005ff8:	e66d1234 	.word	0xe66d1234
 8005ffc:	0005deec 	.word	0x0005deec
 8006000:	5851f42d 	.word	0x5851f42d
 8006004:	4c957f2d 	.word	0x4c957f2d

08006008 <std>:
 8006008:	2300      	movs	r3, #0
 800600a:	b510      	push	{r4, lr}
 800600c:	4604      	mov	r4, r0
 800600e:	e9c0 3300 	strd	r3, r3, [r0]
 8006012:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006016:	6083      	str	r3, [r0, #8]
 8006018:	8181      	strh	r1, [r0, #12]
 800601a:	6643      	str	r3, [r0, #100]	@ 0x64
 800601c:	81c2      	strh	r2, [r0, #14]
 800601e:	6183      	str	r3, [r0, #24]
 8006020:	4619      	mov	r1, r3
 8006022:	2208      	movs	r2, #8
 8006024:	305c      	adds	r0, #92	@ 0x5c
 8006026:	f000 f916 	bl	8006256 <memset>
 800602a:	4b0d      	ldr	r3, [pc, #52]	@ (8006060 <std+0x58>)
 800602c:	6263      	str	r3, [r4, #36]	@ 0x24
 800602e:	4b0d      	ldr	r3, [pc, #52]	@ (8006064 <std+0x5c>)
 8006030:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006032:	4b0d      	ldr	r3, [pc, #52]	@ (8006068 <std+0x60>)
 8006034:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006036:	4b0d      	ldr	r3, [pc, #52]	@ (800606c <std+0x64>)
 8006038:	6323      	str	r3, [r4, #48]	@ 0x30
 800603a:	4b0d      	ldr	r3, [pc, #52]	@ (8006070 <std+0x68>)
 800603c:	6224      	str	r4, [r4, #32]
 800603e:	429c      	cmp	r4, r3
 8006040:	d006      	beq.n	8006050 <std+0x48>
 8006042:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006046:	4294      	cmp	r4, r2
 8006048:	d002      	beq.n	8006050 <std+0x48>
 800604a:	33d0      	adds	r3, #208	@ 0xd0
 800604c:	429c      	cmp	r4, r3
 800604e:	d105      	bne.n	800605c <std+0x54>
 8006050:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006054:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006058:	f000 b964 	b.w	8006324 <__retarget_lock_init_recursive>
 800605c:	bd10      	pop	{r4, pc}
 800605e:	bf00      	nop
 8006060:	080061b1 	.word	0x080061b1
 8006064:	080061d3 	.word	0x080061d3
 8006068:	0800620b 	.word	0x0800620b
 800606c:	0800622f 	.word	0x0800622f
 8006070:	2001347c 	.word	0x2001347c

08006074 <stdio_exit_handler>:
 8006074:	4a02      	ldr	r2, [pc, #8]	@ (8006080 <stdio_exit_handler+0xc>)
 8006076:	4903      	ldr	r1, [pc, #12]	@ (8006084 <stdio_exit_handler+0x10>)
 8006078:	4803      	ldr	r0, [pc, #12]	@ (8006088 <stdio_exit_handler+0x14>)
 800607a:	f000 b869 	b.w	8006150 <_fwalk_sglue>
 800607e:	bf00      	nop
 8006080:	20000014 	.word	0x20000014
 8006084:	08006c2d 	.word	0x08006c2d
 8006088:	20000024 	.word	0x20000024

0800608c <cleanup_stdio>:
 800608c:	6841      	ldr	r1, [r0, #4]
 800608e:	4b0c      	ldr	r3, [pc, #48]	@ (80060c0 <cleanup_stdio+0x34>)
 8006090:	4299      	cmp	r1, r3
 8006092:	b510      	push	{r4, lr}
 8006094:	4604      	mov	r4, r0
 8006096:	d001      	beq.n	800609c <cleanup_stdio+0x10>
 8006098:	f000 fdc8 	bl	8006c2c <_fflush_r>
 800609c:	68a1      	ldr	r1, [r4, #8]
 800609e:	4b09      	ldr	r3, [pc, #36]	@ (80060c4 <cleanup_stdio+0x38>)
 80060a0:	4299      	cmp	r1, r3
 80060a2:	d002      	beq.n	80060aa <cleanup_stdio+0x1e>
 80060a4:	4620      	mov	r0, r4
 80060a6:	f000 fdc1 	bl	8006c2c <_fflush_r>
 80060aa:	68e1      	ldr	r1, [r4, #12]
 80060ac:	4b06      	ldr	r3, [pc, #24]	@ (80060c8 <cleanup_stdio+0x3c>)
 80060ae:	4299      	cmp	r1, r3
 80060b0:	d004      	beq.n	80060bc <cleanup_stdio+0x30>
 80060b2:	4620      	mov	r0, r4
 80060b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80060b8:	f000 bdb8 	b.w	8006c2c <_fflush_r>
 80060bc:	bd10      	pop	{r4, pc}
 80060be:	bf00      	nop
 80060c0:	2001347c 	.word	0x2001347c
 80060c4:	200134e4 	.word	0x200134e4
 80060c8:	2001354c 	.word	0x2001354c

080060cc <global_stdio_init.part.0>:
 80060cc:	b510      	push	{r4, lr}
 80060ce:	4b0b      	ldr	r3, [pc, #44]	@ (80060fc <global_stdio_init.part.0+0x30>)
 80060d0:	4c0b      	ldr	r4, [pc, #44]	@ (8006100 <global_stdio_init.part.0+0x34>)
 80060d2:	4a0c      	ldr	r2, [pc, #48]	@ (8006104 <global_stdio_init.part.0+0x38>)
 80060d4:	601a      	str	r2, [r3, #0]
 80060d6:	4620      	mov	r0, r4
 80060d8:	2200      	movs	r2, #0
 80060da:	2104      	movs	r1, #4
 80060dc:	f7ff ff94 	bl	8006008 <std>
 80060e0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80060e4:	2201      	movs	r2, #1
 80060e6:	2109      	movs	r1, #9
 80060e8:	f7ff ff8e 	bl	8006008 <std>
 80060ec:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80060f0:	2202      	movs	r2, #2
 80060f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80060f6:	2112      	movs	r1, #18
 80060f8:	f7ff bf86 	b.w	8006008 <std>
 80060fc:	200135b4 	.word	0x200135b4
 8006100:	2001347c 	.word	0x2001347c
 8006104:	08006075 	.word	0x08006075

08006108 <__sfp_lock_acquire>:
 8006108:	4801      	ldr	r0, [pc, #4]	@ (8006110 <__sfp_lock_acquire+0x8>)
 800610a:	f000 b90c 	b.w	8006326 <__retarget_lock_acquire_recursive>
 800610e:	bf00      	nop
 8006110:	200135bd 	.word	0x200135bd

08006114 <__sfp_lock_release>:
 8006114:	4801      	ldr	r0, [pc, #4]	@ (800611c <__sfp_lock_release+0x8>)
 8006116:	f000 b907 	b.w	8006328 <__retarget_lock_release_recursive>
 800611a:	bf00      	nop
 800611c:	200135bd 	.word	0x200135bd

08006120 <__sinit>:
 8006120:	b510      	push	{r4, lr}
 8006122:	4604      	mov	r4, r0
 8006124:	f7ff fff0 	bl	8006108 <__sfp_lock_acquire>
 8006128:	6a23      	ldr	r3, [r4, #32]
 800612a:	b11b      	cbz	r3, 8006134 <__sinit+0x14>
 800612c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006130:	f7ff bff0 	b.w	8006114 <__sfp_lock_release>
 8006134:	4b04      	ldr	r3, [pc, #16]	@ (8006148 <__sinit+0x28>)
 8006136:	6223      	str	r3, [r4, #32]
 8006138:	4b04      	ldr	r3, [pc, #16]	@ (800614c <__sinit+0x2c>)
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d1f5      	bne.n	800612c <__sinit+0xc>
 8006140:	f7ff ffc4 	bl	80060cc <global_stdio_init.part.0>
 8006144:	e7f2      	b.n	800612c <__sinit+0xc>
 8006146:	bf00      	nop
 8006148:	0800608d 	.word	0x0800608d
 800614c:	200135b4 	.word	0x200135b4

08006150 <_fwalk_sglue>:
 8006150:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006154:	4607      	mov	r7, r0
 8006156:	4688      	mov	r8, r1
 8006158:	4614      	mov	r4, r2
 800615a:	2600      	movs	r6, #0
 800615c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006160:	f1b9 0901 	subs.w	r9, r9, #1
 8006164:	d505      	bpl.n	8006172 <_fwalk_sglue+0x22>
 8006166:	6824      	ldr	r4, [r4, #0]
 8006168:	2c00      	cmp	r4, #0
 800616a:	d1f7      	bne.n	800615c <_fwalk_sglue+0xc>
 800616c:	4630      	mov	r0, r6
 800616e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006172:	89ab      	ldrh	r3, [r5, #12]
 8006174:	2b01      	cmp	r3, #1
 8006176:	d907      	bls.n	8006188 <_fwalk_sglue+0x38>
 8006178:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800617c:	3301      	adds	r3, #1
 800617e:	d003      	beq.n	8006188 <_fwalk_sglue+0x38>
 8006180:	4629      	mov	r1, r5
 8006182:	4638      	mov	r0, r7
 8006184:	47c0      	blx	r8
 8006186:	4306      	orrs	r6, r0
 8006188:	3568      	adds	r5, #104	@ 0x68
 800618a:	e7e9      	b.n	8006160 <_fwalk_sglue+0x10>

0800618c <iprintf>:
 800618c:	b40f      	push	{r0, r1, r2, r3}
 800618e:	b507      	push	{r0, r1, r2, lr}
 8006190:	4906      	ldr	r1, [pc, #24]	@ (80061ac <iprintf+0x20>)
 8006192:	ab04      	add	r3, sp, #16
 8006194:	6808      	ldr	r0, [r1, #0]
 8006196:	f853 2b04 	ldr.w	r2, [r3], #4
 800619a:	6881      	ldr	r1, [r0, #8]
 800619c:	9301      	str	r3, [sp, #4]
 800619e:	f000 fa1b 	bl	80065d8 <_vfiprintf_r>
 80061a2:	b003      	add	sp, #12
 80061a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80061a8:	b004      	add	sp, #16
 80061aa:	4770      	bx	lr
 80061ac:	20000020 	.word	0x20000020

080061b0 <__sread>:
 80061b0:	b510      	push	{r4, lr}
 80061b2:	460c      	mov	r4, r1
 80061b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061b8:	f000 f878 	bl	80062ac <_read_r>
 80061bc:	2800      	cmp	r0, #0
 80061be:	bfab      	itete	ge
 80061c0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80061c2:	89a3      	ldrhlt	r3, [r4, #12]
 80061c4:	181b      	addge	r3, r3, r0
 80061c6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80061ca:	bfac      	ite	ge
 80061cc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80061ce:	81a3      	strhlt	r3, [r4, #12]
 80061d0:	bd10      	pop	{r4, pc}

080061d2 <__swrite>:
 80061d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061d6:	461f      	mov	r7, r3
 80061d8:	898b      	ldrh	r3, [r1, #12]
 80061da:	05db      	lsls	r3, r3, #23
 80061dc:	4605      	mov	r5, r0
 80061de:	460c      	mov	r4, r1
 80061e0:	4616      	mov	r6, r2
 80061e2:	d505      	bpl.n	80061f0 <__swrite+0x1e>
 80061e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061e8:	2302      	movs	r3, #2
 80061ea:	2200      	movs	r2, #0
 80061ec:	f000 f84c 	bl	8006288 <_lseek_r>
 80061f0:	89a3      	ldrh	r3, [r4, #12]
 80061f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80061f6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80061fa:	81a3      	strh	r3, [r4, #12]
 80061fc:	4632      	mov	r2, r6
 80061fe:	463b      	mov	r3, r7
 8006200:	4628      	mov	r0, r5
 8006202:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006206:	f7ff beaf 	b.w	8005f68 <_write_r>

0800620a <__sseek>:
 800620a:	b510      	push	{r4, lr}
 800620c:	460c      	mov	r4, r1
 800620e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006212:	f000 f839 	bl	8006288 <_lseek_r>
 8006216:	1c43      	adds	r3, r0, #1
 8006218:	89a3      	ldrh	r3, [r4, #12]
 800621a:	bf15      	itete	ne
 800621c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800621e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006222:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006226:	81a3      	strheq	r3, [r4, #12]
 8006228:	bf18      	it	ne
 800622a:	81a3      	strhne	r3, [r4, #12]
 800622c:	bd10      	pop	{r4, pc}

0800622e <__sclose>:
 800622e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006232:	f000 b819 	b.w	8006268 <_close_r>

08006236 <memcmp>:
 8006236:	b510      	push	{r4, lr}
 8006238:	3901      	subs	r1, #1
 800623a:	4402      	add	r2, r0
 800623c:	4290      	cmp	r0, r2
 800623e:	d101      	bne.n	8006244 <memcmp+0xe>
 8006240:	2000      	movs	r0, #0
 8006242:	e005      	b.n	8006250 <memcmp+0x1a>
 8006244:	7803      	ldrb	r3, [r0, #0]
 8006246:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800624a:	42a3      	cmp	r3, r4
 800624c:	d001      	beq.n	8006252 <memcmp+0x1c>
 800624e:	1b18      	subs	r0, r3, r4
 8006250:	bd10      	pop	{r4, pc}
 8006252:	3001      	adds	r0, #1
 8006254:	e7f2      	b.n	800623c <memcmp+0x6>

08006256 <memset>:
 8006256:	4402      	add	r2, r0
 8006258:	4603      	mov	r3, r0
 800625a:	4293      	cmp	r3, r2
 800625c:	d100      	bne.n	8006260 <memset+0xa>
 800625e:	4770      	bx	lr
 8006260:	f803 1b01 	strb.w	r1, [r3], #1
 8006264:	e7f9      	b.n	800625a <memset+0x4>
	...

08006268 <_close_r>:
 8006268:	b538      	push	{r3, r4, r5, lr}
 800626a:	4d06      	ldr	r5, [pc, #24]	@ (8006284 <_close_r+0x1c>)
 800626c:	2300      	movs	r3, #0
 800626e:	4604      	mov	r4, r0
 8006270:	4608      	mov	r0, r1
 8006272:	602b      	str	r3, [r5, #0]
 8006274:	f7fa fd4c 	bl	8000d10 <_close>
 8006278:	1c43      	adds	r3, r0, #1
 800627a:	d102      	bne.n	8006282 <_close_r+0x1a>
 800627c:	682b      	ldr	r3, [r5, #0]
 800627e:	b103      	cbz	r3, 8006282 <_close_r+0x1a>
 8006280:	6023      	str	r3, [r4, #0]
 8006282:	bd38      	pop	{r3, r4, r5, pc}
 8006284:	200135b8 	.word	0x200135b8

08006288 <_lseek_r>:
 8006288:	b538      	push	{r3, r4, r5, lr}
 800628a:	4d07      	ldr	r5, [pc, #28]	@ (80062a8 <_lseek_r+0x20>)
 800628c:	4604      	mov	r4, r0
 800628e:	4608      	mov	r0, r1
 8006290:	4611      	mov	r1, r2
 8006292:	2200      	movs	r2, #0
 8006294:	602a      	str	r2, [r5, #0]
 8006296:	461a      	mov	r2, r3
 8006298:	f7fa fd61 	bl	8000d5e <_lseek>
 800629c:	1c43      	adds	r3, r0, #1
 800629e:	d102      	bne.n	80062a6 <_lseek_r+0x1e>
 80062a0:	682b      	ldr	r3, [r5, #0]
 80062a2:	b103      	cbz	r3, 80062a6 <_lseek_r+0x1e>
 80062a4:	6023      	str	r3, [r4, #0]
 80062a6:	bd38      	pop	{r3, r4, r5, pc}
 80062a8:	200135b8 	.word	0x200135b8

080062ac <_read_r>:
 80062ac:	b538      	push	{r3, r4, r5, lr}
 80062ae:	4d07      	ldr	r5, [pc, #28]	@ (80062cc <_read_r+0x20>)
 80062b0:	4604      	mov	r4, r0
 80062b2:	4608      	mov	r0, r1
 80062b4:	4611      	mov	r1, r2
 80062b6:	2200      	movs	r2, #0
 80062b8:	602a      	str	r2, [r5, #0]
 80062ba:	461a      	mov	r2, r3
 80062bc:	f7fa fd0b 	bl	8000cd6 <_read>
 80062c0:	1c43      	adds	r3, r0, #1
 80062c2:	d102      	bne.n	80062ca <_read_r+0x1e>
 80062c4:	682b      	ldr	r3, [r5, #0]
 80062c6:	b103      	cbz	r3, 80062ca <_read_r+0x1e>
 80062c8:	6023      	str	r3, [r4, #0]
 80062ca:	bd38      	pop	{r3, r4, r5, pc}
 80062cc:	200135b8 	.word	0x200135b8

080062d0 <__errno>:
 80062d0:	4b01      	ldr	r3, [pc, #4]	@ (80062d8 <__errno+0x8>)
 80062d2:	6818      	ldr	r0, [r3, #0]
 80062d4:	4770      	bx	lr
 80062d6:	bf00      	nop
 80062d8:	20000020 	.word	0x20000020

080062dc <__libc_init_array>:
 80062dc:	b570      	push	{r4, r5, r6, lr}
 80062de:	4d0d      	ldr	r5, [pc, #52]	@ (8006314 <__libc_init_array+0x38>)
 80062e0:	4c0d      	ldr	r4, [pc, #52]	@ (8006318 <__libc_init_array+0x3c>)
 80062e2:	1b64      	subs	r4, r4, r5
 80062e4:	10a4      	asrs	r4, r4, #2
 80062e6:	2600      	movs	r6, #0
 80062e8:	42a6      	cmp	r6, r4
 80062ea:	d109      	bne.n	8006300 <__libc_init_array+0x24>
 80062ec:	4d0b      	ldr	r5, [pc, #44]	@ (800631c <__libc_init_array+0x40>)
 80062ee:	4c0c      	ldr	r4, [pc, #48]	@ (8006320 <__libc_init_array+0x44>)
 80062f0:	f000 fe58 	bl	8006fa4 <_init>
 80062f4:	1b64      	subs	r4, r4, r5
 80062f6:	10a4      	asrs	r4, r4, #2
 80062f8:	2600      	movs	r6, #0
 80062fa:	42a6      	cmp	r6, r4
 80062fc:	d105      	bne.n	800630a <__libc_init_array+0x2e>
 80062fe:	bd70      	pop	{r4, r5, r6, pc}
 8006300:	f855 3b04 	ldr.w	r3, [r5], #4
 8006304:	4798      	blx	r3
 8006306:	3601      	adds	r6, #1
 8006308:	e7ee      	b.n	80062e8 <__libc_init_array+0xc>
 800630a:	f855 3b04 	ldr.w	r3, [r5], #4
 800630e:	4798      	blx	r3
 8006310:	3601      	adds	r6, #1
 8006312:	e7f2      	b.n	80062fa <__libc_init_array+0x1e>
 8006314:	0800716c 	.word	0x0800716c
 8006318:	0800716c 	.word	0x0800716c
 800631c:	0800716c 	.word	0x0800716c
 8006320:	08007170 	.word	0x08007170

08006324 <__retarget_lock_init_recursive>:
 8006324:	4770      	bx	lr

08006326 <__retarget_lock_acquire_recursive>:
 8006326:	4770      	bx	lr

08006328 <__retarget_lock_release_recursive>:
 8006328:	4770      	bx	lr

0800632a <memcpy>:
 800632a:	440a      	add	r2, r1
 800632c:	4291      	cmp	r1, r2
 800632e:	f100 33ff 	add.w	r3, r0, #4294967295
 8006332:	d100      	bne.n	8006336 <memcpy+0xc>
 8006334:	4770      	bx	lr
 8006336:	b510      	push	{r4, lr}
 8006338:	f811 4b01 	ldrb.w	r4, [r1], #1
 800633c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006340:	4291      	cmp	r1, r2
 8006342:	d1f9      	bne.n	8006338 <memcpy+0xe>
 8006344:	bd10      	pop	{r4, pc}
	...

08006348 <__assert_func>:
 8006348:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800634a:	4614      	mov	r4, r2
 800634c:	461a      	mov	r2, r3
 800634e:	4b09      	ldr	r3, [pc, #36]	@ (8006374 <__assert_func+0x2c>)
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	4605      	mov	r5, r0
 8006354:	68d8      	ldr	r0, [r3, #12]
 8006356:	b954      	cbnz	r4, 800636e <__assert_func+0x26>
 8006358:	4b07      	ldr	r3, [pc, #28]	@ (8006378 <__assert_func+0x30>)
 800635a:	461c      	mov	r4, r3
 800635c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006360:	9100      	str	r1, [sp, #0]
 8006362:	462b      	mov	r3, r5
 8006364:	4905      	ldr	r1, [pc, #20]	@ (800637c <__assert_func+0x34>)
 8006366:	f000 fc89 	bl	8006c7c <fiprintf>
 800636a:	f000 fd3d 	bl	8006de8 <abort>
 800636e:	4b04      	ldr	r3, [pc, #16]	@ (8006380 <__assert_func+0x38>)
 8006370:	e7f4      	b.n	800635c <__assert_func+0x14>
 8006372:	bf00      	nop
 8006374:	20000020 	.word	0x20000020
 8006378:	08007130 	.word	0x08007130
 800637c:	08007102 	.word	0x08007102
 8006380:	080070f5 	.word	0x080070f5

08006384 <_free_r>:
 8006384:	b538      	push	{r3, r4, r5, lr}
 8006386:	4605      	mov	r5, r0
 8006388:	2900      	cmp	r1, #0
 800638a:	d041      	beq.n	8006410 <_free_r+0x8c>
 800638c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006390:	1f0c      	subs	r4, r1, #4
 8006392:	2b00      	cmp	r3, #0
 8006394:	bfb8      	it	lt
 8006396:	18e4      	addlt	r4, r4, r3
 8006398:	f000 f8e8 	bl	800656c <__malloc_lock>
 800639c:	4a1d      	ldr	r2, [pc, #116]	@ (8006414 <_free_r+0x90>)
 800639e:	6813      	ldr	r3, [r2, #0]
 80063a0:	b933      	cbnz	r3, 80063b0 <_free_r+0x2c>
 80063a2:	6063      	str	r3, [r4, #4]
 80063a4:	6014      	str	r4, [r2, #0]
 80063a6:	4628      	mov	r0, r5
 80063a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80063ac:	f000 b8e4 	b.w	8006578 <__malloc_unlock>
 80063b0:	42a3      	cmp	r3, r4
 80063b2:	d908      	bls.n	80063c6 <_free_r+0x42>
 80063b4:	6820      	ldr	r0, [r4, #0]
 80063b6:	1821      	adds	r1, r4, r0
 80063b8:	428b      	cmp	r3, r1
 80063ba:	bf01      	itttt	eq
 80063bc:	6819      	ldreq	r1, [r3, #0]
 80063be:	685b      	ldreq	r3, [r3, #4]
 80063c0:	1809      	addeq	r1, r1, r0
 80063c2:	6021      	streq	r1, [r4, #0]
 80063c4:	e7ed      	b.n	80063a2 <_free_r+0x1e>
 80063c6:	461a      	mov	r2, r3
 80063c8:	685b      	ldr	r3, [r3, #4]
 80063ca:	b10b      	cbz	r3, 80063d0 <_free_r+0x4c>
 80063cc:	42a3      	cmp	r3, r4
 80063ce:	d9fa      	bls.n	80063c6 <_free_r+0x42>
 80063d0:	6811      	ldr	r1, [r2, #0]
 80063d2:	1850      	adds	r0, r2, r1
 80063d4:	42a0      	cmp	r0, r4
 80063d6:	d10b      	bne.n	80063f0 <_free_r+0x6c>
 80063d8:	6820      	ldr	r0, [r4, #0]
 80063da:	4401      	add	r1, r0
 80063dc:	1850      	adds	r0, r2, r1
 80063de:	4283      	cmp	r3, r0
 80063e0:	6011      	str	r1, [r2, #0]
 80063e2:	d1e0      	bne.n	80063a6 <_free_r+0x22>
 80063e4:	6818      	ldr	r0, [r3, #0]
 80063e6:	685b      	ldr	r3, [r3, #4]
 80063e8:	6053      	str	r3, [r2, #4]
 80063ea:	4408      	add	r0, r1
 80063ec:	6010      	str	r0, [r2, #0]
 80063ee:	e7da      	b.n	80063a6 <_free_r+0x22>
 80063f0:	d902      	bls.n	80063f8 <_free_r+0x74>
 80063f2:	230c      	movs	r3, #12
 80063f4:	602b      	str	r3, [r5, #0]
 80063f6:	e7d6      	b.n	80063a6 <_free_r+0x22>
 80063f8:	6820      	ldr	r0, [r4, #0]
 80063fa:	1821      	adds	r1, r4, r0
 80063fc:	428b      	cmp	r3, r1
 80063fe:	bf04      	itt	eq
 8006400:	6819      	ldreq	r1, [r3, #0]
 8006402:	685b      	ldreq	r3, [r3, #4]
 8006404:	6063      	str	r3, [r4, #4]
 8006406:	bf04      	itt	eq
 8006408:	1809      	addeq	r1, r1, r0
 800640a:	6021      	streq	r1, [r4, #0]
 800640c:	6054      	str	r4, [r2, #4]
 800640e:	e7ca      	b.n	80063a6 <_free_r+0x22>
 8006410:	bd38      	pop	{r3, r4, r5, pc}
 8006412:	bf00      	nop
 8006414:	200135c4 	.word	0x200135c4

08006418 <malloc>:
 8006418:	4b02      	ldr	r3, [pc, #8]	@ (8006424 <malloc+0xc>)
 800641a:	4601      	mov	r1, r0
 800641c:	6818      	ldr	r0, [r3, #0]
 800641e:	f000 b825 	b.w	800646c <_malloc_r>
 8006422:	bf00      	nop
 8006424:	20000020 	.word	0x20000020

08006428 <sbrk_aligned>:
 8006428:	b570      	push	{r4, r5, r6, lr}
 800642a:	4e0f      	ldr	r6, [pc, #60]	@ (8006468 <sbrk_aligned+0x40>)
 800642c:	460c      	mov	r4, r1
 800642e:	6831      	ldr	r1, [r6, #0]
 8006430:	4605      	mov	r5, r0
 8006432:	b911      	cbnz	r1, 800643a <sbrk_aligned+0x12>
 8006434:	f000 fcc8 	bl	8006dc8 <_sbrk_r>
 8006438:	6030      	str	r0, [r6, #0]
 800643a:	4621      	mov	r1, r4
 800643c:	4628      	mov	r0, r5
 800643e:	f000 fcc3 	bl	8006dc8 <_sbrk_r>
 8006442:	1c43      	adds	r3, r0, #1
 8006444:	d103      	bne.n	800644e <sbrk_aligned+0x26>
 8006446:	f04f 34ff 	mov.w	r4, #4294967295
 800644a:	4620      	mov	r0, r4
 800644c:	bd70      	pop	{r4, r5, r6, pc}
 800644e:	1cc4      	adds	r4, r0, #3
 8006450:	f024 0403 	bic.w	r4, r4, #3
 8006454:	42a0      	cmp	r0, r4
 8006456:	d0f8      	beq.n	800644a <sbrk_aligned+0x22>
 8006458:	1a21      	subs	r1, r4, r0
 800645a:	4628      	mov	r0, r5
 800645c:	f000 fcb4 	bl	8006dc8 <_sbrk_r>
 8006460:	3001      	adds	r0, #1
 8006462:	d1f2      	bne.n	800644a <sbrk_aligned+0x22>
 8006464:	e7ef      	b.n	8006446 <sbrk_aligned+0x1e>
 8006466:	bf00      	nop
 8006468:	200135c0 	.word	0x200135c0

0800646c <_malloc_r>:
 800646c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006470:	1ccd      	adds	r5, r1, #3
 8006472:	f025 0503 	bic.w	r5, r5, #3
 8006476:	3508      	adds	r5, #8
 8006478:	2d0c      	cmp	r5, #12
 800647a:	bf38      	it	cc
 800647c:	250c      	movcc	r5, #12
 800647e:	2d00      	cmp	r5, #0
 8006480:	4606      	mov	r6, r0
 8006482:	db01      	blt.n	8006488 <_malloc_r+0x1c>
 8006484:	42a9      	cmp	r1, r5
 8006486:	d904      	bls.n	8006492 <_malloc_r+0x26>
 8006488:	230c      	movs	r3, #12
 800648a:	6033      	str	r3, [r6, #0]
 800648c:	2000      	movs	r0, #0
 800648e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006492:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006568 <_malloc_r+0xfc>
 8006496:	f000 f869 	bl	800656c <__malloc_lock>
 800649a:	f8d8 3000 	ldr.w	r3, [r8]
 800649e:	461c      	mov	r4, r3
 80064a0:	bb44      	cbnz	r4, 80064f4 <_malloc_r+0x88>
 80064a2:	4629      	mov	r1, r5
 80064a4:	4630      	mov	r0, r6
 80064a6:	f7ff ffbf 	bl	8006428 <sbrk_aligned>
 80064aa:	1c43      	adds	r3, r0, #1
 80064ac:	4604      	mov	r4, r0
 80064ae:	d158      	bne.n	8006562 <_malloc_r+0xf6>
 80064b0:	f8d8 4000 	ldr.w	r4, [r8]
 80064b4:	4627      	mov	r7, r4
 80064b6:	2f00      	cmp	r7, #0
 80064b8:	d143      	bne.n	8006542 <_malloc_r+0xd6>
 80064ba:	2c00      	cmp	r4, #0
 80064bc:	d04b      	beq.n	8006556 <_malloc_r+0xea>
 80064be:	6823      	ldr	r3, [r4, #0]
 80064c0:	4639      	mov	r1, r7
 80064c2:	4630      	mov	r0, r6
 80064c4:	eb04 0903 	add.w	r9, r4, r3
 80064c8:	f000 fc7e 	bl	8006dc8 <_sbrk_r>
 80064cc:	4581      	cmp	r9, r0
 80064ce:	d142      	bne.n	8006556 <_malloc_r+0xea>
 80064d0:	6821      	ldr	r1, [r4, #0]
 80064d2:	1a6d      	subs	r5, r5, r1
 80064d4:	4629      	mov	r1, r5
 80064d6:	4630      	mov	r0, r6
 80064d8:	f7ff ffa6 	bl	8006428 <sbrk_aligned>
 80064dc:	3001      	adds	r0, #1
 80064de:	d03a      	beq.n	8006556 <_malloc_r+0xea>
 80064e0:	6823      	ldr	r3, [r4, #0]
 80064e2:	442b      	add	r3, r5
 80064e4:	6023      	str	r3, [r4, #0]
 80064e6:	f8d8 3000 	ldr.w	r3, [r8]
 80064ea:	685a      	ldr	r2, [r3, #4]
 80064ec:	bb62      	cbnz	r2, 8006548 <_malloc_r+0xdc>
 80064ee:	f8c8 7000 	str.w	r7, [r8]
 80064f2:	e00f      	b.n	8006514 <_malloc_r+0xa8>
 80064f4:	6822      	ldr	r2, [r4, #0]
 80064f6:	1b52      	subs	r2, r2, r5
 80064f8:	d420      	bmi.n	800653c <_malloc_r+0xd0>
 80064fa:	2a0b      	cmp	r2, #11
 80064fc:	d917      	bls.n	800652e <_malloc_r+0xc2>
 80064fe:	1961      	adds	r1, r4, r5
 8006500:	42a3      	cmp	r3, r4
 8006502:	6025      	str	r5, [r4, #0]
 8006504:	bf18      	it	ne
 8006506:	6059      	strne	r1, [r3, #4]
 8006508:	6863      	ldr	r3, [r4, #4]
 800650a:	bf08      	it	eq
 800650c:	f8c8 1000 	streq.w	r1, [r8]
 8006510:	5162      	str	r2, [r4, r5]
 8006512:	604b      	str	r3, [r1, #4]
 8006514:	4630      	mov	r0, r6
 8006516:	f000 f82f 	bl	8006578 <__malloc_unlock>
 800651a:	f104 000b 	add.w	r0, r4, #11
 800651e:	1d23      	adds	r3, r4, #4
 8006520:	f020 0007 	bic.w	r0, r0, #7
 8006524:	1ac2      	subs	r2, r0, r3
 8006526:	bf1c      	itt	ne
 8006528:	1a1b      	subne	r3, r3, r0
 800652a:	50a3      	strne	r3, [r4, r2]
 800652c:	e7af      	b.n	800648e <_malloc_r+0x22>
 800652e:	6862      	ldr	r2, [r4, #4]
 8006530:	42a3      	cmp	r3, r4
 8006532:	bf0c      	ite	eq
 8006534:	f8c8 2000 	streq.w	r2, [r8]
 8006538:	605a      	strne	r2, [r3, #4]
 800653a:	e7eb      	b.n	8006514 <_malloc_r+0xa8>
 800653c:	4623      	mov	r3, r4
 800653e:	6864      	ldr	r4, [r4, #4]
 8006540:	e7ae      	b.n	80064a0 <_malloc_r+0x34>
 8006542:	463c      	mov	r4, r7
 8006544:	687f      	ldr	r7, [r7, #4]
 8006546:	e7b6      	b.n	80064b6 <_malloc_r+0x4a>
 8006548:	461a      	mov	r2, r3
 800654a:	685b      	ldr	r3, [r3, #4]
 800654c:	42a3      	cmp	r3, r4
 800654e:	d1fb      	bne.n	8006548 <_malloc_r+0xdc>
 8006550:	2300      	movs	r3, #0
 8006552:	6053      	str	r3, [r2, #4]
 8006554:	e7de      	b.n	8006514 <_malloc_r+0xa8>
 8006556:	230c      	movs	r3, #12
 8006558:	6033      	str	r3, [r6, #0]
 800655a:	4630      	mov	r0, r6
 800655c:	f000 f80c 	bl	8006578 <__malloc_unlock>
 8006560:	e794      	b.n	800648c <_malloc_r+0x20>
 8006562:	6005      	str	r5, [r0, #0]
 8006564:	e7d6      	b.n	8006514 <_malloc_r+0xa8>
 8006566:	bf00      	nop
 8006568:	200135c4 	.word	0x200135c4

0800656c <__malloc_lock>:
 800656c:	4801      	ldr	r0, [pc, #4]	@ (8006574 <__malloc_lock+0x8>)
 800656e:	f7ff beda 	b.w	8006326 <__retarget_lock_acquire_recursive>
 8006572:	bf00      	nop
 8006574:	200135bc 	.word	0x200135bc

08006578 <__malloc_unlock>:
 8006578:	4801      	ldr	r0, [pc, #4]	@ (8006580 <__malloc_unlock+0x8>)
 800657a:	f7ff bed5 	b.w	8006328 <__retarget_lock_release_recursive>
 800657e:	bf00      	nop
 8006580:	200135bc 	.word	0x200135bc

08006584 <__sfputc_r>:
 8006584:	6893      	ldr	r3, [r2, #8]
 8006586:	3b01      	subs	r3, #1
 8006588:	2b00      	cmp	r3, #0
 800658a:	b410      	push	{r4}
 800658c:	6093      	str	r3, [r2, #8]
 800658e:	da08      	bge.n	80065a2 <__sfputc_r+0x1e>
 8006590:	6994      	ldr	r4, [r2, #24]
 8006592:	42a3      	cmp	r3, r4
 8006594:	db01      	blt.n	800659a <__sfputc_r+0x16>
 8006596:	290a      	cmp	r1, #10
 8006598:	d103      	bne.n	80065a2 <__sfputc_r+0x1e>
 800659a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800659e:	f000 bb7f 	b.w	8006ca0 <__swbuf_r>
 80065a2:	6813      	ldr	r3, [r2, #0]
 80065a4:	1c58      	adds	r0, r3, #1
 80065a6:	6010      	str	r0, [r2, #0]
 80065a8:	7019      	strb	r1, [r3, #0]
 80065aa:	4608      	mov	r0, r1
 80065ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 80065b0:	4770      	bx	lr

080065b2 <__sfputs_r>:
 80065b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065b4:	4606      	mov	r6, r0
 80065b6:	460f      	mov	r7, r1
 80065b8:	4614      	mov	r4, r2
 80065ba:	18d5      	adds	r5, r2, r3
 80065bc:	42ac      	cmp	r4, r5
 80065be:	d101      	bne.n	80065c4 <__sfputs_r+0x12>
 80065c0:	2000      	movs	r0, #0
 80065c2:	e007      	b.n	80065d4 <__sfputs_r+0x22>
 80065c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80065c8:	463a      	mov	r2, r7
 80065ca:	4630      	mov	r0, r6
 80065cc:	f7ff ffda 	bl	8006584 <__sfputc_r>
 80065d0:	1c43      	adds	r3, r0, #1
 80065d2:	d1f3      	bne.n	80065bc <__sfputs_r+0xa>
 80065d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080065d8 <_vfiprintf_r>:
 80065d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065dc:	460d      	mov	r5, r1
 80065de:	b09d      	sub	sp, #116	@ 0x74
 80065e0:	4614      	mov	r4, r2
 80065e2:	4698      	mov	r8, r3
 80065e4:	4606      	mov	r6, r0
 80065e6:	b118      	cbz	r0, 80065f0 <_vfiprintf_r+0x18>
 80065e8:	6a03      	ldr	r3, [r0, #32]
 80065ea:	b90b      	cbnz	r3, 80065f0 <_vfiprintf_r+0x18>
 80065ec:	f7ff fd98 	bl	8006120 <__sinit>
 80065f0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80065f2:	07d9      	lsls	r1, r3, #31
 80065f4:	d405      	bmi.n	8006602 <_vfiprintf_r+0x2a>
 80065f6:	89ab      	ldrh	r3, [r5, #12]
 80065f8:	059a      	lsls	r2, r3, #22
 80065fa:	d402      	bmi.n	8006602 <_vfiprintf_r+0x2a>
 80065fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80065fe:	f7ff fe92 	bl	8006326 <__retarget_lock_acquire_recursive>
 8006602:	89ab      	ldrh	r3, [r5, #12]
 8006604:	071b      	lsls	r3, r3, #28
 8006606:	d501      	bpl.n	800660c <_vfiprintf_r+0x34>
 8006608:	692b      	ldr	r3, [r5, #16]
 800660a:	b99b      	cbnz	r3, 8006634 <_vfiprintf_r+0x5c>
 800660c:	4629      	mov	r1, r5
 800660e:	4630      	mov	r0, r6
 8006610:	f000 fb84 	bl	8006d1c <__swsetup_r>
 8006614:	b170      	cbz	r0, 8006634 <_vfiprintf_r+0x5c>
 8006616:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006618:	07dc      	lsls	r4, r3, #31
 800661a:	d504      	bpl.n	8006626 <_vfiprintf_r+0x4e>
 800661c:	f04f 30ff 	mov.w	r0, #4294967295
 8006620:	b01d      	add	sp, #116	@ 0x74
 8006622:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006626:	89ab      	ldrh	r3, [r5, #12]
 8006628:	0598      	lsls	r0, r3, #22
 800662a:	d4f7      	bmi.n	800661c <_vfiprintf_r+0x44>
 800662c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800662e:	f7ff fe7b 	bl	8006328 <__retarget_lock_release_recursive>
 8006632:	e7f3      	b.n	800661c <_vfiprintf_r+0x44>
 8006634:	2300      	movs	r3, #0
 8006636:	9309      	str	r3, [sp, #36]	@ 0x24
 8006638:	2320      	movs	r3, #32
 800663a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800663e:	f8cd 800c 	str.w	r8, [sp, #12]
 8006642:	2330      	movs	r3, #48	@ 0x30
 8006644:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80067f4 <_vfiprintf_r+0x21c>
 8006648:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800664c:	f04f 0901 	mov.w	r9, #1
 8006650:	4623      	mov	r3, r4
 8006652:	469a      	mov	sl, r3
 8006654:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006658:	b10a      	cbz	r2, 800665e <_vfiprintf_r+0x86>
 800665a:	2a25      	cmp	r2, #37	@ 0x25
 800665c:	d1f9      	bne.n	8006652 <_vfiprintf_r+0x7a>
 800665e:	ebba 0b04 	subs.w	fp, sl, r4
 8006662:	d00b      	beq.n	800667c <_vfiprintf_r+0xa4>
 8006664:	465b      	mov	r3, fp
 8006666:	4622      	mov	r2, r4
 8006668:	4629      	mov	r1, r5
 800666a:	4630      	mov	r0, r6
 800666c:	f7ff ffa1 	bl	80065b2 <__sfputs_r>
 8006670:	3001      	adds	r0, #1
 8006672:	f000 80a7 	beq.w	80067c4 <_vfiprintf_r+0x1ec>
 8006676:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006678:	445a      	add	r2, fp
 800667a:	9209      	str	r2, [sp, #36]	@ 0x24
 800667c:	f89a 3000 	ldrb.w	r3, [sl]
 8006680:	2b00      	cmp	r3, #0
 8006682:	f000 809f 	beq.w	80067c4 <_vfiprintf_r+0x1ec>
 8006686:	2300      	movs	r3, #0
 8006688:	f04f 32ff 	mov.w	r2, #4294967295
 800668c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006690:	f10a 0a01 	add.w	sl, sl, #1
 8006694:	9304      	str	r3, [sp, #16]
 8006696:	9307      	str	r3, [sp, #28]
 8006698:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800669c:	931a      	str	r3, [sp, #104]	@ 0x68
 800669e:	4654      	mov	r4, sl
 80066a0:	2205      	movs	r2, #5
 80066a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80066a6:	4853      	ldr	r0, [pc, #332]	@ (80067f4 <_vfiprintf_r+0x21c>)
 80066a8:	f7f9 fde2 	bl	8000270 <memchr>
 80066ac:	9a04      	ldr	r2, [sp, #16]
 80066ae:	b9d8      	cbnz	r0, 80066e8 <_vfiprintf_r+0x110>
 80066b0:	06d1      	lsls	r1, r2, #27
 80066b2:	bf44      	itt	mi
 80066b4:	2320      	movmi	r3, #32
 80066b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80066ba:	0713      	lsls	r3, r2, #28
 80066bc:	bf44      	itt	mi
 80066be:	232b      	movmi	r3, #43	@ 0x2b
 80066c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80066c4:	f89a 3000 	ldrb.w	r3, [sl]
 80066c8:	2b2a      	cmp	r3, #42	@ 0x2a
 80066ca:	d015      	beq.n	80066f8 <_vfiprintf_r+0x120>
 80066cc:	9a07      	ldr	r2, [sp, #28]
 80066ce:	4654      	mov	r4, sl
 80066d0:	2000      	movs	r0, #0
 80066d2:	f04f 0c0a 	mov.w	ip, #10
 80066d6:	4621      	mov	r1, r4
 80066d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80066dc:	3b30      	subs	r3, #48	@ 0x30
 80066de:	2b09      	cmp	r3, #9
 80066e0:	d94b      	bls.n	800677a <_vfiprintf_r+0x1a2>
 80066e2:	b1b0      	cbz	r0, 8006712 <_vfiprintf_r+0x13a>
 80066e4:	9207      	str	r2, [sp, #28]
 80066e6:	e014      	b.n	8006712 <_vfiprintf_r+0x13a>
 80066e8:	eba0 0308 	sub.w	r3, r0, r8
 80066ec:	fa09 f303 	lsl.w	r3, r9, r3
 80066f0:	4313      	orrs	r3, r2
 80066f2:	9304      	str	r3, [sp, #16]
 80066f4:	46a2      	mov	sl, r4
 80066f6:	e7d2      	b.n	800669e <_vfiprintf_r+0xc6>
 80066f8:	9b03      	ldr	r3, [sp, #12]
 80066fa:	1d19      	adds	r1, r3, #4
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	9103      	str	r1, [sp, #12]
 8006700:	2b00      	cmp	r3, #0
 8006702:	bfbb      	ittet	lt
 8006704:	425b      	neglt	r3, r3
 8006706:	f042 0202 	orrlt.w	r2, r2, #2
 800670a:	9307      	strge	r3, [sp, #28]
 800670c:	9307      	strlt	r3, [sp, #28]
 800670e:	bfb8      	it	lt
 8006710:	9204      	strlt	r2, [sp, #16]
 8006712:	7823      	ldrb	r3, [r4, #0]
 8006714:	2b2e      	cmp	r3, #46	@ 0x2e
 8006716:	d10a      	bne.n	800672e <_vfiprintf_r+0x156>
 8006718:	7863      	ldrb	r3, [r4, #1]
 800671a:	2b2a      	cmp	r3, #42	@ 0x2a
 800671c:	d132      	bne.n	8006784 <_vfiprintf_r+0x1ac>
 800671e:	9b03      	ldr	r3, [sp, #12]
 8006720:	1d1a      	adds	r2, r3, #4
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	9203      	str	r2, [sp, #12]
 8006726:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800672a:	3402      	adds	r4, #2
 800672c:	9305      	str	r3, [sp, #20]
 800672e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006804 <_vfiprintf_r+0x22c>
 8006732:	7821      	ldrb	r1, [r4, #0]
 8006734:	2203      	movs	r2, #3
 8006736:	4650      	mov	r0, sl
 8006738:	f7f9 fd9a 	bl	8000270 <memchr>
 800673c:	b138      	cbz	r0, 800674e <_vfiprintf_r+0x176>
 800673e:	9b04      	ldr	r3, [sp, #16]
 8006740:	eba0 000a 	sub.w	r0, r0, sl
 8006744:	2240      	movs	r2, #64	@ 0x40
 8006746:	4082      	lsls	r2, r0
 8006748:	4313      	orrs	r3, r2
 800674a:	3401      	adds	r4, #1
 800674c:	9304      	str	r3, [sp, #16]
 800674e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006752:	4829      	ldr	r0, [pc, #164]	@ (80067f8 <_vfiprintf_r+0x220>)
 8006754:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006758:	2206      	movs	r2, #6
 800675a:	f7f9 fd89 	bl	8000270 <memchr>
 800675e:	2800      	cmp	r0, #0
 8006760:	d03f      	beq.n	80067e2 <_vfiprintf_r+0x20a>
 8006762:	4b26      	ldr	r3, [pc, #152]	@ (80067fc <_vfiprintf_r+0x224>)
 8006764:	bb1b      	cbnz	r3, 80067ae <_vfiprintf_r+0x1d6>
 8006766:	9b03      	ldr	r3, [sp, #12]
 8006768:	3307      	adds	r3, #7
 800676a:	f023 0307 	bic.w	r3, r3, #7
 800676e:	3308      	adds	r3, #8
 8006770:	9303      	str	r3, [sp, #12]
 8006772:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006774:	443b      	add	r3, r7
 8006776:	9309      	str	r3, [sp, #36]	@ 0x24
 8006778:	e76a      	b.n	8006650 <_vfiprintf_r+0x78>
 800677a:	fb0c 3202 	mla	r2, ip, r2, r3
 800677e:	460c      	mov	r4, r1
 8006780:	2001      	movs	r0, #1
 8006782:	e7a8      	b.n	80066d6 <_vfiprintf_r+0xfe>
 8006784:	2300      	movs	r3, #0
 8006786:	3401      	adds	r4, #1
 8006788:	9305      	str	r3, [sp, #20]
 800678a:	4619      	mov	r1, r3
 800678c:	f04f 0c0a 	mov.w	ip, #10
 8006790:	4620      	mov	r0, r4
 8006792:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006796:	3a30      	subs	r2, #48	@ 0x30
 8006798:	2a09      	cmp	r2, #9
 800679a:	d903      	bls.n	80067a4 <_vfiprintf_r+0x1cc>
 800679c:	2b00      	cmp	r3, #0
 800679e:	d0c6      	beq.n	800672e <_vfiprintf_r+0x156>
 80067a0:	9105      	str	r1, [sp, #20]
 80067a2:	e7c4      	b.n	800672e <_vfiprintf_r+0x156>
 80067a4:	fb0c 2101 	mla	r1, ip, r1, r2
 80067a8:	4604      	mov	r4, r0
 80067aa:	2301      	movs	r3, #1
 80067ac:	e7f0      	b.n	8006790 <_vfiprintf_r+0x1b8>
 80067ae:	ab03      	add	r3, sp, #12
 80067b0:	9300      	str	r3, [sp, #0]
 80067b2:	462a      	mov	r2, r5
 80067b4:	4b12      	ldr	r3, [pc, #72]	@ (8006800 <_vfiprintf_r+0x228>)
 80067b6:	a904      	add	r1, sp, #16
 80067b8:	4630      	mov	r0, r6
 80067ba:	f3af 8000 	nop.w
 80067be:	4607      	mov	r7, r0
 80067c0:	1c78      	adds	r0, r7, #1
 80067c2:	d1d6      	bne.n	8006772 <_vfiprintf_r+0x19a>
 80067c4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80067c6:	07d9      	lsls	r1, r3, #31
 80067c8:	d405      	bmi.n	80067d6 <_vfiprintf_r+0x1fe>
 80067ca:	89ab      	ldrh	r3, [r5, #12]
 80067cc:	059a      	lsls	r2, r3, #22
 80067ce:	d402      	bmi.n	80067d6 <_vfiprintf_r+0x1fe>
 80067d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80067d2:	f7ff fda9 	bl	8006328 <__retarget_lock_release_recursive>
 80067d6:	89ab      	ldrh	r3, [r5, #12]
 80067d8:	065b      	lsls	r3, r3, #25
 80067da:	f53f af1f 	bmi.w	800661c <_vfiprintf_r+0x44>
 80067de:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80067e0:	e71e      	b.n	8006620 <_vfiprintf_r+0x48>
 80067e2:	ab03      	add	r3, sp, #12
 80067e4:	9300      	str	r3, [sp, #0]
 80067e6:	462a      	mov	r2, r5
 80067e8:	4b05      	ldr	r3, [pc, #20]	@ (8006800 <_vfiprintf_r+0x228>)
 80067ea:	a904      	add	r1, sp, #16
 80067ec:	4630      	mov	r0, r6
 80067ee:	f000 f879 	bl	80068e4 <_printf_i>
 80067f2:	e7e4      	b.n	80067be <_vfiprintf_r+0x1e6>
 80067f4:	08007131 	.word	0x08007131
 80067f8:	0800713b 	.word	0x0800713b
 80067fc:	00000000 	.word	0x00000000
 8006800:	080065b3 	.word	0x080065b3
 8006804:	08007137 	.word	0x08007137

08006808 <_printf_common>:
 8006808:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800680c:	4616      	mov	r6, r2
 800680e:	4698      	mov	r8, r3
 8006810:	688a      	ldr	r2, [r1, #8]
 8006812:	690b      	ldr	r3, [r1, #16]
 8006814:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006818:	4293      	cmp	r3, r2
 800681a:	bfb8      	it	lt
 800681c:	4613      	movlt	r3, r2
 800681e:	6033      	str	r3, [r6, #0]
 8006820:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006824:	4607      	mov	r7, r0
 8006826:	460c      	mov	r4, r1
 8006828:	b10a      	cbz	r2, 800682e <_printf_common+0x26>
 800682a:	3301      	adds	r3, #1
 800682c:	6033      	str	r3, [r6, #0]
 800682e:	6823      	ldr	r3, [r4, #0]
 8006830:	0699      	lsls	r1, r3, #26
 8006832:	bf42      	ittt	mi
 8006834:	6833      	ldrmi	r3, [r6, #0]
 8006836:	3302      	addmi	r3, #2
 8006838:	6033      	strmi	r3, [r6, #0]
 800683a:	6825      	ldr	r5, [r4, #0]
 800683c:	f015 0506 	ands.w	r5, r5, #6
 8006840:	d106      	bne.n	8006850 <_printf_common+0x48>
 8006842:	f104 0a19 	add.w	sl, r4, #25
 8006846:	68e3      	ldr	r3, [r4, #12]
 8006848:	6832      	ldr	r2, [r6, #0]
 800684a:	1a9b      	subs	r3, r3, r2
 800684c:	42ab      	cmp	r3, r5
 800684e:	dc26      	bgt.n	800689e <_printf_common+0x96>
 8006850:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006854:	6822      	ldr	r2, [r4, #0]
 8006856:	3b00      	subs	r3, #0
 8006858:	bf18      	it	ne
 800685a:	2301      	movne	r3, #1
 800685c:	0692      	lsls	r2, r2, #26
 800685e:	d42b      	bmi.n	80068b8 <_printf_common+0xb0>
 8006860:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006864:	4641      	mov	r1, r8
 8006866:	4638      	mov	r0, r7
 8006868:	47c8      	blx	r9
 800686a:	3001      	adds	r0, #1
 800686c:	d01e      	beq.n	80068ac <_printf_common+0xa4>
 800686e:	6823      	ldr	r3, [r4, #0]
 8006870:	6922      	ldr	r2, [r4, #16]
 8006872:	f003 0306 	and.w	r3, r3, #6
 8006876:	2b04      	cmp	r3, #4
 8006878:	bf02      	ittt	eq
 800687a:	68e5      	ldreq	r5, [r4, #12]
 800687c:	6833      	ldreq	r3, [r6, #0]
 800687e:	1aed      	subeq	r5, r5, r3
 8006880:	68a3      	ldr	r3, [r4, #8]
 8006882:	bf0c      	ite	eq
 8006884:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006888:	2500      	movne	r5, #0
 800688a:	4293      	cmp	r3, r2
 800688c:	bfc4      	itt	gt
 800688e:	1a9b      	subgt	r3, r3, r2
 8006890:	18ed      	addgt	r5, r5, r3
 8006892:	2600      	movs	r6, #0
 8006894:	341a      	adds	r4, #26
 8006896:	42b5      	cmp	r5, r6
 8006898:	d11a      	bne.n	80068d0 <_printf_common+0xc8>
 800689a:	2000      	movs	r0, #0
 800689c:	e008      	b.n	80068b0 <_printf_common+0xa8>
 800689e:	2301      	movs	r3, #1
 80068a0:	4652      	mov	r2, sl
 80068a2:	4641      	mov	r1, r8
 80068a4:	4638      	mov	r0, r7
 80068a6:	47c8      	blx	r9
 80068a8:	3001      	adds	r0, #1
 80068aa:	d103      	bne.n	80068b4 <_printf_common+0xac>
 80068ac:	f04f 30ff 	mov.w	r0, #4294967295
 80068b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068b4:	3501      	adds	r5, #1
 80068b6:	e7c6      	b.n	8006846 <_printf_common+0x3e>
 80068b8:	18e1      	adds	r1, r4, r3
 80068ba:	1c5a      	adds	r2, r3, #1
 80068bc:	2030      	movs	r0, #48	@ 0x30
 80068be:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80068c2:	4422      	add	r2, r4
 80068c4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80068c8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80068cc:	3302      	adds	r3, #2
 80068ce:	e7c7      	b.n	8006860 <_printf_common+0x58>
 80068d0:	2301      	movs	r3, #1
 80068d2:	4622      	mov	r2, r4
 80068d4:	4641      	mov	r1, r8
 80068d6:	4638      	mov	r0, r7
 80068d8:	47c8      	blx	r9
 80068da:	3001      	adds	r0, #1
 80068dc:	d0e6      	beq.n	80068ac <_printf_common+0xa4>
 80068de:	3601      	adds	r6, #1
 80068e0:	e7d9      	b.n	8006896 <_printf_common+0x8e>
	...

080068e4 <_printf_i>:
 80068e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80068e8:	7e0f      	ldrb	r7, [r1, #24]
 80068ea:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80068ec:	2f78      	cmp	r7, #120	@ 0x78
 80068ee:	4691      	mov	r9, r2
 80068f0:	4680      	mov	r8, r0
 80068f2:	460c      	mov	r4, r1
 80068f4:	469a      	mov	sl, r3
 80068f6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80068fa:	d807      	bhi.n	800690c <_printf_i+0x28>
 80068fc:	2f62      	cmp	r7, #98	@ 0x62
 80068fe:	d80a      	bhi.n	8006916 <_printf_i+0x32>
 8006900:	2f00      	cmp	r7, #0
 8006902:	f000 80d2 	beq.w	8006aaa <_printf_i+0x1c6>
 8006906:	2f58      	cmp	r7, #88	@ 0x58
 8006908:	f000 80b9 	beq.w	8006a7e <_printf_i+0x19a>
 800690c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006910:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006914:	e03a      	b.n	800698c <_printf_i+0xa8>
 8006916:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800691a:	2b15      	cmp	r3, #21
 800691c:	d8f6      	bhi.n	800690c <_printf_i+0x28>
 800691e:	a101      	add	r1, pc, #4	@ (adr r1, 8006924 <_printf_i+0x40>)
 8006920:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006924:	0800697d 	.word	0x0800697d
 8006928:	08006991 	.word	0x08006991
 800692c:	0800690d 	.word	0x0800690d
 8006930:	0800690d 	.word	0x0800690d
 8006934:	0800690d 	.word	0x0800690d
 8006938:	0800690d 	.word	0x0800690d
 800693c:	08006991 	.word	0x08006991
 8006940:	0800690d 	.word	0x0800690d
 8006944:	0800690d 	.word	0x0800690d
 8006948:	0800690d 	.word	0x0800690d
 800694c:	0800690d 	.word	0x0800690d
 8006950:	08006a91 	.word	0x08006a91
 8006954:	080069bb 	.word	0x080069bb
 8006958:	08006a4b 	.word	0x08006a4b
 800695c:	0800690d 	.word	0x0800690d
 8006960:	0800690d 	.word	0x0800690d
 8006964:	08006ab3 	.word	0x08006ab3
 8006968:	0800690d 	.word	0x0800690d
 800696c:	080069bb 	.word	0x080069bb
 8006970:	0800690d 	.word	0x0800690d
 8006974:	0800690d 	.word	0x0800690d
 8006978:	08006a53 	.word	0x08006a53
 800697c:	6833      	ldr	r3, [r6, #0]
 800697e:	1d1a      	adds	r2, r3, #4
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	6032      	str	r2, [r6, #0]
 8006984:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006988:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800698c:	2301      	movs	r3, #1
 800698e:	e09d      	b.n	8006acc <_printf_i+0x1e8>
 8006990:	6833      	ldr	r3, [r6, #0]
 8006992:	6820      	ldr	r0, [r4, #0]
 8006994:	1d19      	adds	r1, r3, #4
 8006996:	6031      	str	r1, [r6, #0]
 8006998:	0606      	lsls	r6, r0, #24
 800699a:	d501      	bpl.n	80069a0 <_printf_i+0xbc>
 800699c:	681d      	ldr	r5, [r3, #0]
 800699e:	e003      	b.n	80069a8 <_printf_i+0xc4>
 80069a0:	0645      	lsls	r5, r0, #25
 80069a2:	d5fb      	bpl.n	800699c <_printf_i+0xb8>
 80069a4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80069a8:	2d00      	cmp	r5, #0
 80069aa:	da03      	bge.n	80069b4 <_printf_i+0xd0>
 80069ac:	232d      	movs	r3, #45	@ 0x2d
 80069ae:	426d      	negs	r5, r5
 80069b0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80069b4:	4859      	ldr	r0, [pc, #356]	@ (8006b1c <_printf_i+0x238>)
 80069b6:	230a      	movs	r3, #10
 80069b8:	e011      	b.n	80069de <_printf_i+0xfa>
 80069ba:	6821      	ldr	r1, [r4, #0]
 80069bc:	6833      	ldr	r3, [r6, #0]
 80069be:	0608      	lsls	r0, r1, #24
 80069c0:	f853 5b04 	ldr.w	r5, [r3], #4
 80069c4:	d402      	bmi.n	80069cc <_printf_i+0xe8>
 80069c6:	0649      	lsls	r1, r1, #25
 80069c8:	bf48      	it	mi
 80069ca:	b2ad      	uxthmi	r5, r5
 80069cc:	2f6f      	cmp	r7, #111	@ 0x6f
 80069ce:	4853      	ldr	r0, [pc, #332]	@ (8006b1c <_printf_i+0x238>)
 80069d0:	6033      	str	r3, [r6, #0]
 80069d2:	bf14      	ite	ne
 80069d4:	230a      	movne	r3, #10
 80069d6:	2308      	moveq	r3, #8
 80069d8:	2100      	movs	r1, #0
 80069da:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80069de:	6866      	ldr	r6, [r4, #4]
 80069e0:	60a6      	str	r6, [r4, #8]
 80069e2:	2e00      	cmp	r6, #0
 80069e4:	bfa2      	ittt	ge
 80069e6:	6821      	ldrge	r1, [r4, #0]
 80069e8:	f021 0104 	bicge.w	r1, r1, #4
 80069ec:	6021      	strge	r1, [r4, #0]
 80069ee:	b90d      	cbnz	r5, 80069f4 <_printf_i+0x110>
 80069f0:	2e00      	cmp	r6, #0
 80069f2:	d04b      	beq.n	8006a8c <_printf_i+0x1a8>
 80069f4:	4616      	mov	r6, r2
 80069f6:	fbb5 f1f3 	udiv	r1, r5, r3
 80069fa:	fb03 5711 	mls	r7, r3, r1, r5
 80069fe:	5dc7      	ldrb	r7, [r0, r7]
 8006a00:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006a04:	462f      	mov	r7, r5
 8006a06:	42bb      	cmp	r3, r7
 8006a08:	460d      	mov	r5, r1
 8006a0a:	d9f4      	bls.n	80069f6 <_printf_i+0x112>
 8006a0c:	2b08      	cmp	r3, #8
 8006a0e:	d10b      	bne.n	8006a28 <_printf_i+0x144>
 8006a10:	6823      	ldr	r3, [r4, #0]
 8006a12:	07df      	lsls	r7, r3, #31
 8006a14:	d508      	bpl.n	8006a28 <_printf_i+0x144>
 8006a16:	6923      	ldr	r3, [r4, #16]
 8006a18:	6861      	ldr	r1, [r4, #4]
 8006a1a:	4299      	cmp	r1, r3
 8006a1c:	bfde      	ittt	le
 8006a1e:	2330      	movle	r3, #48	@ 0x30
 8006a20:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006a24:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006a28:	1b92      	subs	r2, r2, r6
 8006a2a:	6122      	str	r2, [r4, #16]
 8006a2c:	f8cd a000 	str.w	sl, [sp]
 8006a30:	464b      	mov	r3, r9
 8006a32:	aa03      	add	r2, sp, #12
 8006a34:	4621      	mov	r1, r4
 8006a36:	4640      	mov	r0, r8
 8006a38:	f7ff fee6 	bl	8006808 <_printf_common>
 8006a3c:	3001      	adds	r0, #1
 8006a3e:	d14a      	bne.n	8006ad6 <_printf_i+0x1f2>
 8006a40:	f04f 30ff 	mov.w	r0, #4294967295
 8006a44:	b004      	add	sp, #16
 8006a46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a4a:	6823      	ldr	r3, [r4, #0]
 8006a4c:	f043 0320 	orr.w	r3, r3, #32
 8006a50:	6023      	str	r3, [r4, #0]
 8006a52:	4833      	ldr	r0, [pc, #204]	@ (8006b20 <_printf_i+0x23c>)
 8006a54:	2778      	movs	r7, #120	@ 0x78
 8006a56:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006a5a:	6823      	ldr	r3, [r4, #0]
 8006a5c:	6831      	ldr	r1, [r6, #0]
 8006a5e:	061f      	lsls	r7, r3, #24
 8006a60:	f851 5b04 	ldr.w	r5, [r1], #4
 8006a64:	d402      	bmi.n	8006a6c <_printf_i+0x188>
 8006a66:	065f      	lsls	r7, r3, #25
 8006a68:	bf48      	it	mi
 8006a6a:	b2ad      	uxthmi	r5, r5
 8006a6c:	6031      	str	r1, [r6, #0]
 8006a6e:	07d9      	lsls	r1, r3, #31
 8006a70:	bf44      	itt	mi
 8006a72:	f043 0320 	orrmi.w	r3, r3, #32
 8006a76:	6023      	strmi	r3, [r4, #0]
 8006a78:	b11d      	cbz	r5, 8006a82 <_printf_i+0x19e>
 8006a7a:	2310      	movs	r3, #16
 8006a7c:	e7ac      	b.n	80069d8 <_printf_i+0xf4>
 8006a7e:	4827      	ldr	r0, [pc, #156]	@ (8006b1c <_printf_i+0x238>)
 8006a80:	e7e9      	b.n	8006a56 <_printf_i+0x172>
 8006a82:	6823      	ldr	r3, [r4, #0]
 8006a84:	f023 0320 	bic.w	r3, r3, #32
 8006a88:	6023      	str	r3, [r4, #0]
 8006a8a:	e7f6      	b.n	8006a7a <_printf_i+0x196>
 8006a8c:	4616      	mov	r6, r2
 8006a8e:	e7bd      	b.n	8006a0c <_printf_i+0x128>
 8006a90:	6833      	ldr	r3, [r6, #0]
 8006a92:	6825      	ldr	r5, [r4, #0]
 8006a94:	6961      	ldr	r1, [r4, #20]
 8006a96:	1d18      	adds	r0, r3, #4
 8006a98:	6030      	str	r0, [r6, #0]
 8006a9a:	062e      	lsls	r6, r5, #24
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	d501      	bpl.n	8006aa4 <_printf_i+0x1c0>
 8006aa0:	6019      	str	r1, [r3, #0]
 8006aa2:	e002      	b.n	8006aaa <_printf_i+0x1c6>
 8006aa4:	0668      	lsls	r0, r5, #25
 8006aa6:	d5fb      	bpl.n	8006aa0 <_printf_i+0x1bc>
 8006aa8:	8019      	strh	r1, [r3, #0]
 8006aaa:	2300      	movs	r3, #0
 8006aac:	6123      	str	r3, [r4, #16]
 8006aae:	4616      	mov	r6, r2
 8006ab0:	e7bc      	b.n	8006a2c <_printf_i+0x148>
 8006ab2:	6833      	ldr	r3, [r6, #0]
 8006ab4:	1d1a      	adds	r2, r3, #4
 8006ab6:	6032      	str	r2, [r6, #0]
 8006ab8:	681e      	ldr	r6, [r3, #0]
 8006aba:	6862      	ldr	r2, [r4, #4]
 8006abc:	2100      	movs	r1, #0
 8006abe:	4630      	mov	r0, r6
 8006ac0:	f7f9 fbd6 	bl	8000270 <memchr>
 8006ac4:	b108      	cbz	r0, 8006aca <_printf_i+0x1e6>
 8006ac6:	1b80      	subs	r0, r0, r6
 8006ac8:	6060      	str	r0, [r4, #4]
 8006aca:	6863      	ldr	r3, [r4, #4]
 8006acc:	6123      	str	r3, [r4, #16]
 8006ace:	2300      	movs	r3, #0
 8006ad0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006ad4:	e7aa      	b.n	8006a2c <_printf_i+0x148>
 8006ad6:	6923      	ldr	r3, [r4, #16]
 8006ad8:	4632      	mov	r2, r6
 8006ada:	4649      	mov	r1, r9
 8006adc:	4640      	mov	r0, r8
 8006ade:	47d0      	blx	sl
 8006ae0:	3001      	adds	r0, #1
 8006ae2:	d0ad      	beq.n	8006a40 <_printf_i+0x15c>
 8006ae4:	6823      	ldr	r3, [r4, #0]
 8006ae6:	079b      	lsls	r3, r3, #30
 8006ae8:	d413      	bmi.n	8006b12 <_printf_i+0x22e>
 8006aea:	68e0      	ldr	r0, [r4, #12]
 8006aec:	9b03      	ldr	r3, [sp, #12]
 8006aee:	4298      	cmp	r0, r3
 8006af0:	bfb8      	it	lt
 8006af2:	4618      	movlt	r0, r3
 8006af4:	e7a6      	b.n	8006a44 <_printf_i+0x160>
 8006af6:	2301      	movs	r3, #1
 8006af8:	4632      	mov	r2, r6
 8006afa:	4649      	mov	r1, r9
 8006afc:	4640      	mov	r0, r8
 8006afe:	47d0      	blx	sl
 8006b00:	3001      	adds	r0, #1
 8006b02:	d09d      	beq.n	8006a40 <_printf_i+0x15c>
 8006b04:	3501      	adds	r5, #1
 8006b06:	68e3      	ldr	r3, [r4, #12]
 8006b08:	9903      	ldr	r1, [sp, #12]
 8006b0a:	1a5b      	subs	r3, r3, r1
 8006b0c:	42ab      	cmp	r3, r5
 8006b0e:	dcf2      	bgt.n	8006af6 <_printf_i+0x212>
 8006b10:	e7eb      	b.n	8006aea <_printf_i+0x206>
 8006b12:	2500      	movs	r5, #0
 8006b14:	f104 0619 	add.w	r6, r4, #25
 8006b18:	e7f5      	b.n	8006b06 <_printf_i+0x222>
 8006b1a:	bf00      	nop
 8006b1c:	08007142 	.word	0x08007142
 8006b20:	08007153 	.word	0x08007153

08006b24 <__sflush_r>:
 8006b24:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006b28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b2c:	0716      	lsls	r6, r2, #28
 8006b2e:	4605      	mov	r5, r0
 8006b30:	460c      	mov	r4, r1
 8006b32:	d454      	bmi.n	8006bde <__sflush_r+0xba>
 8006b34:	684b      	ldr	r3, [r1, #4]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	dc02      	bgt.n	8006b40 <__sflush_r+0x1c>
 8006b3a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	dd48      	ble.n	8006bd2 <__sflush_r+0xae>
 8006b40:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006b42:	2e00      	cmp	r6, #0
 8006b44:	d045      	beq.n	8006bd2 <__sflush_r+0xae>
 8006b46:	2300      	movs	r3, #0
 8006b48:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006b4c:	682f      	ldr	r7, [r5, #0]
 8006b4e:	6a21      	ldr	r1, [r4, #32]
 8006b50:	602b      	str	r3, [r5, #0]
 8006b52:	d030      	beq.n	8006bb6 <__sflush_r+0x92>
 8006b54:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006b56:	89a3      	ldrh	r3, [r4, #12]
 8006b58:	0759      	lsls	r1, r3, #29
 8006b5a:	d505      	bpl.n	8006b68 <__sflush_r+0x44>
 8006b5c:	6863      	ldr	r3, [r4, #4]
 8006b5e:	1ad2      	subs	r2, r2, r3
 8006b60:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006b62:	b10b      	cbz	r3, 8006b68 <__sflush_r+0x44>
 8006b64:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006b66:	1ad2      	subs	r2, r2, r3
 8006b68:	2300      	movs	r3, #0
 8006b6a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006b6c:	6a21      	ldr	r1, [r4, #32]
 8006b6e:	4628      	mov	r0, r5
 8006b70:	47b0      	blx	r6
 8006b72:	1c43      	adds	r3, r0, #1
 8006b74:	89a3      	ldrh	r3, [r4, #12]
 8006b76:	d106      	bne.n	8006b86 <__sflush_r+0x62>
 8006b78:	6829      	ldr	r1, [r5, #0]
 8006b7a:	291d      	cmp	r1, #29
 8006b7c:	d82b      	bhi.n	8006bd6 <__sflush_r+0xb2>
 8006b7e:	4a2a      	ldr	r2, [pc, #168]	@ (8006c28 <__sflush_r+0x104>)
 8006b80:	410a      	asrs	r2, r1
 8006b82:	07d6      	lsls	r6, r2, #31
 8006b84:	d427      	bmi.n	8006bd6 <__sflush_r+0xb2>
 8006b86:	2200      	movs	r2, #0
 8006b88:	6062      	str	r2, [r4, #4]
 8006b8a:	04d9      	lsls	r1, r3, #19
 8006b8c:	6922      	ldr	r2, [r4, #16]
 8006b8e:	6022      	str	r2, [r4, #0]
 8006b90:	d504      	bpl.n	8006b9c <__sflush_r+0x78>
 8006b92:	1c42      	adds	r2, r0, #1
 8006b94:	d101      	bne.n	8006b9a <__sflush_r+0x76>
 8006b96:	682b      	ldr	r3, [r5, #0]
 8006b98:	b903      	cbnz	r3, 8006b9c <__sflush_r+0x78>
 8006b9a:	6560      	str	r0, [r4, #84]	@ 0x54
 8006b9c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006b9e:	602f      	str	r7, [r5, #0]
 8006ba0:	b1b9      	cbz	r1, 8006bd2 <__sflush_r+0xae>
 8006ba2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006ba6:	4299      	cmp	r1, r3
 8006ba8:	d002      	beq.n	8006bb0 <__sflush_r+0x8c>
 8006baa:	4628      	mov	r0, r5
 8006bac:	f7ff fbea 	bl	8006384 <_free_r>
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	6363      	str	r3, [r4, #52]	@ 0x34
 8006bb4:	e00d      	b.n	8006bd2 <__sflush_r+0xae>
 8006bb6:	2301      	movs	r3, #1
 8006bb8:	4628      	mov	r0, r5
 8006bba:	47b0      	blx	r6
 8006bbc:	4602      	mov	r2, r0
 8006bbe:	1c50      	adds	r0, r2, #1
 8006bc0:	d1c9      	bne.n	8006b56 <__sflush_r+0x32>
 8006bc2:	682b      	ldr	r3, [r5, #0]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d0c6      	beq.n	8006b56 <__sflush_r+0x32>
 8006bc8:	2b1d      	cmp	r3, #29
 8006bca:	d001      	beq.n	8006bd0 <__sflush_r+0xac>
 8006bcc:	2b16      	cmp	r3, #22
 8006bce:	d11e      	bne.n	8006c0e <__sflush_r+0xea>
 8006bd0:	602f      	str	r7, [r5, #0]
 8006bd2:	2000      	movs	r0, #0
 8006bd4:	e022      	b.n	8006c1c <__sflush_r+0xf8>
 8006bd6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006bda:	b21b      	sxth	r3, r3
 8006bdc:	e01b      	b.n	8006c16 <__sflush_r+0xf2>
 8006bde:	690f      	ldr	r7, [r1, #16]
 8006be0:	2f00      	cmp	r7, #0
 8006be2:	d0f6      	beq.n	8006bd2 <__sflush_r+0xae>
 8006be4:	0793      	lsls	r3, r2, #30
 8006be6:	680e      	ldr	r6, [r1, #0]
 8006be8:	bf08      	it	eq
 8006bea:	694b      	ldreq	r3, [r1, #20]
 8006bec:	600f      	str	r7, [r1, #0]
 8006bee:	bf18      	it	ne
 8006bf0:	2300      	movne	r3, #0
 8006bf2:	eba6 0807 	sub.w	r8, r6, r7
 8006bf6:	608b      	str	r3, [r1, #8]
 8006bf8:	f1b8 0f00 	cmp.w	r8, #0
 8006bfc:	dde9      	ble.n	8006bd2 <__sflush_r+0xae>
 8006bfe:	6a21      	ldr	r1, [r4, #32]
 8006c00:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006c02:	4643      	mov	r3, r8
 8006c04:	463a      	mov	r2, r7
 8006c06:	4628      	mov	r0, r5
 8006c08:	47b0      	blx	r6
 8006c0a:	2800      	cmp	r0, #0
 8006c0c:	dc08      	bgt.n	8006c20 <__sflush_r+0xfc>
 8006c0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c12:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006c16:	81a3      	strh	r3, [r4, #12]
 8006c18:	f04f 30ff 	mov.w	r0, #4294967295
 8006c1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c20:	4407      	add	r7, r0
 8006c22:	eba8 0800 	sub.w	r8, r8, r0
 8006c26:	e7e7      	b.n	8006bf8 <__sflush_r+0xd4>
 8006c28:	dfbffffe 	.word	0xdfbffffe

08006c2c <_fflush_r>:
 8006c2c:	b538      	push	{r3, r4, r5, lr}
 8006c2e:	690b      	ldr	r3, [r1, #16]
 8006c30:	4605      	mov	r5, r0
 8006c32:	460c      	mov	r4, r1
 8006c34:	b913      	cbnz	r3, 8006c3c <_fflush_r+0x10>
 8006c36:	2500      	movs	r5, #0
 8006c38:	4628      	mov	r0, r5
 8006c3a:	bd38      	pop	{r3, r4, r5, pc}
 8006c3c:	b118      	cbz	r0, 8006c46 <_fflush_r+0x1a>
 8006c3e:	6a03      	ldr	r3, [r0, #32]
 8006c40:	b90b      	cbnz	r3, 8006c46 <_fflush_r+0x1a>
 8006c42:	f7ff fa6d 	bl	8006120 <__sinit>
 8006c46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d0f3      	beq.n	8006c36 <_fflush_r+0xa>
 8006c4e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006c50:	07d0      	lsls	r0, r2, #31
 8006c52:	d404      	bmi.n	8006c5e <_fflush_r+0x32>
 8006c54:	0599      	lsls	r1, r3, #22
 8006c56:	d402      	bmi.n	8006c5e <_fflush_r+0x32>
 8006c58:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006c5a:	f7ff fb64 	bl	8006326 <__retarget_lock_acquire_recursive>
 8006c5e:	4628      	mov	r0, r5
 8006c60:	4621      	mov	r1, r4
 8006c62:	f7ff ff5f 	bl	8006b24 <__sflush_r>
 8006c66:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006c68:	07da      	lsls	r2, r3, #31
 8006c6a:	4605      	mov	r5, r0
 8006c6c:	d4e4      	bmi.n	8006c38 <_fflush_r+0xc>
 8006c6e:	89a3      	ldrh	r3, [r4, #12]
 8006c70:	059b      	lsls	r3, r3, #22
 8006c72:	d4e1      	bmi.n	8006c38 <_fflush_r+0xc>
 8006c74:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006c76:	f7ff fb57 	bl	8006328 <__retarget_lock_release_recursive>
 8006c7a:	e7dd      	b.n	8006c38 <_fflush_r+0xc>

08006c7c <fiprintf>:
 8006c7c:	b40e      	push	{r1, r2, r3}
 8006c7e:	b503      	push	{r0, r1, lr}
 8006c80:	4601      	mov	r1, r0
 8006c82:	ab03      	add	r3, sp, #12
 8006c84:	4805      	ldr	r0, [pc, #20]	@ (8006c9c <fiprintf+0x20>)
 8006c86:	f853 2b04 	ldr.w	r2, [r3], #4
 8006c8a:	6800      	ldr	r0, [r0, #0]
 8006c8c:	9301      	str	r3, [sp, #4]
 8006c8e:	f7ff fca3 	bl	80065d8 <_vfiprintf_r>
 8006c92:	b002      	add	sp, #8
 8006c94:	f85d eb04 	ldr.w	lr, [sp], #4
 8006c98:	b003      	add	sp, #12
 8006c9a:	4770      	bx	lr
 8006c9c:	20000020 	.word	0x20000020

08006ca0 <__swbuf_r>:
 8006ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ca2:	460e      	mov	r6, r1
 8006ca4:	4614      	mov	r4, r2
 8006ca6:	4605      	mov	r5, r0
 8006ca8:	b118      	cbz	r0, 8006cb2 <__swbuf_r+0x12>
 8006caa:	6a03      	ldr	r3, [r0, #32]
 8006cac:	b90b      	cbnz	r3, 8006cb2 <__swbuf_r+0x12>
 8006cae:	f7ff fa37 	bl	8006120 <__sinit>
 8006cb2:	69a3      	ldr	r3, [r4, #24]
 8006cb4:	60a3      	str	r3, [r4, #8]
 8006cb6:	89a3      	ldrh	r3, [r4, #12]
 8006cb8:	071a      	lsls	r2, r3, #28
 8006cba:	d501      	bpl.n	8006cc0 <__swbuf_r+0x20>
 8006cbc:	6923      	ldr	r3, [r4, #16]
 8006cbe:	b943      	cbnz	r3, 8006cd2 <__swbuf_r+0x32>
 8006cc0:	4621      	mov	r1, r4
 8006cc2:	4628      	mov	r0, r5
 8006cc4:	f000 f82a 	bl	8006d1c <__swsetup_r>
 8006cc8:	b118      	cbz	r0, 8006cd2 <__swbuf_r+0x32>
 8006cca:	f04f 37ff 	mov.w	r7, #4294967295
 8006cce:	4638      	mov	r0, r7
 8006cd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006cd2:	6823      	ldr	r3, [r4, #0]
 8006cd4:	6922      	ldr	r2, [r4, #16]
 8006cd6:	1a98      	subs	r0, r3, r2
 8006cd8:	6963      	ldr	r3, [r4, #20]
 8006cda:	b2f6      	uxtb	r6, r6
 8006cdc:	4283      	cmp	r3, r0
 8006cde:	4637      	mov	r7, r6
 8006ce0:	dc05      	bgt.n	8006cee <__swbuf_r+0x4e>
 8006ce2:	4621      	mov	r1, r4
 8006ce4:	4628      	mov	r0, r5
 8006ce6:	f7ff ffa1 	bl	8006c2c <_fflush_r>
 8006cea:	2800      	cmp	r0, #0
 8006cec:	d1ed      	bne.n	8006cca <__swbuf_r+0x2a>
 8006cee:	68a3      	ldr	r3, [r4, #8]
 8006cf0:	3b01      	subs	r3, #1
 8006cf2:	60a3      	str	r3, [r4, #8]
 8006cf4:	6823      	ldr	r3, [r4, #0]
 8006cf6:	1c5a      	adds	r2, r3, #1
 8006cf8:	6022      	str	r2, [r4, #0]
 8006cfa:	701e      	strb	r6, [r3, #0]
 8006cfc:	6962      	ldr	r2, [r4, #20]
 8006cfe:	1c43      	adds	r3, r0, #1
 8006d00:	429a      	cmp	r2, r3
 8006d02:	d004      	beq.n	8006d0e <__swbuf_r+0x6e>
 8006d04:	89a3      	ldrh	r3, [r4, #12]
 8006d06:	07db      	lsls	r3, r3, #31
 8006d08:	d5e1      	bpl.n	8006cce <__swbuf_r+0x2e>
 8006d0a:	2e0a      	cmp	r6, #10
 8006d0c:	d1df      	bne.n	8006cce <__swbuf_r+0x2e>
 8006d0e:	4621      	mov	r1, r4
 8006d10:	4628      	mov	r0, r5
 8006d12:	f7ff ff8b 	bl	8006c2c <_fflush_r>
 8006d16:	2800      	cmp	r0, #0
 8006d18:	d0d9      	beq.n	8006cce <__swbuf_r+0x2e>
 8006d1a:	e7d6      	b.n	8006cca <__swbuf_r+0x2a>

08006d1c <__swsetup_r>:
 8006d1c:	b538      	push	{r3, r4, r5, lr}
 8006d1e:	4b29      	ldr	r3, [pc, #164]	@ (8006dc4 <__swsetup_r+0xa8>)
 8006d20:	4605      	mov	r5, r0
 8006d22:	6818      	ldr	r0, [r3, #0]
 8006d24:	460c      	mov	r4, r1
 8006d26:	b118      	cbz	r0, 8006d30 <__swsetup_r+0x14>
 8006d28:	6a03      	ldr	r3, [r0, #32]
 8006d2a:	b90b      	cbnz	r3, 8006d30 <__swsetup_r+0x14>
 8006d2c:	f7ff f9f8 	bl	8006120 <__sinit>
 8006d30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d34:	0719      	lsls	r1, r3, #28
 8006d36:	d422      	bmi.n	8006d7e <__swsetup_r+0x62>
 8006d38:	06da      	lsls	r2, r3, #27
 8006d3a:	d407      	bmi.n	8006d4c <__swsetup_r+0x30>
 8006d3c:	2209      	movs	r2, #9
 8006d3e:	602a      	str	r2, [r5, #0]
 8006d40:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006d44:	81a3      	strh	r3, [r4, #12]
 8006d46:	f04f 30ff 	mov.w	r0, #4294967295
 8006d4a:	e033      	b.n	8006db4 <__swsetup_r+0x98>
 8006d4c:	0758      	lsls	r0, r3, #29
 8006d4e:	d512      	bpl.n	8006d76 <__swsetup_r+0x5a>
 8006d50:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006d52:	b141      	cbz	r1, 8006d66 <__swsetup_r+0x4a>
 8006d54:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006d58:	4299      	cmp	r1, r3
 8006d5a:	d002      	beq.n	8006d62 <__swsetup_r+0x46>
 8006d5c:	4628      	mov	r0, r5
 8006d5e:	f7ff fb11 	bl	8006384 <_free_r>
 8006d62:	2300      	movs	r3, #0
 8006d64:	6363      	str	r3, [r4, #52]	@ 0x34
 8006d66:	89a3      	ldrh	r3, [r4, #12]
 8006d68:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006d6c:	81a3      	strh	r3, [r4, #12]
 8006d6e:	2300      	movs	r3, #0
 8006d70:	6063      	str	r3, [r4, #4]
 8006d72:	6923      	ldr	r3, [r4, #16]
 8006d74:	6023      	str	r3, [r4, #0]
 8006d76:	89a3      	ldrh	r3, [r4, #12]
 8006d78:	f043 0308 	orr.w	r3, r3, #8
 8006d7c:	81a3      	strh	r3, [r4, #12]
 8006d7e:	6923      	ldr	r3, [r4, #16]
 8006d80:	b94b      	cbnz	r3, 8006d96 <__swsetup_r+0x7a>
 8006d82:	89a3      	ldrh	r3, [r4, #12]
 8006d84:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006d88:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006d8c:	d003      	beq.n	8006d96 <__swsetup_r+0x7a>
 8006d8e:	4621      	mov	r1, r4
 8006d90:	4628      	mov	r0, r5
 8006d92:	f000 f856 	bl	8006e42 <__smakebuf_r>
 8006d96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d9a:	f013 0201 	ands.w	r2, r3, #1
 8006d9e:	d00a      	beq.n	8006db6 <__swsetup_r+0x9a>
 8006da0:	2200      	movs	r2, #0
 8006da2:	60a2      	str	r2, [r4, #8]
 8006da4:	6962      	ldr	r2, [r4, #20]
 8006da6:	4252      	negs	r2, r2
 8006da8:	61a2      	str	r2, [r4, #24]
 8006daa:	6922      	ldr	r2, [r4, #16]
 8006dac:	b942      	cbnz	r2, 8006dc0 <__swsetup_r+0xa4>
 8006dae:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006db2:	d1c5      	bne.n	8006d40 <__swsetup_r+0x24>
 8006db4:	bd38      	pop	{r3, r4, r5, pc}
 8006db6:	0799      	lsls	r1, r3, #30
 8006db8:	bf58      	it	pl
 8006dba:	6962      	ldrpl	r2, [r4, #20]
 8006dbc:	60a2      	str	r2, [r4, #8]
 8006dbe:	e7f4      	b.n	8006daa <__swsetup_r+0x8e>
 8006dc0:	2000      	movs	r0, #0
 8006dc2:	e7f7      	b.n	8006db4 <__swsetup_r+0x98>
 8006dc4:	20000020 	.word	0x20000020

08006dc8 <_sbrk_r>:
 8006dc8:	b538      	push	{r3, r4, r5, lr}
 8006dca:	4d06      	ldr	r5, [pc, #24]	@ (8006de4 <_sbrk_r+0x1c>)
 8006dcc:	2300      	movs	r3, #0
 8006dce:	4604      	mov	r4, r0
 8006dd0:	4608      	mov	r0, r1
 8006dd2:	602b      	str	r3, [r5, #0]
 8006dd4:	f000 f8d8 	bl	8006f88 <_sbrk>
 8006dd8:	1c43      	adds	r3, r0, #1
 8006dda:	d102      	bne.n	8006de2 <_sbrk_r+0x1a>
 8006ddc:	682b      	ldr	r3, [r5, #0]
 8006dde:	b103      	cbz	r3, 8006de2 <_sbrk_r+0x1a>
 8006de0:	6023      	str	r3, [r4, #0]
 8006de2:	bd38      	pop	{r3, r4, r5, pc}
 8006de4:	200135b8 	.word	0x200135b8

08006de8 <abort>:
 8006de8:	b508      	push	{r3, lr}
 8006dea:	2006      	movs	r0, #6
 8006dec:	f000 f88e 	bl	8006f0c <raise>
 8006df0:	2001      	movs	r0, #1
 8006df2:	f7f9 ff65 	bl	8000cc0 <_exit>

08006df6 <__swhatbuf_r>:
 8006df6:	b570      	push	{r4, r5, r6, lr}
 8006df8:	460c      	mov	r4, r1
 8006dfa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006dfe:	2900      	cmp	r1, #0
 8006e00:	b096      	sub	sp, #88	@ 0x58
 8006e02:	4615      	mov	r5, r2
 8006e04:	461e      	mov	r6, r3
 8006e06:	da0d      	bge.n	8006e24 <__swhatbuf_r+0x2e>
 8006e08:	89a3      	ldrh	r3, [r4, #12]
 8006e0a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006e0e:	f04f 0100 	mov.w	r1, #0
 8006e12:	bf14      	ite	ne
 8006e14:	2340      	movne	r3, #64	@ 0x40
 8006e16:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006e1a:	2000      	movs	r0, #0
 8006e1c:	6031      	str	r1, [r6, #0]
 8006e1e:	602b      	str	r3, [r5, #0]
 8006e20:	b016      	add	sp, #88	@ 0x58
 8006e22:	bd70      	pop	{r4, r5, r6, pc}
 8006e24:	466a      	mov	r2, sp
 8006e26:	f000 f879 	bl	8006f1c <_fstat_r>
 8006e2a:	2800      	cmp	r0, #0
 8006e2c:	dbec      	blt.n	8006e08 <__swhatbuf_r+0x12>
 8006e2e:	9901      	ldr	r1, [sp, #4]
 8006e30:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006e34:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006e38:	4259      	negs	r1, r3
 8006e3a:	4159      	adcs	r1, r3
 8006e3c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006e40:	e7eb      	b.n	8006e1a <__swhatbuf_r+0x24>

08006e42 <__smakebuf_r>:
 8006e42:	898b      	ldrh	r3, [r1, #12]
 8006e44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006e46:	079d      	lsls	r5, r3, #30
 8006e48:	4606      	mov	r6, r0
 8006e4a:	460c      	mov	r4, r1
 8006e4c:	d507      	bpl.n	8006e5e <__smakebuf_r+0x1c>
 8006e4e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006e52:	6023      	str	r3, [r4, #0]
 8006e54:	6123      	str	r3, [r4, #16]
 8006e56:	2301      	movs	r3, #1
 8006e58:	6163      	str	r3, [r4, #20]
 8006e5a:	b003      	add	sp, #12
 8006e5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e5e:	ab01      	add	r3, sp, #4
 8006e60:	466a      	mov	r2, sp
 8006e62:	f7ff ffc8 	bl	8006df6 <__swhatbuf_r>
 8006e66:	9f00      	ldr	r7, [sp, #0]
 8006e68:	4605      	mov	r5, r0
 8006e6a:	4639      	mov	r1, r7
 8006e6c:	4630      	mov	r0, r6
 8006e6e:	f7ff fafd 	bl	800646c <_malloc_r>
 8006e72:	b948      	cbnz	r0, 8006e88 <__smakebuf_r+0x46>
 8006e74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e78:	059a      	lsls	r2, r3, #22
 8006e7a:	d4ee      	bmi.n	8006e5a <__smakebuf_r+0x18>
 8006e7c:	f023 0303 	bic.w	r3, r3, #3
 8006e80:	f043 0302 	orr.w	r3, r3, #2
 8006e84:	81a3      	strh	r3, [r4, #12]
 8006e86:	e7e2      	b.n	8006e4e <__smakebuf_r+0xc>
 8006e88:	89a3      	ldrh	r3, [r4, #12]
 8006e8a:	6020      	str	r0, [r4, #0]
 8006e8c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e90:	81a3      	strh	r3, [r4, #12]
 8006e92:	9b01      	ldr	r3, [sp, #4]
 8006e94:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006e98:	b15b      	cbz	r3, 8006eb2 <__smakebuf_r+0x70>
 8006e9a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006e9e:	4630      	mov	r0, r6
 8006ea0:	f000 f84e 	bl	8006f40 <_isatty_r>
 8006ea4:	b128      	cbz	r0, 8006eb2 <__smakebuf_r+0x70>
 8006ea6:	89a3      	ldrh	r3, [r4, #12]
 8006ea8:	f023 0303 	bic.w	r3, r3, #3
 8006eac:	f043 0301 	orr.w	r3, r3, #1
 8006eb0:	81a3      	strh	r3, [r4, #12]
 8006eb2:	89a3      	ldrh	r3, [r4, #12]
 8006eb4:	431d      	orrs	r5, r3
 8006eb6:	81a5      	strh	r5, [r4, #12]
 8006eb8:	e7cf      	b.n	8006e5a <__smakebuf_r+0x18>

08006eba <_raise_r>:
 8006eba:	291f      	cmp	r1, #31
 8006ebc:	b538      	push	{r3, r4, r5, lr}
 8006ebe:	4605      	mov	r5, r0
 8006ec0:	460c      	mov	r4, r1
 8006ec2:	d904      	bls.n	8006ece <_raise_r+0x14>
 8006ec4:	2316      	movs	r3, #22
 8006ec6:	6003      	str	r3, [r0, #0]
 8006ec8:	f04f 30ff 	mov.w	r0, #4294967295
 8006ecc:	bd38      	pop	{r3, r4, r5, pc}
 8006ece:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8006ed0:	b112      	cbz	r2, 8006ed8 <_raise_r+0x1e>
 8006ed2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006ed6:	b94b      	cbnz	r3, 8006eec <_raise_r+0x32>
 8006ed8:	4628      	mov	r0, r5
 8006eda:	f000 f853 	bl	8006f84 <_getpid_r>
 8006ede:	4622      	mov	r2, r4
 8006ee0:	4601      	mov	r1, r0
 8006ee2:	4628      	mov	r0, r5
 8006ee4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006ee8:	f000 b83a 	b.w	8006f60 <_kill_r>
 8006eec:	2b01      	cmp	r3, #1
 8006eee:	d00a      	beq.n	8006f06 <_raise_r+0x4c>
 8006ef0:	1c59      	adds	r1, r3, #1
 8006ef2:	d103      	bne.n	8006efc <_raise_r+0x42>
 8006ef4:	2316      	movs	r3, #22
 8006ef6:	6003      	str	r3, [r0, #0]
 8006ef8:	2001      	movs	r0, #1
 8006efa:	e7e7      	b.n	8006ecc <_raise_r+0x12>
 8006efc:	2100      	movs	r1, #0
 8006efe:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8006f02:	4620      	mov	r0, r4
 8006f04:	4798      	blx	r3
 8006f06:	2000      	movs	r0, #0
 8006f08:	e7e0      	b.n	8006ecc <_raise_r+0x12>
	...

08006f0c <raise>:
 8006f0c:	4b02      	ldr	r3, [pc, #8]	@ (8006f18 <raise+0xc>)
 8006f0e:	4601      	mov	r1, r0
 8006f10:	6818      	ldr	r0, [r3, #0]
 8006f12:	f7ff bfd2 	b.w	8006eba <_raise_r>
 8006f16:	bf00      	nop
 8006f18:	20000020 	.word	0x20000020

08006f1c <_fstat_r>:
 8006f1c:	b538      	push	{r3, r4, r5, lr}
 8006f1e:	4d07      	ldr	r5, [pc, #28]	@ (8006f3c <_fstat_r+0x20>)
 8006f20:	2300      	movs	r3, #0
 8006f22:	4604      	mov	r4, r0
 8006f24:	4608      	mov	r0, r1
 8006f26:	4611      	mov	r1, r2
 8006f28:	602b      	str	r3, [r5, #0]
 8006f2a:	f7f9 fefd 	bl	8000d28 <_fstat>
 8006f2e:	1c43      	adds	r3, r0, #1
 8006f30:	d102      	bne.n	8006f38 <_fstat_r+0x1c>
 8006f32:	682b      	ldr	r3, [r5, #0]
 8006f34:	b103      	cbz	r3, 8006f38 <_fstat_r+0x1c>
 8006f36:	6023      	str	r3, [r4, #0]
 8006f38:	bd38      	pop	{r3, r4, r5, pc}
 8006f3a:	bf00      	nop
 8006f3c:	200135b8 	.word	0x200135b8

08006f40 <_isatty_r>:
 8006f40:	b538      	push	{r3, r4, r5, lr}
 8006f42:	4d06      	ldr	r5, [pc, #24]	@ (8006f5c <_isatty_r+0x1c>)
 8006f44:	2300      	movs	r3, #0
 8006f46:	4604      	mov	r4, r0
 8006f48:	4608      	mov	r0, r1
 8006f4a:	602b      	str	r3, [r5, #0]
 8006f4c:	f7f9 fefc 	bl	8000d48 <_isatty>
 8006f50:	1c43      	adds	r3, r0, #1
 8006f52:	d102      	bne.n	8006f5a <_isatty_r+0x1a>
 8006f54:	682b      	ldr	r3, [r5, #0]
 8006f56:	b103      	cbz	r3, 8006f5a <_isatty_r+0x1a>
 8006f58:	6023      	str	r3, [r4, #0]
 8006f5a:	bd38      	pop	{r3, r4, r5, pc}
 8006f5c:	200135b8 	.word	0x200135b8

08006f60 <_kill_r>:
 8006f60:	b538      	push	{r3, r4, r5, lr}
 8006f62:	4d07      	ldr	r5, [pc, #28]	@ (8006f80 <_kill_r+0x20>)
 8006f64:	2300      	movs	r3, #0
 8006f66:	4604      	mov	r4, r0
 8006f68:	4608      	mov	r0, r1
 8006f6a:	4611      	mov	r1, r2
 8006f6c:	602b      	str	r3, [r5, #0]
 8006f6e:	f7f9 fe97 	bl	8000ca0 <_kill>
 8006f72:	1c43      	adds	r3, r0, #1
 8006f74:	d102      	bne.n	8006f7c <_kill_r+0x1c>
 8006f76:	682b      	ldr	r3, [r5, #0]
 8006f78:	b103      	cbz	r3, 8006f7c <_kill_r+0x1c>
 8006f7a:	6023      	str	r3, [r4, #0]
 8006f7c:	bd38      	pop	{r3, r4, r5, pc}
 8006f7e:	bf00      	nop
 8006f80:	200135b8 	.word	0x200135b8

08006f84 <_getpid_r>:
 8006f84:	f7f9 be84 	b.w	8000c90 <_getpid>

08006f88 <_sbrk>:
 8006f88:	4a04      	ldr	r2, [pc, #16]	@ (8006f9c <_sbrk+0x14>)
 8006f8a:	6811      	ldr	r1, [r2, #0]
 8006f8c:	4603      	mov	r3, r0
 8006f8e:	b909      	cbnz	r1, 8006f94 <_sbrk+0xc>
 8006f90:	4903      	ldr	r1, [pc, #12]	@ (8006fa0 <_sbrk+0x18>)
 8006f92:	6011      	str	r1, [r2, #0]
 8006f94:	6810      	ldr	r0, [r2, #0]
 8006f96:	4403      	add	r3, r0
 8006f98:	6013      	str	r3, [r2, #0]
 8006f9a:	4770      	bx	lr
 8006f9c:	200135c8 	.word	0x200135c8
 8006fa0:	200135d0 	.word	0x200135d0

08006fa4 <_init>:
 8006fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fa6:	bf00      	nop
 8006fa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006faa:	bc08      	pop	{r3}
 8006fac:	469e      	mov	lr, r3
 8006fae:	4770      	bx	lr

08006fb0 <_fini>:
 8006fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fb2:	bf00      	nop
 8006fb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fb6:	bc08      	pop	{r3}
 8006fb8:	469e      	mov	lr, r3
 8006fba:	4770      	bx	lr
