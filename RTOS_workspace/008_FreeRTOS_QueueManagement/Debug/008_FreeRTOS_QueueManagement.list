
008_FreeRTOS_QueueManagement.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000081f0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000128  08008380  08008380  00009380  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080084a8  080084a8  0000a0c4  2**0
                  CONTENTS
  4 .ARM          00000008  080084a8  080084a8  000094a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080084b0  080084b0  0000a0c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080084b0  080084b0  000094b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080084b4  080084b4  000094b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c4  20000000  080084b8  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001382c  200000c4  0800857c  0000a0c4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200138f0  0800857c  0000a8f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a0c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018345  00000000  00000000  0000a0f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000370f  00000000  00000000  00022439  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001608  00000000  00000000  00025b48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000111d  00000000  00000000  00027150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023fdd  00000000  00000000  0002826d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a0ca  00000000  00000000  0004c24a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000da172  00000000  00000000  00066314  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00140486  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000624c  00000000  00000000  001404cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000b8  00000000  00000000  00146718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000c4 	.word	0x200000c4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008368 	.word	0x08008368

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000c8 	.word	0x200000c8
 80001cc:	08008368 	.word	0x08008368

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	@ 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	200131d8 	.word	0x200131d8
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b96a 	b.w	80005fc <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9d08      	ldr	r5, [sp, #32]
 8000346:	460c      	mov	r4, r1
 8000348:	2b00      	cmp	r3, #0
 800034a:	d14e      	bne.n	80003ea <__udivmoddi4+0xaa>
 800034c:	4694      	mov	ip, r2
 800034e:	458c      	cmp	ip, r1
 8000350:	4686      	mov	lr, r0
 8000352:	fab2 f282 	clz	r2, r2
 8000356:	d962      	bls.n	800041e <__udivmoddi4+0xde>
 8000358:	b14a      	cbz	r2, 800036e <__udivmoddi4+0x2e>
 800035a:	f1c2 0320 	rsb	r3, r2, #32
 800035e:	4091      	lsls	r1, r2
 8000360:	fa20 f303 	lsr.w	r3, r0, r3
 8000364:	fa0c fc02 	lsl.w	ip, ip, r2
 8000368:	4319      	orrs	r1, r3
 800036a:	fa00 fe02 	lsl.w	lr, r0, r2
 800036e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000372:	fa1f f68c 	uxth.w	r6, ip
 8000376:	fbb1 f4f7 	udiv	r4, r1, r7
 800037a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800037e:	fb07 1114 	mls	r1, r7, r4, r1
 8000382:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000386:	fb04 f106 	mul.w	r1, r4, r6
 800038a:	4299      	cmp	r1, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x64>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f104 30ff 	add.w	r0, r4, #4294967295
 8000396:	f080 8112 	bcs.w	80005be <__udivmoddi4+0x27e>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 810f 	bls.w	80005be <__udivmoddi4+0x27e>
 80003a0:	3c02      	subs	r4, #2
 80003a2:	4463      	add	r3, ip
 80003a4:	1a59      	subs	r1, r3, r1
 80003a6:	fa1f f38e 	uxth.w	r3, lr
 80003aa:	fbb1 f0f7 	udiv	r0, r1, r7
 80003ae:	fb07 1110 	mls	r1, r7, r0, r1
 80003b2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b6:	fb00 f606 	mul.w	r6, r0, r6
 80003ba:	429e      	cmp	r6, r3
 80003bc:	d90a      	bls.n	80003d4 <__udivmoddi4+0x94>
 80003be:	eb1c 0303 	adds.w	r3, ip, r3
 80003c2:	f100 31ff 	add.w	r1, r0, #4294967295
 80003c6:	f080 80fc 	bcs.w	80005c2 <__udivmoddi4+0x282>
 80003ca:	429e      	cmp	r6, r3
 80003cc:	f240 80f9 	bls.w	80005c2 <__udivmoddi4+0x282>
 80003d0:	4463      	add	r3, ip
 80003d2:	3802      	subs	r0, #2
 80003d4:	1b9b      	subs	r3, r3, r6
 80003d6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003da:	2100      	movs	r1, #0
 80003dc:	b11d      	cbz	r5, 80003e6 <__udivmoddi4+0xa6>
 80003de:	40d3      	lsrs	r3, r2
 80003e0:	2200      	movs	r2, #0
 80003e2:	e9c5 3200 	strd	r3, r2, [r5]
 80003e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d905      	bls.n	80003fa <__udivmoddi4+0xba>
 80003ee:	b10d      	cbz	r5, 80003f4 <__udivmoddi4+0xb4>
 80003f0:	e9c5 0100 	strd	r0, r1, [r5]
 80003f4:	2100      	movs	r1, #0
 80003f6:	4608      	mov	r0, r1
 80003f8:	e7f5      	b.n	80003e6 <__udivmoddi4+0xa6>
 80003fa:	fab3 f183 	clz	r1, r3
 80003fe:	2900      	cmp	r1, #0
 8000400:	d146      	bne.n	8000490 <__udivmoddi4+0x150>
 8000402:	42a3      	cmp	r3, r4
 8000404:	d302      	bcc.n	800040c <__udivmoddi4+0xcc>
 8000406:	4290      	cmp	r0, r2
 8000408:	f0c0 80f0 	bcc.w	80005ec <__udivmoddi4+0x2ac>
 800040c:	1a86      	subs	r6, r0, r2
 800040e:	eb64 0303 	sbc.w	r3, r4, r3
 8000412:	2001      	movs	r0, #1
 8000414:	2d00      	cmp	r5, #0
 8000416:	d0e6      	beq.n	80003e6 <__udivmoddi4+0xa6>
 8000418:	e9c5 6300 	strd	r6, r3, [r5]
 800041c:	e7e3      	b.n	80003e6 <__udivmoddi4+0xa6>
 800041e:	2a00      	cmp	r2, #0
 8000420:	f040 8090 	bne.w	8000544 <__udivmoddi4+0x204>
 8000424:	eba1 040c 	sub.w	r4, r1, ip
 8000428:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800042c:	fa1f f78c 	uxth.w	r7, ip
 8000430:	2101      	movs	r1, #1
 8000432:	fbb4 f6f8 	udiv	r6, r4, r8
 8000436:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800043a:	fb08 4416 	mls	r4, r8, r6, r4
 800043e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000442:	fb07 f006 	mul.w	r0, r7, r6
 8000446:	4298      	cmp	r0, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x11c>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000452:	d202      	bcs.n	800045a <__udivmoddi4+0x11a>
 8000454:	4298      	cmp	r0, r3
 8000456:	f200 80cd 	bhi.w	80005f4 <__udivmoddi4+0x2b4>
 800045a:	4626      	mov	r6, r4
 800045c:	1a1c      	subs	r4, r3, r0
 800045e:	fa1f f38e 	uxth.w	r3, lr
 8000462:	fbb4 f0f8 	udiv	r0, r4, r8
 8000466:	fb08 4410 	mls	r4, r8, r0, r4
 800046a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800046e:	fb00 f707 	mul.w	r7, r0, r7
 8000472:	429f      	cmp	r7, r3
 8000474:	d908      	bls.n	8000488 <__udivmoddi4+0x148>
 8000476:	eb1c 0303 	adds.w	r3, ip, r3
 800047a:	f100 34ff 	add.w	r4, r0, #4294967295
 800047e:	d202      	bcs.n	8000486 <__udivmoddi4+0x146>
 8000480:	429f      	cmp	r7, r3
 8000482:	f200 80b0 	bhi.w	80005e6 <__udivmoddi4+0x2a6>
 8000486:	4620      	mov	r0, r4
 8000488:	1bdb      	subs	r3, r3, r7
 800048a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800048e:	e7a5      	b.n	80003dc <__udivmoddi4+0x9c>
 8000490:	f1c1 0620 	rsb	r6, r1, #32
 8000494:	408b      	lsls	r3, r1
 8000496:	fa22 f706 	lsr.w	r7, r2, r6
 800049a:	431f      	orrs	r7, r3
 800049c:	fa20 fc06 	lsr.w	ip, r0, r6
 80004a0:	fa04 f301 	lsl.w	r3, r4, r1
 80004a4:	ea43 030c 	orr.w	r3, r3, ip
 80004a8:	40f4      	lsrs	r4, r6
 80004aa:	fa00 f801 	lsl.w	r8, r0, r1
 80004ae:	0c38      	lsrs	r0, r7, #16
 80004b0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80004b4:	fbb4 fef0 	udiv	lr, r4, r0
 80004b8:	fa1f fc87 	uxth.w	ip, r7
 80004bc:	fb00 441e 	mls	r4, r0, lr, r4
 80004c0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c4:	fb0e f90c 	mul.w	r9, lr, ip
 80004c8:	45a1      	cmp	r9, r4
 80004ca:	fa02 f201 	lsl.w	r2, r2, r1
 80004ce:	d90a      	bls.n	80004e6 <__udivmoddi4+0x1a6>
 80004d0:	193c      	adds	r4, r7, r4
 80004d2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004d6:	f080 8084 	bcs.w	80005e2 <__udivmoddi4+0x2a2>
 80004da:	45a1      	cmp	r9, r4
 80004dc:	f240 8081 	bls.w	80005e2 <__udivmoddi4+0x2a2>
 80004e0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004e4:	443c      	add	r4, r7
 80004e6:	eba4 0409 	sub.w	r4, r4, r9
 80004ea:	fa1f f983 	uxth.w	r9, r3
 80004ee:	fbb4 f3f0 	udiv	r3, r4, r0
 80004f2:	fb00 4413 	mls	r4, r0, r3, r4
 80004f6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004fa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004fe:	45a4      	cmp	ip, r4
 8000500:	d907      	bls.n	8000512 <__udivmoddi4+0x1d2>
 8000502:	193c      	adds	r4, r7, r4
 8000504:	f103 30ff 	add.w	r0, r3, #4294967295
 8000508:	d267      	bcs.n	80005da <__udivmoddi4+0x29a>
 800050a:	45a4      	cmp	ip, r4
 800050c:	d965      	bls.n	80005da <__udivmoddi4+0x29a>
 800050e:	3b02      	subs	r3, #2
 8000510:	443c      	add	r4, r7
 8000512:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000516:	fba0 9302 	umull	r9, r3, r0, r2
 800051a:	eba4 040c 	sub.w	r4, r4, ip
 800051e:	429c      	cmp	r4, r3
 8000520:	46ce      	mov	lr, r9
 8000522:	469c      	mov	ip, r3
 8000524:	d351      	bcc.n	80005ca <__udivmoddi4+0x28a>
 8000526:	d04e      	beq.n	80005c6 <__udivmoddi4+0x286>
 8000528:	b155      	cbz	r5, 8000540 <__udivmoddi4+0x200>
 800052a:	ebb8 030e 	subs.w	r3, r8, lr
 800052e:	eb64 040c 	sbc.w	r4, r4, ip
 8000532:	fa04 f606 	lsl.w	r6, r4, r6
 8000536:	40cb      	lsrs	r3, r1
 8000538:	431e      	orrs	r6, r3
 800053a:	40cc      	lsrs	r4, r1
 800053c:	e9c5 6400 	strd	r6, r4, [r5]
 8000540:	2100      	movs	r1, #0
 8000542:	e750      	b.n	80003e6 <__udivmoddi4+0xa6>
 8000544:	f1c2 0320 	rsb	r3, r2, #32
 8000548:	fa20 f103 	lsr.w	r1, r0, r3
 800054c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000550:	fa24 f303 	lsr.w	r3, r4, r3
 8000554:	4094      	lsls	r4, r2
 8000556:	430c      	orrs	r4, r1
 8000558:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800055c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000560:	fa1f f78c 	uxth.w	r7, ip
 8000564:	fbb3 f0f8 	udiv	r0, r3, r8
 8000568:	fb08 3110 	mls	r1, r8, r0, r3
 800056c:	0c23      	lsrs	r3, r4, #16
 800056e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000572:	fb00 f107 	mul.w	r1, r0, r7
 8000576:	4299      	cmp	r1, r3
 8000578:	d908      	bls.n	800058c <__udivmoddi4+0x24c>
 800057a:	eb1c 0303 	adds.w	r3, ip, r3
 800057e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000582:	d22c      	bcs.n	80005de <__udivmoddi4+0x29e>
 8000584:	4299      	cmp	r1, r3
 8000586:	d92a      	bls.n	80005de <__udivmoddi4+0x29e>
 8000588:	3802      	subs	r0, #2
 800058a:	4463      	add	r3, ip
 800058c:	1a5b      	subs	r3, r3, r1
 800058e:	b2a4      	uxth	r4, r4
 8000590:	fbb3 f1f8 	udiv	r1, r3, r8
 8000594:	fb08 3311 	mls	r3, r8, r1, r3
 8000598:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800059c:	fb01 f307 	mul.w	r3, r1, r7
 80005a0:	42a3      	cmp	r3, r4
 80005a2:	d908      	bls.n	80005b6 <__udivmoddi4+0x276>
 80005a4:	eb1c 0404 	adds.w	r4, ip, r4
 80005a8:	f101 36ff 	add.w	r6, r1, #4294967295
 80005ac:	d213      	bcs.n	80005d6 <__udivmoddi4+0x296>
 80005ae:	42a3      	cmp	r3, r4
 80005b0:	d911      	bls.n	80005d6 <__udivmoddi4+0x296>
 80005b2:	3902      	subs	r1, #2
 80005b4:	4464      	add	r4, ip
 80005b6:	1ae4      	subs	r4, r4, r3
 80005b8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80005bc:	e739      	b.n	8000432 <__udivmoddi4+0xf2>
 80005be:	4604      	mov	r4, r0
 80005c0:	e6f0      	b.n	80003a4 <__udivmoddi4+0x64>
 80005c2:	4608      	mov	r0, r1
 80005c4:	e706      	b.n	80003d4 <__udivmoddi4+0x94>
 80005c6:	45c8      	cmp	r8, r9
 80005c8:	d2ae      	bcs.n	8000528 <__udivmoddi4+0x1e8>
 80005ca:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ce:	eb63 0c07 	sbc.w	ip, r3, r7
 80005d2:	3801      	subs	r0, #1
 80005d4:	e7a8      	b.n	8000528 <__udivmoddi4+0x1e8>
 80005d6:	4631      	mov	r1, r6
 80005d8:	e7ed      	b.n	80005b6 <__udivmoddi4+0x276>
 80005da:	4603      	mov	r3, r0
 80005dc:	e799      	b.n	8000512 <__udivmoddi4+0x1d2>
 80005de:	4630      	mov	r0, r6
 80005e0:	e7d4      	b.n	800058c <__udivmoddi4+0x24c>
 80005e2:	46d6      	mov	lr, sl
 80005e4:	e77f      	b.n	80004e6 <__udivmoddi4+0x1a6>
 80005e6:	4463      	add	r3, ip
 80005e8:	3802      	subs	r0, #2
 80005ea:	e74d      	b.n	8000488 <__udivmoddi4+0x148>
 80005ec:	4606      	mov	r6, r0
 80005ee:	4623      	mov	r3, r4
 80005f0:	4608      	mov	r0, r1
 80005f2:	e70f      	b.n	8000414 <__udivmoddi4+0xd4>
 80005f4:	3e02      	subs	r6, #2
 80005f6:	4463      	add	r3, ip
 80005f8:	e730      	b.n	800045c <__udivmoddi4+0x11c>
 80005fa:	bf00      	nop

080005fc <__aeabi_idiv0>:
 80005fc:	4770      	bx	lr
 80005fe:	bf00      	nop

08000600 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b088      	sub	sp, #32
 8000604:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000606:	f000 fc13 	bl	8000e30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800060a:	f000 f8c7 	bl	800079c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800060e:	f000 f959 	bl	80008c4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000612:	f000 f92d 	bl	8000870 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

	// uart
	if (HAL_UART_Receive_IT(&huart2, &rdata, 1) != HAL_OK) {
 8000616:	2201      	movs	r2, #1
 8000618:	494e      	ldr	r1, [pc, #312]	@ (8000754 <main+0x154>)
 800061a:	484f      	ldr	r0, [pc, #316]	@ (8000758 <main+0x158>)
 800061c:	f001 ffd5 	bl	80025ca <HAL_UART_Receive_IT>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d001      	beq.n	800062a <main+0x2a>
		Error_Handler();
 8000626:	f000 fa95 	bl	8000b54 <Error_Handler>
	}

	// create queue
	command_queue = xQueueCreate(10, sizeof(APP_CMD_t*));
 800062a:	2200      	movs	r2, #0
 800062c:	2104      	movs	r1, #4
 800062e:	200a      	movs	r0, #10
 8000630:	f003 f864 	bl	80036fc <xQueueGenericCreate>
 8000634:	4603      	mov	r3, r0
 8000636:	4a49      	ldr	r2, [pc, #292]	@ (800075c <main+0x15c>)
 8000638:	6013      	str	r3, [r2, #0]

	uart_write_queue = xQueueCreate(10, sizeof(char*));
 800063a:	2200      	movs	r2, #0
 800063c:	2104      	movs	r1, #4
 800063e:	200a      	movs	r0, #10
 8000640:	f003 f85c 	bl	80036fc <xQueueGenericCreate>
 8000644:	4603      	mov	r3, r0
 8000646:	4a46      	ldr	r2, [pc, #280]	@ (8000760 <main+0x160>)
 8000648:	6013      	str	r3, [r2, #0]

	if ((command_queue != NULL) && (uart_write_queue != NULL)) {
 800064a:	4b44      	ldr	r3, [pc, #272]	@ (800075c <main+0x15c>)
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	2b00      	cmp	r3, #0
 8000650:	d072      	beq.n	8000738 <main+0x138>
 8000652:	4b43      	ldr	r3, [pc, #268]	@ (8000760 <main+0x160>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	2b00      	cmp	r3, #0
 8000658:	d06e      	beq.n	8000738 <main+0x138>
		status = xTaskCreate(task1_menu_display, "Task-1", 500,
 800065a:	4b42      	ldr	r3, [pc, #264]	@ (8000764 <main+0x164>)
 800065c:	9301      	str	r3, [sp, #4]
 800065e:	2302      	movs	r3, #2
 8000660:	9300      	str	r3, [sp, #0]
 8000662:	2300      	movs	r3, #0
 8000664:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000668:	493f      	ldr	r1, [pc, #252]	@ (8000768 <main+0x168>)
 800066a:	4840      	ldr	r0, [pc, #256]	@ (800076c <main+0x16c>)
 800066c:	f003 fd48 	bl	8004100 <xTaskCreate>
 8000670:	6178      	str	r0, [r7, #20]
		NULL, 2, &task1_handle);

		configASSERT(status == pdPASS);
 8000672:	697b      	ldr	r3, [r7, #20]
 8000674:	2b01      	cmp	r3, #1
 8000676:	d00b      	beq.n	8000690 <main+0x90>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000678:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800067c:	f383 8811 	msr	BASEPRI, r3
 8000680:	f3bf 8f6f 	isb	sy
 8000684:	f3bf 8f4f 	dsb	sy
 8000688:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 800068a:	bf00      	nop
 800068c:	bf00      	nop
 800068e:	e7fd      	b.n	800068c <main+0x8c>

		status = xTaskCreate(task2_cmd_handling, "Task-2", 500,
 8000690:	4b37      	ldr	r3, [pc, #220]	@ (8000770 <main+0x170>)
 8000692:	9301      	str	r3, [sp, #4]
 8000694:	2302      	movs	r3, #2
 8000696:	9300      	str	r3, [sp, #0]
 8000698:	2300      	movs	r3, #0
 800069a:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800069e:	4935      	ldr	r1, [pc, #212]	@ (8000774 <main+0x174>)
 80006a0:	4835      	ldr	r0, [pc, #212]	@ (8000778 <main+0x178>)
 80006a2:	f003 fd2d 	bl	8004100 <xTaskCreate>
 80006a6:	6178      	str	r0, [r7, #20]
		NULL, 2, &task2_handle);
		configASSERT(status == pdPASS);
 80006a8:	697b      	ldr	r3, [r7, #20]
 80006aa:	2b01      	cmp	r3, #1
 80006ac:	d00b      	beq.n	80006c6 <main+0xc6>
        __asm volatile
 80006ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80006b2:	f383 8811 	msr	BASEPRI, r3
 80006b6:	f3bf 8f6f 	isb	sy
 80006ba:	f3bf 8f4f 	dsb	sy
 80006be:	60fb      	str	r3, [r7, #12]
    }
 80006c0:	bf00      	nop
 80006c2:	bf00      	nop
 80006c4:	e7fd      	b.n	80006c2 <main+0xc2>

		status = xTaskCreate(task3_cmd_processing, "Task-3", 500,
 80006c6:	4b2d      	ldr	r3, [pc, #180]	@ (800077c <main+0x17c>)
 80006c8:	9301      	str	r3, [sp, #4]
 80006ca:	2302      	movs	r3, #2
 80006cc:	9300      	str	r3, [sp, #0]
 80006ce:	2300      	movs	r3, #0
 80006d0:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80006d4:	492a      	ldr	r1, [pc, #168]	@ (8000780 <main+0x180>)
 80006d6:	482b      	ldr	r0, [pc, #172]	@ (8000784 <main+0x184>)
 80006d8:	f003 fd12 	bl	8004100 <xTaskCreate>
 80006dc:	6178      	str	r0, [r7, #20]
		NULL, 2, &task3_handle);
		configASSERT(status == pdPASS);
 80006de:	697b      	ldr	r3, [r7, #20]
 80006e0:	2b01      	cmp	r3, #1
 80006e2:	d00b      	beq.n	80006fc <main+0xfc>
        __asm volatile
 80006e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80006e8:	f383 8811 	msr	BASEPRI, r3
 80006ec:	f3bf 8f6f 	isb	sy
 80006f0:	f3bf 8f4f 	dsb	sy
 80006f4:	60bb      	str	r3, [r7, #8]
    }
 80006f6:	bf00      	nop
 80006f8:	bf00      	nop
 80006fa:	e7fd      	b.n	80006f8 <main+0xf8>

		status = xTaskCreate(task4_uart_write, "Task-4", 500,
 80006fc:	4b22      	ldr	r3, [pc, #136]	@ (8000788 <main+0x188>)
 80006fe:	9301      	str	r3, [sp, #4]
 8000700:	2302      	movs	r3, #2
 8000702:	9300      	str	r3, [sp, #0]
 8000704:	2300      	movs	r3, #0
 8000706:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800070a:	4920      	ldr	r1, [pc, #128]	@ (800078c <main+0x18c>)
 800070c:	4820      	ldr	r0, [pc, #128]	@ (8000790 <main+0x190>)
 800070e:	f003 fcf7 	bl	8004100 <xTaskCreate>
 8000712:	6178      	str	r0, [r7, #20]
		NULL, 2, &task4_handle);
		configASSERT(status == pdPASS);
 8000714:	697b      	ldr	r3, [r7, #20]
 8000716:	2b01      	cmp	r3, #1
 8000718:	d00b      	beq.n	8000732 <main+0x132>
        __asm volatile
 800071a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800071e:	f383 8811 	msr	BASEPRI, r3
 8000722:	f3bf 8f6f 	isb	sy
 8000726:	f3bf 8f4f 	dsb	sy
 800072a:	607b      	str	r3, [r7, #4]
    }
 800072c:	bf00      	nop
 800072e:	bf00      	nop
 8000730:	e7fd      	b.n	800072e <main+0x12e>

		//start the freeRTOS scheduler
		vTaskStartScheduler();
 8000732:	f003 fe49 	bl	80043c8 <vTaskStartScheduler>
 8000736:	e00a      	b.n	800074e <main+0x14e>
	} else {
		sprintf(uart_msg, "Queue created failed\n\r");
 8000738:	4916      	ldr	r1, [pc, #88]	@ (8000794 <main+0x194>)
 800073a:	4817      	ldr	r0, [pc, #92]	@ (8000798 <main+0x198>)
 800073c:	f007 f95c 	bl	80079f8 <siprintf>
		HAL_UART_Transmit(&huart2, uart_msg, sizeof(uart_msg), HAL_MAX_DELAY);
 8000740:	f04f 33ff 	mov.w	r3, #4294967295
 8000744:	22fa      	movs	r2, #250	@ 0xfa
 8000746:	4914      	ldr	r1, [pc, #80]	@ (8000798 <main+0x198>)
 8000748:	4803      	ldr	r0, [pc, #12]	@ (8000758 <main+0x158>)
 800074a:	f001 feb3 	bl	80024b4 <HAL_UART_Transmit>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 800074e:	bf00      	nop
 8000750:	e7fd      	b.n	800074e <main+0x14e>
 8000752:	bf00      	nop
 8000754:	2000033c 	.word	0x2000033c
 8000758:	200000e0 	.word	0x200000e0
 800075c:	20000138 	.word	0x20000138
 8000760:	2000013c 	.word	0x2000013c
 8000764:	20000128 	.word	0x20000128
 8000768:	08008380 	.word	0x08008380
 800076c:	08000969 	.word	0x08000969
 8000770:	2000012c 	.word	0x2000012c
 8000774:	08008388 	.word	0x08008388
 8000778:	080009a5 	.word	0x080009a5
 800077c:	20000130 	.word	0x20000130
 8000780:	08008390 	.word	0x08008390
 8000784:	080009b9 	.word	0x080009b9
 8000788:	20000134 	.word	0x20000134
 800078c:	08008398 	.word	0x08008398
 8000790:	08000a0d 	.word	0x08000a0d
 8000794:	080083a0 	.word	0x080083a0
 8000798:	20000140 	.word	0x20000140

0800079c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b094      	sub	sp, #80	@ 0x50
 80007a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007a2:	f107 0320 	add.w	r3, r7, #32
 80007a6:	2230      	movs	r2, #48	@ 0x30
 80007a8:	2100      	movs	r1, #0
 80007aa:	4618      	mov	r0, r3
 80007ac:	f007 f954 	bl	8007a58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007b0:	f107 030c 	add.w	r3, r7, #12
 80007b4:	2200      	movs	r2, #0
 80007b6:	601a      	str	r2, [r3, #0]
 80007b8:	605a      	str	r2, [r3, #4]
 80007ba:	609a      	str	r2, [r3, #8]
 80007bc:	60da      	str	r2, [r3, #12]
 80007be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007c0:	2300      	movs	r3, #0
 80007c2:	60bb      	str	r3, [r7, #8]
 80007c4:	4b28      	ldr	r3, [pc, #160]	@ (8000868 <SystemClock_Config+0xcc>)
 80007c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007c8:	4a27      	ldr	r2, [pc, #156]	@ (8000868 <SystemClock_Config+0xcc>)
 80007ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007ce:	6413      	str	r3, [r2, #64]	@ 0x40
 80007d0:	4b25      	ldr	r3, [pc, #148]	@ (8000868 <SystemClock_Config+0xcc>)
 80007d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007d8:	60bb      	str	r3, [r7, #8]
 80007da:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007dc:	2300      	movs	r3, #0
 80007de:	607b      	str	r3, [r7, #4]
 80007e0:	4b22      	ldr	r3, [pc, #136]	@ (800086c <SystemClock_Config+0xd0>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	4a21      	ldr	r2, [pc, #132]	@ (800086c <SystemClock_Config+0xd0>)
 80007e6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007ea:	6013      	str	r3, [r2, #0]
 80007ec:	4b1f      	ldr	r3, [pc, #124]	@ (800086c <SystemClock_Config+0xd0>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80007f4:	607b      	str	r3, [r7, #4]
 80007f6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007f8:	2302      	movs	r3, #2
 80007fa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007fc:	2301      	movs	r3, #1
 80007fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000800:	2310      	movs	r3, #16
 8000802:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000804:	2302      	movs	r3, #2
 8000806:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000808:	2300      	movs	r3, #0
 800080a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800080c:	2308      	movs	r3, #8
 800080e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000810:	23a8      	movs	r3, #168	@ 0xa8
 8000812:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000814:	2302      	movs	r3, #2
 8000816:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000818:	2307      	movs	r3, #7
 800081a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800081c:	f107 0320 	add.w	r3, r7, #32
 8000820:	4618      	mov	r0, r3
 8000822:	f000 fe8b 	bl	800153c <HAL_RCC_OscConfig>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800082c:	f000 f992 	bl	8000b54 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000830:	230f      	movs	r3, #15
 8000832:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000834:	2302      	movs	r3, #2
 8000836:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000838:	2300      	movs	r3, #0
 800083a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800083c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000840:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000842:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000846:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000848:	f107 030c 	add.w	r3, r7, #12
 800084c:	2105      	movs	r1, #5
 800084e:	4618      	mov	r0, r3
 8000850:	f001 f8ec 	bl	8001a2c <HAL_RCC_ClockConfig>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800085a:	f000 f97b 	bl	8000b54 <Error_Handler>
  }
}
 800085e:	bf00      	nop
 8000860:	3750      	adds	r7, #80	@ 0x50
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	40023800 	.word	0x40023800
 800086c:	40007000 	.word	0x40007000

08000870 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000874:	4b11      	ldr	r3, [pc, #68]	@ (80008bc <MX_USART2_UART_Init+0x4c>)
 8000876:	4a12      	ldr	r2, [pc, #72]	@ (80008c0 <MX_USART2_UART_Init+0x50>)
 8000878:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800087a:	4b10      	ldr	r3, [pc, #64]	@ (80008bc <MX_USART2_UART_Init+0x4c>)
 800087c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000880:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000882:	4b0e      	ldr	r3, [pc, #56]	@ (80008bc <MX_USART2_UART_Init+0x4c>)
 8000884:	2200      	movs	r2, #0
 8000886:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000888:	4b0c      	ldr	r3, [pc, #48]	@ (80008bc <MX_USART2_UART_Init+0x4c>)
 800088a:	2200      	movs	r2, #0
 800088c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800088e:	4b0b      	ldr	r3, [pc, #44]	@ (80008bc <MX_USART2_UART_Init+0x4c>)
 8000890:	2200      	movs	r2, #0
 8000892:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000894:	4b09      	ldr	r3, [pc, #36]	@ (80008bc <MX_USART2_UART_Init+0x4c>)
 8000896:	220c      	movs	r2, #12
 8000898:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800089a:	4b08      	ldr	r3, [pc, #32]	@ (80008bc <MX_USART2_UART_Init+0x4c>)
 800089c:	2200      	movs	r2, #0
 800089e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008a0:	4b06      	ldr	r3, [pc, #24]	@ (80008bc <MX_USART2_UART_Init+0x4c>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008a6:	4805      	ldr	r0, [pc, #20]	@ (80008bc <MX_USART2_UART_Init+0x4c>)
 80008a8:	f001 fdb4 	bl	8002414 <HAL_UART_Init>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80008b2:	f000 f94f 	bl	8000b54 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008b6:	bf00      	nop
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	200000e0 	.word	0x200000e0
 80008c0:	40004400 	.word	0x40004400

080008c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b088      	sub	sp, #32
 80008c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ca:	f107 030c 	add.w	r3, r7, #12
 80008ce:	2200      	movs	r2, #0
 80008d0:	601a      	str	r2, [r3, #0]
 80008d2:	605a      	str	r2, [r3, #4]
 80008d4:	609a      	str	r2, [r3, #8]
 80008d6:	60da      	str	r2, [r3, #12]
 80008d8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008da:	2300      	movs	r3, #0
 80008dc:	60bb      	str	r3, [r7, #8]
 80008de:	4b20      	ldr	r3, [pc, #128]	@ (8000960 <MX_GPIO_Init+0x9c>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008e2:	4a1f      	ldr	r2, [pc, #124]	@ (8000960 <MX_GPIO_Init+0x9c>)
 80008e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ea:	4b1d      	ldr	r3, [pc, #116]	@ (8000960 <MX_GPIO_Init+0x9c>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008f2:	60bb      	str	r3, [r7, #8]
 80008f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008f6:	2300      	movs	r3, #0
 80008f8:	607b      	str	r3, [r7, #4]
 80008fa:	4b19      	ldr	r3, [pc, #100]	@ (8000960 <MX_GPIO_Init+0x9c>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008fe:	4a18      	ldr	r2, [pc, #96]	@ (8000960 <MX_GPIO_Init+0x9c>)
 8000900:	f043 0301 	orr.w	r3, r3, #1
 8000904:	6313      	str	r3, [r2, #48]	@ 0x30
 8000906:	4b16      	ldr	r3, [pc, #88]	@ (8000960 <MX_GPIO_Init+0x9c>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800090a:	f003 0301 	and.w	r3, r3, #1
 800090e:	607b      	str	r3, [r7, #4]
 8000910:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000912:	2300      	movs	r3, #0
 8000914:	603b      	str	r3, [r7, #0]
 8000916:	4b12      	ldr	r3, [pc, #72]	@ (8000960 <MX_GPIO_Init+0x9c>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800091a:	4a11      	ldr	r2, [pc, #68]	@ (8000960 <MX_GPIO_Init+0x9c>)
 800091c:	f043 0308 	orr.w	r3, r3, #8
 8000920:	6313      	str	r3, [r2, #48]	@ 0x30
 8000922:	4b0f      	ldr	r3, [pc, #60]	@ (8000960 <MX_GPIO_Init+0x9c>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000926:	f003 0308 	and.w	r3, r3, #8
 800092a:	603b      	str	r3, [r7, #0]
 800092c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800092e:	2200      	movs	r2, #0
 8000930:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 8000934:	480b      	ldr	r0, [pc, #44]	@ (8000964 <MX_GPIO_Init+0xa0>)
 8000936:	f000 fdcd 	bl	80014d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800093a:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 800093e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000940:	2301      	movs	r3, #1
 8000942:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000944:	2300      	movs	r3, #0
 8000946:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000948:	2300      	movs	r3, #0
 800094a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800094c:	f107 030c 	add.w	r3, r7, #12
 8000950:	4619      	mov	r1, r3
 8000952:	4804      	ldr	r0, [pc, #16]	@ (8000964 <MX_GPIO_Init+0xa0>)
 8000954:	f000 fc22 	bl	800119c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000958:	bf00      	nop
 800095a:	3720      	adds	r7, #32
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}
 8000960:	40023800 	.word	0x40023800
 8000964:	40020c00 	.word	0x40020c00

08000968 <task1_menu_display>:

/* USER CODE BEGIN 4 */

static void task1_menu_display(void *parameters) {
 8000968:	b580      	push	{r7, lr}
 800096a:	b086      	sub	sp, #24
 800096c:	af02      	add	r7, sp, #8
 800096e:	6078      	str	r0, [r7, #4]

	char *pdata = menu;
 8000970:	4b0a      	ldr	r3, [pc, #40]	@ (800099c <task1_menu_display+0x34>)
 8000972:	60fb      	str	r3, [r7, #12]
	while (1)
	{
		xQueueSend(uart_write_queue, pdata, portMAX_DELAY);
 8000974:	4b0a      	ldr	r3, [pc, #40]	@ (80009a0 <task1_menu_display+0x38>)
 8000976:	6818      	ldr	r0, [r3, #0]
 8000978:	2300      	movs	r3, #0
 800097a:	f04f 32ff 	mov.w	r2, #4294967295
 800097e:	68f9      	ldr	r1, [r7, #12]
 8000980:	f002 ff48 	bl	8003814 <xQueueGenericSend>
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 8000984:	f04f 33ff 	mov.w	r3, #4294967295
 8000988:	9300      	str	r3, [sp, #0]
 800098a:	2300      	movs	r3, #0
 800098c:	2200      	movs	r2, #0
 800098e:	2100      	movs	r1, #0
 8000990:	2000      	movs	r0, #0
 8000992:	f004 f9fd 	bl	8004d90 <xTaskGenericNotifyWait>
		xQueueSend(uart_write_queue, pdata, portMAX_DELAY);
 8000996:	bf00      	nop
 8000998:	e7ec      	b.n	8000974 <task1_menu_display+0xc>
 800099a:	bf00      	nop
 800099c:	20000000 	.word	0x20000000
 80009a0:	2000013c 	.word	0x2000013c

080009a4 <task2_cmd_handling>:
	}

}
static void task2_cmd_handling(void *parameters) {
 80009a4:	b480      	push	{r7}
 80009a6:	b083      	sub	sp, #12
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
//
//		// queue send
//		xQueueSend(command_queue, &new_cmd, portMAX_DELAY);
//	}

}
 80009ac:	bf00      	nop
 80009ae:	370c      	adds	r7, #12
 80009b0:	46bd      	mov	sp, r7
 80009b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b6:	4770      	bx	lr

080009b8 <task3_cmd_processing>:
static void task3_cmd_processing(void *parameters) {
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b084      	sub	sp, #16
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]

	APP_CMD_t *new_cmd;
	while (1) {
		xQueueReceive(command_queue, &new_cmd, portMAX_DELAY);
 80009c0:	4b10      	ldr	r3, [pc, #64]	@ (8000a04 <task3_cmd_processing+0x4c>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	f107 010c 	add.w	r1, r7, #12
 80009c8:	f04f 32ff 	mov.w	r2, #4294967295
 80009cc:	4618      	mov	r0, r3
 80009ce:	f003 f90d 	bl	8003bec <xQueueReceive>
		if(new_cmd->CMD_num == LED_TOUGLE)
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	781b      	ldrb	r3, [r3, #0]
 80009d6:	2b02      	cmp	r3, #2
 80009d8:	d102      	bne.n	80009e0 <task3_cmd_processing+0x28>
		{
			led_toggle();
 80009da:	f000 f897 	bl	8000b0c <led_toggle>
 80009de:	e7ef      	b.n	80009c0 <task3_cmd_processing+0x8>
		}else if(new_cmd->CMD_num == LED_ON)
 80009e0:	68fb      	ldr	r3, [r7, #12]
 80009e2:	781b      	ldrb	r3, [r3, #0]
 80009e4:	2b01      	cmp	r3, #1
 80009e6:	d106      	bne.n	80009f6 <task3_cmd_processing+0x3e>
		{
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 80009e8:	2201      	movs	r2, #1
 80009ea:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80009ee:	4806      	ldr	r0, [pc, #24]	@ (8000a08 <task3_cmd_processing+0x50>)
 80009f0:	f000 fd70 	bl	80014d4 <HAL_GPIO_WritePin>
 80009f4:	e7e4      	b.n	80009c0 <task3_cmd_processing+0x8>
		}else	// LED_OFF
		{
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 80009f6:	2200      	movs	r2, #0
 80009f8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80009fc:	4802      	ldr	r0, [pc, #8]	@ (8000a08 <task3_cmd_processing+0x50>)
 80009fe:	f000 fd69 	bl	80014d4 <HAL_GPIO_WritePin>
		xQueueReceive(command_queue, &new_cmd, portMAX_DELAY);
 8000a02:	e7dd      	b.n	80009c0 <task3_cmd_processing+0x8>
 8000a04:	20000138 	.word	0x20000138
 8000a08:	40020c00 	.word	0x40020c00

08000a0c <task4_uart_write>:
		}
	}

}
static void task4_uart_write(void *parameters) {
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b084      	sub	sp, #16
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
	char *buff = NULL;
 8000a14:	2300      	movs	r3, #0
 8000a16:	60fb      	str	r3, [r7, #12]
	while (1) {
		xQueueReceive(uart_write_queue, &buff, portMAX_DELAY);
 8000a18:	4b08      	ldr	r3, [pc, #32]	@ (8000a3c <task4_uart_write+0x30>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	f107 010c 	add.w	r1, r7, #12
 8000a20:	f04f 32ff 	mov.w	r2, #4294967295
 8000a24:	4618      	mov	r0, r3
 8000a26:	f003 f8e1 	bl	8003bec <xQueueReceive>
		HAL_UART_Transmit(&huart2, buff, sizeof(buff), HAL_MAX_DELAY);
 8000a2a:	68f9      	ldr	r1, [r7, #12]
 8000a2c:	f04f 33ff 	mov.w	r3, #4294967295
 8000a30:	2204      	movs	r2, #4
 8000a32:	4803      	ldr	r0, [pc, #12]	@ (8000a40 <task4_uart_write+0x34>)
 8000a34:	f001 fd3e 	bl	80024b4 <HAL_UART_Transmit>
		xQueueReceive(uart_write_queue, &buff, portMAX_DELAY);
 8000a38:	bf00      	nop
 8000a3a:	e7ed      	b.n	8000a18 <task4_uart_write+0xc>
 8000a3c:	2000013c 	.word	0x2000013c
 8000a40:	200000e0 	.word	0x200000e0

08000a44 <HAL_UART_RxCpltCallback>:
	}

}

// uart callback function
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b086      	sub	sp, #24
 8000a48:	af02      	add	r7, sp, #8
 8000a4a:	6078      	str	r0, [r7, #4]
	command_buffer[command_len++] = (rdata & 0xff);
 8000a4c:	4b1f      	ldr	r3, [pc, #124]	@ (8000acc <HAL_UART_RxCpltCallback+0x88>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	1c5a      	adds	r2, r3, #1
 8000a52:	491e      	ldr	r1, [pc, #120]	@ (8000acc <HAL_UART_RxCpltCallback+0x88>)
 8000a54:	600a      	str	r2, [r1, #0]
 8000a56:	4a1e      	ldr	r2, [pc, #120]	@ (8000ad0 <HAL_UART_RxCpltCallback+0x8c>)
 8000a58:	7811      	ldrb	r1, [r2, #0]
 8000a5a:	4a1e      	ldr	r2, [pc, #120]	@ (8000ad4 <HAL_UART_RxCpltCallback+0x90>)
 8000a5c:	54d1      	strb	r1, [r2, r3]
	BaseType_t pxHigherPriorityTaskWoken = pdFALSE;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	60fb      	str	r3, [r7, #12]
	if (HAL_UART_Receive_IT(&huart2, &rdata, 1) != HAL_OK) {
 8000a62:	2201      	movs	r2, #1
 8000a64:	491a      	ldr	r1, [pc, #104]	@ (8000ad0 <HAL_UART_RxCpltCallback+0x8c>)
 8000a66:	481c      	ldr	r0, [pc, #112]	@ (8000ad8 <HAL_UART_RxCpltCallback+0x94>)
 8000a68:	f001 fdaf 	bl	80025ca <HAL_UART_Receive_IT>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d001      	beq.n	8000a76 <HAL_UART_RxCpltCallback+0x32>
		Error_Handler();
 8000a72:	f000 f86f 	bl	8000b54 <Error_Handler>
	}
	if(rdata == "\r")
 8000a76:	4b16      	ldr	r3, [pc, #88]	@ (8000ad0 <HAL_UART_RxCpltCallback+0x8c>)
 8000a78:	781b      	ldrb	r3, [r3, #0]
 8000a7a:	461a      	mov	r2, r3
 8000a7c:	4b17      	ldr	r3, [pc, #92]	@ (8000adc <HAL_UART_RxCpltCallback+0x98>)
 8000a7e:	429a      	cmp	r2, r3
 8000a80:	d115      	bne.n	8000aae <HAL_UART_RxCpltCallback+0x6a>
	{
		// notify to task
		xTaskNotifyFromISR(task2_handle, 0, eNoAction, pxHigherPriorityTaskWoken);
 8000a82:	4b17      	ldr	r3, [pc, #92]	@ (8000ae0 <HAL_UART_RxCpltCallback+0x9c>)
 8000a84:	6818      	ldr	r0, [r3, #0]
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	9301      	str	r3, [sp, #4]
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	9300      	str	r3, [sp, #0]
 8000a8e:	2300      	movs	r3, #0
 8000a90:	2200      	movs	r2, #0
 8000a92:	2100      	movs	r1, #0
 8000a94:	f004 fa06 	bl	8004ea4 <xTaskGenericNotifyFromISR>
		xTaskNotifyFromISR(task1_handle, 0, eNoAction, pxHigherPriorityTaskWoken);
 8000a98:	4b12      	ldr	r3, [pc, #72]	@ (8000ae4 <HAL_UART_RxCpltCallback+0xa0>)
 8000a9a:	6818      	ldr	r0, [r3, #0]
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	9301      	str	r3, [sp, #4]
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	9300      	str	r3, [sp, #0]
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	2100      	movs	r1, #0
 8000aaa:	f004 f9fb 	bl	8004ea4 <xTaskGenericNotifyFromISR>
	}
	if(pxHigherPriorityTaskWoken)
 8000aae:	68fb      	ldr	r3, [r7, #12]
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d007      	beq.n	8000ac4 <HAL_UART_RxCpltCallback+0x80>
	{
		taskYIELD();
 8000ab4:	4b0c      	ldr	r3, [pc, #48]	@ (8000ae8 <HAL_UART_RxCpltCallback+0xa4>)
 8000ab6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000aba:	601a      	str	r2, [r3, #0]
 8000abc:	f3bf 8f4f 	dsb	sy
 8000ac0:	f3bf 8f6f 	isb	sy
	}
}
 8000ac4:	bf00      	nop
 8000ac6:	3710      	adds	r7, #16
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	20000338 	.word	0x20000338
 8000ad0:	2000033c 	.word	0x2000033c
 8000ad4:	2000023c 	.word	0x2000023c
 8000ad8:	200000e0 	.word	0x200000e0
 8000adc:	080083b8 	.word	0x080083b8
 8000ae0:	2000012c 	.word	0x2000012c
 8000ae4:	20000128 	.word	0x20000128
 8000ae8:	e000ed04 	.word	0xe000ed04

08000aec <toggle_led>:

void toggle_led( TimerHandle_t xTimer )
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 8000af4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000af8:	4803      	ldr	r0, [pc, #12]	@ (8000b08 <toggle_led+0x1c>)
 8000afa:	f000 fd04 	bl	8001506 <HAL_GPIO_TogglePin>
}
 8000afe:	bf00      	nop
 8000b00:	3708      	adds	r7, #8
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	40020c00 	.word	0x40020c00

08000b0c <led_toggle>:

void led_toggle(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af02      	add	r7, sp, #8
	// created sw timer
	xTimerCreate("LED_TOGGLE", pdMS_TO_TICKS(200), pdTRUE, (void*)0, toggle_led);
 8000b12:	4b05      	ldr	r3, [pc, #20]	@ (8000b28 <led_toggle+0x1c>)
 8000b14:	9300      	str	r3, [sp, #0]
 8000b16:	2300      	movs	r3, #0
 8000b18:	2201      	movs	r2, #1
 8000b1a:	21c8      	movs	r1, #200	@ 0xc8
 8000b1c:	4803      	ldr	r0, [pc, #12]	@ (8000b2c <led_toggle+0x20>)
 8000b1e:	f004 fb87 	bl	8005230 <xTimerCreate>
	// start sw timer
}
 8000b22:	bf00      	nop
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	08000aed 	.word	0x08000aed
 8000b2c:	080083bc 	.word	0x080083bc

08000b30 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	4a04      	ldr	r2, [pc, #16]	@ (8000b50 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b3e:	4293      	cmp	r3, r2
 8000b40:	d101      	bne.n	8000b46 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b42:	f000 f997 	bl	8000e74 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b46:	bf00      	nop
 8000b48:	3708      	adds	r7, #8
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	40001000 	.word	0x40001000

08000b54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000b58:	bf00      	nop
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr
	...

08000b64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	607b      	str	r3, [r7, #4]
 8000b6e:	4b10      	ldr	r3, [pc, #64]	@ (8000bb0 <HAL_MspInit+0x4c>)
 8000b70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b72:	4a0f      	ldr	r2, [pc, #60]	@ (8000bb0 <HAL_MspInit+0x4c>)
 8000b74:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b78:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b7a:	4b0d      	ldr	r3, [pc, #52]	@ (8000bb0 <HAL_MspInit+0x4c>)
 8000b7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b7e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b82:	607b      	str	r3, [r7, #4]
 8000b84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b86:	2300      	movs	r3, #0
 8000b88:	603b      	str	r3, [r7, #0]
 8000b8a:	4b09      	ldr	r3, [pc, #36]	@ (8000bb0 <HAL_MspInit+0x4c>)
 8000b8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b8e:	4a08      	ldr	r2, [pc, #32]	@ (8000bb0 <HAL_MspInit+0x4c>)
 8000b90:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b94:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b96:	4b06      	ldr	r3, [pc, #24]	@ (8000bb0 <HAL_MspInit+0x4c>)
 8000b98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b9e:	603b      	str	r3, [r7, #0]
 8000ba0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  vInitPrioGroupValue();
 8000ba2:	f004 ffc3 	bl	8005b2c <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 8000ba6:	bf00      	nop
 8000ba8:	3708      	adds	r7, #8
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	40023800 	.word	0x40023800

08000bb4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b08a      	sub	sp, #40	@ 0x28
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bbc:	f107 0314 	add.w	r3, r7, #20
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	601a      	str	r2, [r3, #0]
 8000bc4:	605a      	str	r2, [r3, #4]
 8000bc6:	609a      	str	r2, [r3, #8]
 8000bc8:	60da      	str	r2, [r3, #12]
 8000bca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	4a1d      	ldr	r2, [pc, #116]	@ (8000c48 <HAL_UART_MspInit+0x94>)
 8000bd2:	4293      	cmp	r3, r2
 8000bd4:	d133      	bne.n	8000c3e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	613b      	str	r3, [r7, #16]
 8000bda:	4b1c      	ldr	r3, [pc, #112]	@ (8000c4c <HAL_UART_MspInit+0x98>)
 8000bdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bde:	4a1b      	ldr	r2, [pc, #108]	@ (8000c4c <HAL_UART_MspInit+0x98>)
 8000be0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000be4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000be6:	4b19      	ldr	r3, [pc, #100]	@ (8000c4c <HAL_UART_MspInit+0x98>)
 8000be8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000bee:	613b      	str	r3, [r7, #16]
 8000bf0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	60fb      	str	r3, [r7, #12]
 8000bf6:	4b15      	ldr	r3, [pc, #84]	@ (8000c4c <HAL_UART_MspInit+0x98>)
 8000bf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bfa:	4a14      	ldr	r2, [pc, #80]	@ (8000c4c <HAL_UART_MspInit+0x98>)
 8000bfc:	f043 0301 	orr.w	r3, r3, #1
 8000c00:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c02:	4b12      	ldr	r3, [pc, #72]	@ (8000c4c <HAL_UART_MspInit+0x98>)
 8000c04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c06:	f003 0301 	and.w	r3, r3, #1
 8000c0a:	60fb      	str	r3, [r7, #12]
 8000c0c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000c0e:	230c      	movs	r3, #12
 8000c10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c12:	2302      	movs	r3, #2
 8000c14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c16:	2300      	movs	r3, #0
 8000c18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c1a:	2303      	movs	r3, #3
 8000c1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c1e:	2307      	movs	r3, #7
 8000c20:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c22:	f107 0314 	add.w	r3, r7, #20
 8000c26:	4619      	mov	r1, r3
 8000c28:	4809      	ldr	r0, [pc, #36]	@ (8000c50 <HAL_UART_MspInit+0x9c>)
 8000c2a:	f000 fab7 	bl	800119c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000c2e:	2200      	movs	r2, #0
 8000c30:	2100      	movs	r1, #0
 8000c32:	2026      	movs	r0, #38	@ 0x26
 8000c34:	f000 f9f6 	bl	8001024 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000c38:	2026      	movs	r0, #38	@ 0x26
 8000c3a:	f000 fa0f 	bl	800105c <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000c3e:	bf00      	nop
 8000c40:	3728      	adds	r7, #40	@ 0x28
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	40004400 	.word	0x40004400
 8000c4c:	40023800 	.word	0x40023800
 8000c50:	40020000 	.word	0x40020000

08000c54 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b08e      	sub	sp, #56	@ 0x38
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000c60:	2300      	movs	r3, #0
 8000c62:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000c64:	2300      	movs	r3, #0
 8000c66:	60fb      	str	r3, [r7, #12]
 8000c68:	4b33      	ldr	r3, [pc, #204]	@ (8000d38 <HAL_InitTick+0xe4>)
 8000c6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c6c:	4a32      	ldr	r2, [pc, #200]	@ (8000d38 <HAL_InitTick+0xe4>)
 8000c6e:	f043 0310 	orr.w	r3, r3, #16
 8000c72:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c74:	4b30      	ldr	r3, [pc, #192]	@ (8000d38 <HAL_InitTick+0xe4>)
 8000c76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c78:	f003 0310 	and.w	r3, r3, #16
 8000c7c:	60fb      	str	r3, [r7, #12]
 8000c7e:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c80:	f107 0210 	add.w	r2, r7, #16
 8000c84:	f107 0314 	add.w	r3, r7, #20
 8000c88:	4611      	mov	r1, r2
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f001 f8ee 	bl	8001e6c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000c90:	6a3b      	ldr	r3, [r7, #32]
 8000c92:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000c94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d103      	bne.n	8000ca2 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000c9a:	f001 f8bf 	bl	8001e1c <HAL_RCC_GetPCLK1Freq>
 8000c9e:	6378      	str	r0, [r7, #52]	@ 0x34
 8000ca0:	e004      	b.n	8000cac <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000ca2:	f001 f8bb 	bl	8001e1c <HAL_RCC_GetPCLK1Freq>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	005b      	lsls	r3, r3, #1
 8000caa:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000cac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000cae:	4a23      	ldr	r2, [pc, #140]	@ (8000d3c <HAL_InitTick+0xe8>)
 8000cb0:	fba2 2303 	umull	r2, r3, r2, r3
 8000cb4:	0c9b      	lsrs	r3, r3, #18
 8000cb6:	3b01      	subs	r3, #1
 8000cb8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000cba:	4b21      	ldr	r3, [pc, #132]	@ (8000d40 <HAL_InitTick+0xec>)
 8000cbc:	4a21      	ldr	r2, [pc, #132]	@ (8000d44 <HAL_InitTick+0xf0>)
 8000cbe:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000cc0:	4b1f      	ldr	r3, [pc, #124]	@ (8000d40 <HAL_InitTick+0xec>)
 8000cc2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000cc6:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000cc8:	4a1d      	ldr	r2, [pc, #116]	@ (8000d40 <HAL_InitTick+0xec>)
 8000cca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000ccc:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000cce:	4b1c      	ldr	r3, [pc, #112]	@ (8000d40 <HAL_InitTick+0xec>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cd4:	4b1a      	ldr	r3, [pc, #104]	@ (8000d40 <HAL_InitTick+0xec>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cda:	4b19      	ldr	r3, [pc, #100]	@ (8000d40 <HAL_InitTick+0xec>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000ce0:	4817      	ldr	r0, [pc, #92]	@ (8000d40 <HAL_InitTick+0xec>)
 8000ce2:	f001 f8f5 	bl	8001ed0 <HAL_TIM_Base_Init>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000cec:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d11b      	bne.n	8000d2c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000cf4:	4812      	ldr	r0, [pc, #72]	@ (8000d40 <HAL_InitTick+0xec>)
 8000cf6:	f001 f945 	bl	8001f84 <HAL_TIM_Base_Start_IT>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000d00:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d111      	bne.n	8000d2c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000d08:	2036      	movs	r0, #54	@ 0x36
 8000d0a:	f000 f9a7 	bl	800105c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	2b0f      	cmp	r3, #15
 8000d12:	d808      	bhi.n	8000d26 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000d14:	2200      	movs	r2, #0
 8000d16:	6879      	ldr	r1, [r7, #4]
 8000d18:	2036      	movs	r0, #54	@ 0x36
 8000d1a:	f000 f983 	bl	8001024 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d1e:	4a0a      	ldr	r2, [pc, #40]	@ (8000d48 <HAL_InitTick+0xf4>)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	6013      	str	r3, [r2, #0]
 8000d24:	e002      	b.n	8000d2c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000d26:	2301      	movs	r3, #1
 8000d28:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000d2c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000d30:	4618      	mov	r0, r3
 8000d32:	3738      	adds	r7, #56	@ 0x38
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	40023800 	.word	0x40023800
 8000d3c:	431bde83 	.word	0x431bde83
 8000d40:	20000340 	.word	0x20000340
 8000d44:	40001000 	.word	0x40001000
 8000d48:	20000064 	.word	0x20000064

08000d4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000d50:	bf00      	nop
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr

08000d5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d5a:	b480      	push	{r7}
 8000d5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d5e:	bf00      	nop
 8000d60:	e7fd      	b.n	8000d5e <HardFault_Handler+0x4>

08000d62 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d62:	b480      	push	{r7}
 8000d64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d66:	bf00      	nop
 8000d68:	e7fd      	b.n	8000d66 <MemManage_Handler+0x4>

08000d6a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d6a:	b480      	push	{r7}
 8000d6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d6e:	bf00      	nop
 8000d70:	e7fd      	b.n	8000d6e <BusFault_Handler+0x4>

08000d72 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d72:	b480      	push	{r7}
 8000d74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d76:	bf00      	nop
 8000d78:	e7fd      	b.n	8000d76 <UsageFault_Handler+0x4>

08000d7a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d7a:	b480      	push	{r7}
 8000d7c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d7e:	bf00      	nop
 8000d80:	46bd      	mov	sp, r7
 8000d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d86:	4770      	bx	lr

08000d88 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000d8c:	4802      	ldr	r0, [pc, #8]	@ (8000d98 <USART2_IRQHandler+0x10>)
 8000d8e:	f001 fc41 	bl	8002614 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000d92:	bf00      	nop
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	200000e0 	.word	0x200000e0

08000d9c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000da0:	4802      	ldr	r0, [pc, #8]	@ (8000dac <TIM6_DAC_IRQHandler+0x10>)
 8000da2:	f001 f95f 	bl	8002064 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000da6:	bf00      	nop
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	20000340 	.word	0x20000340

08000db0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000db4:	4b08      	ldr	r3, [pc, #32]	@ (8000dd8 <SystemInit+0x28>)
 8000db6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000dba:	4a07      	ldr	r2, [pc, #28]	@ (8000dd8 <SystemInit+0x28>)
 8000dbc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000dc0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000dc4:	4b04      	ldr	r3, [pc, #16]	@ (8000dd8 <SystemInit+0x28>)
 8000dc6:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000dca:	609a      	str	r2, [r3, #8]
#endif
}
 8000dcc:	bf00      	nop
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	e000ed00 	.word	0xe000ed00

08000ddc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000ddc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e14 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000de0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000de2:	e003      	b.n	8000dec <LoopCopyDataInit>

08000de4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000de4:	4b0c      	ldr	r3, [pc, #48]	@ (8000e18 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000de6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000de8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000dea:	3104      	adds	r1, #4

08000dec <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000dec:	480b      	ldr	r0, [pc, #44]	@ (8000e1c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000dee:	4b0c      	ldr	r3, [pc, #48]	@ (8000e20 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000df0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000df2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000df4:	d3f6      	bcc.n	8000de4 <CopyDataInit>
  ldr  r2, =_sbss
 8000df6:	4a0b      	ldr	r2, [pc, #44]	@ (8000e24 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000df8:	e002      	b.n	8000e00 <LoopFillZerobss>

08000dfa <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000dfa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000dfc:	f842 3b04 	str.w	r3, [r2], #4

08000e00 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000e00:	4b09      	ldr	r3, [pc, #36]	@ (8000e28 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000e02:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000e04:	d3f9      	bcc.n	8000dfa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000e06:	f7ff ffd3 	bl	8000db0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e0a:	f006 fe2d 	bl	8007a68 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e0e:	f7ff fbf7 	bl	8000600 <main>
  bx  lr    
 8000e12:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000e14:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000e18:	080084b8 	.word	0x080084b8
  ldr  r0, =_sdata
 8000e1c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000e20:	200000c4 	.word	0x200000c4
  ldr  r2, =_sbss
 8000e24:	200000c4 	.word	0x200000c4
  ldr  r3, = _ebss
 8000e28:	200138f0 	.word	0x200138f0

08000e2c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e2c:	e7fe      	b.n	8000e2c <ADC_IRQHandler>
	...

08000e30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e34:	4b0e      	ldr	r3, [pc, #56]	@ (8000e70 <HAL_Init+0x40>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	4a0d      	ldr	r2, [pc, #52]	@ (8000e70 <HAL_Init+0x40>)
 8000e3a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e3e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e40:	4b0b      	ldr	r3, [pc, #44]	@ (8000e70 <HAL_Init+0x40>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4a0a      	ldr	r2, [pc, #40]	@ (8000e70 <HAL_Init+0x40>)
 8000e46:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000e4a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e4c:	4b08      	ldr	r3, [pc, #32]	@ (8000e70 <HAL_Init+0x40>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4a07      	ldr	r2, [pc, #28]	@ (8000e70 <HAL_Init+0x40>)
 8000e52:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e56:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e58:	2003      	movs	r0, #3
 8000e5a:	f000 f8d8 	bl	800100e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e5e:	200f      	movs	r0, #15
 8000e60:	f7ff fef8 	bl	8000c54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e64:	f7ff fe7e 	bl	8000b64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e68:	2300      	movs	r3, #0
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	40023c00 	.word	0x40023c00

08000e74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e78:	4b06      	ldr	r3, [pc, #24]	@ (8000e94 <HAL_IncTick+0x20>)
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	461a      	mov	r2, r3
 8000e7e:	4b06      	ldr	r3, [pc, #24]	@ (8000e98 <HAL_IncTick+0x24>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	4413      	add	r3, r2
 8000e84:	4a04      	ldr	r2, [pc, #16]	@ (8000e98 <HAL_IncTick+0x24>)
 8000e86:	6013      	str	r3, [r2, #0]
}
 8000e88:	bf00      	nop
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop
 8000e94:	20000068 	.word	0x20000068
 8000e98:	20000388 	.word	0x20000388

08000e9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  return uwTick;
 8000ea0:	4b03      	ldr	r3, [pc, #12]	@ (8000eb0 <HAL_GetTick+0x14>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
}
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop
 8000eb0:	20000388 	.word	0x20000388

08000eb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b085      	sub	sp, #20
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	f003 0307 	and.w	r3, r3, #7
 8000ec2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ec4:	4b0c      	ldr	r3, [pc, #48]	@ (8000ef8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ec6:	68db      	ldr	r3, [r3, #12]
 8000ec8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eca:	68ba      	ldr	r2, [r7, #8]
 8000ecc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ed8:	68bb      	ldr	r3, [r7, #8]
 8000eda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000edc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ee0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ee4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ee6:	4a04      	ldr	r2, [pc, #16]	@ (8000ef8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ee8:	68bb      	ldr	r3, [r7, #8]
 8000eea:	60d3      	str	r3, [r2, #12]
}
 8000eec:	bf00      	nop
 8000eee:	3714      	adds	r7, #20
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef6:	4770      	bx	lr
 8000ef8:	e000ed00 	.word	0xe000ed00

08000efc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f00:	4b04      	ldr	r3, [pc, #16]	@ (8000f14 <__NVIC_GetPriorityGrouping+0x18>)
 8000f02:	68db      	ldr	r3, [r3, #12]
 8000f04:	0a1b      	lsrs	r3, r3, #8
 8000f06:	f003 0307 	and.w	r3, r3, #7
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr
 8000f14:	e000ed00 	.word	0xe000ed00

08000f18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b083      	sub	sp, #12
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	4603      	mov	r3, r0
 8000f20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	db0b      	blt.n	8000f42 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f2a:	79fb      	ldrb	r3, [r7, #7]
 8000f2c:	f003 021f 	and.w	r2, r3, #31
 8000f30:	4907      	ldr	r1, [pc, #28]	@ (8000f50 <__NVIC_EnableIRQ+0x38>)
 8000f32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f36:	095b      	lsrs	r3, r3, #5
 8000f38:	2001      	movs	r0, #1
 8000f3a:	fa00 f202 	lsl.w	r2, r0, r2
 8000f3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f42:	bf00      	nop
 8000f44:	370c      	adds	r7, #12
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop
 8000f50:	e000e100 	.word	0xe000e100

08000f54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b083      	sub	sp, #12
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	6039      	str	r1, [r7, #0]
 8000f5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	db0a      	blt.n	8000f7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	b2da      	uxtb	r2, r3
 8000f6c:	490c      	ldr	r1, [pc, #48]	@ (8000fa0 <__NVIC_SetPriority+0x4c>)
 8000f6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f72:	0112      	lsls	r2, r2, #4
 8000f74:	b2d2      	uxtb	r2, r2
 8000f76:	440b      	add	r3, r1
 8000f78:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f7c:	e00a      	b.n	8000f94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	b2da      	uxtb	r2, r3
 8000f82:	4908      	ldr	r1, [pc, #32]	@ (8000fa4 <__NVIC_SetPriority+0x50>)
 8000f84:	79fb      	ldrb	r3, [r7, #7]
 8000f86:	f003 030f 	and.w	r3, r3, #15
 8000f8a:	3b04      	subs	r3, #4
 8000f8c:	0112      	lsls	r2, r2, #4
 8000f8e:	b2d2      	uxtb	r2, r2
 8000f90:	440b      	add	r3, r1
 8000f92:	761a      	strb	r2, [r3, #24]
}
 8000f94:	bf00      	nop
 8000f96:	370c      	adds	r7, #12
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9e:	4770      	bx	lr
 8000fa0:	e000e100 	.word	0xe000e100
 8000fa4:	e000ed00 	.word	0xe000ed00

08000fa8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b089      	sub	sp, #36	@ 0x24
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	60f8      	str	r0, [r7, #12]
 8000fb0:	60b9      	str	r1, [r7, #8]
 8000fb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	f003 0307 	and.w	r3, r3, #7
 8000fba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fbc:	69fb      	ldr	r3, [r7, #28]
 8000fbe:	f1c3 0307 	rsb	r3, r3, #7
 8000fc2:	2b04      	cmp	r3, #4
 8000fc4:	bf28      	it	cs
 8000fc6:	2304      	movcs	r3, #4
 8000fc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fca:	69fb      	ldr	r3, [r7, #28]
 8000fcc:	3304      	adds	r3, #4
 8000fce:	2b06      	cmp	r3, #6
 8000fd0:	d902      	bls.n	8000fd8 <NVIC_EncodePriority+0x30>
 8000fd2:	69fb      	ldr	r3, [r7, #28]
 8000fd4:	3b03      	subs	r3, #3
 8000fd6:	e000      	b.n	8000fda <NVIC_EncodePriority+0x32>
 8000fd8:	2300      	movs	r3, #0
 8000fda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fdc:	f04f 32ff 	mov.w	r2, #4294967295
 8000fe0:	69bb      	ldr	r3, [r7, #24]
 8000fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe6:	43da      	mvns	r2, r3
 8000fe8:	68bb      	ldr	r3, [r7, #8]
 8000fea:	401a      	ands	r2, r3
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ff0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	fa01 f303 	lsl.w	r3, r1, r3
 8000ffa:	43d9      	mvns	r1, r3
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001000:	4313      	orrs	r3, r2
         );
}
 8001002:	4618      	mov	r0, r3
 8001004:	3724      	adds	r7, #36	@ 0x24
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr

0800100e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800100e:	b580      	push	{r7, lr}
 8001010:	b082      	sub	sp, #8
 8001012:	af00      	add	r7, sp, #0
 8001014:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001016:	6878      	ldr	r0, [r7, #4]
 8001018:	f7ff ff4c 	bl	8000eb4 <__NVIC_SetPriorityGrouping>
}
 800101c:	bf00      	nop
 800101e:	3708      	adds	r7, #8
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}

08001024 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001024:	b580      	push	{r7, lr}
 8001026:	b086      	sub	sp, #24
 8001028:	af00      	add	r7, sp, #0
 800102a:	4603      	mov	r3, r0
 800102c:	60b9      	str	r1, [r7, #8]
 800102e:	607a      	str	r2, [r7, #4]
 8001030:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001032:	2300      	movs	r3, #0
 8001034:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001036:	f7ff ff61 	bl	8000efc <__NVIC_GetPriorityGrouping>
 800103a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800103c:	687a      	ldr	r2, [r7, #4]
 800103e:	68b9      	ldr	r1, [r7, #8]
 8001040:	6978      	ldr	r0, [r7, #20]
 8001042:	f7ff ffb1 	bl	8000fa8 <NVIC_EncodePriority>
 8001046:	4602      	mov	r2, r0
 8001048:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800104c:	4611      	mov	r1, r2
 800104e:	4618      	mov	r0, r3
 8001050:	f7ff ff80 	bl	8000f54 <__NVIC_SetPriority>
}
 8001054:	bf00      	nop
 8001056:	3718      	adds	r7, #24
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}

0800105c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
 8001062:	4603      	mov	r3, r0
 8001064:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001066:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800106a:	4618      	mov	r0, r3
 800106c:	f7ff ff54 	bl	8000f18 <__NVIC_EnableIRQ>
}
 8001070:	bf00      	nop
 8001072:	3708      	adds	r7, #8
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}

08001078 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b084      	sub	sp, #16
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001084:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001086:	f7ff ff09 	bl	8000e9c <HAL_GetTick>
 800108a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001092:	b2db      	uxtb	r3, r3
 8001094:	2b02      	cmp	r3, #2
 8001096:	d008      	beq.n	80010aa <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	2280      	movs	r2, #128	@ 0x80
 800109c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	2200      	movs	r2, #0
 80010a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80010a6:	2301      	movs	r3, #1
 80010a8:	e052      	b.n	8001150 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	681a      	ldr	r2, [r3, #0]
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f022 0216 	bic.w	r2, r2, #22
 80010b8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	695a      	ldr	r2, [r3, #20]
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80010c8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d103      	bne.n	80010da <HAL_DMA_Abort+0x62>
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d007      	beq.n	80010ea <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	681a      	ldr	r2, [r3, #0]
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f022 0208 	bic.w	r2, r2, #8
 80010e8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	681a      	ldr	r2, [r3, #0]
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f022 0201 	bic.w	r2, r2, #1
 80010f8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80010fa:	e013      	b.n	8001124 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80010fc:	f7ff fece 	bl	8000e9c <HAL_GetTick>
 8001100:	4602      	mov	r2, r0
 8001102:	68bb      	ldr	r3, [r7, #8]
 8001104:	1ad3      	subs	r3, r2, r3
 8001106:	2b05      	cmp	r3, #5
 8001108:	d90c      	bls.n	8001124 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	2220      	movs	r2, #32
 800110e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	2203      	movs	r2, #3
 8001114:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	2200      	movs	r2, #0
 800111c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001120:	2303      	movs	r3, #3
 8001122:	e015      	b.n	8001150 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f003 0301 	and.w	r3, r3, #1
 800112e:	2b00      	cmp	r3, #0
 8001130:	d1e4      	bne.n	80010fc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001136:	223f      	movs	r2, #63	@ 0x3f
 8001138:	409a      	lsls	r2, r3
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	2201      	movs	r2, #1
 8001142:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	2200      	movs	r2, #0
 800114a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800114e:	2300      	movs	r3, #0
}
 8001150:	4618      	mov	r0, r3
 8001152:	3710      	adds	r7, #16
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}

08001158 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001158:	b480      	push	{r7}
 800115a:	b083      	sub	sp, #12
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001166:	b2db      	uxtb	r3, r3
 8001168:	2b02      	cmp	r3, #2
 800116a:	d004      	beq.n	8001176 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	2280      	movs	r2, #128	@ 0x80
 8001170:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001172:	2301      	movs	r3, #1
 8001174:	e00c      	b.n	8001190 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	2205      	movs	r2, #5
 800117a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	681a      	ldr	r2, [r3, #0]
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f022 0201 	bic.w	r2, r2, #1
 800118c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800118e:	2300      	movs	r3, #0
}
 8001190:	4618      	mov	r0, r3
 8001192:	370c      	adds	r7, #12
 8001194:	46bd      	mov	sp, r7
 8001196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119a:	4770      	bx	lr

0800119c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800119c:	b480      	push	{r7}
 800119e:	b089      	sub	sp, #36	@ 0x24
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
 80011a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80011a6:	2300      	movs	r3, #0
 80011a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80011aa:	2300      	movs	r3, #0
 80011ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80011ae:	2300      	movs	r3, #0
 80011b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011b2:	2300      	movs	r3, #0
 80011b4:	61fb      	str	r3, [r7, #28]
 80011b6:	e16b      	b.n	8001490 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80011b8:	2201      	movs	r2, #1
 80011ba:	69fb      	ldr	r3, [r7, #28]
 80011bc:	fa02 f303 	lsl.w	r3, r2, r3
 80011c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	697a      	ldr	r2, [r7, #20]
 80011c8:	4013      	ands	r3, r2
 80011ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80011cc:	693a      	ldr	r2, [r7, #16]
 80011ce:	697b      	ldr	r3, [r7, #20]
 80011d0:	429a      	cmp	r2, r3
 80011d2:	f040 815a 	bne.w	800148a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	f003 0303 	and.w	r3, r3, #3
 80011de:	2b01      	cmp	r3, #1
 80011e0:	d005      	beq.n	80011ee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011ea:	2b02      	cmp	r3, #2
 80011ec:	d130      	bne.n	8001250 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	689b      	ldr	r3, [r3, #8]
 80011f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011f4:	69fb      	ldr	r3, [r7, #28]
 80011f6:	005b      	lsls	r3, r3, #1
 80011f8:	2203      	movs	r2, #3
 80011fa:	fa02 f303 	lsl.w	r3, r2, r3
 80011fe:	43db      	mvns	r3, r3
 8001200:	69ba      	ldr	r2, [r7, #24]
 8001202:	4013      	ands	r3, r2
 8001204:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	68da      	ldr	r2, [r3, #12]
 800120a:	69fb      	ldr	r3, [r7, #28]
 800120c:	005b      	lsls	r3, r3, #1
 800120e:	fa02 f303 	lsl.w	r3, r2, r3
 8001212:	69ba      	ldr	r2, [r7, #24]
 8001214:	4313      	orrs	r3, r2
 8001216:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	69ba      	ldr	r2, [r7, #24]
 800121c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001224:	2201      	movs	r2, #1
 8001226:	69fb      	ldr	r3, [r7, #28]
 8001228:	fa02 f303 	lsl.w	r3, r2, r3
 800122c:	43db      	mvns	r3, r3
 800122e:	69ba      	ldr	r2, [r7, #24]
 8001230:	4013      	ands	r3, r2
 8001232:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	091b      	lsrs	r3, r3, #4
 800123a:	f003 0201 	and.w	r2, r3, #1
 800123e:	69fb      	ldr	r3, [r7, #28]
 8001240:	fa02 f303 	lsl.w	r3, r2, r3
 8001244:	69ba      	ldr	r2, [r7, #24]
 8001246:	4313      	orrs	r3, r2
 8001248:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	69ba      	ldr	r2, [r7, #24]
 800124e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	f003 0303 	and.w	r3, r3, #3
 8001258:	2b03      	cmp	r3, #3
 800125a:	d017      	beq.n	800128c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	68db      	ldr	r3, [r3, #12]
 8001260:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001262:	69fb      	ldr	r3, [r7, #28]
 8001264:	005b      	lsls	r3, r3, #1
 8001266:	2203      	movs	r2, #3
 8001268:	fa02 f303 	lsl.w	r3, r2, r3
 800126c:	43db      	mvns	r3, r3
 800126e:	69ba      	ldr	r2, [r7, #24]
 8001270:	4013      	ands	r3, r2
 8001272:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	689a      	ldr	r2, [r3, #8]
 8001278:	69fb      	ldr	r3, [r7, #28]
 800127a:	005b      	lsls	r3, r3, #1
 800127c:	fa02 f303 	lsl.w	r3, r2, r3
 8001280:	69ba      	ldr	r2, [r7, #24]
 8001282:	4313      	orrs	r3, r2
 8001284:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	69ba      	ldr	r2, [r7, #24]
 800128a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	f003 0303 	and.w	r3, r3, #3
 8001294:	2b02      	cmp	r3, #2
 8001296:	d123      	bne.n	80012e0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001298:	69fb      	ldr	r3, [r7, #28]
 800129a:	08da      	lsrs	r2, r3, #3
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	3208      	adds	r2, #8
 80012a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	f003 0307 	and.w	r3, r3, #7
 80012ac:	009b      	lsls	r3, r3, #2
 80012ae:	220f      	movs	r2, #15
 80012b0:	fa02 f303 	lsl.w	r3, r2, r3
 80012b4:	43db      	mvns	r3, r3
 80012b6:	69ba      	ldr	r2, [r7, #24]
 80012b8:	4013      	ands	r3, r2
 80012ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	691a      	ldr	r2, [r3, #16]
 80012c0:	69fb      	ldr	r3, [r7, #28]
 80012c2:	f003 0307 	and.w	r3, r3, #7
 80012c6:	009b      	lsls	r3, r3, #2
 80012c8:	fa02 f303 	lsl.w	r3, r2, r3
 80012cc:	69ba      	ldr	r2, [r7, #24]
 80012ce:	4313      	orrs	r3, r2
 80012d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012d2:	69fb      	ldr	r3, [r7, #28]
 80012d4:	08da      	lsrs	r2, r3, #3
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	3208      	adds	r2, #8
 80012da:	69b9      	ldr	r1, [r7, #24]
 80012dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012e6:	69fb      	ldr	r3, [r7, #28]
 80012e8:	005b      	lsls	r3, r3, #1
 80012ea:	2203      	movs	r2, #3
 80012ec:	fa02 f303 	lsl.w	r3, r2, r3
 80012f0:	43db      	mvns	r3, r3
 80012f2:	69ba      	ldr	r2, [r7, #24]
 80012f4:	4013      	ands	r3, r2
 80012f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	f003 0203 	and.w	r2, r3, #3
 8001300:	69fb      	ldr	r3, [r7, #28]
 8001302:	005b      	lsls	r3, r3, #1
 8001304:	fa02 f303 	lsl.w	r3, r2, r3
 8001308:	69ba      	ldr	r2, [r7, #24]
 800130a:	4313      	orrs	r3, r2
 800130c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	69ba      	ldr	r2, [r7, #24]
 8001312:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800131c:	2b00      	cmp	r3, #0
 800131e:	f000 80b4 	beq.w	800148a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001322:	2300      	movs	r3, #0
 8001324:	60fb      	str	r3, [r7, #12]
 8001326:	4b60      	ldr	r3, [pc, #384]	@ (80014a8 <HAL_GPIO_Init+0x30c>)
 8001328:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800132a:	4a5f      	ldr	r2, [pc, #380]	@ (80014a8 <HAL_GPIO_Init+0x30c>)
 800132c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001330:	6453      	str	r3, [r2, #68]	@ 0x44
 8001332:	4b5d      	ldr	r3, [pc, #372]	@ (80014a8 <HAL_GPIO_Init+0x30c>)
 8001334:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001336:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800133a:	60fb      	str	r3, [r7, #12]
 800133c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800133e:	4a5b      	ldr	r2, [pc, #364]	@ (80014ac <HAL_GPIO_Init+0x310>)
 8001340:	69fb      	ldr	r3, [r7, #28]
 8001342:	089b      	lsrs	r3, r3, #2
 8001344:	3302      	adds	r3, #2
 8001346:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800134a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800134c:	69fb      	ldr	r3, [r7, #28]
 800134e:	f003 0303 	and.w	r3, r3, #3
 8001352:	009b      	lsls	r3, r3, #2
 8001354:	220f      	movs	r2, #15
 8001356:	fa02 f303 	lsl.w	r3, r2, r3
 800135a:	43db      	mvns	r3, r3
 800135c:	69ba      	ldr	r2, [r7, #24]
 800135e:	4013      	ands	r3, r2
 8001360:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	4a52      	ldr	r2, [pc, #328]	@ (80014b0 <HAL_GPIO_Init+0x314>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d02b      	beq.n	80013c2 <HAL_GPIO_Init+0x226>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	4a51      	ldr	r2, [pc, #324]	@ (80014b4 <HAL_GPIO_Init+0x318>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d025      	beq.n	80013be <HAL_GPIO_Init+0x222>
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	4a50      	ldr	r2, [pc, #320]	@ (80014b8 <HAL_GPIO_Init+0x31c>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d01f      	beq.n	80013ba <HAL_GPIO_Init+0x21e>
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	4a4f      	ldr	r2, [pc, #316]	@ (80014bc <HAL_GPIO_Init+0x320>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d019      	beq.n	80013b6 <HAL_GPIO_Init+0x21a>
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	4a4e      	ldr	r2, [pc, #312]	@ (80014c0 <HAL_GPIO_Init+0x324>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d013      	beq.n	80013b2 <HAL_GPIO_Init+0x216>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	4a4d      	ldr	r2, [pc, #308]	@ (80014c4 <HAL_GPIO_Init+0x328>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d00d      	beq.n	80013ae <HAL_GPIO_Init+0x212>
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	4a4c      	ldr	r2, [pc, #304]	@ (80014c8 <HAL_GPIO_Init+0x32c>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d007      	beq.n	80013aa <HAL_GPIO_Init+0x20e>
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	4a4b      	ldr	r2, [pc, #300]	@ (80014cc <HAL_GPIO_Init+0x330>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d101      	bne.n	80013a6 <HAL_GPIO_Init+0x20a>
 80013a2:	2307      	movs	r3, #7
 80013a4:	e00e      	b.n	80013c4 <HAL_GPIO_Init+0x228>
 80013a6:	2308      	movs	r3, #8
 80013a8:	e00c      	b.n	80013c4 <HAL_GPIO_Init+0x228>
 80013aa:	2306      	movs	r3, #6
 80013ac:	e00a      	b.n	80013c4 <HAL_GPIO_Init+0x228>
 80013ae:	2305      	movs	r3, #5
 80013b0:	e008      	b.n	80013c4 <HAL_GPIO_Init+0x228>
 80013b2:	2304      	movs	r3, #4
 80013b4:	e006      	b.n	80013c4 <HAL_GPIO_Init+0x228>
 80013b6:	2303      	movs	r3, #3
 80013b8:	e004      	b.n	80013c4 <HAL_GPIO_Init+0x228>
 80013ba:	2302      	movs	r3, #2
 80013bc:	e002      	b.n	80013c4 <HAL_GPIO_Init+0x228>
 80013be:	2301      	movs	r3, #1
 80013c0:	e000      	b.n	80013c4 <HAL_GPIO_Init+0x228>
 80013c2:	2300      	movs	r3, #0
 80013c4:	69fa      	ldr	r2, [r7, #28]
 80013c6:	f002 0203 	and.w	r2, r2, #3
 80013ca:	0092      	lsls	r2, r2, #2
 80013cc:	4093      	lsls	r3, r2
 80013ce:	69ba      	ldr	r2, [r7, #24]
 80013d0:	4313      	orrs	r3, r2
 80013d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013d4:	4935      	ldr	r1, [pc, #212]	@ (80014ac <HAL_GPIO_Init+0x310>)
 80013d6:	69fb      	ldr	r3, [r7, #28]
 80013d8:	089b      	lsrs	r3, r3, #2
 80013da:	3302      	adds	r3, #2
 80013dc:	69ba      	ldr	r2, [r7, #24]
 80013de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013e2:	4b3b      	ldr	r3, [pc, #236]	@ (80014d0 <HAL_GPIO_Init+0x334>)
 80013e4:	689b      	ldr	r3, [r3, #8]
 80013e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013e8:	693b      	ldr	r3, [r7, #16]
 80013ea:	43db      	mvns	r3, r3
 80013ec:	69ba      	ldr	r2, [r7, #24]
 80013ee:	4013      	ands	r3, r2
 80013f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d003      	beq.n	8001406 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80013fe:	69ba      	ldr	r2, [r7, #24]
 8001400:	693b      	ldr	r3, [r7, #16]
 8001402:	4313      	orrs	r3, r2
 8001404:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001406:	4a32      	ldr	r2, [pc, #200]	@ (80014d0 <HAL_GPIO_Init+0x334>)
 8001408:	69bb      	ldr	r3, [r7, #24]
 800140a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800140c:	4b30      	ldr	r3, [pc, #192]	@ (80014d0 <HAL_GPIO_Init+0x334>)
 800140e:	68db      	ldr	r3, [r3, #12]
 8001410:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001412:	693b      	ldr	r3, [r7, #16]
 8001414:	43db      	mvns	r3, r3
 8001416:	69ba      	ldr	r2, [r7, #24]
 8001418:	4013      	ands	r3, r2
 800141a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001424:	2b00      	cmp	r3, #0
 8001426:	d003      	beq.n	8001430 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001428:	69ba      	ldr	r2, [r7, #24]
 800142a:	693b      	ldr	r3, [r7, #16]
 800142c:	4313      	orrs	r3, r2
 800142e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001430:	4a27      	ldr	r2, [pc, #156]	@ (80014d0 <HAL_GPIO_Init+0x334>)
 8001432:	69bb      	ldr	r3, [r7, #24]
 8001434:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001436:	4b26      	ldr	r3, [pc, #152]	@ (80014d0 <HAL_GPIO_Init+0x334>)
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800143c:	693b      	ldr	r3, [r7, #16]
 800143e:	43db      	mvns	r3, r3
 8001440:	69ba      	ldr	r2, [r7, #24]
 8001442:	4013      	ands	r3, r2
 8001444:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800144e:	2b00      	cmp	r3, #0
 8001450:	d003      	beq.n	800145a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001452:	69ba      	ldr	r2, [r7, #24]
 8001454:	693b      	ldr	r3, [r7, #16]
 8001456:	4313      	orrs	r3, r2
 8001458:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800145a:	4a1d      	ldr	r2, [pc, #116]	@ (80014d0 <HAL_GPIO_Init+0x334>)
 800145c:	69bb      	ldr	r3, [r7, #24]
 800145e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001460:	4b1b      	ldr	r3, [pc, #108]	@ (80014d0 <HAL_GPIO_Init+0x334>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	43db      	mvns	r3, r3
 800146a:	69ba      	ldr	r2, [r7, #24]
 800146c:	4013      	ands	r3, r2
 800146e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001478:	2b00      	cmp	r3, #0
 800147a:	d003      	beq.n	8001484 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800147c:	69ba      	ldr	r2, [r7, #24]
 800147e:	693b      	ldr	r3, [r7, #16]
 8001480:	4313      	orrs	r3, r2
 8001482:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001484:	4a12      	ldr	r2, [pc, #72]	@ (80014d0 <HAL_GPIO_Init+0x334>)
 8001486:	69bb      	ldr	r3, [r7, #24]
 8001488:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800148a:	69fb      	ldr	r3, [r7, #28]
 800148c:	3301      	adds	r3, #1
 800148e:	61fb      	str	r3, [r7, #28]
 8001490:	69fb      	ldr	r3, [r7, #28]
 8001492:	2b0f      	cmp	r3, #15
 8001494:	f67f ae90 	bls.w	80011b8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001498:	bf00      	nop
 800149a:	bf00      	nop
 800149c:	3724      	adds	r7, #36	@ 0x24
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr
 80014a6:	bf00      	nop
 80014a8:	40023800 	.word	0x40023800
 80014ac:	40013800 	.word	0x40013800
 80014b0:	40020000 	.word	0x40020000
 80014b4:	40020400 	.word	0x40020400
 80014b8:	40020800 	.word	0x40020800
 80014bc:	40020c00 	.word	0x40020c00
 80014c0:	40021000 	.word	0x40021000
 80014c4:	40021400 	.word	0x40021400
 80014c8:	40021800 	.word	0x40021800
 80014cc:	40021c00 	.word	0x40021c00
 80014d0:	40013c00 	.word	0x40013c00

080014d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b083      	sub	sp, #12
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
 80014dc:	460b      	mov	r3, r1
 80014de:	807b      	strh	r3, [r7, #2]
 80014e0:	4613      	mov	r3, r2
 80014e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014e4:	787b      	ldrb	r3, [r7, #1]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d003      	beq.n	80014f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014ea:	887a      	ldrh	r2, [r7, #2]
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80014f0:	e003      	b.n	80014fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80014f2:	887b      	ldrh	r3, [r7, #2]
 80014f4:	041a      	lsls	r2, r3, #16
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	619a      	str	r2, [r3, #24]
}
 80014fa:	bf00      	nop
 80014fc:	370c      	adds	r7, #12
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr

08001506 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001506:	b480      	push	{r7}
 8001508:	b085      	sub	sp, #20
 800150a:	af00      	add	r7, sp, #0
 800150c:	6078      	str	r0, [r7, #4]
 800150e:	460b      	mov	r3, r1
 8001510:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	695b      	ldr	r3, [r3, #20]
 8001516:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001518:	887a      	ldrh	r2, [r7, #2]
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	4013      	ands	r3, r2
 800151e:	041a      	lsls	r2, r3, #16
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	43d9      	mvns	r1, r3
 8001524:	887b      	ldrh	r3, [r7, #2]
 8001526:	400b      	ands	r3, r1
 8001528:	431a      	orrs	r2, r3
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	619a      	str	r2, [r3, #24]
}
 800152e:	bf00      	nop
 8001530:	3714      	adds	r7, #20
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr
	...

0800153c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b086      	sub	sp, #24
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d101      	bne.n	800154e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800154a:	2301      	movs	r3, #1
 800154c:	e267      	b.n	8001a1e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f003 0301 	and.w	r3, r3, #1
 8001556:	2b00      	cmp	r3, #0
 8001558:	d075      	beq.n	8001646 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800155a:	4b88      	ldr	r3, [pc, #544]	@ (800177c <HAL_RCC_OscConfig+0x240>)
 800155c:	689b      	ldr	r3, [r3, #8]
 800155e:	f003 030c 	and.w	r3, r3, #12
 8001562:	2b04      	cmp	r3, #4
 8001564:	d00c      	beq.n	8001580 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001566:	4b85      	ldr	r3, [pc, #532]	@ (800177c <HAL_RCC_OscConfig+0x240>)
 8001568:	689b      	ldr	r3, [r3, #8]
 800156a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800156e:	2b08      	cmp	r3, #8
 8001570:	d112      	bne.n	8001598 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001572:	4b82      	ldr	r3, [pc, #520]	@ (800177c <HAL_RCC_OscConfig+0x240>)
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800157a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800157e:	d10b      	bne.n	8001598 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001580:	4b7e      	ldr	r3, [pc, #504]	@ (800177c <HAL_RCC_OscConfig+0x240>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001588:	2b00      	cmp	r3, #0
 800158a:	d05b      	beq.n	8001644 <HAL_RCC_OscConfig+0x108>
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d157      	bne.n	8001644 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001594:	2301      	movs	r3, #1
 8001596:	e242      	b.n	8001a1e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80015a0:	d106      	bne.n	80015b0 <HAL_RCC_OscConfig+0x74>
 80015a2:	4b76      	ldr	r3, [pc, #472]	@ (800177c <HAL_RCC_OscConfig+0x240>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4a75      	ldr	r2, [pc, #468]	@ (800177c <HAL_RCC_OscConfig+0x240>)
 80015a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80015ac:	6013      	str	r3, [r2, #0]
 80015ae:	e01d      	b.n	80015ec <HAL_RCC_OscConfig+0xb0>
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80015b8:	d10c      	bne.n	80015d4 <HAL_RCC_OscConfig+0x98>
 80015ba:	4b70      	ldr	r3, [pc, #448]	@ (800177c <HAL_RCC_OscConfig+0x240>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4a6f      	ldr	r2, [pc, #444]	@ (800177c <HAL_RCC_OscConfig+0x240>)
 80015c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80015c4:	6013      	str	r3, [r2, #0]
 80015c6:	4b6d      	ldr	r3, [pc, #436]	@ (800177c <HAL_RCC_OscConfig+0x240>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4a6c      	ldr	r2, [pc, #432]	@ (800177c <HAL_RCC_OscConfig+0x240>)
 80015cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80015d0:	6013      	str	r3, [r2, #0]
 80015d2:	e00b      	b.n	80015ec <HAL_RCC_OscConfig+0xb0>
 80015d4:	4b69      	ldr	r3, [pc, #420]	@ (800177c <HAL_RCC_OscConfig+0x240>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a68      	ldr	r2, [pc, #416]	@ (800177c <HAL_RCC_OscConfig+0x240>)
 80015da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80015de:	6013      	str	r3, [r2, #0]
 80015e0:	4b66      	ldr	r3, [pc, #408]	@ (800177c <HAL_RCC_OscConfig+0x240>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a65      	ldr	r2, [pc, #404]	@ (800177c <HAL_RCC_OscConfig+0x240>)
 80015e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80015ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d013      	beq.n	800161c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015f4:	f7ff fc52 	bl	8000e9c <HAL_GetTick>
 80015f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015fa:	e008      	b.n	800160e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015fc:	f7ff fc4e 	bl	8000e9c <HAL_GetTick>
 8001600:	4602      	mov	r2, r0
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	1ad3      	subs	r3, r2, r3
 8001606:	2b64      	cmp	r3, #100	@ 0x64
 8001608:	d901      	bls.n	800160e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800160a:	2303      	movs	r3, #3
 800160c:	e207      	b.n	8001a1e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800160e:	4b5b      	ldr	r3, [pc, #364]	@ (800177c <HAL_RCC_OscConfig+0x240>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001616:	2b00      	cmp	r3, #0
 8001618:	d0f0      	beq.n	80015fc <HAL_RCC_OscConfig+0xc0>
 800161a:	e014      	b.n	8001646 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800161c:	f7ff fc3e 	bl	8000e9c <HAL_GetTick>
 8001620:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001622:	e008      	b.n	8001636 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001624:	f7ff fc3a 	bl	8000e9c <HAL_GetTick>
 8001628:	4602      	mov	r2, r0
 800162a:	693b      	ldr	r3, [r7, #16]
 800162c:	1ad3      	subs	r3, r2, r3
 800162e:	2b64      	cmp	r3, #100	@ 0x64
 8001630:	d901      	bls.n	8001636 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001632:	2303      	movs	r3, #3
 8001634:	e1f3      	b.n	8001a1e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001636:	4b51      	ldr	r3, [pc, #324]	@ (800177c <HAL_RCC_OscConfig+0x240>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800163e:	2b00      	cmp	r3, #0
 8001640:	d1f0      	bne.n	8001624 <HAL_RCC_OscConfig+0xe8>
 8001642:	e000      	b.n	8001646 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001644:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f003 0302 	and.w	r3, r3, #2
 800164e:	2b00      	cmp	r3, #0
 8001650:	d063      	beq.n	800171a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001652:	4b4a      	ldr	r3, [pc, #296]	@ (800177c <HAL_RCC_OscConfig+0x240>)
 8001654:	689b      	ldr	r3, [r3, #8]
 8001656:	f003 030c 	and.w	r3, r3, #12
 800165a:	2b00      	cmp	r3, #0
 800165c:	d00b      	beq.n	8001676 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800165e:	4b47      	ldr	r3, [pc, #284]	@ (800177c <HAL_RCC_OscConfig+0x240>)
 8001660:	689b      	ldr	r3, [r3, #8]
 8001662:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001666:	2b08      	cmp	r3, #8
 8001668:	d11c      	bne.n	80016a4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800166a:	4b44      	ldr	r3, [pc, #272]	@ (800177c <HAL_RCC_OscConfig+0x240>)
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001672:	2b00      	cmp	r3, #0
 8001674:	d116      	bne.n	80016a4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001676:	4b41      	ldr	r3, [pc, #260]	@ (800177c <HAL_RCC_OscConfig+0x240>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f003 0302 	and.w	r3, r3, #2
 800167e:	2b00      	cmp	r3, #0
 8001680:	d005      	beq.n	800168e <HAL_RCC_OscConfig+0x152>
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	68db      	ldr	r3, [r3, #12]
 8001686:	2b01      	cmp	r3, #1
 8001688:	d001      	beq.n	800168e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800168a:	2301      	movs	r3, #1
 800168c:	e1c7      	b.n	8001a1e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800168e:	4b3b      	ldr	r3, [pc, #236]	@ (800177c <HAL_RCC_OscConfig+0x240>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	691b      	ldr	r3, [r3, #16]
 800169a:	00db      	lsls	r3, r3, #3
 800169c:	4937      	ldr	r1, [pc, #220]	@ (800177c <HAL_RCC_OscConfig+0x240>)
 800169e:	4313      	orrs	r3, r2
 80016a0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016a2:	e03a      	b.n	800171a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	68db      	ldr	r3, [r3, #12]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d020      	beq.n	80016ee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016ac:	4b34      	ldr	r3, [pc, #208]	@ (8001780 <HAL_RCC_OscConfig+0x244>)
 80016ae:	2201      	movs	r2, #1
 80016b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016b2:	f7ff fbf3 	bl	8000e9c <HAL_GetTick>
 80016b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016b8:	e008      	b.n	80016cc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016ba:	f7ff fbef 	bl	8000e9c <HAL_GetTick>
 80016be:	4602      	mov	r2, r0
 80016c0:	693b      	ldr	r3, [r7, #16]
 80016c2:	1ad3      	subs	r3, r2, r3
 80016c4:	2b02      	cmp	r3, #2
 80016c6:	d901      	bls.n	80016cc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80016c8:	2303      	movs	r3, #3
 80016ca:	e1a8      	b.n	8001a1e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016cc:	4b2b      	ldr	r3, [pc, #172]	@ (800177c <HAL_RCC_OscConfig+0x240>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f003 0302 	and.w	r3, r3, #2
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d0f0      	beq.n	80016ba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016d8:	4b28      	ldr	r3, [pc, #160]	@ (800177c <HAL_RCC_OscConfig+0x240>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	691b      	ldr	r3, [r3, #16]
 80016e4:	00db      	lsls	r3, r3, #3
 80016e6:	4925      	ldr	r1, [pc, #148]	@ (800177c <HAL_RCC_OscConfig+0x240>)
 80016e8:	4313      	orrs	r3, r2
 80016ea:	600b      	str	r3, [r1, #0]
 80016ec:	e015      	b.n	800171a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016ee:	4b24      	ldr	r3, [pc, #144]	@ (8001780 <HAL_RCC_OscConfig+0x244>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016f4:	f7ff fbd2 	bl	8000e9c <HAL_GetTick>
 80016f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016fa:	e008      	b.n	800170e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016fc:	f7ff fbce 	bl	8000e9c <HAL_GetTick>
 8001700:	4602      	mov	r2, r0
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	1ad3      	subs	r3, r2, r3
 8001706:	2b02      	cmp	r3, #2
 8001708:	d901      	bls.n	800170e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800170a:	2303      	movs	r3, #3
 800170c:	e187      	b.n	8001a1e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800170e:	4b1b      	ldr	r3, [pc, #108]	@ (800177c <HAL_RCC_OscConfig+0x240>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f003 0302 	and.w	r3, r3, #2
 8001716:	2b00      	cmp	r3, #0
 8001718:	d1f0      	bne.n	80016fc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f003 0308 	and.w	r3, r3, #8
 8001722:	2b00      	cmp	r3, #0
 8001724:	d036      	beq.n	8001794 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	695b      	ldr	r3, [r3, #20]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d016      	beq.n	800175c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800172e:	4b15      	ldr	r3, [pc, #84]	@ (8001784 <HAL_RCC_OscConfig+0x248>)
 8001730:	2201      	movs	r2, #1
 8001732:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001734:	f7ff fbb2 	bl	8000e9c <HAL_GetTick>
 8001738:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800173a:	e008      	b.n	800174e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800173c:	f7ff fbae 	bl	8000e9c <HAL_GetTick>
 8001740:	4602      	mov	r2, r0
 8001742:	693b      	ldr	r3, [r7, #16]
 8001744:	1ad3      	subs	r3, r2, r3
 8001746:	2b02      	cmp	r3, #2
 8001748:	d901      	bls.n	800174e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800174a:	2303      	movs	r3, #3
 800174c:	e167      	b.n	8001a1e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800174e:	4b0b      	ldr	r3, [pc, #44]	@ (800177c <HAL_RCC_OscConfig+0x240>)
 8001750:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001752:	f003 0302 	and.w	r3, r3, #2
 8001756:	2b00      	cmp	r3, #0
 8001758:	d0f0      	beq.n	800173c <HAL_RCC_OscConfig+0x200>
 800175a:	e01b      	b.n	8001794 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800175c:	4b09      	ldr	r3, [pc, #36]	@ (8001784 <HAL_RCC_OscConfig+0x248>)
 800175e:	2200      	movs	r2, #0
 8001760:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001762:	f7ff fb9b 	bl	8000e9c <HAL_GetTick>
 8001766:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001768:	e00e      	b.n	8001788 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800176a:	f7ff fb97 	bl	8000e9c <HAL_GetTick>
 800176e:	4602      	mov	r2, r0
 8001770:	693b      	ldr	r3, [r7, #16]
 8001772:	1ad3      	subs	r3, r2, r3
 8001774:	2b02      	cmp	r3, #2
 8001776:	d907      	bls.n	8001788 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001778:	2303      	movs	r3, #3
 800177a:	e150      	b.n	8001a1e <HAL_RCC_OscConfig+0x4e2>
 800177c:	40023800 	.word	0x40023800
 8001780:	42470000 	.word	0x42470000
 8001784:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001788:	4b88      	ldr	r3, [pc, #544]	@ (80019ac <HAL_RCC_OscConfig+0x470>)
 800178a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800178c:	f003 0302 	and.w	r3, r3, #2
 8001790:	2b00      	cmp	r3, #0
 8001792:	d1ea      	bne.n	800176a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f003 0304 	and.w	r3, r3, #4
 800179c:	2b00      	cmp	r3, #0
 800179e:	f000 8097 	beq.w	80018d0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017a2:	2300      	movs	r3, #0
 80017a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017a6:	4b81      	ldr	r3, [pc, #516]	@ (80019ac <HAL_RCC_OscConfig+0x470>)
 80017a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d10f      	bne.n	80017d2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017b2:	2300      	movs	r3, #0
 80017b4:	60bb      	str	r3, [r7, #8]
 80017b6:	4b7d      	ldr	r3, [pc, #500]	@ (80019ac <HAL_RCC_OscConfig+0x470>)
 80017b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ba:	4a7c      	ldr	r2, [pc, #496]	@ (80019ac <HAL_RCC_OscConfig+0x470>)
 80017bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80017c2:	4b7a      	ldr	r3, [pc, #488]	@ (80019ac <HAL_RCC_OscConfig+0x470>)
 80017c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017ca:	60bb      	str	r3, [r7, #8]
 80017cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017ce:	2301      	movs	r3, #1
 80017d0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017d2:	4b77      	ldr	r3, [pc, #476]	@ (80019b0 <HAL_RCC_OscConfig+0x474>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d118      	bne.n	8001810 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017de:	4b74      	ldr	r3, [pc, #464]	@ (80019b0 <HAL_RCC_OscConfig+0x474>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4a73      	ldr	r2, [pc, #460]	@ (80019b0 <HAL_RCC_OscConfig+0x474>)
 80017e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017ea:	f7ff fb57 	bl	8000e9c <HAL_GetTick>
 80017ee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017f0:	e008      	b.n	8001804 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017f2:	f7ff fb53 	bl	8000e9c <HAL_GetTick>
 80017f6:	4602      	mov	r2, r0
 80017f8:	693b      	ldr	r3, [r7, #16]
 80017fa:	1ad3      	subs	r3, r2, r3
 80017fc:	2b02      	cmp	r3, #2
 80017fe:	d901      	bls.n	8001804 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001800:	2303      	movs	r3, #3
 8001802:	e10c      	b.n	8001a1e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001804:	4b6a      	ldr	r3, [pc, #424]	@ (80019b0 <HAL_RCC_OscConfig+0x474>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800180c:	2b00      	cmp	r3, #0
 800180e:	d0f0      	beq.n	80017f2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	689b      	ldr	r3, [r3, #8]
 8001814:	2b01      	cmp	r3, #1
 8001816:	d106      	bne.n	8001826 <HAL_RCC_OscConfig+0x2ea>
 8001818:	4b64      	ldr	r3, [pc, #400]	@ (80019ac <HAL_RCC_OscConfig+0x470>)
 800181a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800181c:	4a63      	ldr	r2, [pc, #396]	@ (80019ac <HAL_RCC_OscConfig+0x470>)
 800181e:	f043 0301 	orr.w	r3, r3, #1
 8001822:	6713      	str	r3, [r2, #112]	@ 0x70
 8001824:	e01c      	b.n	8001860 <HAL_RCC_OscConfig+0x324>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	689b      	ldr	r3, [r3, #8]
 800182a:	2b05      	cmp	r3, #5
 800182c:	d10c      	bne.n	8001848 <HAL_RCC_OscConfig+0x30c>
 800182e:	4b5f      	ldr	r3, [pc, #380]	@ (80019ac <HAL_RCC_OscConfig+0x470>)
 8001830:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001832:	4a5e      	ldr	r2, [pc, #376]	@ (80019ac <HAL_RCC_OscConfig+0x470>)
 8001834:	f043 0304 	orr.w	r3, r3, #4
 8001838:	6713      	str	r3, [r2, #112]	@ 0x70
 800183a:	4b5c      	ldr	r3, [pc, #368]	@ (80019ac <HAL_RCC_OscConfig+0x470>)
 800183c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800183e:	4a5b      	ldr	r2, [pc, #364]	@ (80019ac <HAL_RCC_OscConfig+0x470>)
 8001840:	f043 0301 	orr.w	r3, r3, #1
 8001844:	6713      	str	r3, [r2, #112]	@ 0x70
 8001846:	e00b      	b.n	8001860 <HAL_RCC_OscConfig+0x324>
 8001848:	4b58      	ldr	r3, [pc, #352]	@ (80019ac <HAL_RCC_OscConfig+0x470>)
 800184a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800184c:	4a57      	ldr	r2, [pc, #348]	@ (80019ac <HAL_RCC_OscConfig+0x470>)
 800184e:	f023 0301 	bic.w	r3, r3, #1
 8001852:	6713      	str	r3, [r2, #112]	@ 0x70
 8001854:	4b55      	ldr	r3, [pc, #340]	@ (80019ac <HAL_RCC_OscConfig+0x470>)
 8001856:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001858:	4a54      	ldr	r2, [pc, #336]	@ (80019ac <HAL_RCC_OscConfig+0x470>)
 800185a:	f023 0304 	bic.w	r3, r3, #4
 800185e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	689b      	ldr	r3, [r3, #8]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d015      	beq.n	8001894 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001868:	f7ff fb18 	bl	8000e9c <HAL_GetTick>
 800186c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800186e:	e00a      	b.n	8001886 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001870:	f7ff fb14 	bl	8000e9c <HAL_GetTick>
 8001874:	4602      	mov	r2, r0
 8001876:	693b      	ldr	r3, [r7, #16]
 8001878:	1ad3      	subs	r3, r2, r3
 800187a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800187e:	4293      	cmp	r3, r2
 8001880:	d901      	bls.n	8001886 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001882:	2303      	movs	r3, #3
 8001884:	e0cb      	b.n	8001a1e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001886:	4b49      	ldr	r3, [pc, #292]	@ (80019ac <HAL_RCC_OscConfig+0x470>)
 8001888:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800188a:	f003 0302 	and.w	r3, r3, #2
 800188e:	2b00      	cmp	r3, #0
 8001890:	d0ee      	beq.n	8001870 <HAL_RCC_OscConfig+0x334>
 8001892:	e014      	b.n	80018be <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001894:	f7ff fb02 	bl	8000e9c <HAL_GetTick>
 8001898:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800189a:	e00a      	b.n	80018b2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800189c:	f7ff fafe 	bl	8000e9c <HAL_GetTick>
 80018a0:	4602      	mov	r2, r0
 80018a2:	693b      	ldr	r3, [r7, #16]
 80018a4:	1ad3      	subs	r3, r2, r3
 80018a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d901      	bls.n	80018b2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80018ae:	2303      	movs	r3, #3
 80018b0:	e0b5      	b.n	8001a1e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018b2:	4b3e      	ldr	r3, [pc, #248]	@ (80019ac <HAL_RCC_OscConfig+0x470>)
 80018b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018b6:	f003 0302 	and.w	r3, r3, #2
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d1ee      	bne.n	800189c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80018be:	7dfb      	ldrb	r3, [r7, #23]
 80018c0:	2b01      	cmp	r3, #1
 80018c2:	d105      	bne.n	80018d0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018c4:	4b39      	ldr	r3, [pc, #228]	@ (80019ac <HAL_RCC_OscConfig+0x470>)
 80018c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018c8:	4a38      	ldr	r2, [pc, #224]	@ (80019ac <HAL_RCC_OscConfig+0x470>)
 80018ca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80018ce:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	699b      	ldr	r3, [r3, #24]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	f000 80a1 	beq.w	8001a1c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80018da:	4b34      	ldr	r3, [pc, #208]	@ (80019ac <HAL_RCC_OscConfig+0x470>)
 80018dc:	689b      	ldr	r3, [r3, #8]
 80018de:	f003 030c 	and.w	r3, r3, #12
 80018e2:	2b08      	cmp	r3, #8
 80018e4:	d05c      	beq.n	80019a0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	699b      	ldr	r3, [r3, #24]
 80018ea:	2b02      	cmp	r3, #2
 80018ec:	d141      	bne.n	8001972 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018ee:	4b31      	ldr	r3, [pc, #196]	@ (80019b4 <HAL_RCC_OscConfig+0x478>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018f4:	f7ff fad2 	bl	8000e9c <HAL_GetTick>
 80018f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018fa:	e008      	b.n	800190e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018fc:	f7ff face 	bl	8000e9c <HAL_GetTick>
 8001900:	4602      	mov	r2, r0
 8001902:	693b      	ldr	r3, [r7, #16]
 8001904:	1ad3      	subs	r3, r2, r3
 8001906:	2b02      	cmp	r3, #2
 8001908:	d901      	bls.n	800190e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800190a:	2303      	movs	r3, #3
 800190c:	e087      	b.n	8001a1e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800190e:	4b27      	ldr	r3, [pc, #156]	@ (80019ac <HAL_RCC_OscConfig+0x470>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001916:	2b00      	cmp	r3, #0
 8001918:	d1f0      	bne.n	80018fc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	69da      	ldr	r2, [r3, #28]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6a1b      	ldr	r3, [r3, #32]
 8001922:	431a      	orrs	r2, r3
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001928:	019b      	lsls	r3, r3, #6
 800192a:	431a      	orrs	r2, r3
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001930:	085b      	lsrs	r3, r3, #1
 8001932:	3b01      	subs	r3, #1
 8001934:	041b      	lsls	r3, r3, #16
 8001936:	431a      	orrs	r2, r3
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800193c:	061b      	lsls	r3, r3, #24
 800193e:	491b      	ldr	r1, [pc, #108]	@ (80019ac <HAL_RCC_OscConfig+0x470>)
 8001940:	4313      	orrs	r3, r2
 8001942:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001944:	4b1b      	ldr	r3, [pc, #108]	@ (80019b4 <HAL_RCC_OscConfig+0x478>)
 8001946:	2201      	movs	r2, #1
 8001948:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800194a:	f7ff faa7 	bl	8000e9c <HAL_GetTick>
 800194e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001950:	e008      	b.n	8001964 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001952:	f7ff faa3 	bl	8000e9c <HAL_GetTick>
 8001956:	4602      	mov	r2, r0
 8001958:	693b      	ldr	r3, [r7, #16]
 800195a:	1ad3      	subs	r3, r2, r3
 800195c:	2b02      	cmp	r3, #2
 800195e:	d901      	bls.n	8001964 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001960:	2303      	movs	r3, #3
 8001962:	e05c      	b.n	8001a1e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001964:	4b11      	ldr	r3, [pc, #68]	@ (80019ac <HAL_RCC_OscConfig+0x470>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800196c:	2b00      	cmp	r3, #0
 800196e:	d0f0      	beq.n	8001952 <HAL_RCC_OscConfig+0x416>
 8001970:	e054      	b.n	8001a1c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001972:	4b10      	ldr	r3, [pc, #64]	@ (80019b4 <HAL_RCC_OscConfig+0x478>)
 8001974:	2200      	movs	r2, #0
 8001976:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001978:	f7ff fa90 	bl	8000e9c <HAL_GetTick>
 800197c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800197e:	e008      	b.n	8001992 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001980:	f7ff fa8c 	bl	8000e9c <HAL_GetTick>
 8001984:	4602      	mov	r2, r0
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	1ad3      	subs	r3, r2, r3
 800198a:	2b02      	cmp	r3, #2
 800198c:	d901      	bls.n	8001992 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800198e:	2303      	movs	r3, #3
 8001990:	e045      	b.n	8001a1e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001992:	4b06      	ldr	r3, [pc, #24]	@ (80019ac <HAL_RCC_OscConfig+0x470>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800199a:	2b00      	cmp	r3, #0
 800199c:	d1f0      	bne.n	8001980 <HAL_RCC_OscConfig+0x444>
 800199e:	e03d      	b.n	8001a1c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	699b      	ldr	r3, [r3, #24]
 80019a4:	2b01      	cmp	r3, #1
 80019a6:	d107      	bne.n	80019b8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80019a8:	2301      	movs	r3, #1
 80019aa:	e038      	b.n	8001a1e <HAL_RCC_OscConfig+0x4e2>
 80019ac:	40023800 	.word	0x40023800
 80019b0:	40007000 	.word	0x40007000
 80019b4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80019b8:	4b1b      	ldr	r3, [pc, #108]	@ (8001a28 <HAL_RCC_OscConfig+0x4ec>)
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	699b      	ldr	r3, [r3, #24]
 80019c2:	2b01      	cmp	r3, #1
 80019c4:	d028      	beq.n	8001a18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019d0:	429a      	cmp	r2, r3
 80019d2:	d121      	bne.n	8001a18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019de:	429a      	cmp	r2, r3
 80019e0:	d11a      	bne.n	8001a18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80019e2:	68fa      	ldr	r2, [r7, #12]
 80019e4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80019e8:	4013      	ands	r3, r2
 80019ea:	687a      	ldr	r2, [r7, #4]
 80019ec:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80019ee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d111      	bne.n	8001a18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019fe:	085b      	lsrs	r3, r3, #1
 8001a00:	3b01      	subs	r3, #1
 8001a02:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a04:	429a      	cmp	r2, r3
 8001a06:	d107      	bne.n	8001a18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a12:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a14:	429a      	cmp	r2, r3
 8001a16:	d001      	beq.n	8001a1c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	e000      	b.n	8001a1e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001a1c:	2300      	movs	r3, #0
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	3718      	adds	r7, #24
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	40023800 	.word	0x40023800

08001a2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b084      	sub	sp, #16
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
 8001a34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d101      	bne.n	8001a40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	e0cc      	b.n	8001bda <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a40:	4b68      	ldr	r3, [pc, #416]	@ (8001be4 <HAL_RCC_ClockConfig+0x1b8>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f003 0307 	and.w	r3, r3, #7
 8001a48:	683a      	ldr	r2, [r7, #0]
 8001a4a:	429a      	cmp	r2, r3
 8001a4c:	d90c      	bls.n	8001a68 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a4e:	4b65      	ldr	r3, [pc, #404]	@ (8001be4 <HAL_RCC_ClockConfig+0x1b8>)
 8001a50:	683a      	ldr	r2, [r7, #0]
 8001a52:	b2d2      	uxtb	r2, r2
 8001a54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a56:	4b63      	ldr	r3, [pc, #396]	@ (8001be4 <HAL_RCC_ClockConfig+0x1b8>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 0307 	and.w	r3, r3, #7
 8001a5e:	683a      	ldr	r2, [r7, #0]
 8001a60:	429a      	cmp	r2, r3
 8001a62:	d001      	beq.n	8001a68 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001a64:	2301      	movs	r3, #1
 8001a66:	e0b8      	b.n	8001bda <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f003 0302 	and.w	r3, r3, #2
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d020      	beq.n	8001ab6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f003 0304 	and.w	r3, r3, #4
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d005      	beq.n	8001a8c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a80:	4b59      	ldr	r3, [pc, #356]	@ (8001be8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	4a58      	ldr	r2, [pc, #352]	@ (8001be8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a86:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001a8a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f003 0308 	and.w	r3, r3, #8
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d005      	beq.n	8001aa4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a98:	4b53      	ldr	r3, [pc, #332]	@ (8001be8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a9a:	689b      	ldr	r3, [r3, #8]
 8001a9c:	4a52      	ldr	r2, [pc, #328]	@ (8001be8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a9e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001aa2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001aa4:	4b50      	ldr	r3, [pc, #320]	@ (8001be8 <HAL_RCC_ClockConfig+0x1bc>)
 8001aa6:	689b      	ldr	r3, [r3, #8]
 8001aa8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	689b      	ldr	r3, [r3, #8]
 8001ab0:	494d      	ldr	r1, [pc, #308]	@ (8001be8 <HAL_RCC_ClockConfig+0x1bc>)
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f003 0301 	and.w	r3, r3, #1
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d044      	beq.n	8001b4c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	2b01      	cmp	r3, #1
 8001ac8:	d107      	bne.n	8001ada <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aca:	4b47      	ldr	r3, [pc, #284]	@ (8001be8 <HAL_RCC_ClockConfig+0x1bc>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d119      	bne.n	8001b0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e07f      	b.n	8001bda <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	2b02      	cmp	r3, #2
 8001ae0:	d003      	beq.n	8001aea <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ae6:	2b03      	cmp	r3, #3
 8001ae8:	d107      	bne.n	8001afa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001aea:	4b3f      	ldr	r3, [pc, #252]	@ (8001be8 <HAL_RCC_ClockConfig+0x1bc>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d109      	bne.n	8001b0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001af6:	2301      	movs	r3, #1
 8001af8:	e06f      	b.n	8001bda <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001afa:	4b3b      	ldr	r3, [pc, #236]	@ (8001be8 <HAL_RCC_ClockConfig+0x1bc>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f003 0302 	and.w	r3, r3, #2
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d101      	bne.n	8001b0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b06:	2301      	movs	r3, #1
 8001b08:	e067      	b.n	8001bda <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b0a:	4b37      	ldr	r3, [pc, #220]	@ (8001be8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b0c:	689b      	ldr	r3, [r3, #8]
 8001b0e:	f023 0203 	bic.w	r2, r3, #3
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	4934      	ldr	r1, [pc, #208]	@ (8001be8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b1c:	f7ff f9be 	bl	8000e9c <HAL_GetTick>
 8001b20:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b22:	e00a      	b.n	8001b3a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b24:	f7ff f9ba 	bl	8000e9c <HAL_GetTick>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	1ad3      	subs	r3, r2, r3
 8001b2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d901      	bls.n	8001b3a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b36:	2303      	movs	r3, #3
 8001b38:	e04f      	b.n	8001bda <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b3a:	4b2b      	ldr	r3, [pc, #172]	@ (8001be8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b3c:	689b      	ldr	r3, [r3, #8]
 8001b3e:	f003 020c 	and.w	r2, r3, #12
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	009b      	lsls	r3, r3, #2
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	d1eb      	bne.n	8001b24 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b4c:	4b25      	ldr	r3, [pc, #148]	@ (8001be4 <HAL_RCC_ClockConfig+0x1b8>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f003 0307 	and.w	r3, r3, #7
 8001b54:	683a      	ldr	r2, [r7, #0]
 8001b56:	429a      	cmp	r2, r3
 8001b58:	d20c      	bcs.n	8001b74 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b5a:	4b22      	ldr	r3, [pc, #136]	@ (8001be4 <HAL_RCC_ClockConfig+0x1b8>)
 8001b5c:	683a      	ldr	r2, [r7, #0]
 8001b5e:	b2d2      	uxtb	r2, r2
 8001b60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b62:	4b20      	ldr	r3, [pc, #128]	@ (8001be4 <HAL_RCC_ClockConfig+0x1b8>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f003 0307 	and.w	r3, r3, #7
 8001b6a:	683a      	ldr	r2, [r7, #0]
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	d001      	beq.n	8001b74 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001b70:	2301      	movs	r3, #1
 8001b72:	e032      	b.n	8001bda <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f003 0304 	and.w	r3, r3, #4
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d008      	beq.n	8001b92 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b80:	4b19      	ldr	r3, [pc, #100]	@ (8001be8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b82:	689b      	ldr	r3, [r3, #8]
 8001b84:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	68db      	ldr	r3, [r3, #12]
 8001b8c:	4916      	ldr	r1, [pc, #88]	@ (8001be8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f003 0308 	and.w	r3, r3, #8
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d009      	beq.n	8001bb2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b9e:	4b12      	ldr	r3, [pc, #72]	@ (8001be8 <HAL_RCC_ClockConfig+0x1bc>)
 8001ba0:	689b      	ldr	r3, [r3, #8]
 8001ba2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	691b      	ldr	r3, [r3, #16]
 8001baa:	00db      	lsls	r3, r3, #3
 8001bac:	490e      	ldr	r1, [pc, #56]	@ (8001be8 <HAL_RCC_ClockConfig+0x1bc>)
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001bb2:	f000 f821 	bl	8001bf8 <HAL_RCC_GetSysClockFreq>
 8001bb6:	4602      	mov	r2, r0
 8001bb8:	4b0b      	ldr	r3, [pc, #44]	@ (8001be8 <HAL_RCC_ClockConfig+0x1bc>)
 8001bba:	689b      	ldr	r3, [r3, #8]
 8001bbc:	091b      	lsrs	r3, r3, #4
 8001bbe:	f003 030f 	and.w	r3, r3, #15
 8001bc2:	490a      	ldr	r1, [pc, #40]	@ (8001bec <HAL_RCC_ClockConfig+0x1c0>)
 8001bc4:	5ccb      	ldrb	r3, [r1, r3]
 8001bc6:	fa22 f303 	lsr.w	r3, r2, r3
 8001bca:	4a09      	ldr	r2, [pc, #36]	@ (8001bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8001bcc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001bce:	4b09      	ldr	r3, [pc, #36]	@ (8001bf4 <HAL_RCC_ClockConfig+0x1c8>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f7ff f83e 	bl	8000c54 <HAL_InitTick>

  return HAL_OK;
 8001bd8:	2300      	movs	r3, #0
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	3710      	adds	r7, #16
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	40023c00 	.word	0x40023c00
 8001be8:	40023800 	.word	0x40023800
 8001bec:	08008450 	.word	0x08008450
 8001bf0:	20000060 	.word	0x20000060
 8001bf4:	20000064 	.word	0x20000064

08001bf8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bf8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001bfc:	b094      	sub	sp, #80	@ 0x50
 8001bfe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001c00:	2300      	movs	r3, #0
 8001c02:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001c04:	2300      	movs	r3, #0
 8001c06:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c10:	4b79      	ldr	r3, [pc, #484]	@ (8001df8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	f003 030c 	and.w	r3, r3, #12
 8001c18:	2b08      	cmp	r3, #8
 8001c1a:	d00d      	beq.n	8001c38 <HAL_RCC_GetSysClockFreq+0x40>
 8001c1c:	2b08      	cmp	r3, #8
 8001c1e:	f200 80e1 	bhi.w	8001de4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d002      	beq.n	8001c2c <HAL_RCC_GetSysClockFreq+0x34>
 8001c26:	2b04      	cmp	r3, #4
 8001c28:	d003      	beq.n	8001c32 <HAL_RCC_GetSysClockFreq+0x3a>
 8001c2a:	e0db      	b.n	8001de4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001c2c:	4b73      	ldr	r3, [pc, #460]	@ (8001dfc <HAL_RCC_GetSysClockFreq+0x204>)
 8001c2e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001c30:	e0db      	b.n	8001dea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001c32:	4b73      	ldr	r3, [pc, #460]	@ (8001e00 <HAL_RCC_GetSysClockFreq+0x208>)
 8001c34:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001c36:	e0d8      	b.n	8001dea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c38:	4b6f      	ldr	r3, [pc, #444]	@ (8001df8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001c40:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c42:	4b6d      	ldr	r3, [pc, #436]	@ (8001df8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d063      	beq.n	8001d16 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c4e:	4b6a      	ldr	r3, [pc, #424]	@ (8001df8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	099b      	lsrs	r3, r3, #6
 8001c54:	2200      	movs	r2, #0
 8001c56:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001c58:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001c5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001c5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c60:	633b      	str	r3, [r7, #48]	@ 0x30
 8001c62:	2300      	movs	r3, #0
 8001c64:	637b      	str	r3, [r7, #52]	@ 0x34
 8001c66:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001c6a:	4622      	mov	r2, r4
 8001c6c:	462b      	mov	r3, r5
 8001c6e:	f04f 0000 	mov.w	r0, #0
 8001c72:	f04f 0100 	mov.w	r1, #0
 8001c76:	0159      	lsls	r1, r3, #5
 8001c78:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c7c:	0150      	lsls	r0, r2, #5
 8001c7e:	4602      	mov	r2, r0
 8001c80:	460b      	mov	r3, r1
 8001c82:	4621      	mov	r1, r4
 8001c84:	1a51      	subs	r1, r2, r1
 8001c86:	6139      	str	r1, [r7, #16]
 8001c88:	4629      	mov	r1, r5
 8001c8a:	eb63 0301 	sbc.w	r3, r3, r1
 8001c8e:	617b      	str	r3, [r7, #20]
 8001c90:	f04f 0200 	mov.w	r2, #0
 8001c94:	f04f 0300 	mov.w	r3, #0
 8001c98:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001c9c:	4659      	mov	r1, fp
 8001c9e:	018b      	lsls	r3, r1, #6
 8001ca0:	4651      	mov	r1, sl
 8001ca2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001ca6:	4651      	mov	r1, sl
 8001ca8:	018a      	lsls	r2, r1, #6
 8001caa:	4651      	mov	r1, sl
 8001cac:	ebb2 0801 	subs.w	r8, r2, r1
 8001cb0:	4659      	mov	r1, fp
 8001cb2:	eb63 0901 	sbc.w	r9, r3, r1
 8001cb6:	f04f 0200 	mov.w	r2, #0
 8001cba:	f04f 0300 	mov.w	r3, #0
 8001cbe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001cc2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001cc6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001cca:	4690      	mov	r8, r2
 8001ccc:	4699      	mov	r9, r3
 8001cce:	4623      	mov	r3, r4
 8001cd0:	eb18 0303 	adds.w	r3, r8, r3
 8001cd4:	60bb      	str	r3, [r7, #8]
 8001cd6:	462b      	mov	r3, r5
 8001cd8:	eb49 0303 	adc.w	r3, r9, r3
 8001cdc:	60fb      	str	r3, [r7, #12]
 8001cde:	f04f 0200 	mov.w	r2, #0
 8001ce2:	f04f 0300 	mov.w	r3, #0
 8001ce6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001cea:	4629      	mov	r1, r5
 8001cec:	024b      	lsls	r3, r1, #9
 8001cee:	4621      	mov	r1, r4
 8001cf0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001cf4:	4621      	mov	r1, r4
 8001cf6:	024a      	lsls	r2, r1, #9
 8001cf8:	4610      	mov	r0, r2
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001cfe:	2200      	movs	r2, #0
 8001d00:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001d02:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001d04:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001d08:	f7fe fb02 	bl	8000310 <__aeabi_uldivmod>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	460b      	mov	r3, r1
 8001d10:	4613      	mov	r3, r2
 8001d12:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001d14:	e058      	b.n	8001dc8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d16:	4b38      	ldr	r3, [pc, #224]	@ (8001df8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	099b      	lsrs	r3, r3, #6
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	4618      	mov	r0, r3
 8001d20:	4611      	mov	r1, r2
 8001d22:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001d26:	623b      	str	r3, [r7, #32]
 8001d28:	2300      	movs	r3, #0
 8001d2a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d2c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001d30:	4642      	mov	r2, r8
 8001d32:	464b      	mov	r3, r9
 8001d34:	f04f 0000 	mov.w	r0, #0
 8001d38:	f04f 0100 	mov.w	r1, #0
 8001d3c:	0159      	lsls	r1, r3, #5
 8001d3e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d42:	0150      	lsls	r0, r2, #5
 8001d44:	4602      	mov	r2, r0
 8001d46:	460b      	mov	r3, r1
 8001d48:	4641      	mov	r1, r8
 8001d4a:	ebb2 0a01 	subs.w	sl, r2, r1
 8001d4e:	4649      	mov	r1, r9
 8001d50:	eb63 0b01 	sbc.w	fp, r3, r1
 8001d54:	f04f 0200 	mov.w	r2, #0
 8001d58:	f04f 0300 	mov.w	r3, #0
 8001d5c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001d60:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001d64:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001d68:	ebb2 040a 	subs.w	r4, r2, sl
 8001d6c:	eb63 050b 	sbc.w	r5, r3, fp
 8001d70:	f04f 0200 	mov.w	r2, #0
 8001d74:	f04f 0300 	mov.w	r3, #0
 8001d78:	00eb      	lsls	r3, r5, #3
 8001d7a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001d7e:	00e2      	lsls	r2, r4, #3
 8001d80:	4614      	mov	r4, r2
 8001d82:	461d      	mov	r5, r3
 8001d84:	4643      	mov	r3, r8
 8001d86:	18e3      	adds	r3, r4, r3
 8001d88:	603b      	str	r3, [r7, #0]
 8001d8a:	464b      	mov	r3, r9
 8001d8c:	eb45 0303 	adc.w	r3, r5, r3
 8001d90:	607b      	str	r3, [r7, #4]
 8001d92:	f04f 0200 	mov.w	r2, #0
 8001d96:	f04f 0300 	mov.w	r3, #0
 8001d9a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001d9e:	4629      	mov	r1, r5
 8001da0:	028b      	lsls	r3, r1, #10
 8001da2:	4621      	mov	r1, r4
 8001da4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001da8:	4621      	mov	r1, r4
 8001daa:	028a      	lsls	r2, r1, #10
 8001dac:	4610      	mov	r0, r2
 8001dae:	4619      	mov	r1, r3
 8001db0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001db2:	2200      	movs	r2, #0
 8001db4:	61bb      	str	r3, [r7, #24]
 8001db6:	61fa      	str	r2, [r7, #28]
 8001db8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001dbc:	f7fe faa8 	bl	8000310 <__aeabi_uldivmod>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	460b      	mov	r3, r1
 8001dc4:	4613      	mov	r3, r2
 8001dc6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001dc8:	4b0b      	ldr	r3, [pc, #44]	@ (8001df8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	0c1b      	lsrs	r3, r3, #16
 8001dce:	f003 0303 	and.w	r3, r3, #3
 8001dd2:	3301      	adds	r3, #1
 8001dd4:	005b      	lsls	r3, r3, #1
 8001dd6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001dd8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001dda:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001ddc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001de0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001de2:	e002      	b.n	8001dea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001de4:	4b05      	ldr	r3, [pc, #20]	@ (8001dfc <HAL_RCC_GetSysClockFreq+0x204>)
 8001de6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001de8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001dea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	3750      	adds	r7, #80	@ 0x50
 8001df0:	46bd      	mov	sp, r7
 8001df2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001df6:	bf00      	nop
 8001df8:	40023800 	.word	0x40023800
 8001dfc:	00f42400 	.word	0x00f42400
 8001e00:	007a1200 	.word	0x007a1200

08001e04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e04:	b480      	push	{r7}
 8001e06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e08:	4b03      	ldr	r3, [pc, #12]	@ (8001e18 <HAL_RCC_GetHCLKFreq+0x14>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr
 8001e16:	bf00      	nop
 8001e18:	20000060 	.word	0x20000060

08001e1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001e20:	f7ff fff0 	bl	8001e04 <HAL_RCC_GetHCLKFreq>
 8001e24:	4602      	mov	r2, r0
 8001e26:	4b05      	ldr	r3, [pc, #20]	@ (8001e3c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e28:	689b      	ldr	r3, [r3, #8]
 8001e2a:	0a9b      	lsrs	r3, r3, #10
 8001e2c:	f003 0307 	and.w	r3, r3, #7
 8001e30:	4903      	ldr	r1, [pc, #12]	@ (8001e40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e32:	5ccb      	ldrb	r3, [r1, r3]
 8001e34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	40023800 	.word	0x40023800
 8001e40:	08008460 	.word	0x08008460

08001e44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001e48:	f7ff ffdc 	bl	8001e04 <HAL_RCC_GetHCLKFreq>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	4b05      	ldr	r3, [pc, #20]	@ (8001e64 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e50:	689b      	ldr	r3, [r3, #8]
 8001e52:	0b5b      	lsrs	r3, r3, #13
 8001e54:	f003 0307 	and.w	r3, r3, #7
 8001e58:	4903      	ldr	r1, [pc, #12]	@ (8001e68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e5a:	5ccb      	ldrb	r3, [r1, r3]
 8001e5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	bd80      	pop	{r7, pc}
 8001e64:	40023800 	.word	0x40023800
 8001e68:	08008460 	.word	0x08008460

08001e6c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b083      	sub	sp, #12
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
 8001e74:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	220f      	movs	r2, #15
 8001e7a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001e7c:	4b12      	ldr	r3, [pc, #72]	@ (8001ec8 <HAL_RCC_GetClockConfig+0x5c>)
 8001e7e:	689b      	ldr	r3, [r3, #8]
 8001e80:	f003 0203 	and.w	r2, r3, #3
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001e88:	4b0f      	ldr	r3, [pc, #60]	@ (8001ec8 <HAL_RCC_GetClockConfig+0x5c>)
 8001e8a:	689b      	ldr	r3, [r3, #8]
 8001e8c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001e94:	4b0c      	ldr	r3, [pc, #48]	@ (8001ec8 <HAL_RCC_GetClockConfig+0x5c>)
 8001e96:	689b      	ldr	r3, [r3, #8]
 8001e98:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001ea0:	4b09      	ldr	r3, [pc, #36]	@ (8001ec8 <HAL_RCC_GetClockConfig+0x5c>)
 8001ea2:	689b      	ldr	r3, [r3, #8]
 8001ea4:	08db      	lsrs	r3, r3, #3
 8001ea6:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001eae:	4b07      	ldr	r3, [pc, #28]	@ (8001ecc <HAL_RCC_GetClockConfig+0x60>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f003 0207 	and.w	r2, r3, #7
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	601a      	str	r2, [r3, #0]
}
 8001eba:	bf00      	nop
 8001ebc:	370c      	adds	r7, #12
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr
 8001ec6:	bf00      	nop
 8001ec8:	40023800 	.word	0x40023800
 8001ecc:	40023c00 	.word	0x40023c00

08001ed0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b082      	sub	sp, #8
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d101      	bne.n	8001ee2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e041      	b.n	8001f66 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ee8:	b2db      	uxtb	r3, r3
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d106      	bne.n	8001efc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001ef6:	6878      	ldr	r0, [r7, #4]
 8001ef8:	f000 f839 	bl	8001f6e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2202      	movs	r2, #2
 8001f00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	3304      	adds	r3, #4
 8001f0c:	4619      	mov	r1, r3
 8001f0e:	4610      	mov	r0, r2
 8001f10:	f000 f9c0 	bl	8002294 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2201      	movs	r2, #1
 8001f18:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2201      	movs	r2, #1
 8001f20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2201      	movs	r2, #1
 8001f28:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2201      	movs	r2, #1
 8001f30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2201      	movs	r2, #1
 8001f38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2201      	movs	r2, #1
 8001f40:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2201      	movs	r2, #1
 8001f48:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2201      	movs	r2, #1
 8001f50:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2201      	movs	r2, #1
 8001f58:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2201      	movs	r2, #1
 8001f60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001f64:	2300      	movs	r3, #0
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	3708      	adds	r7, #8
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}

08001f6e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001f6e:	b480      	push	{r7}
 8001f70:	b083      	sub	sp, #12
 8001f72:	af00      	add	r7, sp, #0
 8001f74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001f76:	bf00      	nop
 8001f78:	370c      	adds	r7, #12
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr
	...

08001f84 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b085      	sub	sp, #20
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f92:	b2db      	uxtb	r3, r3
 8001f94:	2b01      	cmp	r3, #1
 8001f96:	d001      	beq.n	8001f9c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001f98:	2301      	movs	r3, #1
 8001f9a:	e04e      	b.n	800203a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2202      	movs	r2, #2
 8001fa0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	68da      	ldr	r2, [r3, #12]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f042 0201 	orr.w	r2, r2, #1
 8001fb2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a23      	ldr	r2, [pc, #140]	@ (8002048 <HAL_TIM_Base_Start_IT+0xc4>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d022      	beq.n	8002004 <HAL_TIM_Base_Start_IT+0x80>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001fc6:	d01d      	beq.n	8002004 <HAL_TIM_Base_Start_IT+0x80>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a1f      	ldr	r2, [pc, #124]	@ (800204c <HAL_TIM_Base_Start_IT+0xc8>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d018      	beq.n	8002004 <HAL_TIM_Base_Start_IT+0x80>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4a1e      	ldr	r2, [pc, #120]	@ (8002050 <HAL_TIM_Base_Start_IT+0xcc>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d013      	beq.n	8002004 <HAL_TIM_Base_Start_IT+0x80>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a1c      	ldr	r2, [pc, #112]	@ (8002054 <HAL_TIM_Base_Start_IT+0xd0>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d00e      	beq.n	8002004 <HAL_TIM_Base_Start_IT+0x80>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a1b      	ldr	r2, [pc, #108]	@ (8002058 <HAL_TIM_Base_Start_IT+0xd4>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d009      	beq.n	8002004 <HAL_TIM_Base_Start_IT+0x80>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a19      	ldr	r2, [pc, #100]	@ (800205c <HAL_TIM_Base_Start_IT+0xd8>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d004      	beq.n	8002004 <HAL_TIM_Base_Start_IT+0x80>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a18      	ldr	r2, [pc, #96]	@ (8002060 <HAL_TIM_Base_Start_IT+0xdc>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d111      	bne.n	8002028 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	f003 0307 	and.w	r3, r3, #7
 800200e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	2b06      	cmp	r3, #6
 8002014:	d010      	beq.n	8002038 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	681a      	ldr	r2, [r3, #0]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f042 0201 	orr.w	r2, r2, #1
 8002024:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002026:	e007      	b.n	8002038 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	681a      	ldr	r2, [r3, #0]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f042 0201 	orr.w	r2, r2, #1
 8002036:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002038:	2300      	movs	r3, #0
}
 800203a:	4618      	mov	r0, r3
 800203c:	3714      	adds	r7, #20
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr
 8002046:	bf00      	nop
 8002048:	40010000 	.word	0x40010000
 800204c:	40000400 	.word	0x40000400
 8002050:	40000800 	.word	0x40000800
 8002054:	40000c00 	.word	0x40000c00
 8002058:	40010400 	.word	0x40010400
 800205c:	40014000 	.word	0x40014000
 8002060:	40001800 	.word	0x40001800

08002064 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b084      	sub	sp, #16
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	68db      	ldr	r3, [r3, #12]
 8002072:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	691b      	ldr	r3, [r3, #16]
 800207a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	f003 0302 	and.w	r3, r3, #2
 8002082:	2b00      	cmp	r3, #0
 8002084:	d020      	beq.n	80020c8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	f003 0302 	and.w	r3, r3, #2
 800208c:	2b00      	cmp	r3, #0
 800208e:	d01b      	beq.n	80020c8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f06f 0202 	mvn.w	r2, #2
 8002098:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2201      	movs	r2, #1
 800209e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	699b      	ldr	r3, [r3, #24]
 80020a6:	f003 0303 	and.w	r3, r3, #3
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d003      	beq.n	80020b6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	f000 f8d2 	bl	8002258 <HAL_TIM_IC_CaptureCallback>
 80020b4:	e005      	b.n	80020c2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80020b6:	6878      	ldr	r0, [r7, #4]
 80020b8:	f000 f8c4 	bl	8002244 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020bc:	6878      	ldr	r0, [r7, #4]
 80020be:	f000 f8d5 	bl	800226c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2200      	movs	r2, #0
 80020c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	f003 0304 	and.w	r3, r3, #4
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d020      	beq.n	8002114 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	f003 0304 	and.w	r3, r3, #4
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d01b      	beq.n	8002114 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f06f 0204 	mvn.w	r2, #4
 80020e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2202      	movs	r2, #2
 80020ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	699b      	ldr	r3, [r3, #24]
 80020f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d003      	beq.n	8002102 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020fa:	6878      	ldr	r0, [r7, #4]
 80020fc:	f000 f8ac 	bl	8002258 <HAL_TIM_IC_CaptureCallback>
 8002100:	e005      	b.n	800210e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	f000 f89e 	bl	8002244 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002108:	6878      	ldr	r0, [r7, #4]
 800210a:	f000 f8af 	bl	800226c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2200      	movs	r2, #0
 8002112:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002114:	68bb      	ldr	r3, [r7, #8]
 8002116:	f003 0308 	and.w	r3, r3, #8
 800211a:	2b00      	cmp	r3, #0
 800211c:	d020      	beq.n	8002160 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	f003 0308 	and.w	r3, r3, #8
 8002124:	2b00      	cmp	r3, #0
 8002126:	d01b      	beq.n	8002160 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f06f 0208 	mvn.w	r2, #8
 8002130:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2204      	movs	r2, #4
 8002136:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	69db      	ldr	r3, [r3, #28]
 800213e:	f003 0303 	and.w	r3, r3, #3
 8002142:	2b00      	cmp	r3, #0
 8002144:	d003      	beq.n	800214e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002146:	6878      	ldr	r0, [r7, #4]
 8002148:	f000 f886 	bl	8002258 <HAL_TIM_IC_CaptureCallback>
 800214c:	e005      	b.n	800215a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800214e:	6878      	ldr	r0, [r7, #4]
 8002150:	f000 f878 	bl	8002244 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002154:	6878      	ldr	r0, [r7, #4]
 8002156:	f000 f889 	bl	800226c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2200      	movs	r2, #0
 800215e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	f003 0310 	and.w	r3, r3, #16
 8002166:	2b00      	cmp	r3, #0
 8002168:	d020      	beq.n	80021ac <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	f003 0310 	and.w	r3, r3, #16
 8002170:	2b00      	cmp	r3, #0
 8002172:	d01b      	beq.n	80021ac <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f06f 0210 	mvn.w	r2, #16
 800217c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2208      	movs	r2, #8
 8002182:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	69db      	ldr	r3, [r3, #28]
 800218a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800218e:	2b00      	cmp	r3, #0
 8002190:	d003      	beq.n	800219a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002192:	6878      	ldr	r0, [r7, #4]
 8002194:	f000 f860 	bl	8002258 <HAL_TIM_IC_CaptureCallback>
 8002198:	e005      	b.n	80021a6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800219a:	6878      	ldr	r0, [r7, #4]
 800219c:	f000 f852 	bl	8002244 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021a0:	6878      	ldr	r0, [r7, #4]
 80021a2:	f000 f863 	bl	800226c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2200      	movs	r2, #0
 80021aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	f003 0301 	and.w	r3, r3, #1
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d00c      	beq.n	80021d0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	f003 0301 	and.w	r3, r3, #1
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d007      	beq.n	80021d0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f06f 0201 	mvn.w	r2, #1
 80021c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80021ca:	6878      	ldr	r0, [r7, #4]
 80021cc:	f7fe fcb0 	bl	8000b30 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d00c      	beq.n	80021f4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d007      	beq.n	80021f4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80021ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80021ee:	6878      	ldr	r0, [r7, #4]
 80021f0:	f000 f906 	bl	8002400 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d00c      	beq.n	8002218 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002204:	2b00      	cmp	r3, #0
 8002206:	d007      	beq.n	8002218 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002210:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002212:	6878      	ldr	r0, [r7, #4]
 8002214:	f000 f834 	bl	8002280 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	f003 0320 	and.w	r3, r3, #32
 800221e:	2b00      	cmp	r3, #0
 8002220:	d00c      	beq.n	800223c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	f003 0320 	and.w	r3, r3, #32
 8002228:	2b00      	cmp	r3, #0
 800222a:	d007      	beq.n	800223c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f06f 0220 	mvn.w	r2, #32
 8002234:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002236:	6878      	ldr	r0, [r7, #4]
 8002238:	f000 f8d8 	bl	80023ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800223c:	bf00      	nop
 800223e:	3710      	adds	r7, #16
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}

08002244 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002244:	b480      	push	{r7}
 8002246:	b083      	sub	sp, #12
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800224c:	bf00      	nop
 800224e:	370c      	adds	r7, #12
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr

08002258 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002258:	b480      	push	{r7}
 800225a:	b083      	sub	sp, #12
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002260:	bf00      	nop
 8002262:	370c      	adds	r7, #12
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr

0800226c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800226c:	b480      	push	{r7}
 800226e:	b083      	sub	sp, #12
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002274:	bf00      	nop
 8002276:	370c      	adds	r7, #12
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr

08002280 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002280:	b480      	push	{r7}
 8002282:	b083      	sub	sp, #12
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002288:	bf00      	nop
 800228a:	370c      	adds	r7, #12
 800228c:	46bd      	mov	sp, r7
 800228e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002292:	4770      	bx	lr

08002294 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002294:	b480      	push	{r7}
 8002296:	b085      	sub	sp, #20
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
 800229c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	4a46      	ldr	r2, [pc, #280]	@ (80023c0 <TIM_Base_SetConfig+0x12c>)
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d013      	beq.n	80022d4 <TIM_Base_SetConfig+0x40>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80022b2:	d00f      	beq.n	80022d4 <TIM_Base_SetConfig+0x40>
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	4a43      	ldr	r2, [pc, #268]	@ (80023c4 <TIM_Base_SetConfig+0x130>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d00b      	beq.n	80022d4 <TIM_Base_SetConfig+0x40>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	4a42      	ldr	r2, [pc, #264]	@ (80023c8 <TIM_Base_SetConfig+0x134>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d007      	beq.n	80022d4 <TIM_Base_SetConfig+0x40>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	4a41      	ldr	r2, [pc, #260]	@ (80023cc <TIM_Base_SetConfig+0x138>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d003      	beq.n	80022d4 <TIM_Base_SetConfig+0x40>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	4a40      	ldr	r2, [pc, #256]	@ (80023d0 <TIM_Base_SetConfig+0x13c>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d108      	bne.n	80022e6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80022da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	68fa      	ldr	r2, [r7, #12]
 80022e2:	4313      	orrs	r3, r2
 80022e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	4a35      	ldr	r2, [pc, #212]	@ (80023c0 <TIM_Base_SetConfig+0x12c>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d02b      	beq.n	8002346 <TIM_Base_SetConfig+0xb2>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80022f4:	d027      	beq.n	8002346 <TIM_Base_SetConfig+0xb2>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	4a32      	ldr	r2, [pc, #200]	@ (80023c4 <TIM_Base_SetConfig+0x130>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d023      	beq.n	8002346 <TIM_Base_SetConfig+0xb2>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	4a31      	ldr	r2, [pc, #196]	@ (80023c8 <TIM_Base_SetConfig+0x134>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d01f      	beq.n	8002346 <TIM_Base_SetConfig+0xb2>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	4a30      	ldr	r2, [pc, #192]	@ (80023cc <TIM_Base_SetConfig+0x138>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d01b      	beq.n	8002346 <TIM_Base_SetConfig+0xb2>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	4a2f      	ldr	r2, [pc, #188]	@ (80023d0 <TIM_Base_SetConfig+0x13c>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d017      	beq.n	8002346 <TIM_Base_SetConfig+0xb2>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	4a2e      	ldr	r2, [pc, #184]	@ (80023d4 <TIM_Base_SetConfig+0x140>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d013      	beq.n	8002346 <TIM_Base_SetConfig+0xb2>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	4a2d      	ldr	r2, [pc, #180]	@ (80023d8 <TIM_Base_SetConfig+0x144>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d00f      	beq.n	8002346 <TIM_Base_SetConfig+0xb2>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	4a2c      	ldr	r2, [pc, #176]	@ (80023dc <TIM_Base_SetConfig+0x148>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d00b      	beq.n	8002346 <TIM_Base_SetConfig+0xb2>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	4a2b      	ldr	r2, [pc, #172]	@ (80023e0 <TIM_Base_SetConfig+0x14c>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d007      	beq.n	8002346 <TIM_Base_SetConfig+0xb2>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	4a2a      	ldr	r2, [pc, #168]	@ (80023e4 <TIM_Base_SetConfig+0x150>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d003      	beq.n	8002346 <TIM_Base_SetConfig+0xb2>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	4a29      	ldr	r2, [pc, #164]	@ (80023e8 <TIM_Base_SetConfig+0x154>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d108      	bne.n	8002358 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800234c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	68db      	ldr	r3, [r3, #12]
 8002352:	68fa      	ldr	r2, [r7, #12]
 8002354:	4313      	orrs	r3, r2
 8002356:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	695b      	ldr	r3, [r3, #20]
 8002362:	4313      	orrs	r3, r2
 8002364:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	68fa      	ldr	r2, [r7, #12]
 800236a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	689a      	ldr	r2, [r3, #8]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	681a      	ldr	r2, [r3, #0]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	4a10      	ldr	r2, [pc, #64]	@ (80023c0 <TIM_Base_SetConfig+0x12c>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d003      	beq.n	800238c <TIM_Base_SetConfig+0xf8>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	4a12      	ldr	r2, [pc, #72]	@ (80023d0 <TIM_Base_SetConfig+0x13c>)
 8002388:	4293      	cmp	r3, r2
 800238a:	d103      	bne.n	8002394 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	691a      	ldr	r2, [r3, #16]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2201      	movs	r2, #1
 8002398:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	691b      	ldr	r3, [r3, #16]
 800239e:	f003 0301 	and.w	r3, r3, #1
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	d105      	bne.n	80023b2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	691b      	ldr	r3, [r3, #16]
 80023aa:	f023 0201 	bic.w	r2, r3, #1
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	611a      	str	r2, [r3, #16]
  }
}
 80023b2:	bf00      	nop
 80023b4:	3714      	adds	r7, #20
 80023b6:	46bd      	mov	sp, r7
 80023b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023bc:	4770      	bx	lr
 80023be:	bf00      	nop
 80023c0:	40010000 	.word	0x40010000
 80023c4:	40000400 	.word	0x40000400
 80023c8:	40000800 	.word	0x40000800
 80023cc:	40000c00 	.word	0x40000c00
 80023d0:	40010400 	.word	0x40010400
 80023d4:	40014000 	.word	0x40014000
 80023d8:	40014400 	.word	0x40014400
 80023dc:	40014800 	.word	0x40014800
 80023e0:	40001800 	.word	0x40001800
 80023e4:	40001c00 	.word	0x40001c00
 80023e8:	40002000 	.word	0x40002000

080023ec <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b083      	sub	sp, #12
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80023f4:	bf00      	nop
 80023f6:	370c      	adds	r7, #12
 80023f8:	46bd      	mov	sp, r7
 80023fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fe:	4770      	bx	lr

08002400 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002400:	b480      	push	{r7}
 8002402:	b083      	sub	sp, #12
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002408:	bf00      	nop
 800240a:	370c      	adds	r7, #12
 800240c:	46bd      	mov	sp, r7
 800240e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002412:	4770      	bx	lr

08002414 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b082      	sub	sp, #8
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d101      	bne.n	8002426 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	e042      	b.n	80024ac <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800242c:	b2db      	uxtb	r3, r3
 800242e:	2b00      	cmp	r3, #0
 8002430:	d106      	bne.n	8002440 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2200      	movs	r2, #0
 8002436:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800243a:	6878      	ldr	r0, [r7, #4]
 800243c:	f7fe fbba 	bl	8000bb4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2224      	movs	r2, #36	@ 0x24
 8002444:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	68da      	ldr	r2, [r3, #12]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002456:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002458:	6878      	ldr	r0, [r7, #4]
 800245a:	f000 fdbd 	bl	8002fd8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	691a      	ldr	r2, [r3, #16]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800246c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	695a      	ldr	r2, [r3, #20]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800247c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	68da      	ldr	r2, [r3, #12]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800248c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2200      	movs	r2, #0
 8002492:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2220      	movs	r2, #32
 8002498:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2220      	movs	r2, #32
 80024a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2200      	movs	r2, #0
 80024a8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80024aa:	2300      	movs	r3, #0
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	3708      	adds	r7, #8
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd80      	pop	{r7, pc}

080024b4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b08a      	sub	sp, #40	@ 0x28
 80024b8:	af02      	add	r7, sp, #8
 80024ba:	60f8      	str	r0, [r7, #12]
 80024bc:	60b9      	str	r1, [r7, #8]
 80024be:	603b      	str	r3, [r7, #0]
 80024c0:	4613      	mov	r3, r2
 80024c2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80024c4:	2300      	movs	r3, #0
 80024c6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	2b20      	cmp	r3, #32
 80024d2:	d175      	bne.n	80025c0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d002      	beq.n	80024e0 <HAL_UART_Transmit+0x2c>
 80024da:	88fb      	ldrh	r3, [r7, #6]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d101      	bne.n	80024e4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80024e0:	2301      	movs	r3, #1
 80024e2:	e06e      	b.n	80025c2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	2200      	movs	r2, #0
 80024e8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	2221      	movs	r2, #33	@ 0x21
 80024ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80024f2:	f7fe fcd3 	bl	8000e9c <HAL_GetTick>
 80024f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	88fa      	ldrh	r2, [r7, #6]
 80024fc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	88fa      	ldrh	r2, [r7, #6]
 8002502:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800250c:	d108      	bne.n	8002520 <HAL_UART_Transmit+0x6c>
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	691b      	ldr	r3, [r3, #16]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d104      	bne.n	8002520 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002516:	2300      	movs	r3, #0
 8002518:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	61bb      	str	r3, [r7, #24]
 800251e:	e003      	b.n	8002528 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002524:	2300      	movs	r3, #0
 8002526:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002528:	e02e      	b.n	8002588 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	9300      	str	r3, [sp, #0]
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	2200      	movs	r2, #0
 8002532:	2180      	movs	r1, #128	@ 0x80
 8002534:	68f8      	ldr	r0, [r7, #12]
 8002536:	f000 fb1f 	bl	8002b78 <UART_WaitOnFlagUntilTimeout>
 800253a:	4603      	mov	r3, r0
 800253c:	2b00      	cmp	r3, #0
 800253e:	d005      	beq.n	800254c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	2220      	movs	r2, #32
 8002544:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002548:	2303      	movs	r3, #3
 800254a:	e03a      	b.n	80025c2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800254c:	69fb      	ldr	r3, [r7, #28]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d10b      	bne.n	800256a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002552:	69bb      	ldr	r3, [r7, #24]
 8002554:	881b      	ldrh	r3, [r3, #0]
 8002556:	461a      	mov	r2, r3
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002560:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002562:	69bb      	ldr	r3, [r7, #24]
 8002564:	3302      	adds	r3, #2
 8002566:	61bb      	str	r3, [r7, #24]
 8002568:	e007      	b.n	800257a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800256a:	69fb      	ldr	r3, [r7, #28]
 800256c:	781a      	ldrb	r2, [r3, #0]
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002574:	69fb      	ldr	r3, [r7, #28]
 8002576:	3301      	adds	r3, #1
 8002578:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800257e:	b29b      	uxth	r3, r3
 8002580:	3b01      	subs	r3, #1
 8002582:	b29a      	uxth	r2, r3
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800258c:	b29b      	uxth	r3, r3
 800258e:	2b00      	cmp	r3, #0
 8002590:	d1cb      	bne.n	800252a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	9300      	str	r3, [sp, #0]
 8002596:	697b      	ldr	r3, [r7, #20]
 8002598:	2200      	movs	r2, #0
 800259a:	2140      	movs	r1, #64	@ 0x40
 800259c:	68f8      	ldr	r0, [r7, #12]
 800259e:	f000 faeb 	bl	8002b78 <UART_WaitOnFlagUntilTimeout>
 80025a2:	4603      	mov	r3, r0
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d005      	beq.n	80025b4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	2220      	movs	r2, #32
 80025ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80025b0:	2303      	movs	r3, #3
 80025b2:	e006      	b.n	80025c2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	2220      	movs	r2, #32
 80025b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80025bc:	2300      	movs	r3, #0
 80025be:	e000      	b.n	80025c2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80025c0:	2302      	movs	r3, #2
  }
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	3720      	adds	r7, #32
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}

080025ca <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80025ca:	b580      	push	{r7, lr}
 80025cc:	b084      	sub	sp, #16
 80025ce:	af00      	add	r7, sp, #0
 80025d0:	60f8      	str	r0, [r7, #12]
 80025d2:	60b9      	str	r1, [r7, #8]
 80025d4:	4613      	mov	r3, r2
 80025d6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80025de:	b2db      	uxtb	r3, r3
 80025e0:	2b20      	cmp	r3, #32
 80025e2:	d112      	bne.n	800260a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d002      	beq.n	80025f0 <HAL_UART_Receive_IT+0x26>
 80025ea:	88fb      	ldrh	r3, [r7, #6]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d101      	bne.n	80025f4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80025f0:	2301      	movs	r3, #1
 80025f2:	e00b      	b.n	800260c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	2200      	movs	r2, #0
 80025f8:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80025fa:	88fb      	ldrh	r3, [r7, #6]
 80025fc:	461a      	mov	r2, r3
 80025fe:	68b9      	ldr	r1, [r7, #8]
 8002600:	68f8      	ldr	r0, [r7, #12]
 8002602:	f000 fb12 	bl	8002c2a <UART_Start_Receive_IT>
 8002606:	4603      	mov	r3, r0
 8002608:	e000      	b.n	800260c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800260a:	2302      	movs	r3, #2
  }
}
 800260c:	4618      	mov	r0, r3
 800260e:	3710      	adds	r7, #16
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}

08002614 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b0ba      	sub	sp, #232	@ 0xe8
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	68db      	ldr	r3, [r3, #12]
 800262c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	695b      	ldr	r3, [r3, #20]
 8002636:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800263a:	2300      	movs	r3, #0
 800263c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002640:	2300      	movs	r3, #0
 8002642:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002646:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800264a:	f003 030f 	and.w	r3, r3, #15
 800264e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8002652:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002656:	2b00      	cmp	r3, #0
 8002658:	d10f      	bne.n	800267a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800265a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800265e:	f003 0320 	and.w	r3, r3, #32
 8002662:	2b00      	cmp	r3, #0
 8002664:	d009      	beq.n	800267a <HAL_UART_IRQHandler+0x66>
 8002666:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800266a:	f003 0320 	and.w	r3, r3, #32
 800266e:	2b00      	cmp	r3, #0
 8002670:	d003      	beq.n	800267a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002672:	6878      	ldr	r0, [r7, #4]
 8002674:	f000 fbf2 	bl	8002e5c <UART_Receive_IT>
      return;
 8002678:	e25b      	b.n	8002b32 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800267a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800267e:	2b00      	cmp	r3, #0
 8002680:	f000 80de 	beq.w	8002840 <HAL_UART_IRQHandler+0x22c>
 8002684:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002688:	f003 0301 	and.w	r3, r3, #1
 800268c:	2b00      	cmp	r3, #0
 800268e:	d106      	bne.n	800269e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002690:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002694:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002698:	2b00      	cmp	r3, #0
 800269a:	f000 80d1 	beq.w	8002840 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800269e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80026a2:	f003 0301 	and.w	r3, r3, #1
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d00b      	beq.n	80026c2 <HAL_UART_IRQHandler+0xae>
 80026aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80026ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d005      	beq.n	80026c2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026ba:	f043 0201 	orr.w	r2, r3, #1
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80026c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80026c6:	f003 0304 	and.w	r3, r3, #4
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d00b      	beq.n	80026e6 <HAL_UART_IRQHandler+0xd2>
 80026ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80026d2:	f003 0301 	and.w	r3, r3, #1
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d005      	beq.n	80026e6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026de:	f043 0202 	orr.w	r2, r3, #2
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80026e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80026ea:	f003 0302 	and.w	r3, r3, #2
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d00b      	beq.n	800270a <HAL_UART_IRQHandler+0xf6>
 80026f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80026f6:	f003 0301 	and.w	r3, r3, #1
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d005      	beq.n	800270a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002702:	f043 0204 	orr.w	r2, r3, #4
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800270a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800270e:	f003 0308 	and.w	r3, r3, #8
 8002712:	2b00      	cmp	r3, #0
 8002714:	d011      	beq.n	800273a <HAL_UART_IRQHandler+0x126>
 8002716:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800271a:	f003 0320 	and.w	r3, r3, #32
 800271e:	2b00      	cmp	r3, #0
 8002720:	d105      	bne.n	800272e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002722:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002726:	f003 0301 	and.w	r3, r3, #1
 800272a:	2b00      	cmp	r3, #0
 800272c:	d005      	beq.n	800273a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002732:	f043 0208 	orr.w	r2, r3, #8
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800273e:	2b00      	cmp	r3, #0
 8002740:	f000 81f2 	beq.w	8002b28 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002744:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002748:	f003 0320 	and.w	r3, r3, #32
 800274c:	2b00      	cmp	r3, #0
 800274e:	d008      	beq.n	8002762 <HAL_UART_IRQHandler+0x14e>
 8002750:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002754:	f003 0320 	and.w	r3, r3, #32
 8002758:	2b00      	cmp	r3, #0
 800275a:	d002      	beq.n	8002762 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800275c:	6878      	ldr	r0, [r7, #4]
 800275e:	f000 fb7d 	bl	8002e5c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	695b      	ldr	r3, [r3, #20]
 8002768:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800276c:	2b40      	cmp	r3, #64	@ 0x40
 800276e:	bf0c      	ite	eq
 8002770:	2301      	moveq	r3, #1
 8002772:	2300      	movne	r3, #0
 8002774:	b2db      	uxtb	r3, r3
 8002776:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800277e:	f003 0308 	and.w	r3, r3, #8
 8002782:	2b00      	cmp	r3, #0
 8002784:	d103      	bne.n	800278e <HAL_UART_IRQHandler+0x17a>
 8002786:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800278a:	2b00      	cmp	r3, #0
 800278c:	d04f      	beq.n	800282e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800278e:	6878      	ldr	r0, [r7, #4]
 8002790:	f000 fa85 	bl	8002c9e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	695b      	ldr	r3, [r3, #20]
 800279a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800279e:	2b40      	cmp	r3, #64	@ 0x40
 80027a0:	d141      	bne.n	8002826 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	3314      	adds	r3, #20
 80027a8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80027b0:	e853 3f00 	ldrex	r3, [r3]
 80027b4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80027b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80027bc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80027c0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	3314      	adds	r3, #20
 80027ca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80027ce:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80027d2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027d6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80027da:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80027de:	e841 2300 	strex	r3, r2, [r1]
 80027e2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80027e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d1d9      	bne.n	80027a2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d013      	beq.n	800281e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027fa:	4a7e      	ldr	r2, [pc, #504]	@ (80029f4 <HAL_UART_IRQHandler+0x3e0>)
 80027fc:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002802:	4618      	mov	r0, r3
 8002804:	f7fe fca8 	bl	8001158 <HAL_DMA_Abort_IT>
 8002808:	4603      	mov	r3, r0
 800280a:	2b00      	cmp	r3, #0
 800280c:	d016      	beq.n	800283c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002812:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002814:	687a      	ldr	r2, [r7, #4]
 8002816:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002818:	4610      	mov	r0, r2
 800281a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800281c:	e00e      	b.n	800283c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800281e:	6878      	ldr	r0, [r7, #4]
 8002820:	f000 f994 	bl	8002b4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002824:	e00a      	b.n	800283c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002826:	6878      	ldr	r0, [r7, #4]
 8002828:	f000 f990 	bl	8002b4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800282c:	e006      	b.n	800283c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800282e:	6878      	ldr	r0, [r7, #4]
 8002830:	f000 f98c 	bl	8002b4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2200      	movs	r2, #0
 8002838:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800283a:	e175      	b.n	8002b28 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800283c:	bf00      	nop
    return;
 800283e:	e173      	b.n	8002b28 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002844:	2b01      	cmp	r3, #1
 8002846:	f040 814f 	bne.w	8002ae8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800284a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800284e:	f003 0310 	and.w	r3, r3, #16
 8002852:	2b00      	cmp	r3, #0
 8002854:	f000 8148 	beq.w	8002ae8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002858:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800285c:	f003 0310 	and.w	r3, r3, #16
 8002860:	2b00      	cmp	r3, #0
 8002862:	f000 8141 	beq.w	8002ae8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002866:	2300      	movs	r3, #0
 8002868:	60bb      	str	r3, [r7, #8]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	60bb      	str	r3, [r7, #8]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	60bb      	str	r3, [r7, #8]
 800287a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	695b      	ldr	r3, [r3, #20]
 8002882:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002886:	2b40      	cmp	r3, #64	@ 0x40
 8002888:	f040 80b6 	bne.w	80029f8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002898:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800289c:	2b00      	cmp	r3, #0
 800289e:	f000 8145 	beq.w	8002b2c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80028a6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80028aa:	429a      	cmp	r2, r3
 80028ac:	f080 813e 	bcs.w	8002b2c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80028b6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028bc:	69db      	ldr	r3, [r3, #28]
 80028be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80028c2:	f000 8088 	beq.w	80029d6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	330c      	adds	r3, #12
 80028cc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80028d4:	e853 3f00 	ldrex	r3, [r3]
 80028d8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80028dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80028e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80028e4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	330c      	adds	r3, #12
 80028ee:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80028f2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80028f6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028fa:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80028fe:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002902:	e841 2300 	strex	r3, r2, [r1]
 8002906:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800290a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800290e:	2b00      	cmp	r3, #0
 8002910:	d1d9      	bne.n	80028c6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	3314      	adds	r3, #20
 8002918:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800291a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800291c:	e853 3f00 	ldrex	r3, [r3]
 8002920:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002922:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002924:	f023 0301 	bic.w	r3, r3, #1
 8002928:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	3314      	adds	r3, #20
 8002932:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002936:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800293a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800293c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800293e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002942:	e841 2300 	strex	r3, r2, [r1]
 8002946:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002948:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800294a:	2b00      	cmp	r3, #0
 800294c:	d1e1      	bne.n	8002912 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	3314      	adds	r3, #20
 8002954:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002956:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002958:	e853 3f00 	ldrex	r3, [r3]
 800295c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800295e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002960:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002964:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	3314      	adds	r3, #20
 800296e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002972:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002974:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002976:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002978:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800297a:	e841 2300 	strex	r3, r2, [r1]
 800297e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002980:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002982:	2b00      	cmp	r3, #0
 8002984:	d1e3      	bne.n	800294e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2220      	movs	r2, #32
 800298a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2200      	movs	r2, #0
 8002992:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	330c      	adds	r3, #12
 800299a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800299c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800299e:	e853 3f00 	ldrex	r3, [r3]
 80029a2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80029a4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80029a6:	f023 0310 	bic.w	r3, r3, #16
 80029aa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	330c      	adds	r3, #12
 80029b4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80029b8:	65ba      	str	r2, [r7, #88]	@ 0x58
 80029ba:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029bc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80029be:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80029c0:	e841 2300 	strex	r3, r2, [r1]
 80029c4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80029c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d1e3      	bne.n	8002994 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029d0:	4618      	mov	r0, r3
 80029d2:	f7fe fb51 	bl	8001078 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2202      	movs	r2, #2
 80029da:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80029e4:	b29b      	uxth	r3, r3
 80029e6:	1ad3      	subs	r3, r2, r3
 80029e8:	b29b      	uxth	r3, r3
 80029ea:	4619      	mov	r1, r3
 80029ec:	6878      	ldr	r0, [r7, #4]
 80029ee:	f000 f8b7 	bl	8002b60 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80029f2:	e09b      	b.n	8002b2c <HAL_UART_IRQHandler+0x518>
 80029f4:	08002d65 	.word	0x08002d65
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002a00:	b29b      	uxth	r3, r3
 8002a02:	1ad3      	subs	r3, r2, r3
 8002a04:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002a0c:	b29b      	uxth	r3, r3
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	f000 808e 	beq.w	8002b30 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002a14:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	f000 8089 	beq.w	8002b30 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	330c      	adds	r3, #12
 8002a24:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a28:	e853 3f00 	ldrex	r3, [r3]
 8002a2c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002a2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a30:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002a34:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	330c      	adds	r3, #12
 8002a3e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8002a42:	647a      	str	r2, [r7, #68]	@ 0x44
 8002a44:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a46:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002a48:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002a4a:	e841 2300 	strex	r3, r2, [r1]
 8002a4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002a50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d1e3      	bne.n	8002a1e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	3314      	adds	r3, #20
 8002a5c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a60:	e853 3f00 	ldrex	r3, [r3]
 8002a64:	623b      	str	r3, [r7, #32]
   return(result);
 8002a66:	6a3b      	ldr	r3, [r7, #32]
 8002a68:	f023 0301 	bic.w	r3, r3, #1
 8002a6c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	3314      	adds	r3, #20
 8002a76:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002a7a:	633a      	str	r2, [r7, #48]	@ 0x30
 8002a7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a7e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002a80:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002a82:	e841 2300 	strex	r3, r2, [r1]
 8002a86:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002a88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d1e3      	bne.n	8002a56 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2220      	movs	r2, #32
 8002a92:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	330c      	adds	r3, #12
 8002aa2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002aa4:	693b      	ldr	r3, [r7, #16]
 8002aa6:	e853 3f00 	ldrex	r3, [r3]
 8002aaa:	60fb      	str	r3, [r7, #12]
   return(result);
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	f023 0310 	bic.w	r3, r3, #16
 8002ab2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	330c      	adds	r3, #12
 8002abc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002ac0:	61fa      	str	r2, [r7, #28]
 8002ac2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ac4:	69b9      	ldr	r1, [r7, #24]
 8002ac6:	69fa      	ldr	r2, [r7, #28]
 8002ac8:	e841 2300 	strex	r3, r2, [r1]
 8002acc:	617b      	str	r3, [r7, #20]
   return(result);
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d1e3      	bne.n	8002a9c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2202      	movs	r2, #2
 8002ad8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002ada:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002ade:	4619      	mov	r1, r3
 8002ae0:	6878      	ldr	r0, [r7, #4]
 8002ae2:	f000 f83d 	bl	8002b60 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002ae6:	e023      	b.n	8002b30 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002ae8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002aec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d009      	beq.n	8002b08 <HAL_UART_IRQHandler+0x4f4>
 8002af4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002af8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d003      	beq.n	8002b08 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002b00:	6878      	ldr	r0, [r7, #4]
 8002b02:	f000 f943 	bl	8002d8c <UART_Transmit_IT>
    return;
 8002b06:	e014      	b.n	8002b32 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002b08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d00e      	beq.n	8002b32 <HAL_UART_IRQHandler+0x51e>
 8002b14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002b18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d008      	beq.n	8002b32 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002b20:	6878      	ldr	r0, [r7, #4]
 8002b22:	f000 f983 	bl	8002e2c <UART_EndTransmit_IT>
    return;
 8002b26:	e004      	b.n	8002b32 <HAL_UART_IRQHandler+0x51e>
    return;
 8002b28:	bf00      	nop
 8002b2a:	e002      	b.n	8002b32 <HAL_UART_IRQHandler+0x51e>
      return;
 8002b2c:	bf00      	nop
 8002b2e:	e000      	b.n	8002b32 <HAL_UART_IRQHandler+0x51e>
      return;
 8002b30:	bf00      	nop
  }
}
 8002b32:	37e8      	adds	r7, #232	@ 0xe8
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd80      	pop	{r7, pc}

08002b38 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b083      	sub	sp, #12
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002b40:	bf00      	nop
 8002b42:	370c      	adds	r7, #12
 8002b44:	46bd      	mov	sp, r7
 8002b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4a:	4770      	bx	lr

08002b4c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b083      	sub	sp, #12
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002b54:	bf00      	nop
 8002b56:	370c      	adds	r7, #12
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5e:	4770      	bx	lr

08002b60 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b083      	sub	sp, #12
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
 8002b68:	460b      	mov	r3, r1
 8002b6a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002b6c:	bf00      	nop
 8002b6e:	370c      	adds	r7, #12
 8002b70:	46bd      	mov	sp, r7
 8002b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b76:	4770      	bx	lr

08002b78 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b086      	sub	sp, #24
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	60f8      	str	r0, [r7, #12]
 8002b80:	60b9      	str	r1, [r7, #8]
 8002b82:	603b      	str	r3, [r7, #0]
 8002b84:	4613      	mov	r3, r2
 8002b86:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b88:	e03b      	b.n	8002c02 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b8a:	6a3b      	ldr	r3, [r7, #32]
 8002b8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b90:	d037      	beq.n	8002c02 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b92:	f7fe f983 	bl	8000e9c <HAL_GetTick>
 8002b96:	4602      	mov	r2, r0
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	1ad3      	subs	r3, r2, r3
 8002b9c:	6a3a      	ldr	r2, [r7, #32]
 8002b9e:	429a      	cmp	r2, r3
 8002ba0:	d302      	bcc.n	8002ba8 <UART_WaitOnFlagUntilTimeout+0x30>
 8002ba2:	6a3b      	ldr	r3, [r7, #32]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d101      	bne.n	8002bac <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002ba8:	2303      	movs	r3, #3
 8002baa:	e03a      	b.n	8002c22 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	68db      	ldr	r3, [r3, #12]
 8002bb2:	f003 0304 	and.w	r3, r3, #4
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d023      	beq.n	8002c02 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002bba:	68bb      	ldr	r3, [r7, #8]
 8002bbc:	2b80      	cmp	r3, #128	@ 0x80
 8002bbe:	d020      	beq.n	8002c02 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	2b40      	cmp	r3, #64	@ 0x40
 8002bc4:	d01d      	beq.n	8002c02 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f003 0308 	and.w	r3, r3, #8
 8002bd0:	2b08      	cmp	r3, #8
 8002bd2:	d116      	bne.n	8002c02 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	617b      	str	r3, [r7, #20]
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	617b      	str	r3, [r7, #20]
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	617b      	str	r3, [r7, #20]
 8002be8:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002bea:	68f8      	ldr	r0, [r7, #12]
 8002bec:	f000 f857 	bl	8002c9e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	2208      	movs	r2, #8
 8002bf4:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e00f      	b.n	8002c22 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	681a      	ldr	r2, [r3, #0]
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	4013      	ands	r3, r2
 8002c0c:	68ba      	ldr	r2, [r7, #8]
 8002c0e:	429a      	cmp	r2, r3
 8002c10:	bf0c      	ite	eq
 8002c12:	2301      	moveq	r3, #1
 8002c14:	2300      	movne	r3, #0
 8002c16:	b2db      	uxtb	r3, r3
 8002c18:	461a      	mov	r2, r3
 8002c1a:	79fb      	ldrb	r3, [r7, #7]
 8002c1c:	429a      	cmp	r2, r3
 8002c1e:	d0b4      	beq.n	8002b8a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002c20:	2300      	movs	r3, #0
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	3718      	adds	r7, #24
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}

08002c2a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002c2a:	b480      	push	{r7}
 8002c2c:	b085      	sub	sp, #20
 8002c2e:	af00      	add	r7, sp, #0
 8002c30:	60f8      	str	r0, [r7, #12]
 8002c32:	60b9      	str	r1, [r7, #8]
 8002c34:	4613      	mov	r3, r2
 8002c36:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	68ba      	ldr	r2, [r7, #8]
 8002c3c:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	88fa      	ldrh	r2, [r7, #6]
 8002c42:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	88fa      	ldrh	r2, [r7, #6]
 8002c48:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	2222      	movs	r2, #34	@ 0x22
 8002c54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	691b      	ldr	r3, [r3, #16]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d007      	beq.n	8002c70 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	68da      	ldr	r2, [r3, #12]
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002c6e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	695a      	ldr	r2, [r3, #20]
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f042 0201 	orr.w	r2, r2, #1
 8002c7e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	68da      	ldr	r2, [r3, #12]
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f042 0220 	orr.w	r2, r2, #32
 8002c8e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002c90:	2300      	movs	r3, #0
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	3714      	adds	r7, #20
 8002c96:	46bd      	mov	sp, r7
 8002c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9c:	4770      	bx	lr

08002c9e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002c9e:	b480      	push	{r7}
 8002ca0:	b095      	sub	sp, #84	@ 0x54
 8002ca2:	af00      	add	r7, sp, #0
 8002ca4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	330c      	adds	r3, #12
 8002cac:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002cb0:	e853 3f00 	ldrex	r3, [r3]
 8002cb4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002cb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cb8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002cbc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	330c      	adds	r3, #12
 8002cc4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002cc6:	643a      	str	r2, [r7, #64]	@ 0x40
 8002cc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cca:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002ccc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002cce:	e841 2300 	strex	r3, r2, [r1]
 8002cd2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002cd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d1e5      	bne.n	8002ca6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	3314      	adds	r3, #20
 8002ce0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ce2:	6a3b      	ldr	r3, [r7, #32]
 8002ce4:	e853 3f00 	ldrex	r3, [r3]
 8002ce8:	61fb      	str	r3, [r7, #28]
   return(result);
 8002cea:	69fb      	ldr	r3, [r7, #28]
 8002cec:	f023 0301 	bic.w	r3, r3, #1
 8002cf0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	3314      	adds	r3, #20
 8002cf8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002cfa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002cfc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cfe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002d00:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002d02:	e841 2300 	strex	r3, r2, [r1]
 8002d06:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002d08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d1e5      	bne.n	8002cda <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d12:	2b01      	cmp	r3, #1
 8002d14:	d119      	bne.n	8002d4a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	330c      	adds	r3, #12
 8002d1c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	e853 3f00 	ldrex	r3, [r3]
 8002d24:	60bb      	str	r3, [r7, #8]
   return(result);
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	f023 0310 	bic.w	r3, r3, #16
 8002d2c:	647b      	str	r3, [r7, #68]	@ 0x44
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	330c      	adds	r3, #12
 8002d34:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002d36:	61ba      	str	r2, [r7, #24]
 8002d38:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d3a:	6979      	ldr	r1, [r7, #20]
 8002d3c:	69ba      	ldr	r2, [r7, #24]
 8002d3e:	e841 2300 	strex	r3, r2, [r1]
 8002d42:	613b      	str	r3, [r7, #16]
   return(result);
 8002d44:	693b      	ldr	r3, [r7, #16]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d1e5      	bne.n	8002d16 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2220      	movs	r2, #32
 8002d4e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2200      	movs	r2, #0
 8002d56:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002d58:	bf00      	nop
 8002d5a:	3754      	adds	r7, #84	@ 0x54
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d62:	4770      	bx	lr

08002d64 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b084      	sub	sp, #16
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d70:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	2200      	movs	r2, #0
 8002d76:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002d7e:	68f8      	ldr	r0, [r7, #12]
 8002d80:	f7ff fee4 	bl	8002b4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002d84:	bf00      	nop
 8002d86:	3710      	adds	r7, #16
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}

08002d8c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b085      	sub	sp, #20
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d9a:	b2db      	uxtb	r3, r3
 8002d9c:	2b21      	cmp	r3, #33	@ 0x21
 8002d9e:	d13e      	bne.n	8002e1e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002da8:	d114      	bne.n	8002dd4 <UART_Transmit_IT+0x48>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	691b      	ldr	r3, [r3, #16]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d110      	bne.n	8002dd4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6a1b      	ldr	r3, [r3, #32]
 8002db6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	881b      	ldrh	r3, [r3, #0]
 8002dbc:	461a      	mov	r2, r3
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002dc6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6a1b      	ldr	r3, [r3, #32]
 8002dcc:	1c9a      	adds	r2, r3, #2
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	621a      	str	r2, [r3, #32]
 8002dd2:	e008      	b.n	8002de6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6a1b      	ldr	r3, [r3, #32]
 8002dd8:	1c59      	adds	r1, r3, #1
 8002dda:	687a      	ldr	r2, [r7, #4]
 8002ddc:	6211      	str	r1, [r2, #32]
 8002dde:	781a      	ldrb	r2, [r3, #0]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002dea:	b29b      	uxth	r3, r3
 8002dec:	3b01      	subs	r3, #1
 8002dee:	b29b      	uxth	r3, r3
 8002df0:	687a      	ldr	r2, [r7, #4]
 8002df2:	4619      	mov	r1, r3
 8002df4:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d10f      	bne.n	8002e1a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	68da      	ldr	r2, [r3, #12]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002e08:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	68da      	ldr	r2, [r3, #12]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002e18:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	e000      	b.n	8002e20 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002e1e:	2302      	movs	r3, #2
  }
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	3714      	adds	r7, #20
 8002e24:	46bd      	mov	sp, r7
 8002e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2a:	4770      	bx	lr

08002e2c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b082      	sub	sp, #8
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	68da      	ldr	r2, [r3, #12]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002e42:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2220      	movs	r2, #32
 8002e48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002e4c:	6878      	ldr	r0, [r7, #4]
 8002e4e:	f7ff fe73 	bl	8002b38 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002e52:	2300      	movs	r3, #0
}
 8002e54:	4618      	mov	r0, r3
 8002e56:	3708      	adds	r7, #8
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}

08002e5c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b08c      	sub	sp, #48	@ 0x30
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002e6a:	b2db      	uxtb	r3, r3
 8002e6c:	2b22      	cmp	r3, #34	@ 0x22
 8002e6e:	f040 80ae 	bne.w	8002fce <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e7a:	d117      	bne.n	8002eac <UART_Receive_IT+0x50>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	691b      	ldr	r3, [r3, #16]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d113      	bne.n	8002eac <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002e84:	2300      	movs	r3, #0
 8002e86:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e8c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	b29b      	uxth	r3, r3
 8002e96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e9a:	b29a      	uxth	r2, r3
 8002e9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e9e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ea4:	1c9a      	adds	r2, r3, #2
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	629a      	str	r2, [r3, #40]	@ 0x28
 8002eaa:	e026      	b.n	8002efa <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002eb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	689b      	ldr	r3, [r3, #8]
 8002eba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002ebe:	d007      	beq.n	8002ed0 <UART_Receive_IT+0x74>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d10a      	bne.n	8002ede <UART_Receive_IT+0x82>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	691b      	ldr	r3, [r3, #16]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d106      	bne.n	8002ede <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	b2da      	uxtb	r2, r3
 8002ed8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002eda:	701a      	strb	r2, [r3, #0]
 8002edc:	e008      	b.n	8002ef0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	b2db      	uxtb	r3, r3
 8002ee6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002eea:	b2da      	uxtb	r2, r3
 8002eec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002eee:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ef4:	1c5a      	adds	r2, r3, #1
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002efe:	b29b      	uxth	r3, r3
 8002f00:	3b01      	subs	r3, #1
 8002f02:	b29b      	uxth	r3, r3
 8002f04:	687a      	ldr	r2, [r7, #4]
 8002f06:	4619      	mov	r1, r3
 8002f08:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d15d      	bne.n	8002fca <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	68da      	ldr	r2, [r3, #12]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f022 0220 	bic.w	r2, r2, #32
 8002f1c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	68da      	ldr	r2, [r3, #12]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002f2c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	695a      	ldr	r2, [r3, #20]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f022 0201 	bic.w	r2, r2, #1
 8002f3c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2220      	movs	r2, #32
 8002f42:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f50:	2b01      	cmp	r3, #1
 8002f52:	d135      	bne.n	8002fc0 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2200      	movs	r2, #0
 8002f58:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	330c      	adds	r3, #12
 8002f60:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	e853 3f00 	ldrex	r3, [r3]
 8002f68:	613b      	str	r3, [r7, #16]
   return(result);
 8002f6a:	693b      	ldr	r3, [r7, #16]
 8002f6c:	f023 0310 	bic.w	r3, r3, #16
 8002f70:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	330c      	adds	r3, #12
 8002f78:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f7a:	623a      	str	r2, [r7, #32]
 8002f7c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f7e:	69f9      	ldr	r1, [r7, #28]
 8002f80:	6a3a      	ldr	r2, [r7, #32]
 8002f82:	e841 2300 	strex	r3, r2, [r1]
 8002f86:	61bb      	str	r3, [r7, #24]
   return(result);
 8002f88:	69bb      	ldr	r3, [r7, #24]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d1e5      	bne.n	8002f5a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f003 0310 	and.w	r3, r3, #16
 8002f98:	2b10      	cmp	r3, #16
 8002f9a:	d10a      	bne.n	8002fb2 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	60fb      	str	r3, [r7, #12]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	60fb      	str	r3, [r7, #12]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	60fb      	str	r3, [r7, #12]
 8002fb0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002fb6:	4619      	mov	r1, r3
 8002fb8:	6878      	ldr	r0, [r7, #4]
 8002fba:	f7ff fdd1 	bl	8002b60 <HAL_UARTEx_RxEventCallback>
 8002fbe:	e002      	b.n	8002fc6 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002fc0:	6878      	ldr	r0, [r7, #4]
 8002fc2:	f7fd fd3f 	bl	8000a44 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	e002      	b.n	8002fd0 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	e000      	b.n	8002fd0 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002fce:	2302      	movs	r3, #2
  }
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	3730      	adds	r7, #48	@ 0x30
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bd80      	pop	{r7, pc}

08002fd8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002fd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002fdc:	b0c0      	sub	sp, #256	@ 0x100
 8002fde:	af00      	add	r7, sp, #0
 8002fe0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002fe4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	691b      	ldr	r3, [r3, #16]
 8002fec:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002ff0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ff4:	68d9      	ldr	r1, [r3, #12]
 8002ff6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ffa:	681a      	ldr	r2, [r3, #0]
 8002ffc:	ea40 0301 	orr.w	r3, r0, r1
 8003000:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003002:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003006:	689a      	ldr	r2, [r3, #8]
 8003008:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800300c:	691b      	ldr	r3, [r3, #16]
 800300e:	431a      	orrs	r2, r3
 8003010:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003014:	695b      	ldr	r3, [r3, #20]
 8003016:	431a      	orrs	r2, r3
 8003018:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800301c:	69db      	ldr	r3, [r3, #28]
 800301e:	4313      	orrs	r3, r2
 8003020:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003024:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	68db      	ldr	r3, [r3, #12]
 800302c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003030:	f021 010c 	bic.w	r1, r1, #12
 8003034:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003038:	681a      	ldr	r2, [r3, #0]
 800303a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800303e:	430b      	orrs	r3, r1
 8003040:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003042:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	695b      	ldr	r3, [r3, #20]
 800304a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800304e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003052:	6999      	ldr	r1, [r3, #24]
 8003054:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003058:	681a      	ldr	r2, [r3, #0]
 800305a:	ea40 0301 	orr.w	r3, r0, r1
 800305e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003060:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003064:	681a      	ldr	r2, [r3, #0]
 8003066:	4b8f      	ldr	r3, [pc, #572]	@ (80032a4 <UART_SetConfig+0x2cc>)
 8003068:	429a      	cmp	r2, r3
 800306a:	d005      	beq.n	8003078 <UART_SetConfig+0xa0>
 800306c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003070:	681a      	ldr	r2, [r3, #0]
 8003072:	4b8d      	ldr	r3, [pc, #564]	@ (80032a8 <UART_SetConfig+0x2d0>)
 8003074:	429a      	cmp	r2, r3
 8003076:	d104      	bne.n	8003082 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003078:	f7fe fee4 	bl	8001e44 <HAL_RCC_GetPCLK2Freq>
 800307c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003080:	e003      	b.n	800308a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003082:	f7fe fecb 	bl	8001e1c <HAL_RCC_GetPCLK1Freq>
 8003086:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800308a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800308e:	69db      	ldr	r3, [r3, #28]
 8003090:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003094:	f040 810c 	bne.w	80032b0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003098:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800309c:	2200      	movs	r2, #0
 800309e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80030a2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80030a6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80030aa:	4622      	mov	r2, r4
 80030ac:	462b      	mov	r3, r5
 80030ae:	1891      	adds	r1, r2, r2
 80030b0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80030b2:	415b      	adcs	r3, r3
 80030b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80030b6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80030ba:	4621      	mov	r1, r4
 80030bc:	eb12 0801 	adds.w	r8, r2, r1
 80030c0:	4629      	mov	r1, r5
 80030c2:	eb43 0901 	adc.w	r9, r3, r1
 80030c6:	f04f 0200 	mov.w	r2, #0
 80030ca:	f04f 0300 	mov.w	r3, #0
 80030ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80030d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80030d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80030da:	4690      	mov	r8, r2
 80030dc:	4699      	mov	r9, r3
 80030de:	4623      	mov	r3, r4
 80030e0:	eb18 0303 	adds.w	r3, r8, r3
 80030e4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80030e8:	462b      	mov	r3, r5
 80030ea:	eb49 0303 	adc.w	r3, r9, r3
 80030ee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80030f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	2200      	movs	r2, #0
 80030fa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80030fe:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003102:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003106:	460b      	mov	r3, r1
 8003108:	18db      	adds	r3, r3, r3
 800310a:	653b      	str	r3, [r7, #80]	@ 0x50
 800310c:	4613      	mov	r3, r2
 800310e:	eb42 0303 	adc.w	r3, r2, r3
 8003112:	657b      	str	r3, [r7, #84]	@ 0x54
 8003114:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003118:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800311c:	f7fd f8f8 	bl	8000310 <__aeabi_uldivmod>
 8003120:	4602      	mov	r2, r0
 8003122:	460b      	mov	r3, r1
 8003124:	4b61      	ldr	r3, [pc, #388]	@ (80032ac <UART_SetConfig+0x2d4>)
 8003126:	fba3 2302 	umull	r2, r3, r3, r2
 800312a:	095b      	lsrs	r3, r3, #5
 800312c:	011c      	lsls	r4, r3, #4
 800312e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003132:	2200      	movs	r2, #0
 8003134:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003138:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800313c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003140:	4642      	mov	r2, r8
 8003142:	464b      	mov	r3, r9
 8003144:	1891      	adds	r1, r2, r2
 8003146:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003148:	415b      	adcs	r3, r3
 800314a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800314c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003150:	4641      	mov	r1, r8
 8003152:	eb12 0a01 	adds.w	sl, r2, r1
 8003156:	4649      	mov	r1, r9
 8003158:	eb43 0b01 	adc.w	fp, r3, r1
 800315c:	f04f 0200 	mov.w	r2, #0
 8003160:	f04f 0300 	mov.w	r3, #0
 8003164:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003168:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800316c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003170:	4692      	mov	sl, r2
 8003172:	469b      	mov	fp, r3
 8003174:	4643      	mov	r3, r8
 8003176:	eb1a 0303 	adds.w	r3, sl, r3
 800317a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800317e:	464b      	mov	r3, r9
 8003180:	eb4b 0303 	adc.w	r3, fp, r3
 8003184:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003188:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	2200      	movs	r2, #0
 8003190:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003194:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003198:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800319c:	460b      	mov	r3, r1
 800319e:	18db      	adds	r3, r3, r3
 80031a0:	643b      	str	r3, [r7, #64]	@ 0x40
 80031a2:	4613      	mov	r3, r2
 80031a4:	eb42 0303 	adc.w	r3, r2, r3
 80031a8:	647b      	str	r3, [r7, #68]	@ 0x44
 80031aa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80031ae:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80031b2:	f7fd f8ad 	bl	8000310 <__aeabi_uldivmod>
 80031b6:	4602      	mov	r2, r0
 80031b8:	460b      	mov	r3, r1
 80031ba:	4611      	mov	r1, r2
 80031bc:	4b3b      	ldr	r3, [pc, #236]	@ (80032ac <UART_SetConfig+0x2d4>)
 80031be:	fba3 2301 	umull	r2, r3, r3, r1
 80031c2:	095b      	lsrs	r3, r3, #5
 80031c4:	2264      	movs	r2, #100	@ 0x64
 80031c6:	fb02 f303 	mul.w	r3, r2, r3
 80031ca:	1acb      	subs	r3, r1, r3
 80031cc:	00db      	lsls	r3, r3, #3
 80031ce:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80031d2:	4b36      	ldr	r3, [pc, #216]	@ (80032ac <UART_SetConfig+0x2d4>)
 80031d4:	fba3 2302 	umull	r2, r3, r3, r2
 80031d8:	095b      	lsrs	r3, r3, #5
 80031da:	005b      	lsls	r3, r3, #1
 80031dc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80031e0:	441c      	add	r4, r3
 80031e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80031e6:	2200      	movs	r2, #0
 80031e8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80031ec:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80031f0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80031f4:	4642      	mov	r2, r8
 80031f6:	464b      	mov	r3, r9
 80031f8:	1891      	adds	r1, r2, r2
 80031fa:	63b9      	str	r1, [r7, #56]	@ 0x38
 80031fc:	415b      	adcs	r3, r3
 80031fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003200:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003204:	4641      	mov	r1, r8
 8003206:	1851      	adds	r1, r2, r1
 8003208:	6339      	str	r1, [r7, #48]	@ 0x30
 800320a:	4649      	mov	r1, r9
 800320c:	414b      	adcs	r3, r1
 800320e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003210:	f04f 0200 	mov.w	r2, #0
 8003214:	f04f 0300 	mov.w	r3, #0
 8003218:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800321c:	4659      	mov	r1, fp
 800321e:	00cb      	lsls	r3, r1, #3
 8003220:	4651      	mov	r1, sl
 8003222:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003226:	4651      	mov	r1, sl
 8003228:	00ca      	lsls	r2, r1, #3
 800322a:	4610      	mov	r0, r2
 800322c:	4619      	mov	r1, r3
 800322e:	4603      	mov	r3, r0
 8003230:	4642      	mov	r2, r8
 8003232:	189b      	adds	r3, r3, r2
 8003234:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003238:	464b      	mov	r3, r9
 800323a:	460a      	mov	r2, r1
 800323c:	eb42 0303 	adc.w	r3, r2, r3
 8003240:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003244:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	2200      	movs	r2, #0
 800324c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003250:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003254:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003258:	460b      	mov	r3, r1
 800325a:	18db      	adds	r3, r3, r3
 800325c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800325e:	4613      	mov	r3, r2
 8003260:	eb42 0303 	adc.w	r3, r2, r3
 8003264:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003266:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800326a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800326e:	f7fd f84f 	bl	8000310 <__aeabi_uldivmod>
 8003272:	4602      	mov	r2, r0
 8003274:	460b      	mov	r3, r1
 8003276:	4b0d      	ldr	r3, [pc, #52]	@ (80032ac <UART_SetConfig+0x2d4>)
 8003278:	fba3 1302 	umull	r1, r3, r3, r2
 800327c:	095b      	lsrs	r3, r3, #5
 800327e:	2164      	movs	r1, #100	@ 0x64
 8003280:	fb01 f303 	mul.w	r3, r1, r3
 8003284:	1ad3      	subs	r3, r2, r3
 8003286:	00db      	lsls	r3, r3, #3
 8003288:	3332      	adds	r3, #50	@ 0x32
 800328a:	4a08      	ldr	r2, [pc, #32]	@ (80032ac <UART_SetConfig+0x2d4>)
 800328c:	fba2 2303 	umull	r2, r3, r2, r3
 8003290:	095b      	lsrs	r3, r3, #5
 8003292:	f003 0207 	and.w	r2, r3, #7
 8003296:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4422      	add	r2, r4
 800329e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80032a0:	e106      	b.n	80034b0 <UART_SetConfig+0x4d8>
 80032a2:	bf00      	nop
 80032a4:	40011000 	.word	0x40011000
 80032a8:	40011400 	.word	0x40011400
 80032ac:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80032b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80032b4:	2200      	movs	r2, #0
 80032b6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80032ba:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80032be:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80032c2:	4642      	mov	r2, r8
 80032c4:	464b      	mov	r3, r9
 80032c6:	1891      	adds	r1, r2, r2
 80032c8:	6239      	str	r1, [r7, #32]
 80032ca:	415b      	adcs	r3, r3
 80032cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80032ce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80032d2:	4641      	mov	r1, r8
 80032d4:	1854      	adds	r4, r2, r1
 80032d6:	4649      	mov	r1, r9
 80032d8:	eb43 0501 	adc.w	r5, r3, r1
 80032dc:	f04f 0200 	mov.w	r2, #0
 80032e0:	f04f 0300 	mov.w	r3, #0
 80032e4:	00eb      	lsls	r3, r5, #3
 80032e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80032ea:	00e2      	lsls	r2, r4, #3
 80032ec:	4614      	mov	r4, r2
 80032ee:	461d      	mov	r5, r3
 80032f0:	4643      	mov	r3, r8
 80032f2:	18e3      	adds	r3, r4, r3
 80032f4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80032f8:	464b      	mov	r3, r9
 80032fa:	eb45 0303 	adc.w	r3, r5, r3
 80032fe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003302:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	2200      	movs	r2, #0
 800330a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800330e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003312:	f04f 0200 	mov.w	r2, #0
 8003316:	f04f 0300 	mov.w	r3, #0
 800331a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800331e:	4629      	mov	r1, r5
 8003320:	008b      	lsls	r3, r1, #2
 8003322:	4621      	mov	r1, r4
 8003324:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003328:	4621      	mov	r1, r4
 800332a:	008a      	lsls	r2, r1, #2
 800332c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003330:	f7fc ffee 	bl	8000310 <__aeabi_uldivmod>
 8003334:	4602      	mov	r2, r0
 8003336:	460b      	mov	r3, r1
 8003338:	4b60      	ldr	r3, [pc, #384]	@ (80034bc <UART_SetConfig+0x4e4>)
 800333a:	fba3 2302 	umull	r2, r3, r3, r2
 800333e:	095b      	lsrs	r3, r3, #5
 8003340:	011c      	lsls	r4, r3, #4
 8003342:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003346:	2200      	movs	r2, #0
 8003348:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800334c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003350:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003354:	4642      	mov	r2, r8
 8003356:	464b      	mov	r3, r9
 8003358:	1891      	adds	r1, r2, r2
 800335a:	61b9      	str	r1, [r7, #24]
 800335c:	415b      	adcs	r3, r3
 800335e:	61fb      	str	r3, [r7, #28]
 8003360:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003364:	4641      	mov	r1, r8
 8003366:	1851      	adds	r1, r2, r1
 8003368:	6139      	str	r1, [r7, #16]
 800336a:	4649      	mov	r1, r9
 800336c:	414b      	adcs	r3, r1
 800336e:	617b      	str	r3, [r7, #20]
 8003370:	f04f 0200 	mov.w	r2, #0
 8003374:	f04f 0300 	mov.w	r3, #0
 8003378:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800337c:	4659      	mov	r1, fp
 800337e:	00cb      	lsls	r3, r1, #3
 8003380:	4651      	mov	r1, sl
 8003382:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003386:	4651      	mov	r1, sl
 8003388:	00ca      	lsls	r2, r1, #3
 800338a:	4610      	mov	r0, r2
 800338c:	4619      	mov	r1, r3
 800338e:	4603      	mov	r3, r0
 8003390:	4642      	mov	r2, r8
 8003392:	189b      	adds	r3, r3, r2
 8003394:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003398:	464b      	mov	r3, r9
 800339a:	460a      	mov	r2, r1
 800339c:	eb42 0303 	adc.w	r3, r2, r3
 80033a0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80033a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	2200      	movs	r2, #0
 80033ac:	67bb      	str	r3, [r7, #120]	@ 0x78
 80033ae:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80033b0:	f04f 0200 	mov.w	r2, #0
 80033b4:	f04f 0300 	mov.w	r3, #0
 80033b8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80033bc:	4649      	mov	r1, r9
 80033be:	008b      	lsls	r3, r1, #2
 80033c0:	4641      	mov	r1, r8
 80033c2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80033c6:	4641      	mov	r1, r8
 80033c8:	008a      	lsls	r2, r1, #2
 80033ca:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80033ce:	f7fc ff9f 	bl	8000310 <__aeabi_uldivmod>
 80033d2:	4602      	mov	r2, r0
 80033d4:	460b      	mov	r3, r1
 80033d6:	4611      	mov	r1, r2
 80033d8:	4b38      	ldr	r3, [pc, #224]	@ (80034bc <UART_SetConfig+0x4e4>)
 80033da:	fba3 2301 	umull	r2, r3, r3, r1
 80033de:	095b      	lsrs	r3, r3, #5
 80033e0:	2264      	movs	r2, #100	@ 0x64
 80033e2:	fb02 f303 	mul.w	r3, r2, r3
 80033e6:	1acb      	subs	r3, r1, r3
 80033e8:	011b      	lsls	r3, r3, #4
 80033ea:	3332      	adds	r3, #50	@ 0x32
 80033ec:	4a33      	ldr	r2, [pc, #204]	@ (80034bc <UART_SetConfig+0x4e4>)
 80033ee:	fba2 2303 	umull	r2, r3, r2, r3
 80033f2:	095b      	lsrs	r3, r3, #5
 80033f4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80033f8:	441c      	add	r4, r3
 80033fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80033fe:	2200      	movs	r2, #0
 8003400:	673b      	str	r3, [r7, #112]	@ 0x70
 8003402:	677a      	str	r2, [r7, #116]	@ 0x74
 8003404:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003408:	4642      	mov	r2, r8
 800340a:	464b      	mov	r3, r9
 800340c:	1891      	adds	r1, r2, r2
 800340e:	60b9      	str	r1, [r7, #8]
 8003410:	415b      	adcs	r3, r3
 8003412:	60fb      	str	r3, [r7, #12]
 8003414:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003418:	4641      	mov	r1, r8
 800341a:	1851      	adds	r1, r2, r1
 800341c:	6039      	str	r1, [r7, #0]
 800341e:	4649      	mov	r1, r9
 8003420:	414b      	adcs	r3, r1
 8003422:	607b      	str	r3, [r7, #4]
 8003424:	f04f 0200 	mov.w	r2, #0
 8003428:	f04f 0300 	mov.w	r3, #0
 800342c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003430:	4659      	mov	r1, fp
 8003432:	00cb      	lsls	r3, r1, #3
 8003434:	4651      	mov	r1, sl
 8003436:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800343a:	4651      	mov	r1, sl
 800343c:	00ca      	lsls	r2, r1, #3
 800343e:	4610      	mov	r0, r2
 8003440:	4619      	mov	r1, r3
 8003442:	4603      	mov	r3, r0
 8003444:	4642      	mov	r2, r8
 8003446:	189b      	adds	r3, r3, r2
 8003448:	66bb      	str	r3, [r7, #104]	@ 0x68
 800344a:	464b      	mov	r3, r9
 800344c:	460a      	mov	r2, r1
 800344e:	eb42 0303 	adc.w	r3, r2, r3
 8003452:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003454:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	2200      	movs	r2, #0
 800345c:	663b      	str	r3, [r7, #96]	@ 0x60
 800345e:	667a      	str	r2, [r7, #100]	@ 0x64
 8003460:	f04f 0200 	mov.w	r2, #0
 8003464:	f04f 0300 	mov.w	r3, #0
 8003468:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800346c:	4649      	mov	r1, r9
 800346e:	008b      	lsls	r3, r1, #2
 8003470:	4641      	mov	r1, r8
 8003472:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003476:	4641      	mov	r1, r8
 8003478:	008a      	lsls	r2, r1, #2
 800347a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800347e:	f7fc ff47 	bl	8000310 <__aeabi_uldivmod>
 8003482:	4602      	mov	r2, r0
 8003484:	460b      	mov	r3, r1
 8003486:	4b0d      	ldr	r3, [pc, #52]	@ (80034bc <UART_SetConfig+0x4e4>)
 8003488:	fba3 1302 	umull	r1, r3, r3, r2
 800348c:	095b      	lsrs	r3, r3, #5
 800348e:	2164      	movs	r1, #100	@ 0x64
 8003490:	fb01 f303 	mul.w	r3, r1, r3
 8003494:	1ad3      	subs	r3, r2, r3
 8003496:	011b      	lsls	r3, r3, #4
 8003498:	3332      	adds	r3, #50	@ 0x32
 800349a:	4a08      	ldr	r2, [pc, #32]	@ (80034bc <UART_SetConfig+0x4e4>)
 800349c:	fba2 2303 	umull	r2, r3, r2, r3
 80034a0:	095b      	lsrs	r3, r3, #5
 80034a2:	f003 020f 	and.w	r2, r3, #15
 80034a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4422      	add	r2, r4
 80034ae:	609a      	str	r2, [r3, #8]
}
 80034b0:	bf00      	nop
 80034b2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80034b6:	46bd      	mov	sp, r7
 80034b8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80034bc:	51eb851f 	.word	0x51eb851f

080034c0 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80034c0:	b480      	push	{r7}
 80034c2:	b083      	sub	sp, #12
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	f103 0208 	add.w	r2, r3, #8
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	f04f 32ff 	mov.w	r2, #4294967295
 80034d8:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	f103 0208 	add.w	r2, r3, #8
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	f103 0208 	add.w	r2, r3, #8
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2200      	movs	r2, #0
 80034f2:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80034f4:	bf00      	nop
 80034f6:	370c      	adds	r7, #12
 80034f8:	46bd      	mov	sp, r7
 80034fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fe:	4770      	bx	lr

08003500 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003500:	b480      	push	{r7}
 8003502:	b083      	sub	sp, #12
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2200      	movs	r2, #0
 800350c:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800350e:	bf00      	nop
 8003510:	370c      	adds	r7, #12
 8003512:	46bd      	mov	sp, r7
 8003514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003518:	4770      	bx	lr

0800351a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 800351a:	b480      	push	{r7}
 800351c:	b085      	sub	sp, #20
 800351e:	af00      	add	r7, sp, #0
 8003520:	6078      	str	r0, [r7, #4]
 8003522:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	68fa      	ldr	r2, [r7, #12]
 800352e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	689a      	ldr	r2, [r3, #8]
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	683a      	ldr	r2, [r7, #0]
 800353e:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	683a      	ldr	r2, [r7, #0]
 8003544:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	687a      	ldr	r2, [r7, #4]
 800354a:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	1c5a      	adds	r2, r3, #1
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	601a      	str	r2, [r3, #0]
}
 8003556:	bf00      	nop
 8003558:	3714      	adds	r7, #20
 800355a:	46bd      	mov	sp, r7
 800355c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003560:	4770      	bx	lr

08003562 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8003562:	b480      	push	{r7}
 8003564:	b085      	sub	sp, #20
 8003566:	af00      	add	r7, sp, #0
 8003568:	6078      	str	r0, [r7, #4]
 800356a:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8003572:	68bb      	ldr	r3, [r7, #8]
 8003574:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003578:	d103      	bne.n	8003582 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	691b      	ldr	r3, [r3, #16]
 800357e:	60fb      	str	r3, [r7, #12]
 8003580:	e00c      	b.n	800359c <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	3308      	adds	r3, #8
 8003586:	60fb      	str	r3, [r7, #12]
 8003588:	e002      	b.n	8003590 <vListInsert+0x2e>
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	60fb      	str	r3, [r7, #12]
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	68ba      	ldr	r2, [r7, #8]
 8003598:	429a      	cmp	r2, r3
 800359a:	d2f6      	bcs.n	800358a <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	685a      	ldr	r2, [r3, #4]
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	683a      	ldr	r2, [r7, #0]
 80035aa:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	68fa      	ldr	r2, [r7, #12]
 80035b0:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	683a      	ldr	r2, [r7, #0]
 80035b6:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	687a      	ldr	r2, [r7, #4]
 80035bc:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	1c5a      	adds	r2, r3, #1
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	601a      	str	r2, [r3, #0]
}
 80035c8:	bf00      	nop
 80035ca:	3714      	adds	r7, #20
 80035cc:	46bd      	mov	sp, r7
 80035ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d2:	4770      	bx	lr

080035d4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80035d4:	b480      	push	{r7}
 80035d6:	b085      	sub	sp, #20
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	691b      	ldr	r3, [r3, #16]
 80035e0:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	687a      	ldr	r2, [r7, #4]
 80035e8:	6892      	ldr	r2, [r2, #8]
 80035ea:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	689b      	ldr	r3, [r3, #8]
 80035f0:	687a      	ldr	r2, [r7, #4]
 80035f2:	6852      	ldr	r2, [r2, #4]
 80035f4:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	687a      	ldr	r2, [r7, #4]
 80035fc:	429a      	cmp	r2, r3
 80035fe:	d103      	bne.n	8003608 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	689a      	ldr	r2, [r3, #8]
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2200      	movs	r2, #0
 800360c:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	1e5a      	subs	r2, r3, #1
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
}
 800361c:	4618      	mov	r0, r3
 800361e:	3714      	adds	r7, #20
 8003620:	46bd      	mov	sp, r7
 8003622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003626:	4770      	bx	lr

08003628 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b084      	sub	sp, #16
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
 8003630:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d10b      	bne.n	8003654 <xQueueGenericReset+0x2c>
        __asm volatile
 800363c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003640:	f383 8811 	msr	BASEPRI, r3
 8003644:	f3bf 8f6f 	isb	sy
 8003648:	f3bf 8f4f 	dsb	sy
 800364c:	60bb      	str	r3, [r7, #8]
    }
 800364e:	bf00      	nop
 8003650:	bf00      	nop
 8003652:	e7fd      	b.n	8003650 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 8003654:	f002 faea 	bl	8005c2c <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681a      	ldr	r2, [r3, #0]
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003660:	68f9      	ldr	r1, [r7, #12]
 8003662:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003664:	fb01 f303 	mul.w	r3, r1, r3
 8003668:	441a      	add	r2, r3
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	2200      	movs	r2, #0
 8003672:	639a      	str	r2, [r3, #56]	@ 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681a      	ldr	r2, [r3, #0]
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681a      	ldr	r2, [r3, #0]
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003684:	3b01      	subs	r3, #1
 8003686:	68f9      	ldr	r1, [r7, #12]
 8003688:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800368a:	fb01 f303 	mul.w	r3, r1, r3
 800368e:	441a      	add	r2, r3
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	22ff      	movs	r2, #255	@ 0xff
 8003698:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	22ff      	movs	r2, #255	@ 0xff
 80036a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

        if( xNewQueue == pdFALSE )
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d114      	bne.n	80036d4 <xQueueGenericReset+0xac>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	691b      	ldr	r3, [r3, #16]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d01a      	beq.n	80036e8 <xQueueGenericReset+0xc0>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	3310      	adds	r3, #16
 80036b6:	4618      	mov	r0, r3
 80036b8:	f001 f926 	bl	8004908 <xTaskRemoveFromEventList>
 80036bc:	4603      	mov	r3, r0
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d012      	beq.n	80036e8 <xQueueGenericReset+0xc0>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 80036c2:	4b0d      	ldr	r3, [pc, #52]	@ (80036f8 <xQueueGenericReset+0xd0>)
 80036c4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80036c8:	601a      	str	r2, [r3, #0]
 80036ca:	f3bf 8f4f 	dsb	sy
 80036ce:	f3bf 8f6f 	isb	sy
 80036d2:	e009      	b.n	80036e8 <xQueueGenericReset+0xc0>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	3310      	adds	r3, #16
 80036d8:	4618      	mov	r0, r3
 80036da:	f7ff fef1 	bl	80034c0 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	3324      	adds	r3, #36	@ 0x24
 80036e2:	4618      	mov	r0, r3
 80036e4:	f7ff feec 	bl	80034c0 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 80036e8:	f002 fad2 	bl	8005c90 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 80036ec:	2301      	movs	r3, #1
}
 80036ee:	4618      	mov	r0, r3
 80036f0:	3710      	adds	r7, #16
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}
 80036f6:	bf00      	nop
 80036f8:	e000ed04 	.word	0xe000ed04

080036fc <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b08c      	sub	sp, #48	@ 0x30
 8003700:	af02      	add	r7, sp, #8
 8003702:	60f8      	str	r0, [r7, #12]
 8003704:	60b9      	str	r1, [r7, #8]
 8003706:	4613      	mov	r3, r2
 8003708:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d10b      	bne.n	8003728 <xQueueGenericCreate+0x2c>
        __asm volatile
 8003710:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003714:	f383 8811 	msr	BASEPRI, r3
 8003718:	f3bf 8f6f 	isb	sy
 800371c:	f3bf 8f4f 	dsb	sy
 8003720:	61bb      	str	r3, [r7, #24]
    }
 8003722:	bf00      	nop
 8003724:	bf00      	nop
 8003726:	e7fd      	b.n	8003724 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	68ba      	ldr	r2, [r7, #8]
 800372c:	fb02 f303 	mul.w	r3, r2, r3
 8003730:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d006      	beq.n	8003746 <xQueueGenericCreate+0x4a>
 8003738:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003740:	68fa      	ldr	r2, [r7, #12]
 8003742:	429a      	cmp	r2, r3
 8003744:	d101      	bne.n	800374a <xQueueGenericCreate+0x4e>
 8003746:	2301      	movs	r3, #1
 8003748:	e000      	b.n	800374c <xQueueGenericCreate+0x50>
 800374a:	2300      	movs	r3, #0
 800374c:	2b00      	cmp	r3, #0
 800374e:	d10b      	bne.n	8003768 <xQueueGenericCreate+0x6c>
        __asm volatile
 8003750:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003754:	f383 8811 	msr	BASEPRI, r3
 8003758:	f3bf 8f6f 	isb	sy
 800375c:	f3bf 8f4f 	dsb	sy
 8003760:	617b      	str	r3, [r7, #20]
    }
 8003762:	bf00      	nop
 8003764:	bf00      	nop
 8003766:	e7fd      	b.n	8003764 <xQueueGenericCreate+0x68>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8003768:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800376a:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 800376e:	d90b      	bls.n	8003788 <xQueueGenericCreate+0x8c>
        __asm volatile
 8003770:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003774:	f383 8811 	msr	BASEPRI, r3
 8003778:	f3bf 8f6f 	isb	sy
 800377c:	f3bf 8f4f 	dsb	sy
 8003780:	613b      	str	r3, [r7, #16]
    }
 8003782:	bf00      	nop
 8003784:	bf00      	nop
 8003786:	e7fd      	b.n	8003784 <xQueueGenericCreate+0x88>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003788:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800378a:	3350      	adds	r3, #80	@ 0x50
 800378c:	4618      	mov	r0, r3
 800378e:	f002 fb7f 	bl	8005e90 <pvPortMalloc>
 8003792:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8003794:	6a3b      	ldr	r3, [r7, #32]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d00d      	beq.n	80037b6 <xQueueGenericCreate+0xba>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800379a:	6a3b      	ldr	r3, [r7, #32]
 800379c:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800379e:	69fb      	ldr	r3, [r7, #28]
 80037a0:	3350      	adds	r3, #80	@ 0x50
 80037a2:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80037a4:	79fa      	ldrb	r2, [r7, #7]
 80037a6:	6a3b      	ldr	r3, [r7, #32]
 80037a8:	9300      	str	r3, [sp, #0]
 80037aa:	4613      	mov	r3, r2
 80037ac:	69fa      	ldr	r2, [r7, #28]
 80037ae:	68b9      	ldr	r1, [r7, #8]
 80037b0:	68f8      	ldr	r0, [r7, #12]
 80037b2:	f000 f805 	bl	80037c0 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80037b6:	6a3b      	ldr	r3, [r7, #32]
    }
 80037b8:	4618      	mov	r0, r3
 80037ba:	3728      	adds	r7, #40	@ 0x28
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}

080037c0 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b084      	sub	sp, #16
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	60f8      	str	r0, [r7, #12]
 80037c8:	60b9      	str	r1, [r7, #8]
 80037ca:	607a      	str	r2, [r7, #4]
 80037cc:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d103      	bne.n	80037dc <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80037d4:	69bb      	ldr	r3, [r7, #24]
 80037d6:	69ba      	ldr	r2, [r7, #24]
 80037d8:	601a      	str	r2, [r3, #0]
 80037da:	e002      	b.n	80037e2 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80037dc:	69bb      	ldr	r3, [r7, #24]
 80037de:	687a      	ldr	r2, [r7, #4]
 80037e0:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80037e2:	69bb      	ldr	r3, [r7, #24]
 80037e4:	68fa      	ldr	r2, [r7, #12]
 80037e6:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80037e8:	69bb      	ldr	r3, [r7, #24]
 80037ea:	68ba      	ldr	r2, [r7, #8]
 80037ec:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80037ee:	2101      	movs	r1, #1
 80037f0:	69b8      	ldr	r0, [r7, #24]
 80037f2:	f7ff ff19 	bl	8003628 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 80037f6:	69bb      	ldr	r3, [r7, #24]
 80037f8:	78fa      	ldrb	r2, [r7, #3]
 80037fa:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 80037fe:	78fb      	ldrb	r3, [r7, #3]
 8003800:	68ba      	ldr	r2, [r7, #8]
 8003802:	68f9      	ldr	r1, [r7, #12]
 8003804:	2073      	movs	r0, #115	@ 0x73
 8003806:	f003 f997 	bl	8006b38 <SEGGER_SYSVIEW_RecordU32x3>
}
 800380a:	bf00      	nop
 800380c:	3710      	adds	r7, #16
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}
	...

08003814 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b090      	sub	sp, #64	@ 0x40
 8003818:	af02      	add	r7, sp, #8
 800381a:	60f8      	str	r0, [r7, #12]
 800381c:	60b9      	str	r1, [r7, #8]
 800381e:	607a      	str	r2, [r7, #4]
 8003820:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003822:	2300      	movs	r3, #0
 8003824:	637b      	str	r3, [r7, #52]	@ 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	633b      	str	r3, [r7, #48]	@ 0x30

    configASSERT( pxQueue );
 800382a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800382c:	2b00      	cmp	r3, #0
 800382e:	d10b      	bne.n	8003848 <xQueueGenericSend+0x34>
        __asm volatile
 8003830:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003834:	f383 8811 	msr	BASEPRI, r3
 8003838:	f3bf 8f6f 	isb	sy
 800383c:	f3bf 8f4f 	dsb	sy
 8003840:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 8003842:	bf00      	nop
 8003844:	bf00      	nop
 8003846:	e7fd      	b.n	8003844 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d103      	bne.n	8003856 <xQueueGenericSend+0x42>
 800384e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003850:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003852:	2b00      	cmp	r3, #0
 8003854:	d101      	bne.n	800385a <xQueueGenericSend+0x46>
 8003856:	2301      	movs	r3, #1
 8003858:	e000      	b.n	800385c <xQueueGenericSend+0x48>
 800385a:	2300      	movs	r3, #0
 800385c:	2b00      	cmp	r3, #0
 800385e:	d10b      	bne.n	8003878 <xQueueGenericSend+0x64>
        __asm volatile
 8003860:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003864:	f383 8811 	msr	BASEPRI, r3
 8003868:	f3bf 8f6f 	isb	sy
 800386c:	f3bf 8f4f 	dsb	sy
 8003870:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 8003872:	bf00      	nop
 8003874:	bf00      	nop
 8003876:	e7fd      	b.n	8003874 <xQueueGenericSend+0x60>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	2b02      	cmp	r3, #2
 800387c:	d103      	bne.n	8003886 <xQueueGenericSend+0x72>
 800387e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003880:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003882:	2b01      	cmp	r3, #1
 8003884:	d101      	bne.n	800388a <xQueueGenericSend+0x76>
 8003886:	2301      	movs	r3, #1
 8003888:	e000      	b.n	800388c <xQueueGenericSend+0x78>
 800388a:	2300      	movs	r3, #0
 800388c:	2b00      	cmp	r3, #0
 800388e:	d10b      	bne.n	80038a8 <xQueueGenericSend+0x94>
        __asm volatile
 8003890:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003894:	f383 8811 	msr	BASEPRI, r3
 8003898:	f3bf 8f6f 	isb	sy
 800389c:	f3bf 8f4f 	dsb	sy
 80038a0:	623b      	str	r3, [r7, #32]
    }
 80038a2:	bf00      	nop
 80038a4:	bf00      	nop
 80038a6:	e7fd      	b.n	80038a4 <xQueueGenericSend+0x90>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80038a8:	f001 f9d2 	bl	8004c50 <xTaskGetSchedulerState>
 80038ac:	4603      	mov	r3, r0
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d102      	bne.n	80038b8 <xQueueGenericSend+0xa4>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d101      	bne.n	80038bc <xQueueGenericSend+0xa8>
 80038b8:	2301      	movs	r3, #1
 80038ba:	e000      	b.n	80038be <xQueueGenericSend+0xaa>
 80038bc:	2300      	movs	r3, #0
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d10b      	bne.n	80038da <xQueueGenericSend+0xc6>
        __asm volatile
 80038c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038c6:	f383 8811 	msr	BASEPRI, r3
 80038ca:	f3bf 8f6f 	isb	sy
 80038ce:	f3bf 8f4f 	dsb	sy
 80038d2:	61fb      	str	r3, [r7, #28]
    }
 80038d4:	bf00      	nop
 80038d6:	bf00      	nop
 80038d8:	e7fd      	b.n	80038d6 <xQueueGenericSend+0xc2>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80038da:	f002 f9a7 	bl	8005c2c <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80038de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038e0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80038e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038e6:	429a      	cmp	r2, r3
 80038e8:	d302      	bcc.n	80038f0 <xQueueGenericSend+0xdc>
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	2b02      	cmp	r3, #2
 80038ee:	d136      	bne.n	800395e <xQueueGenericSend+0x14a>
            {
                traceQUEUE_SEND( pxQueue );
 80038f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038f2:	4618      	mov	r0, r3
 80038f4:	f003 ff38 	bl	8007768 <SEGGER_SYSVIEW_ShrinkId>
 80038f8:	68ba      	ldr	r2, [r7, #8]
 80038fa:	6879      	ldr	r1, [r7, #4]
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	9300      	str	r3, [sp, #0]
 8003900:	460b      	mov	r3, r1
 8003902:	4601      	mov	r1, r0
 8003904:	205a      	movs	r0, #90	@ 0x5a
 8003906:	f003 f98d 	bl	8006c24 <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800390a:	683a      	ldr	r2, [r7, #0]
 800390c:	68b9      	ldr	r1, [r7, #8]
 800390e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003910:	f000 fa80 	bl	8003e14 <prvCopyDataToQueue>
 8003914:	62f8      	str	r0, [r7, #44]	@ 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003916:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003918:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800391a:	2b00      	cmp	r3, #0
 800391c:	d010      	beq.n	8003940 <xQueueGenericSend+0x12c>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800391e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003920:	3324      	adds	r3, #36	@ 0x24
 8003922:	4618      	mov	r0, r3
 8003924:	f000 fff0 	bl	8004908 <xTaskRemoveFromEventList>
 8003928:	4603      	mov	r3, r0
 800392a:	2b00      	cmp	r3, #0
 800392c:	d013      	beq.n	8003956 <xQueueGenericSend+0x142>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 800392e:	4b4d      	ldr	r3, [pc, #308]	@ (8003a64 <xQueueGenericSend+0x250>)
 8003930:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003934:	601a      	str	r2, [r3, #0]
 8003936:	f3bf 8f4f 	dsb	sy
 800393a:	f3bf 8f6f 	isb	sy
 800393e:	e00a      	b.n	8003956 <xQueueGenericSend+0x142>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8003940:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003942:	2b00      	cmp	r3, #0
 8003944:	d007      	beq.n	8003956 <xQueueGenericSend+0x142>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8003946:	4b47      	ldr	r3, [pc, #284]	@ (8003a64 <xQueueGenericSend+0x250>)
 8003948:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800394c:	601a      	str	r2, [r3, #0]
 800394e:	f3bf 8f4f 	dsb	sy
 8003952:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8003956:	f002 f99b 	bl	8005c90 <vPortExitCritical>
                return pdPASS;
 800395a:	2301      	movs	r3, #1
 800395c:	e07d      	b.n	8003a5a <xQueueGenericSend+0x246>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d110      	bne.n	8003986 <xQueueGenericSend+0x172>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8003964:	f002 f994 	bl	8005c90 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 8003968:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800396a:	4618      	mov	r0, r3
 800396c:	f003 fefc 	bl	8007768 <SEGGER_SYSVIEW_ShrinkId>
 8003970:	68ba      	ldr	r2, [r7, #8]
 8003972:	6879      	ldr	r1, [r7, #4]
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	9300      	str	r3, [sp, #0]
 8003978:	460b      	mov	r3, r1
 800397a:	4601      	mov	r1, r0
 800397c:	205a      	movs	r0, #90	@ 0x5a
 800397e:	f003 f951 	bl	8006c24 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 8003982:	2300      	movs	r3, #0
 8003984:	e069      	b.n	8003a5a <xQueueGenericSend+0x246>
                }
                else if( xEntryTimeSet == pdFALSE )
 8003986:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003988:	2b00      	cmp	r3, #0
 800398a:	d106      	bne.n	800399a <xQueueGenericSend+0x186>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800398c:	f107 0314 	add.w	r3, r7, #20
 8003990:	4618      	mov	r0, r3
 8003992:	f001 f821 	bl	80049d8 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8003996:	2301      	movs	r3, #1
 8003998:	637b      	str	r3, [r7, #52]	@ 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800399a:	f002 f979 	bl	8005c90 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800399e:	f000 fd75 	bl	800448c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80039a2:	f002 f943 	bl	8005c2c <vPortEnterCritical>
 80039a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039a8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80039ac:	b25b      	sxtb	r3, r3
 80039ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039b2:	d103      	bne.n	80039bc <xQueueGenericSend+0x1a8>
 80039b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039b6:	2200      	movs	r2, #0
 80039b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80039bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039be:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80039c2:	b25b      	sxtb	r3, r3
 80039c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039c8:	d103      	bne.n	80039d2 <xQueueGenericSend+0x1be>
 80039ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039cc:	2200      	movs	r2, #0
 80039ce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80039d2:	f002 f95d 	bl	8005c90 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80039d6:	1d3a      	adds	r2, r7, #4
 80039d8:	f107 0314 	add.w	r3, r7, #20
 80039dc:	4611      	mov	r1, r2
 80039de:	4618      	mov	r0, r3
 80039e0:	f001 f810 	bl	8004a04 <xTaskCheckForTimeOut>
 80039e4:	4603      	mov	r3, r0
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d124      	bne.n	8003a34 <xQueueGenericSend+0x220>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80039ea:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80039ec:	f000 fb0a 	bl	8004004 <prvIsQueueFull>
 80039f0:	4603      	mov	r3, r0
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d018      	beq.n	8003a28 <xQueueGenericSend+0x214>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80039f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039f8:	3310      	adds	r3, #16
 80039fa:	687a      	ldr	r2, [r7, #4]
 80039fc:	4611      	mov	r1, r2
 80039fe:	4618      	mov	r0, r3
 8003a00:	f000 ff2c 	bl	800485c <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8003a04:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003a06:	f000 fa95 	bl	8003f34 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8003a0a:	f000 fd4d 	bl	80044a8 <xTaskResumeAll>
 8003a0e:	4603      	mov	r3, r0
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	f47f af62 	bne.w	80038da <xQueueGenericSend+0xc6>
                {
                    portYIELD_WITHIN_API();
 8003a16:	4b13      	ldr	r3, [pc, #76]	@ (8003a64 <xQueueGenericSend+0x250>)
 8003a18:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003a1c:	601a      	str	r2, [r3, #0]
 8003a1e:	f3bf 8f4f 	dsb	sy
 8003a22:	f3bf 8f6f 	isb	sy
 8003a26:	e758      	b.n	80038da <xQueueGenericSend+0xc6>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8003a28:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003a2a:	f000 fa83 	bl	8003f34 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8003a2e:	f000 fd3b 	bl	80044a8 <xTaskResumeAll>
 8003a32:	e752      	b.n	80038da <xQueueGenericSend+0xc6>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8003a34:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003a36:	f000 fa7d 	bl	8003f34 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8003a3a:	f000 fd35 	bl	80044a8 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 8003a3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a40:	4618      	mov	r0, r3
 8003a42:	f003 fe91 	bl	8007768 <SEGGER_SYSVIEW_ShrinkId>
 8003a46:	68ba      	ldr	r2, [r7, #8]
 8003a48:	6879      	ldr	r1, [r7, #4]
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	9300      	str	r3, [sp, #0]
 8003a4e:	460b      	mov	r3, r1
 8003a50:	4601      	mov	r1, r0
 8003a52:	205a      	movs	r0, #90	@ 0x5a
 8003a54:	f003 f8e6 	bl	8006c24 <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 8003a58:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	3738      	adds	r7, #56	@ 0x38
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}
 8003a62:	bf00      	nop
 8003a64:	e000ed04 	.word	0xe000ed04

08003a68 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b090      	sub	sp, #64	@ 0x40
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	60f8      	str	r0, [r7, #12]
 8003a70:	60b9      	str	r1, [r7, #8]
 8003a72:	607a      	str	r2, [r7, #4]
 8003a74:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	63bb      	str	r3, [r7, #56]	@ 0x38

    configASSERT( pxQueue );
 8003a7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d10b      	bne.n	8003a98 <xQueueGenericSendFromISR+0x30>
        __asm volatile
 8003a80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a84:	f383 8811 	msr	BASEPRI, r3
 8003a88:	f3bf 8f6f 	isb	sy
 8003a8c:	f3bf 8f4f 	dsb	sy
 8003a90:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 8003a92:	bf00      	nop
 8003a94:	bf00      	nop
 8003a96:	e7fd      	b.n	8003a94 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d103      	bne.n	8003aa6 <xQueueGenericSendFromISR+0x3e>
 8003a9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003aa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d101      	bne.n	8003aaa <xQueueGenericSendFromISR+0x42>
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e000      	b.n	8003aac <xQueueGenericSendFromISR+0x44>
 8003aaa:	2300      	movs	r3, #0
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d10b      	bne.n	8003ac8 <xQueueGenericSendFromISR+0x60>
        __asm volatile
 8003ab0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ab4:	f383 8811 	msr	BASEPRI, r3
 8003ab8:	f3bf 8f6f 	isb	sy
 8003abc:	f3bf 8f4f 	dsb	sy
 8003ac0:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 8003ac2:	bf00      	nop
 8003ac4:	bf00      	nop
 8003ac6:	e7fd      	b.n	8003ac4 <xQueueGenericSendFromISR+0x5c>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	2b02      	cmp	r3, #2
 8003acc:	d103      	bne.n	8003ad6 <xQueueGenericSendFromISR+0x6e>
 8003ace:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ad0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ad2:	2b01      	cmp	r3, #1
 8003ad4:	d101      	bne.n	8003ada <xQueueGenericSendFromISR+0x72>
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	e000      	b.n	8003adc <xQueueGenericSendFromISR+0x74>
 8003ada:	2300      	movs	r3, #0
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d10b      	bne.n	8003af8 <xQueueGenericSendFromISR+0x90>
        __asm volatile
 8003ae0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ae4:	f383 8811 	msr	BASEPRI, r3
 8003ae8:	f3bf 8f6f 	isb	sy
 8003aec:	f3bf 8f4f 	dsb	sy
 8003af0:	623b      	str	r3, [r7, #32]
    }
 8003af2:	bf00      	nop
 8003af4:	bf00      	nop
 8003af6:	e7fd      	b.n	8003af4 <xQueueGenericSendFromISR+0x8c>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003af8:	f002 f988 	bl	8005e0c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8003afc:	f3ef 8211 	mrs	r2, BASEPRI
 8003b00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b04:	f383 8811 	msr	BASEPRI, r3
 8003b08:	f3bf 8f6f 	isb	sy
 8003b0c:	f3bf 8f4f 	dsb	sy
 8003b10:	61fa      	str	r2, [r7, #28]
 8003b12:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8003b14:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003b16:	637b      	str	r3, [r7, #52]	@ 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003b18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b1a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003b1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b20:	429a      	cmp	r2, r3
 8003b22:	d302      	bcc.n	8003b2a <xQueueGenericSendFromISR+0xc2>
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	2b02      	cmp	r3, #2
 8003b28:	d149      	bne.n	8003bbe <xQueueGenericSendFromISR+0x156>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8003b2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b2c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003b30:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003b34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b38:	62fb      	str	r3, [r7, #44]	@ 0x2c

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 8003b3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	f003 fe13 	bl	8007768 <SEGGER_SYSVIEW_ShrinkId>
 8003b42:	4601      	mov	r1, r0
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	461a      	mov	r2, r3
 8003b48:	2060      	movs	r0, #96	@ 0x60
 8003b4a:	f002 ff9b 	bl	8006a84 <SEGGER_SYSVIEW_RecordU32x2>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003b4e:	683a      	ldr	r2, [r7, #0]
 8003b50:	68b9      	ldr	r1, [r7, #8]
 8003b52:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8003b54:	f000 f95e 	bl	8003e14 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8003b58:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8003b5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b60:	d112      	bne.n	8003b88 <xQueueGenericSendFromISR+0x120>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003b62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d026      	beq.n	8003bb8 <xQueueGenericSendFromISR+0x150>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003b6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b6c:	3324      	adds	r3, #36	@ 0x24
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f000 feca 	bl	8004908 <xTaskRemoveFromEventList>
 8003b74:	4603      	mov	r3, r0
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d01e      	beq.n	8003bb8 <xQueueGenericSendFromISR+0x150>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d01b      	beq.n	8003bb8 <xQueueGenericSendFromISR+0x150>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2201      	movs	r2, #1
 8003b84:	601a      	str	r2, [r3, #0]
 8003b86:	e017      	b.n	8003bb8 <xQueueGenericSendFromISR+0x150>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8003b88:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8003b8c:	2b7f      	cmp	r3, #127	@ 0x7f
 8003b8e:	d10b      	bne.n	8003ba8 <xQueueGenericSendFromISR+0x140>
        __asm volatile
 8003b90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b94:	f383 8811 	msr	BASEPRI, r3
 8003b98:	f3bf 8f6f 	isb	sy
 8003b9c:	f3bf 8f4f 	dsb	sy
 8003ba0:	617b      	str	r3, [r7, #20]
    }
 8003ba2:	bf00      	nop
 8003ba4:	bf00      	nop
 8003ba6:	e7fd      	b.n	8003ba4 <xQueueGenericSendFromISR+0x13c>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003ba8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003bac:	3301      	adds	r3, #1
 8003bae:	b2db      	uxtb	r3, r3
 8003bb0:	b25a      	sxtb	r2, r3
 8003bb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bb4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            }

            xReturn = pdPASS;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        {
 8003bbc:	e00b      	b.n	8003bd6 <xQueueGenericSendFromISR+0x16e>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8003bbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	f003 fdd1 	bl	8007768 <SEGGER_SYSVIEW_ShrinkId>
 8003bc6:	4601      	mov	r1, r0
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	461a      	mov	r2, r3
 8003bcc:	2060      	movs	r0, #96	@ 0x60
 8003bce:	f002 ff59 	bl	8006a84 <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003bd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003bd8:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8003be0:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8003be2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8003be4:	4618      	mov	r0, r3
 8003be6:	3740      	adds	r7, #64	@ 0x40
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bd80      	pop	{r7, pc}

08003bec <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8003bec:	b590      	push	{r4, r7, lr}
 8003bee:	b08f      	sub	sp, #60	@ 0x3c
 8003bf0:	af02      	add	r7, sp, #8
 8003bf2:	60f8      	str	r0, [r7, #12]
 8003bf4:	60b9      	str	r1, [r7, #8]
 8003bf6:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8003c00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d10b      	bne.n	8003c1e <xQueueReceive+0x32>
        __asm volatile
 8003c06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c0a:	f383 8811 	msr	BASEPRI, r3
 8003c0e:	f3bf 8f6f 	isb	sy
 8003c12:	f3bf 8f4f 	dsb	sy
 8003c16:	623b      	str	r3, [r7, #32]
    }
 8003c18:	bf00      	nop
 8003c1a:	bf00      	nop
 8003c1c:	e7fd      	b.n	8003c1a <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d103      	bne.n	8003c2c <xQueueReceive+0x40>
 8003c24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d101      	bne.n	8003c30 <xQueueReceive+0x44>
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	e000      	b.n	8003c32 <xQueueReceive+0x46>
 8003c30:	2300      	movs	r3, #0
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d10b      	bne.n	8003c4e <xQueueReceive+0x62>
        __asm volatile
 8003c36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c3a:	f383 8811 	msr	BASEPRI, r3
 8003c3e:	f3bf 8f6f 	isb	sy
 8003c42:	f3bf 8f4f 	dsb	sy
 8003c46:	61fb      	str	r3, [r7, #28]
    }
 8003c48:	bf00      	nop
 8003c4a:	bf00      	nop
 8003c4c:	e7fd      	b.n	8003c4a <xQueueReceive+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003c4e:	f000 ffff 	bl	8004c50 <xTaskGetSchedulerState>
 8003c52:	4603      	mov	r3, r0
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d102      	bne.n	8003c5e <xQueueReceive+0x72>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d101      	bne.n	8003c62 <xQueueReceive+0x76>
 8003c5e:	2301      	movs	r3, #1
 8003c60:	e000      	b.n	8003c64 <xQueueReceive+0x78>
 8003c62:	2300      	movs	r3, #0
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d10b      	bne.n	8003c80 <xQueueReceive+0x94>
        __asm volatile
 8003c68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c6c:	f383 8811 	msr	BASEPRI, r3
 8003c70:	f3bf 8f6f 	isb	sy
 8003c74:	f3bf 8f4f 	dsb	sy
 8003c78:	61bb      	str	r3, [r7, #24]
    }
 8003c7a:	bf00      	nop
 8003c7c:	bf00      	nop
 8003c7e:	e7fd      	b.n	8003c7c <xQueueReceive+0x90>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8003c80:	f001 ffd4 	bl	8005c2c <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003c84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c88:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003c8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d02f      	beq.n	8003cf0 <xQueueReceive+0x104>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003c90:	68b9      	ldr	r1, [r7, #8]
 8003c92:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003c94:	f000 f928 	bl	8003ee8 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8003c98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f003 fd64 	bl	8007768 <SEGGER_SYSVIEW_ShrinkId>
 8003ca0:	4604      	mov	r4, r0
 8003ca2:	2000      	movs	r0, #0
 8003ca4:	f003 fd60 	bl	8007768 <SEGGER_SYSVIEW_ShrinkId>
 8003ca8:	4602      	mov	r2, r0
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2101      	movs	r1, #1
 8003cae:	9100      	str	r1, [sp, #0]
 8003cb0:	4621      	mov	r1, r4
 8003cb2:	205c      	movs	r0, #92	@ 0x5c
 8003cb4:	f002 ffb6 	bl	8006c24 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003cb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cba:	1e5a      	subs	r2, r3, #1
 8003cbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cbe:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003cc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cc2:	691b      	ldr	r3, [r3, #16]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d00f      	beq.n	8003ce8 <xQueueReceive+0xfc>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003cc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cca:	3310      	adds	r3, #16
 8003ccc:	4618      	mov	r0, r3
 8003cce:	f000 fe1b 	bl	8004908 <xTaskRemoveFromEventList>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d007      	beq.n	8003ce8 <xQueueReceive+0xfc>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8003cd8:	4b4d      	ldr	r3, [pc, #308]	@ (8003e10 <xQueueReceive+0x224>)
 8003cda:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003cde:	601a      	str	r2, [r3, #0]
 8003ce0:	f3bf 8f4f 	dsb	sy
 8003ce4:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8003ce8:	f001 ffd2 	bl	8005c90 <vPortExitCritical>
                return pdPASS;
 8003cec:	2301      	movs	r3, #1
 8003cee:	e08a      	b.n	8003e06 <xQueueReceive+0x21a>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d113      	bne.n	8003d1e <xQueueReceive+0x132>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8003cf6:	f001 ffcb 	bl	8005c90 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8003cfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	f003 fd33 	bl	8007768 <SEGGER_SYSVIEW_ShrinkId>
 8003d02:	4604      	mov	r4, r0
 8003d04:	2000      	movs	r0, #0
 8003d06:	f003 fd2f 	bl	8007768 <SEGGER_SYSVIEW_ShrinkId>
 8003d0a:	4602      	mov	r2, r0
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2101      	movs	r1, #1
 8003d10:	9100      	str	r1, [sp, #0]
 8003d12:	4621      	mov	r1, r4
 8003d14:	205c      	movs	r0, #92	@ 0x5c
 8003d16:	f002 ff85 	bl	8006c24 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	e073      	b.n	8003e06 <xQueueReceive+0x21a>
                }
                else if( xEntryTimeSet == pdFALSE )
 8003d1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d106      	bne.n	8003d32 <xQueueReceive+0x146>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8003d24:	f107 0310 	add.w	r3, r7, #16
 8003d28:	4618      	mov	r0, r3
 8003d2a:	f000 fe55 	bl	80049d8 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8003d32:	f001 ffad 	bl	8005c90 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8003d36:	f000 fba9 	bl	800448c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8003d3a:	f001 ff77 	bl	8005c2c <vPortEnterCritical>
 8003d3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d40:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003d44:	b25b      	sxtb	r3, r3
 8003d46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d4a:	d103      	bne.n	8003d54 <xQueueReceive+0x168>
 8003d4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d4e:	2200      	movs	r2, #0
 8003d50:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003d54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d56:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003d5a:	b25b      	sxtb	r3, r3
 8003d5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d60:	d103      	bne.n	8003d6a <xQueueReceive+0x17e>
 8003d62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d64:	2200      	movs	r2, #0
 8003d66:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003d6a:	f001 ff91 	bl	8005c90 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003d6e:	1d3a      	adds	r2, r7, #4
 8003d70:	f107 0310 	add.w	r3, r7, #16
 8003d74:	4611      	mov	r1, r2
 8003d76:	4618      	mov	r0, r3
 8003d78:	f000 fe44 	bl	8004a04 <xTaskCheckForTimeOut>
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d124      	bne.n	8003dcc <xQueueReceive+0x1e0>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003d82:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003d84:	f000 f928 	bl	8003fd8 <prvIsQueueEmpty>
 8003d88:	4603      	mov	r3, r0
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d018      	beq.n	8003dc0 <xQueueReceive+0x1d4>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003d8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d90:	3324      	adds	r3, #36	@ 0x24
 8003d92:	687a      	ldr	r2, [r7, #4]
 8003d94:	4611      	mov	r1, r2
 8003d96:	4618      	mov	r0, r3
 8003d98:	f000 fd60 	bl	800485c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8003d9c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003d9e:	f000 f8c9 	bl	8003f34 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8003da2:	f000 fb81 	bl	80044a8 <xTaskResumeAll>
 8003da6:	4603      	mov	r3, r0
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	f47f af69 	bne.w	8003c80 <xQueueReceive+0x94>
                {
                    portYIELD_WITHIN_API();
 8003dae:	4b18      	ldr	r3, [pc, #96]	@ (8003e10 <xQueueReceive+0x224>)
 8003db0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003db4:	601a      	str	r2, [r3, #0]
 8003db6:	f3bf 8f4f 	dsb	sy
 8003dba:	f3bf 8f6f 	isb	sy
 8003dbe:	e75f      	b.n	8003c80 <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8003dc0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003dc2:	f000 f8b7 	bl	8003f34 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8003dc6:	f000 fb6f 	bl	80044a8 <xTaskResumeAll>
 8003dca:	e759      	b.n	8003c80 <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8003dcc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003dce:	f000 f8b1 	bl	8003f34 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8003dd2:	f000 fb69 	bl	80044a8 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003dd6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003dd8:	f000 f8fe 	bl	8003fd8 <prvIsQueueEmpty>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	f43f af4e 	beq.w	8003c80 <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8003de4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003de6:	4618      	mov	r0, r3
 8003de8:	f003 fcbe 	bl	8007768 <SEGGER_SYSVIEW_ShrinkId>
 8003dec:	4604      	mov	r4, r0
 8003dee:	2000      	movs	r0, #0
 8003df0:	f003 fcba 	bl	8007768 <SEGGER_SYSVIEW_ShrinkId>
 8003df4:	4602      	mov	r2, r0
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2101      	movs	r1, #1
 8003dfa:	9100      	str	r1, [sp, #0]
 8003dfc:	4621      	mov	r1, r4
 8003dfe:	205c      	movs	r0, #92	@ 0x5c
 8003e00:	f002 ff10 	bl	8006c24 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8003e04:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	3734      	adds	r7, #52	@ 0x34
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd90      	pop	{r4, r7, pc}
 8003e0e:	bf00      	nop
 8003e10:	e000ed04 	.word	0xe000ed04

08003e14 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b086      	sub	sp, #24
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	60f8      	str	r0, [r7, #12]
 8003e1c:	60b9      	str	r1, [r7, #8]
 8003e1e:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8003e20:	2300      	movs	r3, #0
 8003e22:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e28:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d10d      	bne.n	8003e4e <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d14d      	bne.n	8003ed6 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	689b      	ldr	r3, [r3, #8]
 8003e3e:	4618      	mov	r0, r3
 8003e40:	f000 ff24 	bl	8004c8c <xTaskPriorityDisinherit>
 8003e44:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	609a      	str	r2, [r3, #8]
 8003e4c:	e043      	b.n	8003ed6 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d119      	bne.n	8003e88 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	6858      	ldr	r0, [r3, #4]
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e5c:	461a      	mov	r2, r3
 8003e5e:	68b9      	ldr	r1, [r7, #8]
 8003e60:	f003 fe28 	bl	8007ab4 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	685a      	ldr	r2, [r3, #4]
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e6c:	441a      	add	r2, r3
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	685a      	ldr	r2, [r3, #4]
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	689b      	ldr	r3, [r3, #8]
 8003e7a:	429a      	cmp	r2, r3
 8003e7c:	d32b      	bcc.n	8003ed6 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681a      	ldr	r2, [r3, #0]
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	605a      	str	r2, [r3, #4]
 8003e86:	e026      	b.n	8003ed6 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	68d8      	ldr	r0, [r3, #12]
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e90:	461a      	mov	r2, r3
 8003e92:	68b9      	ldr	r1, [r7, #8]
 8003e94:	f003 fe0e 	bl	8007ab4 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	68da      	ldr	r2, [r3, #12]
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ea0:	425b      	negs	r3, r3
 8003ea2:	441a      	add	r2, r3
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	68da      	ldr	r2, [r3, #12]
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	429a      	cmp	r2, r3
 8003eb2:	d207      	bcs.n	8003ec4 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	689a      	ldr	r2, [r3, #8]
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ebc:	425b      	negs	r3, r3
 8003ebe:	441a      	add	r2, r3
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2b02      	cmp	r3, #2
 8003ec8:	d105      	bne.n	8003ed6 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d002      	beq.n	8003ed6 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8003ed0:	693b      	ldr	r3, [r7, #16]
 8003ed2:	3b01      	subs	r3, #1
 8003ed4:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003ed6:	693b      	ldr	r3, [r7, #16]
 8003ed8:	1c5a      	adds	r2, r3, #1
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 8003ede:	697b      	ldr	r3, [r7, #20]
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	3718      	adds	r7, #24
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bd80      	pop	{r7, pc}

08003ee8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b082      	sub	sp, #8
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
 8003ef0:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d018      	beq.n	8003f2c <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	68da      	ldr	r2, [r3, #12]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f02:	441a      	add	r2, r3
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	68da      	ldr	r2, [r3, #12]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	689b      	ldr	r3, [r3, #8]
 8003f10:	429a      	cmp	r2, r3
 8003f12:	d303      	bcc.n	8003f1c <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681a      	ldr	r2, [r3, #0]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	68d9      	ldr	r1, [r3, #12]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f24:	461a      	mov	r2, r3
 8003f26:	6838      	ldr	r0, [r7, #0]
 8003f28:	f003 fdc4 	bl	8007ab4 <memcpy>
    }
}
 8003f2c:	bf00      	nop
 8003f2e:	3708      	adds	r7, #8
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bd80      	pop	{r7, pc}

08003f34 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b084      	sub	sp, #16
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8003f3c:	f001 fe76 	bl	8005c2c <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003f46:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8003f48:	e011      	b.n	8003f6e <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d012      	beq.n	8003f78 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	3324      	adds	r3, #36	@ 0x24
 8003f56:	4618      	mov	r0, r3
 8003f58:	f000 fcd6 	bl	8004908 <xTaskRemoveFromEventList>
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d001      	beq.n	8003f66 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8003f62:	f000 fdb7 	bl	8004ad4 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8003f66:	7bfb      	ldrb	r3, [r7, #15]
 8003f68:	3b01      	subs	r3, #1
 8003f6a:	b2db      	uxtb	r3, r3
 8003f6c:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8003f6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	dce9      	bgt.n	8003f4a <prvUnlockQueue+0x16>
 8003f76:	e000      	b.n	8003f7a <prvUnlockQueue+0x46>
                        break;
 8003f78:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	22ff      	movs	r2, #255	@ 0xff
 8003f7e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 8003f82:	f001 fe85 	bl	8005c90 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8003f86:	f001 fe51 	bl	8005c2c <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003f90:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8003f92:	e011      	b.n	8003fb8 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	691b      	ldr	r3, [r3, #16]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d012      	beq.n	8003fc2 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	3310      	adds	r3, #16
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	f000 fcb1 	bl	8004908 <xTaskRemoveFromEventList>
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d001      	beq.n	8003fb0 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8003fac:	f000 fd92 	bl	8004ad4 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8003fb0:	7bbb      	ldrb	r3, [r7, #14]
 8003fb2:	3b01      	subs	r3, #1
 8003fb4:	b2db      	uxtb	r3, r3
 8003fb6:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8003fb8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	dce9      	bgt.n	8003f94 <prvUnlockQueue+0x60>
 8003fc0:	e000      	b.n	8003fc4 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8003fc2:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	22ff      	movs	r2, #255	@ 0xff
 8003fc8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 8003fcc:	f001 fe60 	bl	8005c90 <vPortExitCritical>
}
 8003fd0:	bf00      	nop
 8003fd2:	3710      	adds	r7, #16
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bd80      	pop	{r7, pc}

08003fd8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b084      	sub	sp, #16
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8003fe0:	f001 fe24 	bl	8005c2c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d102      	bne.n	8003ff2 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8003fec:	2301      	movs	r3, #1
 8003fee:	60fb      	str	r3, [r7, #12]
 8003ff0:	e001      	b.n	8003ff6 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8003ff6:	f001 fe4b 	bl	8005c90 <vPortExitCritical>

    return xReturn;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
}
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	3710      	adds	r7, #16
 8004000:	46bd      	mov	sp, r7
 8004002:	bd80      	pop	{r7, pc}

08004004 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b084      	sub	sp, #16
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800400c:	f001 fe0e 	bl	8005c2c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004018:	429a      	cmp	r2, r3
 800401a:	d102      	bne.n	8004022 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 800401c:	2301      	movs	r3, #1
 800401e:	60fb      	str	r3, [r7, #12]
 8004020:	e001      	b.n	8004026 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8004022:	2300      	movs	r3, #0
 8004024:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8004026:	f001 fe33 	bl	8005c90 <vPortExitCritical>

    return xReturn;
 800402a:	68fb      	ldr	r3, [r7, #12]
}
 800402c:	4618      	mov	r0, r3
 800402e:	3710      	adds	r7, #16
 8004030:	46bd      	mov	sp, r7
 8004032:	bd80      	pop	{r7, pc}

08004034 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8004034:	b580      	push	{r7, lr}
 8004036:	b084      	sub	sp, #16
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
 800403c:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800403e:	2300      	movs	r3, #0
 8004040:	60fb      	str	r3, [r7, #12]
 8004042:	e01e      	b.n	8004082 <vQueueAddToRegistry+0x4e>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004044:	4a13      	ldr	r2, [pc, #76]	@ (8004094 <vQueueAddToRegistry+0x60>)
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d115      	bne.n	800407c <vQueueAddToRegistry+0x48>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004050:	4910      	ldr	r1, [pc, #64]	@ (8004094 <vQueueAddToRegistry+0x60>)
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	683a      	ldr	r2, [r7, #0]
 8004056:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 800405a:	4a0e      	ldr	r2, [pc, #56]	@ (8004094 <vQueueAddToRegistry+0x60>)
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	00db      	lsls	r3, r3, #3
 8004060:	4413      	add	r3, r2
 8004062:	687a      	ldr	r2, [r7, #4]
 8004064:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	4618      	mov	r0, r3
 800406a:	f003 fb7d 	bl	8007768 <SEGGER_SYSVIEW_ShrinkId>
 800406e:	4601      	mov	r1, r0
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	461a      	mov	r2, r3
 8004074:	2071      	movs	r0, #113	@ 0x71
 8004076:	f002 fd05 	bl	8006a84 <SEGGER_SYSVIEW_RecordU32x2>
                break;
 800407a:	e006      	b.n	800408a <vQueueAddToRegistry+0x56>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	3301      	adds	r3, #1
 8004080:	60fb      	str	r3, [r7, #12]
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	2b07      	cmp	r3, #7
 8004086:	d9dd      	bls.n	8004044 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8004088:	bf00      	nop
 800408a:	bf00      	nop
 800408c:	3710      	adds	r7, #16
 800408e:	46bd      	mov	sp, r7
 8004090:	bd80      	pop	{r7, pc}
 8004092:	bf00      	nop
 8004094:	2000038c 	.word	0x2000038c

08004098 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8004098:	b580      	push	{r7, lr}
 800409a:	b086      	sub	sp, #24
 800409c:	af00      	add	r7, sp, #0
 800409e:	60f8      	str	r0, [r7, #12]
 80040a0:	60b9      	str	r1, [r7, #8]
 80040a2:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 80040a8:	f001 fdc0 	bl	8005c2c <vPortEnterCritical>
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80040b2:	b25b      	sxtb	r3, r3
 80040b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040b8:	d103      	bne.n	80040c2 <vQueueWaitForMessageRestricted+0x2a>
 80040ba:	697b      	ldr	r3, [r7, #20]
 80040bc:	2200      	movs	r2, #0
 80040be:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80040c8:	b25b      	sxtb	r3, r3
 80040ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040ce:	d103      	bne.n	80040d8 <vQueueWaitForMessageRestricted+0x40>
 80040d0:	697b      	ldr	r3, [r7, #20]
 80040d2:	2200      	movs	r2, #0
 80040d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80040d8:	f001 fdda 	bl	8005c90 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80040dc:	697b      	ldr	r3, [r7, #20]
 80040de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d106      	bne.n	80040f2 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	3324      	adds	r3, #36	@ 0x24
 80040e8:	687a      	ldr	r2, [r7, #4]
 80040ea:	68b9      	ldr	r1, [r7, #8]
 80040ec:	4618      	mov	r0, r3
 80040ee:	f000 fbdb 	bl	80048a8 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 80040f2:	6978      	ldr	r0, [r7, #20]
 80040f4:	f7ff ff1e 	bl	8003f34 <prvUnlockQueue>
    }
 80040f8:	bf00      	nop
 80040fa:	3718      	adds	r7, #24
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bd80      	pop	{r7, pc}

08004100 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8004100:	b580      	push	{r7, lr}
 8004102:	b08c      	sub	sp, #48	@ 0x30
 8004104:	af04      	add	r7, sp, #16
 8004106:	60f8      	str	r0, [r7, #12]
 8004108:	60b9      	str	r1, [r7, #8]
 800410a:	603b      	str	r3, [r7, #0]
 800410c:	4613      	mov	r3, r2
 800410e:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004110:	88fb      	ldrh	r3, [r7, #6]
 8004112:	009b      	lsls	r3, r3, #2
 8004114:	4618      	mov	r0, r3
 8004116:	f001 febb 	bl	8005e90 <pvPortMalloc>
 800411a:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d00e      	beq.n	8004140 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004122:	2058      	movs	r0, #88	@ 0x58
 8004124:	f001 feb4 	bl	8005e90 <pvPortMalloc>
 8004128:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 800412a:	69fb      	ldr	r3, [r7, #28]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d003      	beq.n	8004138 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8004130:	69fb      	ldr	r3, [r7, #28]
 8004132:	697a      	ldr	r2, [r7, #20]
 8004134:	631a      	str	r2, [r3, #48]	@ 0x30
 8004136:	e005      	b.n	8004144 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8004138:	6978      	ldr	r0, [r7, #20]
 800413a:	f001 ff8b 	bl	8006054 <vPortFree>
 800413e:	e001      	b.n	8004144 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8004140:	2300      	movs	r3, #0
 8004142:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8004144:	69fb      	ldr	r3, [r7, #28]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d013      	beq.n	8004172 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800414a:	88fa      	ldrh	r2, [r7, #6]
 800414c:	2300      	movs	r3, #0
 800414e:	9303      	str	r3, [sp, #12]
 8004150:	69fb      	ldr	r3, [r7, #28]
 8004152:	9302      	str	r3, [sp, #8]
 8004154:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004156:	9301      	str	r3, [sp, #4]
 8004158:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800415a:	9300      	str	r3, [sp, #0]
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	68b9      	ldr	r1, [r7, #8]
 8004160:	68f8      	ldr	r0, [r7, #12]
 8004162:	f000 f80e 	bl	8004182 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8004166:	69f8      	ldr	r0, [r7, #28]
 8004168:	f000 f8a2 	bl	80042b0 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800416c:	2301      	movs	r3, #1
 800416e:	61bb      	str	r3, [r7, #24]
 8004170:	e002      	b.n	8004178 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004172:	f04f 33ff 	mov.w	r3, #4294967295
 8004176:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8004178:	69bb      	ldr	r3, [r7, #24]
    }
 800417a:	4618      	mov	r0, r3
 800417c:	3720      	adds	r7, #32
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}

08004182 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8004182:	b580      	push	{r7, lr}
 8004184:	b088      	sub	sp, #32
 8004186:	af00      	add	r7, sp, #0
 8004188:	60f8      	str	r0, [r7, #12]
 800418a:	60b9      	str	r1, [r7, #8]
 800418c:	607a      	str	r2, [r7, #4]
 800418e:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004190:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004192:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	009b      	lsls	r3, r3, #2
 8004198:	461a      	mov	r2, r3
 800419a:	21a5      	movs	r1, #165	@ 0xa5
 800419c:	f003 fc5c 	bl	8007a58 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80041a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041a2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80041aa:	3b01      	subs	r3, #1
 80041ac:	009b      	lsls	r3, r3, #2
 80041ae:	4413      	add	r3, r2
 80041b0:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80041b2:	69bb      	ldr	r3, [r7, #24]
 80041b4:	f023 0307 	bic.w	r3, r3, #7
 80041b8:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80041ba:	69bb      	ldr	r3, [r7, #24]
 80041bc:	f003 0307 	and.w	r3, r3, #7
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d00b      	beq.n	80041dc <prvInitialiseNewTask+0x5a>
        __asm volatile
 80041c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041c8:	f383 8811 	msr	BASEPRI, r3
 80041cc:	f3bf 8f6f 	isb	sy
 80041d0:	f3bf 8f4f 	dsb	sy
 80041d4:	617b      	str	r3, [r7, #20]
    }
 80041d6:	bf00      	nop
 80041d8:	bf00      	nop
 80041da:	e7fd      	b.n	80041d8 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d01f      	beq.n	8004222 <prvInitialiseNewTask+0xa0>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80041e2:	2300      	movs	r3, #0
 80041e4:	61fb      	str	r3, [r7, #28]
 80041e6:	e012      	b.n	800420e <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80041e8:	68ba      	ldr	r2, [r7, #8]
 80041ea:	69fb      	ldr	r3, [r7, #28]
 80041ec:	4413      	add	r3, r2
 80041ee:	7819      	ldrb	r1, [r3, #0]
 80041f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80041f2:	69fb      	ldr	r3, [r7, #28]
 80041f4:	4413      	add	r3, r2
 80041f6:	3334      	adds	r3, #52	@ 0x34
 80041f8:	460a      	mov	r2, r1
 80041fa:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80041fc:	68ba      	ldr	r2, [r7, #8]
 80041fe:	69fb      	ldr	r3, [r7, #28]
 8004200:	4413      	add	r3, r2
 8004202:	781b      	ldrb	r3, [r3, #0]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d006      	beq.n	8004216 <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004208:	69fb      	ldr	r3, [r7, #28]
 800420a:	3301      	adds	r3, #1
 800420c:	61fb      	str	r3, [r7, #28]
 800420e:	69fb      	ldr	r3, [r7, #28]
 8004210:	2b09      	cmp	r3, #9
 8004212:	d9e9      	bls.n	80041e8 <prvInitialiseNewTask+0x66>
 8004214:	e000      	b.n	8004218 <prvInitialiseNewTask+0x96>
            {
                break;
 8004216:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004218:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800421a:	2200      	movs	r2, #0
 800421c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004220:	e003      	b.n	800422a <prvInitialiseNewTask+0xa8>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004222:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004224:	2200      	movs	r2, #0
 8004226:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800422a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800422c:	2b04      	cmp	r3, #4
 800422e:	d901      	bls.n	8004234 <prvInitialiseNewTask+0xb2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004230:	2304      	movs	r3, #4
 8004232:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8004234:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004236:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004238:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 800423a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800423c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800423e:	649a      	str	r2, [r3, #72]	@ 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8004240:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004242:	2200      	movs	r2, #0
 8004244:	64da      	str	r2, [r3, #76]	@ 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004246:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004248:	3304      	adds	r3, #4
 800424a:	4618      	mov	r0, r3
 800424c:	f7ff f958 	bl	8003500 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004250:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004252:	3318      	adds	r3, #24
 8004254:	4618      	mov	r0, r3
 8004256:	f7ff f953 	bl	8003500 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800425a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800425c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800425e:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004260:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004262:	f1c3 0205 	rsb	r2, r3, #5
 8004266:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004268:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800426a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800426c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800426e:	625a      	str	r2, [r3, #36]	@ 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8004270:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004272:	3350      	adds	r3, #80	@ 0x50
 8004274:	2204      	movs	r2, #4
 8004276:	2100      	movs	r1, #0
 8004278:	4618      	mov	r0, r3
 800427a:	f003 fbed 	bl	8007a58 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 800427e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004280:	3354      	adds	r3, #84	@ 0x54
 8004282:	2201      	movs	r2, #1
 8004284:	2100      	movs	r1, #0
 8004286:	4618      	mov	r0, r3
 8004288:	f003 fbe6 	bl	8007a58 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800428c:	683a      	ldr	r2, [r7, #0]
 800428e:	68f9      	ldr	r1, [r7, #12]
 8004290:	69b8      	ldr	r0, [r7, #24]
 8004292:	f001 fb15 	bl	80058c0 <pxPortInitialiseStack>
 8004296:	4602      	mov	r2, r0
 8004298:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800429a:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800429c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d002      	beq.n	80042a8 <prvInitialiseNewTask+0x126>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80042a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80042a6:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80042a8:	bf00      	nop
 80042aa:	3720      	adds	r7, #32
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bd80      	pop	{r7, pc}

080042b0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80042b0:	b5b0      	push	{r4, r5, r7, lr}
 80042b2:	b084      	sub	sp, #16
 80042b4:	af02      	add	r7, sp, #8
 80042b6:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80042b8:	f001 fcb8 	bl	8005c2c <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80042bc:	4b3b      	ldr	r3, [pc, #236]	@ (80043ac <prvAddNewTaskToReadyList+0xfc>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	3301      	adds	r3, #1
 80042c2:	4a3a      	ldr	r2, [pc, #232]	@ (80043ac <prvAddNewTaskToReadyList+0xfc>)
 80042c4:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80042c6:	4b3a      	ldr	r3, [pc, #232]	@ (80043b0 <prvAddNewTaskToReadyList+0x100>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d109      	bne.n	80042e2 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80042ce:	4a38      	ldr	r2, [pc, #224]	@ (80043b0 <prvAddNewTaskToReadyList+0x100>)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80042d4:	4b35      	ldr	r3, [pc, #212]	@ (80043ac <prvAddNewTaskToReadyList+0xfc>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	2b01      	cmp	r3, #1
 80042da:	d110      	bne.n	80042fe <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80042dc:	f000 fc1e 	bl	8004b1c <prvInitialiseTaskLists>
 80042e0:	e00d      	b.n	80042fe <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80042e2:	4b34      	ldr	r3, [pc, #208]	@ (80043b4 <prvAddNewTaskToReadyList+0x104>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d109      	bne.n	80042fe <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80042ea:	4b31      	ldr	r3, [pc, #196]	@ (80043b0 <prvAddNewTaskToReadyList+0x100>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042f4:	429a      	cmp	r2, r3
 80042f6:	d802      	bhi.n	80042fe <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80042f8:	4a2d      	ldr	r2, [pc, #180]	@ (80043b0 <prvAddNewTaskToReadyList+0x100>)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80042fe:	4b2e      	ldr	r3, [pc, #184]	@ (80043b8 <prvAddNewTaskToReadyList+0x108>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	3301      	adds	r3, #1
 8004304:	4a2c      	ldr	r2, [pc, #176]	@ (80043b8 <prvAddNewTaskToReadyList+0x108>)
 8004306:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004308:	4b2b      	ldr	r3, [pc, #172]	@ (80043b8 <prvAddNewTaskToReadyList+0x108>)
 800430a:	681a      	ldr	r2, [r3, #0]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	641a      	str	r2, [r3, #64]	@ 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d016      	beq.n	8004344 <prvAddNewTaskToReadyList+0x94>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	4618      	mov	r0, r3
 800431a:	f003 f8ff 	bl	800751c <SEGGER_SYSVIEW_OnTaskCreate>
 800431e:	6878      	ldr	r0, [r7, #4]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800432e:	461d      	mov	r5, r3
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	461c      	mov	r4, r3
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800433a:	1ae3      	subs	r3, r4, r3
 800433c:	9300      	str	r3, [sp, #0]
 800433e:	462b      	mov	r3, r5
 8004340:	f001 ffa8 	bl	8006294 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	4618      	mov	r0, r3
 8004348:	f003 f96c 	bl	8007624 <SEGGER_SYSVIEW_OnTaskStartReady>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004350:	2201      	movs	r2, #1
 8004352:	409a      	lsls	r2, r3
 8004354:	4b19      	ldr	r3, [pc, #100]	@ (80043bc <prvAddNewTaskToReadyList+0x10c>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4313      	orrs	r3, r2
 800435a:	4a18      	ldr	r2, [pc, #96]	@ (80043bc <prvAddNewTaskToReadyList+0x10c>)
 800435c:	6013      	str	r3, [r2, #0]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004362:	4613      	mov	r3, r2
 8004364:	009b      	lsls	r3, r3, #2
 8004366:	4413      	add	r3, r2
 8004368:	009b      	lsls	r3, r3, #2
 800436a:	4a15      	ldr	r2, [pc, #84]	@ (80043c0 <prvAddNewTaskToReadyList+0x110>)
 800436c:	441a      	add	r2, r3
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	3304      	adds	r3, #4
 8004372:	4619      	mov	r1, r3
 8004374:	4610      	mov	r0, r2
 8004376:	f7ff f8d0 	bl	800351a <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800437a:	f001 fc89 	bl	8005c90 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800437e:	4b0d      	ldr	r3, [pc, #52]	@ (80043b4 <prvAddNewTaskToReadyList+0x104>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d00e      	beq.n	80043a4 <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004386:	4b0a      	ldr	r3, [pc, #40]	@ (80043b0 <prvAddNewTaskToReadyList+0x100>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004390:	429a      	cmp	r2, r3
 8004392:	d207      	bcs.n	80043a4 <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8004394:	4b0b      	ldr	r3, [pc, #44]	@ (80043c4 <prvAddNewTaskToReadyList+0x114>)
 8004396:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800439a:	601a      	str	r2, [r3, #0]
 800439c:	f3bf 8f4f 	dsb	sy
 80043a0:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80043a4:	bf00      	nop
 80043a6:	3708      	adds	r7, #8
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bdb0      	pop	{r4, r5, r7, pc}
 80043ac:	200004a4 	.word	0x200004a4
 80043b0:	200003cc 	.word	0x200003cc
 80043b4:	200004b0 	.word	0x200004b0
 80043b8:	200004c0 	.word	0x200004c0
 80043bc:	200004ac 	.word	0x200004ac
 80043c0:	200003d0 	.word	0x200003d0
 80043c4:	e000ed04 	.word	0xe000ed04

080043c8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b086      	sub	sp, #24
 80043cc:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 80043ce:	4b27      	ldr	r3, [pc, #156]	@ (800446c <vTaskStartScheduler+0xa4>)
 80043d0:	9301      	str	r3, [sp, #4]
 80043d2:	2300      	movs	r3, #0
 80043d4:	9300      	str	r3, [sp, #0]
 80043d6:	2300      	movs	r3, #0
 80043d8:	2282      	movs	r2, #130	@ 0x82
 80043da:	4925      	ldr	r1, [pc, #148]	@ (8004470 <vTaskStartScheduler+0xa8>)
 80043dc:	4825      	ldr	r0, [pc, #148]	@ (8004474 <vTaskStartScheduler+0xac>)
 80043de:	f7ff fe8f 	bl	8004100 <xTaskCreate>
 80043e2:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	2b01      	cmp	r3, #1
 80043e8:	d102      	bne.n	80043f0 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 80043ea:	f000 feed 	bl	80051c8 <xTimerCreateTimerTask>
 80043ee:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	2b01      	cmp	r3, #1
 80043f4:	d124      	bne.n	8004440 <vTaskStartScheduler+0x78>
        __asm volatile
 80043f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043fa:	f383 8811 	msr	BASEPRI, r3
 80043fe:	f3bf 8f6f 	isb	sy
 8004402:	f3bf 8f4f 	dsb	sy
 8004406:	60bb      	str	r3, [r7, #8]
    }
 8004408:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 800440a:	4b1b      	ldr	r3, [pc, #108]	@ (8004478 <vTaskStartScheduler+0xb0>)
 800440c:	f04f 32ff 	mov.w	r2, #4294967295
 8004410:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8004412:	4b1a      	ldr	r3, [pc, #104]	@ (800447c <vTaskStartScheduler+0xb4>)
 8004414:	2201      	movs	r2, #1
 8004416:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004418:	4b19      	ldr	r3, [pc, #100]	@ (8004480 <vTaskStartScheduler+0xb8>)
 800441a:	2200      	movs	r2, #0
 800441c:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 800441e:	4b19      	ldr	r3, [pc, #100]	@ (8004484 <vTaskStartScheduler+0xbc>)
 8004420:	681a      	ldr	r2, [r3, #0]
 8004422:	4b12      	ldr	r3, [pc, #72]	@ (800446c <vTaskStartScheduler+0xa4>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	429a      	cmp	r2, r3
 8004428:	d102      	bne.n	8004430 <vTaskStartScheduler+0x68>
 800442a:	f003 f85b 	bl	80074e4 <SEGGER_SYSVIEW_OnIdle>
 800442e:	e004      	b.n	800443a <vTaskStartScheduler+0x72>
 8004430:	4b14      	ldr	r3, [pc, #80]	@ (8004484 <vTaskStartScheduler+0xbc>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4618      	mov	r0, r3
 8004436:	f003 f8b3 	bl	80075a0 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 800443a:	f001 fad3 	bl	80059e4 <xPortStartScheduler>
 800443e:	e00f      	b.n	8004460 <vTaskStartScheduler+0x98>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004446:	d10b      	bne.n	8004460 <vTaskStartScheduler+0x98>
        __asm volatile
 8004448:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800444c:	f383 8811 	msr	BASEPRI, r3
 8004450:	f3bf 8f6f 	isb	sy
 8004454:	f3bf 8f4f 	dsb	sy
 8004458:	607b      	str	r3, [r7, #4]
    }
 800445a:	bf00      	nop
 800445c:	bf00      	nop
 800445e:	e7fd      	b.n	800445c <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8004460:	4b09      	ldr	r3, [pc, #36]	@ (8004488 <vTaskStartScheduler+0xc0>)
 8004462:	681b      	ldr	r3, [r3, #0]
}
 8004464:	bf00      	nop
 8004466:	3710      	adds	r7, #16
 8004468:	46bd      	mov	sp, r7
 800446a:	bd80      	pop	{r7, pc}
 800446c:	200004c8 	.word	0x200004c8
 8004470:	080083c8 	.word	0x080083c8
 8004474:	08004aed 	.word	0x08004aed
 8004478:	200004c4 	.word	0x200004c4
 800447c:	200004b0 	.word	0x200004b0
 8004480:	200004a8 	.word	0x200004a8
 8004484:	200003cc 	.word	0x200003cc
 8004488:	2000006c 	.word	0x2000006c

0800448c <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800448c:	b480      	push	{r7}
 800448e:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8004490:	4b04      	ldr	r3, [pc, #16]	@ (80044a4 <vTaskSuspendAll+0x18>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	3301      	adds	r3, #1
 8004496:	4a03      	ldr	r2, [pc, #12]	@ (80044a4 <vTaskSuspendAll+0x18>)
 8004498:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800449a:	bf00      	nop
 800449c:	46bd      	mov	sp, r7
 800449e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a2:	4770      	bx	lr
 80044a4:	200004cc 	.word	0x200004cc

080044a8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b084      	sub	sp, #16
 80044ac:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80044ae:	2300      	movs	r3, #0
 80044b0:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 80044b2:	2300      	movs	r3, #0
 80044b4:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80044b6:	4b44      	ldr	r3, [pc, #272]	@ (80045c8 <xTaskResumeAll+0x120>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d10b      	bne.n	80044d6 <xTaskResumeAll+0x2e>
        __asm volatile
 80044be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044c2:	f383 8811 	msr	BASEPRI, r3
 80044c6:	f3bf 8f6f 	isb	sy
 80044ca:	f3bf 8f4f 	dsb	sy
 80044ce:	603b      	str	r3, [r7, #0]
    }
 80044d0:	bf00      	nop
 80044d2:	bf00      	nop
 80044d4:	e7fd      	b.n	80044d2 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80044d6:	f001 fba9 	bl	8005c2c <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80044da:	4b3b      	ldr	r3, [pc, #236]	@ (80045c8 <xTaskResumeAll+0x120>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	3b01      	subs	r3, #1
 80044e0:	4a39      	ldr	r2, [pc, #228]	@ (80045c8 <xTaskResumeAll+0x120>)
 80044e2:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80044e4:	4b38      	ldr	r3, [pc, #224]	@ (80045c8 <xTaskResumeAll+0x120>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d165      	bne.n	80045b8 <xTaskResumeAll+0x110>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80044ec:	4b37      	ldr	r3, [pc, #220]	@ (80045cc <xTaskResumeAll+0x124>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d061      	beq.n	80045b8 <xTaskResumeAll+0x110>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80044f4:	e032      	b.n	800455c <xTaskResumeAll+0xb4>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80044f6:	4b36      	ldr	r3, [pc, #216]	@ (80045d0 <xTaskResumeAll+0x128>)
 80044f8:	68db      	ldr	r3, [r3, #12]
 80044fa:	68db      	ldr	r3, [r3, #12]
 80044fc:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	3318      	adds	r3, #24
 8004502:	4618      	mov	r0, r3
 8004504:	f7ff f866 	bl	80035d4 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	3304      	adds	r3, #4
 800450c:	4618      	mov	r0, r3
 800450e:	f7ff f861 	bl	80035d4 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	4618      	mov	r0, r3
 8004516:	f003 f885 	bl	8007624 <SEGGER_SYSVIEW_OnTaskStartReady>
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800451e:	2201      	movs	r2, #1
 8004520:	409a      	lsls	r2, r3
 8004522:	4b2c      	ldr	r3, [pc, #176]	@ (80045d4 <xTaskResumeAll+0x12c>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4313      	orrs	r3, r2
 8004528:	4a2a      	ldr	r2, [pc, #168]	@ (80045d4 <xTaskResumeAll+0x12c>)
 800452a:	6013      	str	r3, [r2, #0]
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004530:	4613      	mov	r3, r2
 8004532:	009b      	lsls	r3, r3, #2
 8004534:	4413      	add	r3, r2
 8004536:	009b      	lsls	r3, r3, #2
 8004538:	4a27      	ldr	r2, [pc, #156]	@ (80045d8 <xTaskResumeAll+0x130>)
 800453a:	441a      	add	r2, r3
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	3304      	adds	r3, #4
 8004540:	4619      	mov	r1, r3
 8004542:	4610      	mov	r0, r2
 8004544:	f7fe ffe9 	bl	800351a <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800454c:	4b23      	ldr	r3, [pc, #140]	@ (80045dc <xTaskResumeAll+0x134>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004552:	429a      	cmp	r2, r3
 8004554:	d302      	bcc.n	800455c <xTaskResumeAll+0xb4>
                    {
                        xYieldPending = pdTRUE;
 8004556:	4b22      	ldr	r3, [pc, #136]	@ (80045e0 <xTaskResumeAll+0x138>)
 8004558:	2201      	movs	r2, #1
 800455a:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800455c:	4b1c      	ldr	r3, [pc, #112]	@ (80045d0 <xTaskResumeAll+0x128>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d1c8      	bne.n	80044f6 <xTaskResumeAll+0x4e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d001      	beq.n	800456e <xTaskResumeAll+0xc6>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 800456a:	f000 fb55 	bl	8004c18 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800456e:	4b1d      	ldr	r3, [pc, #116]	@ (80045e4 <xTaskResumeAll+0x13c>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d010      	beq.n	800459c <xTaskResumeAll+0xf4>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 800457a:	f000 f847 	bl	800460c <xTaskIncrementTick>
 800457e:	4603      	mov	r3, r0
 8004580:	2b00      	cmp	r3, #0
 8004582:	d002      	beq.n	800458a <xTaskResumeAll+0xe2>
                            {
                                xYieldPending = pdTRUE;
 8004584:	4b16      	ldr	r3, [pc, #88]	@ (80045e0 <xTaskResumeAll+0x138>)
 8004586:	2201      	movs	r2, #1
 8004588:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	3b01      	subs	r3, #1
 800458e:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d1f1      	bne.n	800457a <xTaskResumeAll+0xd2>

                        xPendedTicks = 0;
 8004596:	4b13      	ldr	r3, [pc, #76]	@ (80045e4 <xTaskResumeAll+0x13c>)
 8004598:	2200      	movs	r2, #0
 800459a:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800459c:	4b10      	ldr	r3, [pc, #64]	@ (80045e0 <xTaskResumeAll+0x138>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d009      	beq.n	80045b8 <xTaskResumeAll+0x110>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 80045a4:	2301      	movs	r3, #1
 80045a6:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 80045a8:	4b0f      	ldr	r3, [pc, #60]	@ (80045e8 <xTaskResumeAll+0x140>)
 80045aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80045ae:	601a      	str	r2, [r3, #0]
 80045b0:	f3bf 8f4f 	dsb	sy
 80045b4:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80045b8:	f001 fb6a 	bl	8005c90 <vPortExitCritical>

    return xAlreadyYielded;
 80045bc:	68bb      	ldr	r3, [r7, #8]
}
 80045be:	4618      	mov	r0, r3
 80045c0:	3710      	adds	r7, #16
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}
 80045c6:	bf00      	nop
 80045c8:	200004cc 	.word	0x200004cc
 80045cc:	200004a4 	.word	0x200004a4
 80045d0:	20000464 	.word	0x20000464
 80045d4:	200004ac 	.word	0x200004ac
 80045d8:	200003d0 	.word	0x200003d0
 80045dc:	200003cc 	.word	0x200003cc
 80045e0:	200004b8 	.word	0x200004b8
 80045e4:	200004b4 	.word	0x200004b4
 80045e8:	e000ed04 	.word	0xe000ed04

080045ec <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80045ec:	b480      	push	{r7}
 80045ee:	b083      	sub	sp, #12
 80045f0:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80045f2:	4b05      	ldr	r3, [pc, #20]	@ (8004608 <xTaskGetTickCount+0x1c>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 80045f8:	687b      	ldr	r3, [r7, #4]
}
 80045fa:	4618      	mov	r0, r3
 80045fc:	370c      	adds	r7, #12
 80045fe:	46bd      	mov	sp, r7
 8004600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004604:	4770      	bx	lr
 8004606:	bf00      	nop
 8004608:	200004a8 	.word	0x200004a8

0800460c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b086      	sub	sp, #24
 8004610:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8004612:	2300      	movs	r3, #0
 8004614:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004616:	4b51      	ldr	r3, [pc, #324]	@ (800475c <xTaskIncrementTick+0x150>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	2b00      	cmp	r3, #0
 800461c:	f040 8093 	bne.w	8004746 <xTaskIncrementTick+0x13a>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004620:	4b4f      	ldr	r3, [pc, #316]	@ (8004760 <xTaskIncrementTick+0x154>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	3301      	adds	r3, #1
 8004626:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8004628:	4a4d      	ldr	r2, [pc, #308]	@ (8004760 <xTaskIncrementTick+0x154>)
 800462a:	693b      	ldr	r3, [r7, #16]
 800462c:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d121      	bne.n	8004678 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 8004634:	4b4b      	ldr	r3, [pc, #300]	@ (8004764 <xTaskIncrementTick+0x158>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d00b      	beq.n	8004656 <xTaskIncrementTick+0x4a>
        __asm volatile
 800463e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004642:	f383 8811 	msr	BASEPRI, r3
 8004646:	f3bf 8f6f 	isb	sy
 800464a:	f3bf 8f4f 	dsb	sy
 800464e:	603b      	str	r3, [r7, #0]
    }
 8004650:	bf00      	nop
 8004652:	bf00      	nop
 8004654:	e7fd      	b.n	8004652 <xTaskIncrementTick+0x46>
 8004656:	4b43      	ldr	r3, [pc, #268]	@ (8004764 <xTaskIncrementTick+0x158>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	60fb      	str	r3, [r7, #12]
 800465c:	4b42      	ldr	r3, [pc, #264]	@ (8004768 <xTaskIncrementTick+0x15c>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a40      	ldr	r2, [pc, #256]	@ (8004764 <xTaskIncrementTick+0x158>)
 8004662:	6013      	str	r3, [r2, #0]
 8004664:	4a40      	ldr	r2, [pc, #256]	@ (8004768 <xTaskIncrementTick+0x15c>)
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	6013      	str	r3, [r2, #0]
 800466a:	4b40      	ldr	r3, [pc, #256]	@ (800476c <xTaskIncrementTick+0x160>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	3301      	adds	r3, #1
 8004670:	4a3e      	ldr	r2, [pc, #248]	@ (800476c <xTaskIncrementTick+0x160>)
 8004672:	6013      	str	r3, [r2, #0]
 8004674:	f000 fad0 	bl	8004c18 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8004678:	4b3d      	ldr	r3, [pc, #244]	@ (8004770 <xTaskIncrementTick+0x164>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	693a      	ldr	r2, [r7, #16]
 800467e:	429a      	cmp	r2, r3
 8004680:	d34c      	bcc.n	800471c <xTaskIncrementTick+0x110>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004682:	4b38      	ldr	r3, [pc, #224]	@ (8004764 <xTaskIncrementTick+0x158>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d104      	bne.n	8004696 <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800468c:	4b38      	ldr	r3, [pc, #224]	@ (8004770 <xTaskIncrementTick+0x164>)
 800468e:	f04f 32ff 	mov.w	r2, #4294967295
 8004692:	601a      	str	r2, [r3, #0]
                    break;
 8004694:	e042      	b.n	800471c <xTaskIncrementTick+0x110>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004696:	4b33      	ldr	r3, [pc, #204]	@ (8004764 <xTaskIncrementTick+0x158>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	68db      	ldr	r3, [r3, #12]
 800469c:	68db      	ldr	r3, [r3, #12]
 800469e:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 80046a6:	693a      	ldr	r2, [r7, #16]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	429a      	cmp	r2, r3
 80046ac:	d203      	bcs.n	80046b6 <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80046ae:	4a30      	ldr	r2, [pc, #192]	@ (8004770 <xTaskIncrementTick+0x164>)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80046b4:	e032      	b.n	800471c <xTaskIncrementTick+0x110>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	3304      	adds	r3, #4
 80046ba:	4618      	mov	r0, r3
 80046bc:	f7fe ff8a 	bl	80035d4 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80046c0:	68bb      	ldr	r3, [r7, #8]
 80046c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d004      	beq.n	80046d2 <xTaskIncrementTick+0xc6>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	3318      	adds	r3, #24
 80046cc:	4618      	mov	r0, r3
 80046ce:	f7fe ff81 	bl	80035d4 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	4618      	mov	r0, r3
 80046d6:	f002 ffa5 	bl	8007624 <SEGGER_SYSVIEW_OnTaskStartReady>
 80046da:	68bb      	ldr	r3, [r7, #8]
 80046dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046de:	2201      	movs	r2, #1
 80046e0:	409a      	lsls	r2, r3
 80046e2:	4b24      	ldr	r3, [pc, #144]	@ (8004774 <xTaskIncrementTick+0x168>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4313      	orrs	r3, r2
 80046e8:	4a22      	ldr	r2, [pc, #136]	@ (8004774 <xTaskIncrementTick+0x168>)
 80046ea:	6013      	str	r3, [r2, #0]
 80046ec:	68bb      	ldr	r3, [r7, #8]
 80046ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80046f0:	4613      	mov	r3, r2
 80046f2:	009b      	lsls	r3, r3, #2
 80046f4:	4413      	add	r3, r2
 80046f6:	009b      	lsls	r3, r3, #2
 80046f8:	4a1f      	ldr	r2, [pc, #124]	@ (8004778 <xTaskIncrementTick+0x16c>)
 80046fa:	441a      	add	r2, r3
 80046fc:	68bb      	ldr	r3, [r7, #8]
 80046fe:	3304      	adds	r3, #4
 8004700:	4619      	mov	r1, r3
 8004702:	4610      	mov	r0, r2
 8004704:	f7fe ff09 	bl	800351a <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800470c:	4b1b      	ldr	r3, [pc, #108]	@ (800477c <xTaskIncrementTick+0x170>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004712:	429a      	cmp	r2, r3
 8004714:	d3b5      	bcc.n	8004682 <xTaskIncrementTick+0x76>
                            {
                                xSwitchRequired = pdTRUE;
 8004716:	2301      	movs	r3, #1
 8004718:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800471a:	e7b2      	b.n	8004682 <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800471c:	4b17      	ldr	r3, [pc, #92]	@ (800477c <xTaskIncrementTick+0x170>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004722:	4915      	ldr	r1, [pc, #84]	@ (8004778 <xTaskIncrementTick+0x16c>)
 8004724:	4613      	mov	r3, r2
 8004726:	009b      	lsls	r3, r3, #2
 8004728:	4413      	add	r3, r2
 800472a:	009b      	lsls	r3, r3, #2
 800472c:	440b      	add	r3, r1
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	2b01      	cmp	r3, #1
 8004732:	d901      	bls.n	8004738 <xTaskIncrementTick+0x12c>
                {
                    xSwitchRequired = pdTRUE;
 8004734:	2301      	movs	r3, #1
 8004736:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8004738:	4b11      	ldr	r3, [pc, #68]	@ (8004780 <xTaskIncrementTick+0x174>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d007      	beq.n	8004750 <xTaskIncrementTick+0x144>
                {
                    xSwitchRequired = pdTRUE;
 8004740:	2301      	movs	r3, #1
 8004742:	617b      	str	r3, [r7, #20]
 8004744:	e004      	b.n	8004750 <xTaskIncrementTick+0x144>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8004746:	4b0f      	ldr	r3, [pc, #60]	@ (8004784 <xTaskIncrementTick+0x178>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	3301      	adds	r3, #1
 800474c:	4a0d      	ldr	r2, [pc, #52]	@ (8004784 <xTaskIncrementTick+0x178>)
 800474e:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8004750:	697b      	ldr	r3, [r7, #20]
}
 8004752:	4618      	mov	r0, r3
 8004754:	3718      	adds	r7, #24
 8004756:	46bd      	mov	sp, r7
 8004758:	bd80      	pop	{r7, pc}
 800475a:	bf00      	nop
 800475c:	200004cc 	.word	0x200004cc
 8004760:	200004a8 	.word	0x200004a8
 8004764:	2000045c 	.word	0x2000045c
 8004768:	20000460 	.word	0x20000460
 800476c:	200004bc 	.word	0x200004bc
 8004770:	200004c4 	.word	0x200004c4
 8004774:	200004ac 	.word	0x200004ac
 8004778:	200003d0 	.word	0x200003d0
 800477c:	200003cc 	.word	0x200003cc
 8004780:	200004b8 	.word	0x200004b8
 8004784:	200004b4 	.word	0x200004b4

08004788 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b086      	sub	sp, #24
 800478c:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800478e:	4b2d      	ldr	r3, [pc, #180]	@ (8004844 <vTaskSwitchContext+0xbc>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d003      	beq.n	800479e <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8004796:	4b2c      	ldr	r3, [pc, #176]	@ (8004848 <vTaskSwitchContext+0xc0>)
 8004798:	2201      	movs	r2, #1
 800479a:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 800479c:	e04e      	b.n	800483c <vTaskSwitchContext+0xb4>
        xYieldPending = pdFALSE;
 800479e:	4b2a      	ldr	r3, [pc, #168]	@ (8004848 <vTaskSwitchContext+0xc0>)
 80047a0:	2200      	movs	r2, #0
 80047a2:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80047a4:	4b29      	ldr	r3, [pc, #164]	@ (800484c <vTaskSwitchContext+0xc4>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	fab3 f383 	clz	r3, r3
 80047b0:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80047b2:	7afb      	ldrb	r3, [r7, #11]
 80047b4:	f1c3 031f 	rsb	r3, r3, #31
 80047b8:	617b      	str	r3, [r7, #20]
 80047ba:	4925      	ldr	r1, [pc, #148]	@ (8004850 <vTaskSwitchContext+0xc8>)
 80047bc:	697a      	ldr	r2, [r7, #20]
 80047be:	4613      	mov	r3, r2
 80047c0:	009b      	lsls	r3, r3, #2
 80047c2:	4413      	add	r3, r2
 80047c4:	009b      	lsls	r3, r3, #2
 80047c6:	440b      	add	r3, r1
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d10b      	bne.n	80047e6 <vTaskSwitchContext+0x5e>
        __asm volatile
 80047ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047d2:	f383 8811 	msr	BASEPRI, r3
 80047d6:	f3bf 8f6f 	isb	sy
 80047da:	f3bf 8f4f 	dsb	sy
 80047de:	607b      	str	r3, [r7, #4]
    }
 80047e0:	bf00      	nop
 80047e2:	bf00      	nop
 80047e4:	e7fd      	b.n	80047e2 <vTaskSwitchContext+0x5a>
 80047e6:	697a      	ldr	r2, [r7, #20]
 80047e8:	4613      	mov	r3, r2
 80047ea:	009b      	lsls	r3, r3, #2
 80047ec:	4413      	add	r3, r2
 80047ee:	009b      	lsls	r3, r3, #2
 80047f0:	4a17      	ldr	r2, [pc, #92]	@ (8004850 <vTaskSwitchContext+0xc8>)
 80047f2:	4413      	add	r3, r2
 80047f4:	613b      	str	r3, [r7, #16]
 80047f6:	693b      	ldr	r3, [r7, #16]
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	685a      	ldr	r2, [r3, #4]
 80047fc:	693b      	ldr	r3, [r7, #16]
 80047fe:	605a      	str	r2, [r3, #4]
 8004800:	693b      	ldr	r3, [r7, #16]
 8004802:	685a      	ldr	r2, [r3, #4]
 8004804:	693b      	ldr	r3, [r7, #16]
 8004806:	3308      	adds	r3, #8
 8004808:	429a      	cmp	r2, r3
 800480a:	d104      	bne.n	8004816 <vTaskSwitchContext+0x8e>
 800480c:	693b      	ldr	r3, [r7, #16]
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	685a      	ldr	r2, [r3, #4]
 8004812:	693b      	ldr	r3, [r7, #16]
 8004814:	605a      	str	r2, [r3, #4]
 8004816:	693b      	ldr	r3, [r7, #16]
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	68db      	ldr	r3, [r3, #12]
 800481c:	4a0d      	ldr	r2, [pc, #52]	@ (8004854 <vTaskSwitchContext+0xcc>)
 800481e:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8004820:	4b0c      	ldr	r3, [pc, #48]	@ (8004854 <vTaskSwitchContext+0xcc>)
 8004822:	681a      	ldr	r2, [r3, #0]
 8004824:	4b0c      	ldr	r3, [pc, #48]	@ (8004858 <vTaskSwitchContext+0xd0>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	429a      	cmp	r2, r3
 800482a:	d102      	bne.n	8004832 <vTaskSwitchContext+0xaa>
 800482c:	f002 fe5a 	bl	80074e4 <SEGGER_SYSVIEW_OnIdle>
}
 8004830:	e004      	b.n	800483c <vTaskSwitchContext+0xb4>
        traceTASK_SWITCHED_IN();
 8004832:	4b08      	ldr	r3, [pc, #32]	@ (8004854 <vTaskSwitchContext+0xcc>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4618      	mov	r0, r3
 8004838:	f002 feb2 	bl	80075a0 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 800483c:	bf00      	nop
 800483e:	3718      	adds	r7, #24
 8004840:	46bd      	mov	sp, r7
 8004842:	bd80      	pop	{r7, pc}
 8004844:	200004cc 	.word	0x200004cc
 8004848:	200004b8 	.word	0x200004b8
 800484c:	200004ac 	.word	0x200004ac
 8004850:	200003d0 	.word	0x200003d0
 8004854:	200003cc 	.word	0x200003cc
 8004858:	200004c8 	.word	0x200004c8

0800485c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b084      	sub	sp, #16
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
 8004864:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d10b      	bne.n	8004884 <vTaskPlaceOnEventList+0x28>
        __asm volatile
 800486c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004870:	f383 8811 	msr	BASEPRI, r3
 8004874:	f3bf 8f6f 	isb	sy
 8004878:	f3bf 8f4f 	dsb	sy
 800487c:	60fb      	str	r3, [r7, #12]
    }
 800487e:	bf00      	nop
 8004880:	bf00      	nop
 8004882:	e7fd      	b.n	8004880 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004884:	4b07      	ldr	r3, [pc, #28]	@ (80048a4 <vTaskPlaceOnEventList+0x48>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	3318      	adds	r3, #24
 800488a:	4619      	mov	r1, r3
 800488c:	6878      	ldr	r0, [r7, #4]
 800488e:	f7fe fe68 	bl	8003562 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004892:	2101      	movs	r1, #1
 8004894:	6838      	ldr	r0, [r7, #0]
 8004896:	f000 fc1f 	bl	80050d8 <prvAddCurrentTaskToDelayedList>
}
 800489a:	bf00      	nop
 800489c:	3710      	adds	r7, #16
 800489e:	46bd      	mov	sp, r7
 80048a0:	bd80      	pop	{r7, pc}
 80048a2:	bf00      	nop
 80048a4:	200003cc 	.word	0x200003cc

080048a8 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b086      	sub	sp, #24
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	60f8      	str	r0, [r7, #12]
 80048b0:	60b9      	str	r1, [r7, #8]
 80048b2:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d10b      	bne.n	80048d2 <vTaskPlaceOnEventListRestricted+0x2a>
        __asm volatile
 80048ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048be:	f383 8811 	msr	BASEPRI, r3
 80048c2:	f3bf 8f6f 	isb	sy
 80048c6:	f3bf 8f4f 	dsb	sy
 80048ca:	617b      	str	r3, [r7, #20]
    }
 80048cc:	bf00      	nop
 80048ce:	bf00      	nop
 80048d0:	e7fd      	b.n	80048ce <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80048d2:	4b0c      	ldr	r3, [pc, #48]	@ (8004904 <vTaskPlaceOnEventListRestricted+0x5c>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	3318      	adds	r3, #24
 80048d8:	4619      	mov	r1, r3
 80048da:	68f8      	ldr	r0, [r7, #12]
 80048dc:	f7fe fe1d 	bl	800351a <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d002      	beq.n	80048ec <vTaskPlaceOnEventListRestricted+0x44>
        {
            xTicksToWait = portMAX_DELAY;
 80048e6:	f04f 33ff 	mov.w	r3, #4294967295
 80048ea:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 80048ec:	2024      	movs	r0, #36	@ 0x24
 80048ee:	f002 f86f 	bl	80069d0 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80048f2:	6879      	ldr	r1, [r7, #4]
 80048f4:	68b8      	ldr	r0, [r7, #8]
 80048f6:	f000 fbef 	bl	80050d8 <prvAddCurrentTaskToDelayedList>
    }
 80048fa:	bf00      	nop
 80048fc:	3718      	adds	r7, #24
 80048fe:	46bd      	mov	sp, r7
 8004900:	bd80      	pop	{r7, pc}
 8004902:	bf00      	nop
 8004904:	200003cc 	.word	0x200003cc

08004908 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b086      	sub	sp, #24
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	68db      	ldr	r3, [r3, #12]
 8004914:	68db      	ldr	r3, [r3, #12]
 8004916:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8004918:	693b      	ldr	r3, [r7, #16]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d10b      	bne.n	8004936 <xTaskRemoveFromEventList+0x2e>
        __asm volatile
 800491e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004922:	f383 8811 	msr	BASEPRI, r3
 8004926:	f3bf 8f6f 	isb	sy
 800492a:	f3bf 8f4f 	dsb	sy
 800492e:	60fb      	str	r3, [r7, #12]
    }
 8004930:	bf00      	nop
 8004932:	bf00      	nop
 8004934:	e7fd      	b.n	8004932 <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004936:	693b      	ldr	r3, [r7, #16]
 8004938:	3318      	adds	r3, #24
 800493a:	4618      	mov	r0, r3
 800493c:	f7fe fe4a 	bl	80035d4 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004940:	4b1f      	ldr	r3, [pc, #124]	@ (80049c0 <xTaskRemoveFromEventList+0xb8>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d120      	bne.n	800498a <xTaskRemoveFromEventList+0x82>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004948:	693b      	ldr	r3, [r7, #16]
 800494a:	3304      	adds	r3, #4
 800494c:	4618      	mov	r0, r3
 800494e:	f7fe fe41 	bl	80035d4 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8004952:	693b      	ldr	r3, [r7, #16]
 8004954:	4618      	mov	r0, r3
 8004956:	f002 fe65 	bl	8007624 <SEGGER_SYSVIEW_OnTaskStartReady>
 800495a:	693b      	ldr	r3, [r7, #16]
 800495c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800495e:	2201      	movs	r2, #1
 8004960:	409a      	lsls	r2, r3
 8004962:	4b18      	ldr	r3, [pc, #96]	@ (80049c4 <xTaskRemoveFromEventList+0xbc>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4313      	orrs	r3, r2
 8004968:	4a16      	ldr	r2, [pc, #88]	@ (80049c4 <xTaskRemoveFromEventList+0xbc>)
 800496a:	6013      	str	r3, [r2, #0]
 800496c:	693b      	ldr	r3, [r7, #16]
 800496e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004970:	4613      	mov	r3, r2
 8004972:	009b      	lsls	r3, r3, #2
 8004974:	4413      	add	r3, r2
 8004976:	009b      	lsls	r3, r3, #2
 8004978:	4a13      	ldr	r2, [pc, #76]	@ (80049c8 <xTaskRemoveFromEventList+0xc0>)
 800497a:	441a      	add	r2, r3
 800497c:	693b      	ldr	r3, [r7, #16]
 800497e:	3304      	adds	r3, #4
 8004980:	4619      	mov	r1, r3
 8004982:	4610      	mov	r0, r2
 8004984:	f7fe fdc9 	bl	800351a <vListInsertEnd>
 8004988:	e005      	b.n	8004996 <xTaskRemoveFromEventList+0x8e>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800498a:	693b      	ldr	r3, [r7, #16]
 800498c:	3318      	adds	r3, #24
 800498e:	4619      	mov	r1, r3
 8004990:	480e      	ldr	r0, [pc, #56]	@ (80049cc <xTaskRemoveFromEventList+0xc4>)
 8004992:	f7fe fdc2 	bl	800351a <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004996:	693b      	ldr	r3, [r7, #16]
 8004998:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800499a:	4b0d      	ldr	r3, [pc, #52]	@ (80049d0 <xTaskRemoveFromEventList+0xc8>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049a0:	429a      	cmp	r2, r3
 80049a2:	d905      	bls.n	80049b0 <xTaskRemoveFromEventList+0xa8>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80049a4:	2301      	movs	r3, #1
 80049a6:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80049a8:	4b0a      	ldr	r3, [pc, #40]	@ (80049d4 <xTaskRemoveFromEventList+0xcc>)
 80049aa:	2201      	movs	r2, #1
 80049ac:	601a      	str	r2, [r3, #0]
 80049ae:	e001      	b.n	80049b4 <xTaskRemoveFromEventList+0xac>
    }
    else
    {
        xReturn = pdFALSE;
 80049b0:	2300      	movs	r3, #0
 80049b2:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 80049b4:	697b      	ldr	r3, [r7, #20]
}
 80049b6:	4618      	mov	r0, r3
 80049b8:	3718      	adds	r7, #24
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bd80      	pop	{r7, pc}
 80049be:	bf00      	nop
 80049c0:	200004cc 	.word	0x200004cc
 80049c4:	200004ac 	.word	0x200004ac
 80049c8:	200003d0 	.word	0x200003d0
 80049cc:	20000464 	.word	0x20000464
 80049d0:	200003cc 	.word	0x200003cc
 80049d4:	200004b8 	.word	0x200004b8

080049d8 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80049d8:	b480      	push	{r7}
 80049da:	b083      	sub	sp, #12
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80049e0:	4b06      	ldr	r3, [pc, #24]	@ (80049fc <vTaskInternalSetTimeOutState+0x24>)
 80049e2:	681a      	ldr	r2, [r3, #0]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80049e8:	4b05      	ldr	r3, [pc, #20]	@ (8004a00 <vTaskInternalSetTimeOutState+0x28>)
 80049ea:	681a      	ldr	r2, [r3, #0]
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	605a      	str	r2, [r3, #4]
}
 80049f0:	bf00      	nop
 80049f2:	370c      	adds	r7, #12
 80049f4:	46bd      	mov	sp, r7
 80049f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fa:	4770      	bx	lr
 80049fc:	200004bc 	.word	0x200004bc
 8004a00:	200004a8 	.word	0x200004a8

08004a04 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b088      	sub	sp, #32
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
 8004a0c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d10b      	bne.n	8004a2c <xTaskCheckForTimeOut+0x28>
        __asm volatile
 8004a14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a18:	f383 8811 	msr	BASEPRI, r3
 8004a1c:	f3bf 8f6f 	isb	sy
 8004a20:	f3bf 8f4f 	dsb	sy
 8004a24:	613b      	str	r3, [r7, #16]
    }
 8004a26:	bf00      	nop
 8004a28:	bf00      	nop
 8004a2a:	e7fd      	b.n	8004a28 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d10b      	bne.n	8004a4a <xTaskCheckForTimeOut+0x46>
        __asm volatile
 8004a32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a36:	f383 8811 	msr	BASEPRI, r3
 8004a3a:	f3bf 8f6f 	isb	sy
 8004a3e:	f3bf 8f4f 	dsb	sy
 8004a42:	60fb      	str	r3, [r7, #12]
    }
 8004a44:	bf00      	nop
 8004a46:	bf00      	nop
 8004a48:	e7fd      	b.n	8004a46 <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 8004a4a:	f001 f8ef 	bl	8005c2c <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8004a4e:	4b1f      	ldr	r3, [pc, #124]	@ (8004acc <xTaskCheckForTimeOut+0xc8>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	69ba      	ldr	r2, [r7, #24]
 8004a5a:	1ad3      	subs	r3, r2, r3
 8004a5c:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a66:	d102      	bne.n	8004a6e <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8004a68:	2300      	movs	r3, #0
 8004a6a:	61fb      	str	r3, [r7, #28]
 8004a6c:	e026      	b.n	8004abc <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681a      	ldr	r2, [r3, #0]
 8004a72:	4b17      	ldr	r3, [pc, #92]	@ (8004ad0 <xTaskCheckForTimeOut+0xcc>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	429a      	cmp	r2, r3
 8004a78:	d00a      	beq.n	8004a90 <xTaskCheckForTimeOut+0x8c>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	69ba      	ldr	r2, [r7, #24]
 8004a80:	429a      	cmp	r2, r3
 8004a82:	d305      	bcc.n	8004a90 <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8004a84:	2301      	movs	r3, #1
 8004a86:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	601a      	str	r2, [r3, #0]
 8004a8e:	e015      	b.n	8004abc <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	697a      	ldr	r2, [r7, #20]
 8004a96:	429a      	cmp	r2, r3
 8004a98:	d20b      	bcs.n	8004ab2 <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	681a      	ldr	r2, [r3, #0]
 8004a9e:	697b      	ldr	r3, [r7, #20]
 8004aa0:	1ad2      	subs	r2, r2, r3
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8004aa6:	6878      	ldr	r0, [r7, #4]
 8004aa8:	f7ff ff96 	bl	80049d8 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8004aac:	2300      	movs	r3, #0
 8004aae:	61fb      	str	r3, [r7, #28]
 8004ab0:	e004      	b.n	8004abc <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8004ab8:	2301      	movs	r3, #1
 8004aba:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8004abc:	f001 f8e8 	bl	8005c90 <vPortExitCritical>

    return xReturn;
 8004ac0:	69fb      	ldr	r3, [r7, #28]
}
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	3720      	adds	r7, #32
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bd80      	pop	{r7, pc}
 8004aca:	bf00      	nop
 8004acc:	200004a8 	.word	0x200004a8
 8004ad0:	200004bc 	.word	0x200004bc

08004ad4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8004ad8:	4b03      	ldr	r3, [pc, #12]	@ (8004ae8 <vTaskMissedYield+0x14>)
 8004ada:	2201      	movs	r2, #1
 8004adc:	601a      	str	r2, [r3, #0]
}
 8004ade:	bf00      	nop
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae6:	4770      	bx	lr
 8004ae8:	200004b8 	.word	0x200004b8

08004aec <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b082      	sub	sp, #8
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8004af4:	f000 f852 	bl	8004b9c <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004af8:	4b06      	ldr	r3, [pc, #24]	@ (8004b14 <prvIdleTask+0x28>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	2b01      	cmp	r3, #1
 8004afe:	d9f9      	bls.n	8004af4 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8004b00:	4b05      	ldr	r3, [pc, #20]	@ (8004b18 <prvIdleTask+0x2c>)
 8004b02:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004b06:	601a      	str	r2, [r3, #0]
 8004b08:	f3bf 8f4f 	dsb	sy
 8004b0c:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8004b10:	e7f0      	b.n	8004af4 <prvIdleTask+0x8>
 8004b12:	bf00      	nop
 8004b14:	200003d0 	.word	0x200003d0
 8004b18:	e000ed04 	.word	0xe000ed04

08004b1c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b082      	sub	sp, #8
 8004b20:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004b22:	2300      	movs	r3, #0
 8004b24:	607b      	str	r3, [r7, #4]
 8004b26:	e00c      	b.n	8004b42 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004b28:	687a      	ldr	r2, [r7, #4]
 8004b2a:	4613      	mov	r3, r2
 8004b2c:	009b      	lsls	r3, r3, #2
 8004b2e:	4413      	add	r3, r2
 8004b30:	009b      	lsls	r3, r3, #2
 8004b32:	4a12      	ldr	r2, [pc, #72]	@ (8004b7c <prvInitialiseTaskLists+0x60>)
 8004b34:	4413      	add	r3, r2
 8004b36:	4618      	mov	r0, r3
 8004b38:	f7fe fcc2 	bl	80034c0 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	3301      	adds	r3, #1
 8004b40:	607b      	str	r3, [r7, #4]
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2b04      	cmp	r3, #4
 8004b46:	d9ef      	bls.n	8004b28 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8004b48:	480d      	ldr	r0, [pc, #52]	@ (8004b80 <prvInitialiseTaskLists+0x64>)
 8004b4a:	f7fe fcb9 	bl	80034c0 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8004b4e:	480d      	ldr	r0, [pc, #52]	@ (8004b84 <prvInitialiseTaskLists+0x68>)
 8004b50:	f7fe fcb6 	bl	80034c0 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8004b54:	480c      	ldr	r0, [pc, #48]	@ (8004b88 <prvInitialiseTaskLists+0x6c>)
 8004b56:	f7fe fcb3 	bl	80034c0 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8004b5a:	480c      	ldr	r0, [pc, #48]	@ (8004b8c <prvInitialiseTaskLists+0x70>)
 8004b5c:	f7fe fcb0 	bl	80034c0 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8004b60:	480b      	ldr	r0, [pc, #44]	@ (8004b90 <prvInitialiseTaskLists+0x74>)
 8004b62:	f7fe fcad 	bl	80034c0 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8004b66:	4b0b      	ldr	r3, [pc, #44]	@ (8004b94 <prvInitialiseTaskLists+0x78>)
 8004b68:	4a05      	ldr	r2, [pc, #20]	@ (8004b80 <prvInitialiseTaskLists+0x64>)
 8004b6a:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004b6c:	4b0a      	ldr	r3, [pc, #40]	@ (8004b98 <prvInitialiseTaskLists+0x7c>)
 8004b6e:	4a05      	ldr	r2, [pc, #20]	@ (8004b84 <prvInitialiseTaskLists+0x68>)
 8004b70:	601a      	str	r2, [r3, #0]
}
 8004b72:	bf00      	nop
 8004b74:	3708      	adds	r7, #8
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bd80      	pop	{r7, pc}
 8004b7a:	bf00      	nop
 8004b7c:	200003d0 	.word	0x200003d0
 8004b80:	20000434 	.word	0x20000434
 8004b84:	20000448 	.word	0x20000448
 8004b88:	20000464 	.word	0x20000464
 8004b8c:	20000478 	.word	0x20000478
 8004b90:	20000490 	.word	0x20000490
 8004b94:	2000045c 	.word	0x2000045c
 8004b98:	20000460 	.word	0x20000460

08004b9c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b082      	sub	sp, #8
 8004ba0:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004ba2:	e019      	b.n	8004bd8 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8004ba4:	f001 f842 	bl	8005c2c <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ba8:	4b10      	ldr	r3, [pc, #64]	@ (8004bec <prvCheckTasksWaitingTermination+0x50>)
 8004baa:	68db      	ldr	r3, [r3, #12]
 8004bac:	68db      	ldr	r3, [r3, #12]
 8004bae:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	3304      	adds	r3, #4
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	f7fe fd0d 	bl	80035d4 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8004bba:	4b0d      	ldr	r3, [pc, #52]	@ (8004bf0 <prvCheckTasksWaitingTermination+0x54>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	3b01      	subs	r3, #1
 8004bc0:	4a0b      	ldr	r2, [pc, #44]	@ (8004bf0 <prvCheckTasksWaitingTermination+0x54>)
 8004bc2:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8004bc4:	4b0b      	ldr	r3, [pc, #44]	@ (8004bf4 <prvCheckTasksWaitingTermination+0x58>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	3b01      	subs	r3, #1
 8004bca:	4a0a      	ldr	r2, [pc, #40]	@ (8004bf4 <prvCheckTasksWaitingTermination+0x58>)
 8004bcc:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8004bce:	f001 f85f 	bl	8005c90 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8004bd2:	6878      	ldr	r0, [r7, #4]
 8004bd4:	f000 f810 	bl	8004bf8 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004bd8:	4b06      	ldr	r3, [pc, #24]	@ (8004bf4 <prvCheckTasksWaitingTermination+0x58>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d1e1      	bne.n	8004ba4 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8004be0:	bf00      	nop
 8004be2:	bf00      	nop
 8004be4:	3708      	adds	r7, #8
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bd80      	pop	{r7, pc}
 8004bea:	bf00      	nop
 8004bec:	20000478 	.word	0x20000478
 8004bf0:	200004a4 	.word	0x200004a4
 8004bf4:	2000048c 	.word	0x2000048c

08004bf8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b082      	sub	sp, #8
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c04:	4618      	mov	r0, r3
 8004c06:	f001 fa25 	bl	8006054 <vPortFree>
                vPortFree( pxTCB );
 8004c0a:	6878      	ldr	r0, [r7, #4]
 8004c0c:	f001 fa22 	bl	8006054 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8004c10:	bf00      	nop
 8004c12:	3708      	adds	r7, #8
 8004c14:	46bd      	mov	sp, r7
 8004c16:	bd80      	pop	{r7, pc}

08004c18 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004c18:	b480      	push	{r7}
 8004c1a:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004c1c:	4b0a      	ldr	r3, [pc, #40]	@ (8004c48 <prvResetNextTaskUnblockTime+0x30>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d104      	bne.n	8004c30 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8004c26:	4b09      	ldr	r3, [pc, #36]	@ (8004c4c <prvResetNextTaskUnblockTime+0x34>)
 8004c28:	f04f 32ff 	mov.w	r2, #4294967295
 8004c2c:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8004c2e:	e005      	b.n	8004c3c <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004c30:	4b05      	ldr	r3, [pc, #20]	@ (8004c48 <prvResetNextTaskUnblockTime+0x30>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	68db      	ldr	r3, [r3, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a04      	ldr	r2, [pc, #16]	@ (8004c4c <prvResetNextTaskUnblockTime+0x34>)
 8004c3a:	6013      	str	r3, [r2, #0]
}
 8004c3c:	bf00      	nop
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c44:	4770      	bx	lr
 8004c46:	bf00      	nop
 8004c48:	2000045c 	.word	0x2000045c
 8004c4c:	200004c4 	.word	0x200004c4

08004c50 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8004c50:	b480      	push	{r7}
 8004c52:	b083      	sub	sp, #12
 8004c54:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8004c56:	4b0b      	ldr	r3, [pc, #44]	@ (8004c84 <xTaskGetSchedulerState+0x34>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d102      	bne.n	8004c64 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	607b      	str	r3, [r7, #4]
 8004c62:	e008      	b.n	8004c76 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004c64:	4b08      	ldr	r3, [pc, #32]	@ (8004c88 <xTaskGetSchedulerState+0x38>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d102      	bne.n	8004c72 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8004c6c:	2302      	movs	r3, #2
 8004c6e:	607b      	str	r3, [r7, #4]
 8004c70:	e001      	b.n	8004c76 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8004c72:	2300      	movs	r3, #0
 8004c74:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8004c76:	687b      	ldr	r3, [r7, #4]
    }
 8004c78:	4618      	mov	r0, r3
 8004c7a:	370c      	adds	r7, #12
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c82:	4770      	bx	lr
 8004c84:	200004b0 	.word	0x200004b0
 8004c88:	200004cc 	.word	0x200004cc

08004c8c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b086      	sub	sp, #24
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8004c98:	2300      	movs	r3, #0
 8004c9a:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d06a      	beq.n	8004d78 <xTaskPriorityDisinherit+0xec>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8004ca2:	4b38      	ldr	r3, [pc, #224]	@ (8004d84 <xTaskPriorityDisinherit+0xf8>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	693a      	ldr	r2, [r7, #16]
 8004ca8:	429a      	cmp	r2, r3
 8004caa:	d00b      	beq.n	8004cc4 <xTaskPriorityDisinherit+0x38>
        __asm volatile
 8004cac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cb0:	f383 8811 	msr	BASEPRI, r3
 8004cb4:	f3bf 8f6f 	isb	sy
 8004cb8:	f3bf 8f4f 	dsb	sy
 8004cbc:	60fb      	str	r3, [r7, #12]
    }
 8004cbe:	bf00      	nop
 8004cc0:	bf00      	nop
 8004cc2:	e7fd      	b.n	8004cc0 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8004cc4:	693b      	ldr	r3, [r7, #16]
 8004cc6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d10b      	bne.n	8004ce4 <xTaskPriorityDisinherit+0x58>
        __asm volatile
 8004ccc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cd0:	f383 8811 	msr	BASEPRI, r3
 8004cd4:	f3bf 8f6f 	isb	sy
 8004cd8:	f3bf 8f4f 	dsb	sy
 8004cdc:	60bb      	str	r3, [r7, #8]
    }
 8004cde:	bf00      	nop
 8004ce0:	bf00      	nop
 8004ce2:	e7fd      	b.n	8004ce0 <xTaskPriorityDisinherit+0x54>
            ( pxTCB->uxMutexesHeld )--;
 8004ce4:	693b      	ldr	r3, [r7, #16]
 8004ce6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ce8:	1e5a      	subs	r2, r3, #1
 8004cea:	693b      	ldr	r3, [r7, #16]
 8004cec:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004cee:	693b      	ldr	r3, [r7, #16]
 8004cf0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004cf6:	429a      	cmp	r2, r3
 8004cf8:	d03e      	beq.n	8004d78 <xTaskPriorityDisinherit+0xec>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004cfa:	693b      	ldr	r3, [r7, #16]
 8004cfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d13a      	bne.n	8004d78 <xTaskPriorityDisinherit+0xec>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004d02:	693b      	ldr	r3, [r7, #16]
 8004d04:	3304      	adds	r3, #4
 8004d06:	4618      	mov	r0, r3
 8004d08:	f7fe fc64 	bl	80035d4 <uxListRemove>
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d10a      	bne.n	8004d28 <xTaskPriorityDisinherit+0x9c>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8004d12:	693b      	ldr	r3, [r7, #16]
 8004d14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d16:	2201      	movs	r2, #1
 8004d18:	fa02 f303 	lsl.w	r3, r2, r3
 8004d1c:	43da      	mvns	r2, r3
 8004d1e:	4b1a      	ldr	r3, [pc, #104]	@ (8004d88 <xTaskPriorityDisinherit+0xfc>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4013      	ands	r3, r2
 8004d24:	4a18      	ldr	r2, [pc, #96]	@ (8004d88 <xTaskPriorityDisinherit+0xfc>)
 8004d26:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	4619      	mov	r1, r3
 8004d2c:	204a      	movs	r0, #74	@ 0x4a
 8004d2e:	f001 fe6d 	bl	8006a0c <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004d32:	693b      	ldr	r3, [r7, #16]
 8004d34:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004d36:	693b      	ldr	r3, [r7, #16]
 8004d38:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d3a:	693b      	ldr	r3, [r7, #16]
 8004d3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d3e:	f1c3 0205 	rsb	r2, r3, #5
 8004d42:	693b      	ldr	r3, [r7, #16]
 8004d44:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 8004d46:	693b      	ldr	r3, [r7, #16]
 8004d48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	409a      	lsls	r2, r3
 8004d4e:	4b0e      	ldr	r3, [pc, #56]	@ (8004d88 <xTaskPriorityDisinherit+0xfc>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4313      	orrs	r3, r2
 8004d54:	4a0c      	ldr	r2, [pc, #48]	@ (8004d88 <xTaskPriorityDisinherit+0xfc>)
 8004d56:	6013      	str	r3, [r2, #0]
 8004d58:	693b      	ldr	r3, [r7, #16]
 8004d5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d5c:	4613      	mov	r3, r2
 8004d5e:	009b      	lsls	r3, r3, #2
 8004d60:	4413      	add	r3, r2
 8004d62:	009b      	lsls	r3, r3, #2
 8004d64:	4a09      	ldr	r2, [pc, #36]	@ (8004d8c <xTaskPriorityDisinherit+0x100>)
 8004d66:	441a      	add	r2, r3
 8004d68:	693b      	ldr	r3, [r7, #16]
 8004d6a:	3304      	adds	r3, #4
 8004d6c:	4619      	mov	r1, r3
 8004d6e:	4610      	mov	r0, r2
 8004d70:	f7fe fbd3 	bl	800351a <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8004d74:	2301      	movs	r3, #1
 8004d76:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8004d78:	697b      	ldr	r3, [r7, #20]
    }
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	3718      	adds	r7, #24
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bd80      	pop	{r7, pc}
 8004d82:	bf00      	nop
 8004d84:	200003cc 	.word	0x200003cc
 8004d88:	200004ac 	.word	0x200004ac
 8004d8c:	200003d0 	.word	0x200003d0

08004d90 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b088      	sub	sp, #32
 8004d94:	af02      	add	r7, sp, #8
 8004d96:	60f8      	str	r0, [r7, #12]
 8004d98:	60b9      	str	r1, [r7, #8]
 8004d9a:	607a      	str	r2, [r7, #4]
 8004d9c:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d00b      	beq.n	8004dbc <xTaskGenericNotifyWait+0x2c>
        __asm volatile
 8004da4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004da8:	f383 8811 	msr	BASEPRI, r3
 8004dac:	f3bf 8f6f 	isb	sy
 8004db0:	f3bf 8f4f 	dsb	sy
 8004db4:	613b      	str	r3, [r7, #16]
    }
 8004db6:	bf00      	nop
 8004db8:	bf00      	nop
 8004dba:	e7fd      	b.n	8004db8 <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 8004dbc:	f000 ff36 	bl	8005c2c <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8004dc0:	4b36      	ldr	r3, [pc, #216]	@ (8004e9c <xTaskGenericNotifyWait+0x10c>)
 8004dc2:	681a      	ldr	r2, [r3, #0]
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	4413      	add	r3, r2
 8004dc8:	3354      	adds	r3, #84	@ 0x54
 8004dca:	781b      	ldrb	r3, [r3, #0]
 8004dcc:	b2db      	uxtb	r3, r3
 8004dce:	2b02      	cmp	r3, #2
 8004dd0:	d022      	beq.n	8004e18 <xTaskGenericNotifyWait+0x88>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 8004dd2:	4b32      	ldr	r3, [pc, #200]	@ (8004e9c <xTaskGenericNotifyWait+0x10c>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	68fa      	ldr	r2, [r7, #12]
 8004dd8:	3214      	adds	r2, #20
 8004dda:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004dde:	68ba      	ldr	r2, [r7, #8]
 8004de0:	43d2      	mvns	r2, r2
 8004de2:	4011      	ands	r1, r2
 8004de4:	68fa      	ldr	r2, [r7, #12]
 8004de6:	3214      	adds	r2, #20
 8004de8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 8004dec:	4b2b      	ldr	r3, [pc, #172]	@ (8004e9c <xTaskGenericNotifyWait+0x10c>)
 8004dee:	681a      	ldr	r2, [r3, #0]
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	4413      	add	r3, r2
 8004df4:	3354      	adds	r3, #84	@ 0x54
 8004df6:	2201      	movs	r2, #1
 8004df8:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 8004dfa:	6a3b      	ldr	r3, [r7, #32]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d00b      	beq.n	8004e18 <xTaskGenericNotifyWait+0x88>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004e00:	2101      	movs	r1, #1
 8004e02:	6a38      	ldr	r0, [r7, #32]
 8004e04:	f000 f968 	bl	80050d8 <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 8004e08:	4b25      	ldr	r3, [pc, #148]	@ (8004ea0 <xTaskGenericNotifyWait+0x110>)
 8004e0a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004e0e:	601a      	str	r2, [r3, #0]
 8004e10:	f3bf 8f4f 	dsb	sy
 8004e14:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004e18:	f000 ff3a 	bl	8005c90 <vPortExitCritical>

        taskENTER_CRITICAL();
 8004e1c:	f000 ff06 	bl	8005c2c <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );
 8004e20:	683a      	ldr	r2, [r7, #0]
 8004e22:	6a3b      	ldr	r3, [r7, #32]
 8004e24:	9300      	str	r3, [sp, #0]
 8004e26:	4613      	mov	r3, r2
 8004e28:	687a      	ldr	r2, [r7, #4]
 8004e2a:	68b9      	ldr	r1, [r7, #8]
 8004e2c:	2040      	movs	r0, #64	@ 0x40
 8004e2e:	f001 fef9 	bl	8006c24 <SEGGER_SYSVIEW_RecordU32x4>

            if( pulNotificationValue != NULL )
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d007      	beq.n	8004e48 <xTaskGenericNotifyWait+0xb8>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 8004e38:	4b18      	ldr	r3, [pc, #96]	@ (8004e9c <xTaskGenericNotifyWait+0x10c>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	68fa      	ldr	r2, [r7, #12]
 8004e3e:	3214      	adds	r2, #20
 8004e40:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8004e48:	4b14      	ldr	r3, [pc, #80]	@ (8004e9c <xTaskGenericNotifyWait+0x10c>)
 8004e4a:	681a      	ldr	r2, [r3, #0]
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	4413      	add	r3, r2
 8004e50:	3354      	adds	r3, #84	@ 0x54
 8004e52:	781b      	ldrb	r3, [r3, #0]
 8004e54:	b2db      	uxtb	r3, r3
 8004e56:	2b02      	cmp	r3, #2
 8004e58:	d002      	beq.n	8004e60 <xTaskGenericNotifyWait+0xd0>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	617b      	str	r3, [r7, #20]
 8004e5e:	e00e      	b.n	8004e7e <xTaskGenericNotifyWait+0xee>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 8004e60:	4b0e      	ldr	r3, [pc, #56]	@ (8004e9c <xTaskGenericNotifyWait+0x10c>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	68fa      	ldr	r2, [r7, #12]
 8004e66:	3214      	adds	r2, #20
 8004e68:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004e6c:	687a      	ldr	r2, [r7, #4]
 8004e6e:	43d2      	mvns	r2, r2
 8004e70:	4011      	ands	r1, r2
 8004e72:	68fa      	ldr	r2, [r7, #12]
 8004e74:	3214      	adds	r2, #20
 8004e76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 8004e7e:	4b07      	ldr	r3, [pc, #28]	@ (8004e9c <xTaskGenericNotifyWait+0x10c>)
 8004e80:	681a      	ldr	r2, [r3, #0]
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	4413      	add	r3, r2
 8004e86:	3354      	adds	r3, #84	@ 0x54
 8004e88:	2200      	movs	r2, #0
 8004e8a:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8004e8c:	f000 ff00 	bl	8005c90 <vPortExitCritical>

        return xReturn;
 8004e90:	697b      	ldr	r3, [r7, #20]
    }
 8004e92:	4618      	mov	r0, r3
 8004e94:	3718      	adds	r7, #24
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bd80      	pop	{r7, pc}
 8004e9a:	bf00      	nop
 8004e9c:	200003cc 	.word	0x200003cc
 8004ea0:	e000ed04 	.word	0xe000ed04

08004ea4 <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b092      	sub	sp, #72	@ 0x48
 8004ea8:	af02      	add	r7, sp, #8
 8004eaa:	60f8      	str	r0, [r7, #12]
 8004eac:	60b9      	str	r1, [r7, #8]
 8004eae:	607a      	str	r2, [r7, #4]
 8004eb0:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d10b      	bne.n	8004ed4 <xTaskGenericNotifyFromISR+0x30>
        __asm volatile
 8004ebc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ec0:	f383 8811 	msr	BASEPRI, r3
 8004ec4:	f3bf 8f6f 	isb	sy
 8004ec8:	f3bf 8f4f 	dsb	sy
 8004ecc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
 8004ece:	bf00      	nop
 8004ed0:	bf00      	nop
 8004ed2:	e7fd      	b.n	8004ed0 <xTaskGenericNotifyFromISR+0x2c>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8004ed4:	68bb      	ldr	r3, [r7, #8]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d00b      	beq.n	8004ef2 <xTaskGenericNotifyFromISR+0x4e>
        __asm volatile
 8004eda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ede:	f383 8811 	msr	BASEPRI, r3
 8004ee2:	f3bf 8f6f 	isb	sy
 8004ee6:	f3bf 8f4f 	dsb	sy
 8004eea:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 8004eec:	bf00      	nop
 8004eee:	bf00      	nop
 8004ef0:	e7fd      	b.n	8004eee <xTaskGenericNotifyFromISR+0x4a>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004ef2:	f000 ff8b 	bl	8005e0c <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	63bb      	str	r3, [r7, #56]	@ 0x38
        __asm volatile
 8004efa:	f3ef 8211 	mrs	r2, BASEPRI
 8004efe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f02:	f383 8811 	msr	BASEPRI, r3
 8004f06:	f3bf 8f6f 	isb	sy
 8004f0a:	f3bf 8f4f 	dsb	sy
 8004f0e:	627a      	str	r2, [r7, #36]	@ 0x24
 8004f10:	623b      	str	r3, [r7, #32]
        return ulOriginalBASEPRI;
 8004f12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004f14:	637b      	str	r3, [r7, #52]	@ 0x34
        {
            if( pulPreviousNotificationValue != NULL )
 8004f16:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d006      	beq.n	8004f2a <xTaskGenericNotifyFromISR+0x86>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8004f1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f1e:	68ba      	ldr	r2, [r7, #8]
 8004f20:	3214      	adds	r2, #20
 8004f22:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004f26:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004f28:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8004f2a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	4413      	add	r3, r2
 8004f30:	3354      	adds	r3, #84	@ 0x54
 8004f32:	781b      	ldrb	r3, [r3, #0]
 8004f34:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8004f38:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004f3a:	68bb      	ldr	r3, [r7, #8]
 8004f3c:	4413      	add	r3, r2
 8004f3e:	3354      	adds	r3, #84	@ 0x54
 8004f40:	2202      	movs	r2, #2
 8004f42:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8004f44:	78fb      	ldrb	r3, [r7, #3]
 8004f46:	2b04      	cmp	r3, #4
 8004f48:	d83b      	bhi.n	8004fc2 <xTaskGenericNotifyFromISR+0x11e>
 8004f4a:	a201      	add	r2, pc, #4	@ (adr r2, 8004f50 <xTaskGenericNotifyFromISR+0xac>)
 8004f4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f50:	08004fe3 	.word	0x08004fe3
 8004f54:	08004f65 	.word	0x08004f65
 8004f58:	08004f81 	.word	0x08004f81
 8004f5c:	08004f99 	.word	0x08004f99
 8004f60:	08004fa7 	.word	0x08004fa7
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8004f64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f66:	68ba      	ldr	r2, [r7, #8]
 8004f68:	3214      	adds	r2, #20
 8004f6a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	ea42 0103 	orr.w	r1, r2, r3
 8004f74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f76:	68ba      	ldr	r2, [r7, #8]
 8004f78:	3214      	adds	r2, #20
 8004f7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8004f7e:	e033      	b.n	8004fe8 <xTaskGenericNotifyFromISR+0x144>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8004f80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f82:	68ba      	ldr	r2, [r7, #8]
 8004f84:	3214      	adds	r2, #20
 8004f86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f8a:	1c59      	adds	r1, r3, #1
 8004f8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f8e:	68ba      	ldr	r2, [r7, #8]
 8004f90:	3214      	adds	r2, #20
 8004f92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8004f96:	e027      	b.n	8004fe8 <xTaskGenericNotifyFromISR+0x144>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8004f98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f9a:	68ba      	ldr	r2, [r7, #8]
 8004f9c:	3214      	adds	r2, #20
 8004f9e:	6879      	ldr	r1, [r7, #4]
 8004fa0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8004fa4:	e020      	b.n	8004fe8 <xTaskGenericNotifyFromISR+0x144>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8004fa6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004faa:	2b02      	cmp	r3, #2
 8004fac:	d006      	beq.n	8004fbc <xTaskGenericNotifyFromISR+0x118>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8004fae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fb0:	68ba      	ldr	r2, [r7, #8]
 8004fb2:	3214      	adds	r2, #20
 8004fb4:	6879      	ldr	r1, [r7, #4]
 8004fb6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8004fba:	e015      	b.n	8004fe8 <xTaskGenericNotifyFromISR+0x144>
                        xReturn = pdFAIL;
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
                    break;
 8004fc0:	e012      	b.n	8004fe8 <xTaskGenericNotifyFromISR+0x144>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8004fc2:	4b3e      	ldr	r3, [pc, #248]	@ (80050bc <xTaskGenericNotifyFromISR+0x218>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d00d      	beq.n	8004fe6 <xTaskGenericNotifyFromISR+0x142>
        __asm volatile
 8004fca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fce:	f383 8811 	msr	BASEPRI, r3
 8004fd2:	f3bf 8f6f 	isb	sy
 8004fd6:	f3bf 8f4f 	dsb	sy
 8004fda:	61fb      	str	r3, [r7, #28]
    }
 8004fdc:	bf00      	nop
 8004fde:	bf00      	nop
 8004fe0:	e7fd      	b.n	8004fde <xTaskGenericNotifyFromISR+0x13a>
                    break;
 8004fe2:	bf00      	nop
 8004fe4:	e000      	b.n	8004fe8 <xTaskGenericNotifyFromISR+0x144>
                    break;
 8004fe6:	bf00      	nop
            }

            traceTASK_NOTIFY_FROM_ISR(  );
 8004fe8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fea:	4618      	mov	r0, r3
 8004fec:	f002 fbbc 	bl	8007768 <SEGGER_SYSVIEW_ShrinkId>
 8004ff0:	78f9      	ldrb	r1, [r7, #3]
 8004ff2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004ff4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004ff6:	9201      	str	r2, [sp, #4]
 8004ff8:	9300      	str	r3, [sp, #0]
 8004ffa:	460b      	mov	r3, r1
 8004ffc:	687a      	ldr	r2, [r7, #4]
 8004ffe:	4601      	mov	r1, r0
 8005000:	203f      	movs	r0, #63	@ 0x3f
 8005002:	f001 fea1 	bl	8006d48 <SEGGER_SYSVIEW_RecordU32x5>

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8005006:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800500a:	2b01      	cmp	r3, #1
 800500c:	d14a      	bne.n	80050a4 <xTaskGenericNotifyFromISR+0x200>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800500e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005010:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005012:	2b00      	cmp	r3, #0
 8005014:	d00b      	beq.n	800502e <xTaskGenericNotifyFromISR+0x18a>
        __asm volatile
 8005016:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800501a:	f383 8811 	msr	BASEPRI, r3
 800501e:	f3bf 8f6f 	isb	sy
 8005022:	f3bf 8f4f 	dsb	sy
 8005026:	61bb      	str	r3, [r7, #24]
    }
 8005028:	bf00      	nop
 800502a:	bf00      	nop
 800502c:	e7fd      	b.n	800502a <xTaskGenericNotifyFromISR+0x186>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800502e:	4b24      	ldr	r3, [pc, #144]	@ (80050c0 <xTaskGenericNotifyFromISR+0x21c>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d120      	bne.n	8005078 <xTaskGenericNotifyFromISR+0x1d4>
                {
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005036:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005038:	3304      	adds	r3, #4
 800503a:	4618      	mov	r0, r3
 800503c:	f7fe faca 	bl	80035d4 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8005040:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005042:	4618      	mov	r0, r3
 8005044:	f002 faee 	bl	8007624 <SEGGER_SYSVIEW_OnTaskStartReady>
 8005048:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800504a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800504c:	2201      	movs	r2, #1
 800504e:	409a      	lsls	r2, r3
 8005050:	4b1c      	ldr	r3, [pc, #112]	@ (80050c4 <xTaskGenericNotifyFromISR+0x220>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4313      	orrs	r3, r2
 8005056:	4a1b      	ldr	r2, [pc, #108]	@ (80050c4 <xTaskGenericNotifyFromISR+0x220>)
 8005058:	6013      	str	r3, [r2, #0]
 800505a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800505c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800505e:	4613      	mov	r3, r2
 8005060:	009b      	lsls	r3, r3, #2
 8005062:	4413      	add	r3, r2
 8005064:	009b      	lsls	r3, r3, #2
 8005066:	4a18      	ldr	r2, [pc, #96]	@ (80050c8 <xTaskGenericNotifyFromISR+0x224>)
 8005068:	441a      	add	r2, r3
 800506a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800506c:	3304      	adds	r3, #4
 800506e:	4619      	mov	r1, r3
 8005070:	4610      	mov	r0, r2
 8005072:	f7fe fa52 	bl	800351a <vListInsertEnd>
 8005076:	e005      	b.n	8005084 <xTaskGenericNotifyFromISR+0x1e0>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8005078:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800507a:	3318      	adds	r3, #24
 800507c:	4619      	mov	r1, r3
 800507e:	4813      	ldr	r0, [pc, #76]	@ (80050cc <xTaskGenericNotifyFromISR+0x228>)
 8005080:	f7fe fa4b 	bl	800351a <vListInsertEnd>
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005084:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005086:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005088:	4b11      	ldr	r3, [pc, #68]	@ (80050d0 <xTaskGenericNotifyFromISR+0x22c>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800508e:	429a      	cmp	r2, r3
 8005090:	d908      	bls.n	80050a4 <xTaskGenericNotifyFromISR+0x200>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 8005092:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005094:	2b00      	cmp	r3, #0
 8005096:	d002      	beq.n	800509e <xTaskGenericNotifyFromISR+0x1fa>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 8005098:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800509a:	2201      	movs	r2, #1
 800509c:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter to an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 800509e:	4b0d      	ldr	r3, [pc, #52]	@ (80050d4 <xTaskGenericNotifyFromISR+0x230>)
 80050a0:	2201      	movs	r2, #1
 80050a2:	601a      	str	r2, [r3, #0]
 80050a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050a6:	617b      	str	r3, [r7, #20]
        __asm volatile
 80050a8:	697b      	ldr	r3, [r7, #20]
 80050aa:	f383 8811 	msr	BASEPRI, r3
    }
 80050ae:	bf00      	nop
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

        return xReturn;
 80050b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
    }
 80050b2:	4618      	mov	r0, r3
 80050b4:	3740      	adds	r7, #64	@ 0x40
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bd80      	pop	{r7, pc}
 80050ba:	bf00      	nop
 80050bc:	200004a8 	.word	0x200004a8
 80050c0:	200004cc 	.word	0x200004cc
 80050c4:	200004ac 	.word	0x200004ac
 80050c8:	200003d0 	.word	0x200003d0
 80050cc:	20000464 	.word	0x20000464
 80050d0:	200003cc 	.word	0x200003cc
 80050d4:	200004b8 	.word	0x200004b8

080050d8 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b084      	sub	sp, #16
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
 80050e0:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80050e2:	4b32      	ldr	r3, [pc, #200]	@ (80051ac <prvAddCurrentTaskToDelayedList+0xd4>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80050e8:	4b31      	ldr	r3, [pc, #196]	@ (80051b0 <prvAddCurrentTaskToDelayedList+0xd8>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	3304      	adds	r3, #4
 80050ee:	4618      	mov	r0, r3
 80050f0:	f7fe fa70 	bl	80035d4 <uxListRemove>
 80050f4:	4603      	mov	r3, r0
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d10b      	bne.n	8005112 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80050fa:	4b2d      	ldr	r3, [pc, #180]	@ (80051b0 <prvAddCurrentTaskToDelayedList+0xd8>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005100:	2201      	movs	r2, #1
 8005102:	fa02 f303 	lsl.w	r3, r2, r3
 8005106:	43da      	mvns	r2, r3
 8005108:	4b2a      	ldr	r3, [pc, #168]	@ (80051b4 <prvAddCurrentTaskToDelayedList+0xdc>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4013      	ands	r3, r2
 800510e:	4a29      	ldr	r2, [pc, #164]	@ (80051b4 <prvAddCurrentTaskToDelayedList+0xdc>)
 8005110:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005118:	d110      	bne.n	800513c <prvAddCurrentTaskToDelayedList+0x64>
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d00d      	beq.n	800513c <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8005120:	4b23      	ldr	r3, [pc, #140]	@ (80051b0 <prvAddCurrentTaskToDelayedList+0xd8>)
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	211b      	movs	r1, #27
 8005126:	4618      	mov	r0, r3
 8005128:	f002 fabe 	bl	80076a8 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800512c:	4b20      	ldr	r3, [pc, #128]	@ (80051b0 <prvAddCurrentTaskToDelayedList+0xd8>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	3304      	adds	r3, #4
 8005132:	4619      	mov	r1, r3
 8005134:	4820      	ldr	r0, [pc, #128]	@ (80051b8 <prvAddCurrentTaskToDelayedList+0xe0>)
 8005136:	f7fe f9f0 	bl	800351a <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 800513a:	e032      	b.n	80051a2 <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 800513c:	68fa      	ldr	r2, [r7, #12]
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	4413      	add	r3, r2
 8005142:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005144:	4b1a      	ldr	r3, [pc, #104]	@ (80051b0 <prvAddCurrentTaskToDelayedList+0xd8>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	68ba      	ldr	r2, [r7, #8]
 800514a:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 800514c:	68ba      	ldr	r2, [r7, #8]
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	429a      	cmp	r2, r3
 8005152:	d20f      	bcs.n	8005174 <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8005154:	4b16      	ldr	r3, [pc, #88]	@ (80051b0 <prvAddCurrentTaskToDelayedList+0xd8>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	2104      	movs	r1, #4
 800515a:	4618      	mov	r0, r3
 800515c:	f002 faa4 	bl	80076a8 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005160:	4b16      	ldr	r3, [pc, #88]	@ (80051bc <prvAddCurrentTaskToDelayedList+0xe4>)
 8005162:	681a      	ldr	r2, [r3, #0]
 8005164:	4b12      	ldr	r3, [pc, #72]	@ (80051b0 <prvAddCurrentTaskToDelayedList+0xd8>)
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	3304      	adds	r3, #4
 800516a:	4619      	mov	r1, r3
 800516c:	4610      	mov	r0, r2
 800516e:	f7fe f9f8 	bl	8003562 <vListInsert>
}
 8005172:	e016      	b.n	80051a2 <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 8005174:	4b0e      	ldr	r3, [pc, #56]	@ (80051b0 <prvAddCurrentTaskToDelayedList+0xd8>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	2104      	movs	r1, #4
 800517a:	4618      	mov	r0, r3
 800517c:	f002 fa94 	bl	80076a8 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005180:	4b0f      	ldr	r3, [pc, #60]	@ (80051c0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8005182:	681a      	ldr	r2, [r3, #0]
 8005184:	4b0a      	ldr	r3, [pc, #40]	@ (80051b0 <prvAddCurrentTaskToDelayedList+0xd8>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	3304      	adds	r3, #4
 800518a:	4619      	mov	r1, r3
 800518c:	4610      	mov	r0, r2
 800518e:	f7fe f9e8 	bl	8003562 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8005192:	4b0c      	ldr	r3, [pc, #48]	@ (80051c4 <prvAddCurrentTaskToDelayedList+0xec>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	68ba      	ldr	r2, [r7, #8]
 8005198:	429a      	cmp	r2, r3
 800519a:	d202      	bcs.n	80051a2 <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 800519c:	4a09      	ldr	r2, [pc, #36]	@ (80051c4 <prvAddCurrentTaskToDelayedList+0xec>)
 800519e:	68bb      	ldr	r3, [r7, #8]
 80051a0:	6013      	str	r3, [r2, #0]
}
 80051a2:	bf00      	nop
 80051a4:	3710      	adds	r7, #16
 80051a6:	46bd      	mov	sp, r7
 80051a8:	bd80      	pop	{r7, pc}
 80051aa:	bf00      	nop
 80051ac:	200004a8 	.word	0x200004a8
 80051b0:	200003cc 	.word	0x200003cc
 80051b4:	200004ac 	.word	0x200004ac
 80051b8:	20000490 	.word	0x20000490
 80051bc:	20000460 	.word	0x20000460
 80051c0:	2000045c 	.word	0x2000045c
 80051c4:	200004c4 	.word	0x200004c4

080051c8 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b084      	sub	sp, #16
 80051cc:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 80051ce:	2300      	movs	r3, #0
 80051d0:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80051d2:	f000 fb3f 	bl	8005854 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80051d6:	4b12      	ldr	r3, [pc, #72]	@ (8005220 <xTimerCreateTimerTask+0x58>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d00b      	beq.n	80051f6 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 80051de:	4b11      	ldr	r3, [pc, #68]	@ (8005224 <xTimerCreateTimerTask+0x5c>)
 80051e0:	9301      	str	r3, [sp, #4]
 80051e2:	2302      	movs	r3, #2
 80051e4:	9300      	str	r3, [sp, #0]
 80051e6:	2300      	movs	r3, #0
 80051e8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80051ec:	490e      	ldr	r1, [pc, #56]	@ (8005228 <xTimerCreateTimerTask+0x60>)
 80051ee:	480f      	ldr	r0, [pc, #60]	@ (800522c <xTimerCreateTimerTask+0x64>)
 80051f0:	f7fe ff86 	bl	8004100 <xTaskCreate>
 80051f4:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d10b      	bne.n	8005214 <xTimerCreateTimerTask+0x4c>
        __asm volatile
 80051fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005200:	f383 8811 	msr	BASEPRI, r3
 8005204:	f3bf 8f6f 	isb	sy
 8005208:	f3bf 8f4f 	dsb	sy
 800520c:	603b      	str	r3, [r7, #0]
    }
 800520e:	bf00      	nop
 8005210:	bf00      	nop
 8005212:	e7fd      	b.n	8005210 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8005214:	687b      	ldr	r3, [r7, #4]
    }
 8005216:	4618      	mov	r0, r3
 8005218:	3708      	adds	r7, #8
 800521a:	46bd      	mov	sp, r7
 800521c:	bd80      	pop	{r7, pc}
 800521e:	bf00      	nop
 8005220:	20000500 	.word	0x20000500
 8005224:	20000504 	.word	0x20000504
 8005228:	080083d0 	.word	0x080083d0
 800522c:	08005425 	.word	0x08005425

08005230 <xTimerCreate>:
        TimerHandle_t xTimerCreate( const char * const pcTimerName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                                    const TickType_t xTimerPeriodInTicks,
                                    const UBaseType_t uxAutoReload,
                                    void * const pvTimerID,
                                    TimerCallbackFunction_t pxCallbackFunction )
        {
 8005230:	b580      	push	{r7, lr}
 8005232:	b088      	sub	sp, #32
 8005234:	af02      	add	r7, sp, #8
 8005236:	60f8      	str	r0, [r7, #12]
 8005238:	60b9      	str	r1, [r7, #8]
 800523a:	607a      	str	r2, [r7, #4]
 800523c:	603b      	str	r3, [r7, #0]
            Timer_t * pxNewTimer;

            pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800523e:	202c      	movs	r0, #44	@ 0x2c
 8005240:	f000 fe26 	bl	8005e90 <pvPortMalloc>
 8005244:	6178      	str	r0, [r7, #20]

            if( pxNewTimer != NULL )
 8005246:	697b      	ldr	r3, [r7, #20]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d00d      	beq.n	8005268 <xTimerCreate+0x38>
            {
                /* Status is thus far zero as the timer is not created statically
                 * and has not been started.  The auto-reload bit may get set in
                 * prvInitialiseNewTimer. */
                pxNewTimer->ucStatus = 0x00;
 800524c:	697b      	ldr	r3, [r7, #20]
 800524e:	2200      	movs	r2, #0
 8005250:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8005254:	697b      	ldr	r3, [r7, #20]
 8005256:	9301      	str	r3, [sp, #4]
 8005258:	6a3b      	ldr	r3, [r7, #32]
 800525a:	9300      	str	r3, [sp, #0]
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	687a      	ldr	r2, [r7, #4]
 8005260:	68b9      	ldr	r1, [r7, #8]
 8005262:	68f8      	ldr	r0, [r7, #12]
 8005264:	f000 f805 	bl	8005272 <prvInitialiseNewTimer>
            }

            return pxNewTimer;
 8005268:	697b      	ldr	r3, [r7, #20]
        }
 800526a:	4618      	mov	r0, r3
 800526c:	3718      	adds	r7, #24
 800526e:	46bd      	mov	sp, r7
 8005270:	bd80      	pop	{r7, pc}

08005272 <prvInitialiseNewTimer>:
                                       const TickType_t xTimerPeriodInTicks,
                                       const UBaseType_t uxAutoReload,
                                       void * const pvTimerID,
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer )
    {
 8005272:	b580      	push	{r7, lr}
 8005274:	b086      	sub	sp, #24
 8005276:	af00      	add	r7, sp, #0
 8005278:	60f8      	str	r0, [r7, #12]
 800527a:	60b9      	str	r1, [r7, #8]
 800527c:	607a      	str	r2, [r7, #4]
 800527e:	603b      	str	r3, [r7, #0]
        /* 0 is not a valid value for xTimerPeriodInTicks. */
        configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8005280:	68bb      	ldr	r3, [r7, #8]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d10b      	bne.n	800529e <prvInitialiseNewTimer+0x2c>
        __asm volatile
 8005286:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800528a:	f383 8811 	msr	BASEPRI, r3
 800528e:	f3bf 8f6f 	isb	sy
 8005292:	f3bf 8f4f 	dsb	sy
 8005296:	617b      	str	r3, [r7, #20]
    }
 8005298:	bf00      	nop
 800529a:	bf00      	nop
 800529c:	e7fd      	b.n	800529a <prvInitialiseNewTimer+0x28>

        if( pxNewTimer != NULL )
 800529e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d01e      	beq.n	80052e2 <prvInitialiseNewTimer+0x70>
        {
            /* Ensure the infrastructure used by the timer service task has been
             * created/initialised. */
            prvCheckForValidListAndQueue();
 80052a4:	f000 fad6 	bl	8005854 <prvCheckForValidListAndQueue>

            /* Initialise the timer structure members using the function
             * parameters. */
            pxNewTimer->pcTimerName = pcTimerName;
 80052a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052aa:	68fa      	ldr	r2, [r7, #12]
 80052ac:	601a      	str	r2, [r3, #0]
            pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 80052ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052b0:	68ba      	ldr	r2, [r7, #8]
 80052b2:	619a      	str	r2, [r3, #24]
            pxNewTimer->pvTimerID = pvTimerID;
 80052b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052b6:	683a      	ldr	r2, [r7, #0]
 80052b8:	61da      	str	r2, [r3, #28]
            pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80052ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052bc:	6a3a      	ldr	r2, [r7, #32]
 80052be:	621a      	str	r2, [r3, #32]
            vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80052c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052c2:	3304      	adds	r3, #4
 80052c4:	4618      	mov	r0, r3
 80052c6:	f7fe f91b 	bl	8003500 <vListInitialiseItem>

            if( uxAutoReload != pdFALSE )
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d008      	beq.n	80052e2 <prvInitialiseNewTimer+0x70>
            {
                pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 80052d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052d2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80052d6:	f043 0304 	orr.w	r3, r3, #4
 80052da:	b2da      	uxtb	r2, r3
 80052dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052de:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
            }

            traceTIMER_CREATE( pxNewTimer );
        }
    }
 80052e2:	bf00      	nop
 80052e4:	3718      	adds	r7, #24
 80052e6:	46bd      	mov	sp, r7
 80052e8:	bd80      	pop	{r7, pc}
	...

080052ec <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b08a      	sub	sp, #40	@ 0x28
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	60f8      	str	r0, [r7, #12]
 80052f4:	60b9      	str	r1, [r7, #8]
 80052f6:	607a      	str	r2, [r7, #4]
 80052f8:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 80052fa:	2300      	movs	r3, #0
 80052fc:	627b      	str	r3, [r7, #36]	@ 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d10b      	bne.n	800531c <xTimerGenericCommand+0x30>
        __asm volatile
 8005304:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005308:	f383 8811 	msr	BASEPRI, r3
 800530c:	f3bf 8f6f 	isb	sy
 8005310:	f3bf 8f4f 	dsb	sy
 8005314:	623b      	str	r3, [r7, #32]
    }
 8005316:	bf00      	nop
 8005318:	bf00      	nop
 800531a:	e7fd      	b.n	8005318 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 800531c:	4b19      	ldr	r3, [pc, #100]	@ (8005384 <xTimerGenericCommand+0x98>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d02a      	beq.n	800537a <xTimerGenericCommand+0x8e>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	2b05      	cmp	r3, #5
 8005334:	dc18      	bgt.n	8005368 <xTimerGenericCommand+0x7c>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005336:	f7ff fc8b 	bl	8004c50 <xTaskGetSchedulerState>
 800533a:	4603      	mov	r3, r0
 800533c:	2b02      	cmp	r3, #2
 800533e:	d109      	bne.n	8005354 <xTimerGenericCommand+0x68>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005340:	4b10      	ldr	r3, [pc, #64]	@ (8005384 <xTimerGenericCommand+0x98>)
 8005342:	6818      	ldr	r0, [r3, #0]
 8005344:	f107 0114 	add.w	r1, r7, #20
 8005348:	2300      	movs	r3, #0
 800534a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800534c:	f7fe fa62 	bl	8003814 <xQueueGenericSend>
 8005350:	6278      	str	r0, [r7, #36]	@ 0x24
 8005352:	e012      	b.n	800537a <xTimerGenericCommand+0x8e>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005354:	4b0b      	ldr	r3, [pc, #44]	@ (8005384 <xTimerGenericCommand+0x98>)
 8005356:	6818      	ldr	r0, [r3, #0]
 8005358:	f107 0114 	add.w	r1, r7, #20
 800535c:	2300      	movs	r3, #0
 800535e:	2200      	movs	r2, #0
 8005360:	f7fe fa58 	bl	8003814 <xQueueGenericSend>
 8005364:	6278      	str	r0, [r7, #36]	@ 0x24
 8005366:	e008      	b.n	800537a <xTimerGenericCommand+0x8e>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005368:	4b06      	ldr	r3, [pc, #24]	@ (8005384 <xTimerGenericCommand+0x98>)
 800536a:	6818      	ldr	r0, [r3, #0]
 800536c:	f107 0114 	add.w	r1, r7, #20
 8005370:	2300      	movs	r3, #0
 8005372:	683a      	ldr	r2, [r7, #0]
 8005374:	f7fe fb78 	bl	8003a68 <xQueueGenericSendFromISR>
 8005378:	6278      	str	r0, [r7, #36]	@ 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800537a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 800537c:	4618      	mov	r0, r3
 800537e:	3728      	adds	r7, #40	@ 0x28
 8005380:	46bd      	mov	sp, r7
 8005382:	bd80      	pop	{r7, pc}
 8005384:	20000500 	.word	0x20000500

08005388 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8005388:	b580      	push	{r7, lr}
 800538a:	b088      	sub	sp, #32
 800538c:	af02      	add	r7, sp, #8
 800538e:	6078      	str	r0, [r7, #4]
 8005390:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005392:	4b23      	ldr	r3, [pc, #140]	@ (8005420 <prvProcessExpiredTimer+0x98>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	68db      	ldr	r3, [r3, #12]
 8005398:	68db      	ldr	r3, [r3, #12]
 800539a:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800539c:	697b      	ldr	r3, [r7, #20]
 800539e:	3304      	adds	r3, #4
 80053a0:	4618      	mov	r0, r3
 80053a2:	f7fe f917 	bl	80035d4 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80053a6:	697b      	ldr	r3, [r7, #20]
 80053a8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80053ac:	f003 0304 	and.w	r3, r3, #4
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d023      	beq.n	80053fc <prvProcessExpiredTimer+0x74>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80053b4:	697b      	ldr	r3, [r7, #20]
 80053b6:	699a      	ldr	r2, [r3, #24]
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	18d1      	adds	r1, r2, r3
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	683a      	ldr	r2, [r7, #0]
 80053c0:	6978      	ldr	r0, [r7, #20]
 80053c2:	f000 f8d5 	bl	8005570 <prvInsertTimerInActiveList>
 80053c6:	4603      	mov	r3, r0
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d020      	beq.n	800540e <prvProcessExpiredTimer+0x86>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80053cc:	2300      	movs	r3, #0
 80053ce:	9300      	str	r3, [sp, #0]
 80053d0:	2300      	movs	r3, #0
 80053d2:	687a      	ldr	r2, [r7, #4]
 80053d4:	2100      	movs	r1, #0
 80053d6:	6978      	ldr	r0, [r7, #20]
 80053d8:	f7ff ff88 	bl	80052ec <xTimerGenericCommand>
 80053dc:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 80053de:	693b      	ldr	r3, [r7, #16]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d114      	bne.n	800540e <prvProcessExpiredTimer+0x86>
        __asm volatile
 80053e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053e8:	f383 8811 	msr	BASEPRI, r3
 80053ec:	f3bf 8f6f 	isb	sy
 80053f0:	f3bf 8f4f 	dsb	sy
 80053f4:	60fb      	str	r3, [r7, #12]
    }
 80053f6:	bf00      	nop
 80053f8:	bf00      	nop
 80053fa:	e7fd      	b.n	80053f8 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80053fc:	697b      	ldr	r3, [r7, #20]
 80053fe:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005402:	f023 0301 	bic.w	r3, r3, #1
 8005406:	b2da      	uxtb	r2, r3
 8005408:	697b      	ldr	r3, [r7, #20]
 800540a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800540e:	697b      	ldr	r3, [r7, #20]
 8005410:	6a1b      	ldr	r3, [r3, #32]
 8005412:	6978      	ldr	r0, [r7, #20]
 8005414:	4798      	blx	r3
    }
 8005416:	bf00      	nop
 8005418:	3718      	adds	r7, #24
 800541a:	46bd      	mov	sp, r7
 800541c:	bd80      	pop	{r7, pc}
 800541e:	bf00      	nop
 8005420:	200004f8 	.word	0x200004f8

08005424 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8005424:	b580      	push	{r7, lr}
 8005426:	b084      	sub	sp, #16
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800542c:	f107 0308 	add.w	r3, r7, #8
 8005430:	4618      	mov	r0, r3
 8005432:	f000 f859 	bl	80054e8 <prvGetNextExpireTime>
 8005436:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005438:	68bb      	ldr	r3, [r7, #8]
 800543a:	4619      	mov	r1, r3
 800543c:	68f8      	ldr	r0, [r7, #12]
 800543e:	f000 f805 	bl	800544c <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8005442:	f000 f8d7 	bl	80055f4 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005446:	bf00      	nop
 8005448:	e7f0      	b.n	800542c <prvTimerTask+0x8>
	...

0800544c <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 800544c:	b580      	push	{r7, lr}
 800544e:	b084      	sub	sp, #16
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
 8005454:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8005456:	f7ff f819 	bl	800448c <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800545a:	f107 0308 	add.w	r3, r7, #8
 800545e:	4618      	mov	r0, r3
 8005460:	f000 f866 	bl	8005530 <prvSampleTimeNow>
 8005464:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d130      	bne.n	80054ce <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d10a      	bne.n	8005488 <prvProcessTimerOrBlockTask+0x3c>
 8005472:	687a      	ldr	r2, [r7, #4]
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	429a      	cmp	r2, r3
 8005478:	d806      	bhi.n	8005488 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800547a:	f7ff f815 	bl	80044a8 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800547e:	68f9      	ldr	r1, [r7, #12]
 8005480:	6878      	ldr	r0, [r7, #4]
 8005482:	f7ff ff81 	bl	8005388 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8005486:	e024      	b.n	80054d2 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d008      	beq.n	80054a0 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800548e:	4b13      	ldr	r3, [pc, #76]	@ (80054dc <prvProcessTimerOrBlockTask+0x90>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d101      	bne.n	800549c <prvProcessTimerOrBlockTask+0x50>
 8005498:	2301      	movs	r3, #1
 800549a:	e000      	b.n	800549e <prvProcessTimerOrBlockTask+0x52>
 800549c:	2300      	movs	r3, #0
 800549e:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80054a0:	4b0f      	ldr	r3, [pc, #60]	@ (80054e0 <prvProcessTimerOrBlockTask+0x94>)
 80054a2:	6818      	ldr	r0, [r3, #0]
 80054a4:	687a      	ldr	r2, [r7, #4]
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	1ad3      	subs	r3, r2, r3
 80054aa:	683a      	ldr	r2, [r7, #0]
 80054ac:	4619      	mov	r1, r3
 80054ae:	f7fe fdf3 	bl	8004098 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80054b2:	f7fe fff9 	bl	80044a8 <xTaskResumeAll>
 80054b6:	4603      	mov	r3, r0
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d10a      	bne.n	80054d2 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 80054bc:	4b09      	ldr	r3, [pc, #36]	@ (80054e4 <prvProcessTimerOrBlockTask+0x98>)
 80054be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80054c2:	601a      	str	r2, [r3, #0]
 80054c4:	f3bf 8f4f 	dsb	sy
 80054c8:	f3bf 8f6f 	isb	sy
    }
 80054cc:	e001      	b.n	80054d2 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 80054ce:	f7fe ffeb 	bl	80044a8 <xTaskResumeAll>
    }
 80054d2:	bf00      	nop
 80054d4:	3710      	adds	r7, #16
 80054d6:	46bd      	mov	sp, r7
 80054d8:	bd80      	pop	{r7, pc}
 80054da:	bf00      	nop
 80054dc:	200004fc 	.word	0x200004fc
 80054e0:	20000500 	.word	0x20000500
 80054e4:	e000ed04 	.word	0xe000ed04

080054e8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 80054e8:	b480      	push	{r7}
 80054ea:	b085      	sub	sp, #20
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80054f0:	4b0e      	ldr	r3, [pc, #56]	@ (800552c <prvGetNextExpireTime+0x44>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d101      	bne.n	80054fe <prvGetNextExpireTime+0x16>
 80054fa:	2201      	movs	r2, #1
 80054fc:	e000      	b.n	8005500 <prvGetNextExpireTime+0x18>
 80054fe:	2200      	movs	r2, #0
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d105      	bne.n	8005518 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800550c:	4b07      	ldr	r3, [pc, #28]	@ (800552c <prvGetNextExpireTime+0x44>)
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	68db      	ldr	r3, [r3, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	60fb      	str	r3, [r7, #12]
 8005516:	e001      	b.n	800551c <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8005518:	2300      	movs	r3, #0
 800551a:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 800551c:	68fb      	ldr	r3, [r7, #12]
    }
 800551e:	4618      	mov	r0, r3
 8005520:	3714      	adds	r7, #20
 8005522:	46bd      	mov	sp, r7
 8005524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005528:	4770      	bx	lr
 800552a:	bf00      	nop
 800552c:	200004f8 	.word	0x200004f8

08005530 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8005530:	b580      	push	{r7, lr}
 8005532:	b084      	sub	sp, #16
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8005538:	f7ff f858 	bl	80045ec <xTaskGetTickCount>
 800553c:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800553e:	4b0b      	ldr	r3, [pc, #44]	@ (800556c <prvSampleTimeNow+0x3c>)
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	68fa      	ldr	r2, [r7, #12]
 8005544:	429a      	cmp	r2, r3
 8005546:	d205      	bcs.n	8005554 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8005548:	f000 f91e 	bl	8005788 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2201      	movs	r2, #1
 8005550:	601a      	str	r2, [r3, #0]
 8005552:	e002      	b.n	800555a <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2200      	movs	r2, #0
 8005558:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800555a:	4a04      	ldr	r2, [pc, #16]	@ (800556c <prvSampleTimeNow+0x3c>)
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8005560:	68fb      	ldr	r3, [r7, #12]
    }
 8005562:	4618      	mov	r0, r3
 8005564:	3710      	adds	r7, #16
 8005566:	46bd      	mov	sp, r7
 8005568:	bd80      	pop	{r7, pc}
 800556a:	bf00      	nop
 800556c:	20000508 	.word	0x20000508

08005570 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8005570:	b580      	push	{r7, lr}
 8005572:	b086      	sub	sp, #24
 8005574:	af00      	add	r7, sp, #0
 8005576:	60f8      	str	r0, [r7, #12]
 8005578:	60b9      	str	r1, [r7, #8]
 800557a:	607a      	str	r2, [r7, #4]
 800557c:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800557e:	2300      	movs	r3, #0
 8005580:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	68ba      	ldr	r2, [r7, #8]
 8005586:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	68fa      	ldr	r2, [r7, #12]
 800558c:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800558e:	68ba      	ldr	r2, [r7, #8]
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	429a      	cmp	r2, r3
 8005594:	d812      	bhi.n	80055bc <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005596:	687a      	ldr	r2, [r7, #4]
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	1ad2      	subs	r2, r2, r3
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	699b      	ldr	r3, [r3, #24]
 80055a0:	429a      	cmp	r2, r3
 80055a2:	d302      	bcc.n	80055aa <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 80055a4:	2301      	movs	r3, #1
 80055a6:	617b      	str	r3, [r7, #20]
 80055a8:	e01b      	b.n	80055e2 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80055aa:	4b10      	ldr	r3, [pc, #64]	@ (80055ec <prvInsertTimerInActiveList+0x7c>)
 80055ac:	681a      	ldr	r2, [r3, #0]
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	3304      	adds	r3, #4
 80055b2:	4619      	mov	r1, r3
 80055b4:	4610      	mov	r0, r2
 80055b6:	f7fd ffd4 	bl	8003562 <vListInsert>
 80055ba:	e012      	b.n	80055e2 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80055bc:	687a      	ldr	r2, [r7, #4]
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	429a      	cmp	r2, r3
 80055c2:	d206      	bcs.n	80055d2 <prvInsertTimerInActiveList+0x62>
 80055c4:	68ba      	ldr	r2, [r7, #8]
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	429a      	cmp	r2, r3
 80055ca:	d302      	bcc.n	80055d2 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 80055cc:	2301      	movs	r3, #1
 80055ce:	617b      	str	r3, [r7, #20]
 80055d0:	e007      	b.n	80055e2 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80055d2:	4b07      	ldr	r3, [pc, #28]	@ (80055f0 <prvInsertTimerInActiveList+0x80>)
 80055d4:	681a      	ldr	r2, [r3, #0]
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	3304      	adds	r3, #4
 80055da:	4619      	mov	r1, r3
 80055dc:	4610      	mov	r0, r2
 80055de:	f7fd ffc0 	bl	8003562 <vListInsert>
            }
        }

        return xProcessTimerNow;
 80055e2:	697b      	ldr	r3, [r7, #20]
    }
 80055e4:	4618      	mov	r0, r3
 80055e6:	3718      	adds	r7, #24
 80055e8:	46bd      	mov	sp, r7
 80055ea:	bd80      	pop	{r7, pc}
 80055ec:	200004fc 	.word	0x200004fc
 80055f0:	200004f8 	.word	0x200004f8

080055f4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b08c      	sub	sp, #48	@ 0x30
 80055f8:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80055fa:	e0b2      	b.n	8005762 <prvProcessReceivedCommands+0x16e>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	f2c0 80af 	blt.w	8005762 <prvProcessReceivedCommands+0x16e>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005604:	693b      	ldr	r3, [r7, #16]
 8005606:	627b      	str	r3, [r7, #36]	@ 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005608:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800560a:	695b      	ldr	r3, [r3, #20]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d004      	beq.n	800561a <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005610:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005612:	3304      	adds	r3, #4
 8005614:	4618      	mov	r0, r3
 8005616:	f7fd ffdd 	bl	80035d4 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800561a:	1d3b      	adds	r3, r7, #4
 800561c:	4618      	mov	r0, r3
 800561e:	f7ff ff87 	bl	8005530 <prvSampleTimeNow>
 8005622:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	2b09      	cmp	r3, #9
 8005628:	f200 8098 	bhi.w	800575c <prvProcessReceivedCommands+0x168>
 800562c:	a201      	add	r2, pc, #4	@ (adr r2, 8005634 <prvProcessReceivedCommands+0x40>)
 800562e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005632:	bf00      	nop
 8005634:	0800565d 	.word	0x0800565d
 8005638:	0800565d 	.word	0x0800565d
 800563c:	0800565d 	.word	0x0800565d
 8005640:	080056d3 	.word	0x080056d3
 8005644:	080056e7 	.word	0x080056e7
 8005648:	08005733 	.word	0x08005733
 800564c:	0800565d 	.word	0x0800565d
 8005650:	0800565d 	.word	0x0800565d
 8005654:	080056d3 	.word	0x080056d3
 8005658:	080056e7 	.word	0x080056e7
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800565c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800565e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005662:	f043 0301 	orr.w	r3, r3, #1
 8005666:	b2da      	uxtb	r2, r3
 8005668:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800566a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800566e:	68fa      	ldr	r2, [r7, #12]
 8005670:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005672:	699b      	ldr	r3, [r3, #24]
 8005674:	18d1      	adds	r1, r2, r3
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	6a3a      	ldr	r2, [r7, #32]
 800567a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800567c:	f7ff ff78 	bl	8005570 <prvInsertTimerInActiveList>
 8005680:	4603      	mov	r3, r0
 8005682:	2b00      	cmp	r3, #0
 8005684:	d06c      	beq.n	8005760 <prvProcessReceivedCommands+0x16c>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005688:	6a1b      	ldr	r3, [r3, #32]
 800568a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800568c:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800568e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005690:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005694:	f003 0304 	and.w	r3, r3, #4
 8005698:	2b00      	cmp	r3, #0
 800569a:	d061      	beq.n	8005760 <prvProcessReceivedCommands+0x16c>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800569c:	68fa      	ldr	r2, [r7, #12]
 800569e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056a0:	699b      	ldr	r3, [r3, #24]
 80056a2:	441a      	add	r2, r3
 80056a4:	2300      	movs	r3, #0
 80056a6:	9300      	str	r3, [sp, #0]
 80056a8:	2300      	movs	r3, #0
 80056aa:	2100      	movs	r1, #0
 80056ac:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80056ae:	f7ff fe1d 	bl	80052ec <xTimerGenericCommand>
 80056b2:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 80056b4:	69fb      	ldr	r3, [r7, #28]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d152      	bne.n	8005760 <prvProcessReceivedCommands+0x16c>
        __asm volatile
 80056ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056be:	f383 8811 	msr	BASEPRI, r3
 80056c2:	f3bf 8f6f 	isb	sy
 80056c6:	f3bf 8f4f 	dsb	sy
 80056ca:	61bb      	str	r3, [r7, #24]
    }
 80056cc:	bf00      	nop
 80056ce:	bf00      	nop
 80056d0:	e7fd      	b.n	80056ce <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80056d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056d4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80056d8:	f023 0301 	bic.w	r3, r3, #1
 80056dc:	b2da      	uxtb	r2, r3
 80056de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056e0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 80056e4:	e03d      	b.n	8005762 <prvProcessReceivedCommands+0x16e>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80056e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056e8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80056ec:	f043 0301 	orr.w	r3, r3, #1
 80056f0:	b2da      	uxtb	r2, r3
 80056f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056f4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80056f8:	68fa      	ldr	r2, [r7, #12]
 80056fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056fc:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80056fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005700:	699b      	ldr	r3, [r3, #24]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d10b      	bne.n	800571e <prvProcessReceivedCommands+0x12a>
        __asm volatile
 8005706:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800570a:	f383 8811 	msr	BASEPRI, r3
 800570e:	f3bf 8f6f 	isb	sy
 8005712:	f3bf 8f4f 	dsb	sy
 8005716:	617b      	str	r3, [r7, #20]
    }
 8005718:	bf00      	nop
 800571a:	bf00      	nop
 800571c:	e7fd      	b.n	800571a <prvProcessReceivedCommands+0x126>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800571e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005720:	699a      	ldr	r2, [r3, #24]
 8005722:	6a3b      	ldr	r3, [r7, #32]
 8005724:	18d1      	adds	r1, r2, r3
 8005726:	6a3b      	ldr	r3, [r7, #32]
 8005728:	6a3a      	ldr	r2, [r7, #32]
 800572a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800572c:	f7ff ff20 	bl	8005570 <prvInsertTimerInActiveList>
                        break;
 8005730:	e017      	b.n	8005762 <prvProcessReceivedCommands+0x16e>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005734:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005738:	f003 0302 	and.w	r3, r3, #2
 800573c:	2b00      	cmp	r3, #0
 800573e:	d103      	bne.n	8005748 <prvProcessReceivedCommands+0x154>
                                {
                                    vPortFree( pxTimer );
 8005740:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005742:	f000 fc87 	bl	8006054 <vPortFree>
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8005746:	e00c      	b.n	8005762 <prvProcessReceivedCommands+0x16e>
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005748:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800574a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800574e:	f023 0301 	bic.w	r3, r3, #1
 8005752:	b2da      	uxtb	r2, r3
 8005754:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005756:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 800575a:	e002      	b.n	8005762 <prvProcessReceivedCommands+0x16e>

                    default:
                        /* Don't expect to get here. */
                        break;
 800575c:	bf00      	nop
 800575e:	e000      	b.n	8005762 <prvProcessReceivedCommands+0x16e>
                        break;
 8005760:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005762:	4b08      	ldr	r3, [pc, #32]	@ (8005784 <prvProcessReceivedCommands+0x190>)
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f107 0108 	add.w	r1, r7, #8
 800576a:	2200      	movs	r2, #0
 800576c:	4618      	mov	r0, r3
 800576e:	f7fe fa3d 	bl	8003bec <xQueueReceive>
 8005772:	4603      	mov	r3, r0
 8005774:	2b00      	cmp	r3, #0
 8005776:	f47f af41 	bne.w	80055fc <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 800577a:	bf00      	nop
 800577c:	bf00      	nop
 800577e:	3728      	adds	r7, #40	@ 0x28
 8005780:	46bd      	mov	sp, r7
 8005782:	bd80      	pop	{r7, pc}
 8005784:	20000500 	.word	0x20000500

08005788 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8005788:	b580      	push	{r7, lr}
 800578a:	b088      	sub	sp, #32
 800578c:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800578e:	e049      	b.n	8005824 <prvSwitchTimerLists+0x9c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005790:	4b2e      	ldr	r3, [pc, #184]	@ (800584c <prvSwitchTimerLists+0xc4>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	68db      	ldr	r3, [r3, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800579a:	4b2c      	ldr	r3, [pc, #176]	@ (800584c <prvSwitchTimerLists+0xc4>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	68db      	ldr	r3, [r3, #12]
 80057a0:	68db      	ldr	r3, [r3, #12]
 80057a2:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	3304      	adds	r3, #4
 80057a8:	4618      	mov	r0, r3
 80057aa:	f7fd ff13 	bl	80035d4 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	6a1b      	ldr	r3, [r3, #32]
 80057b2:	68f8      	ldr	r0, [r7, #12]
 80057b4:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80057bc:	f003 0304 	and.w	r3, r3, #4
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d02f      	beq.n	8005824 <prvSwitchTimerLists+0x9c>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	699b      	ldr	r3, [r3, #24]
 80057c8:	693a      	ldr	r2, [r7, #16]
 80057ca:	4413      	add	r3, r2
 80057cc:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 80057ce:	68ba      	ldr	r2, [r7, #8]
 80057d0:	693b      	ldr	r3, [r7, #16]
 80057d2:	429a      	cmp	r2, r3
 80057d4:	d90e      	bls.n	80057f4 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	68ba      	ldr	r2, [r7, #8]
 80057da:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	68fa      	ldr	r2, [r7, #12]
 80057e0:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80057e2:	4b1a      	ldr	r3, [pc, #104]	@ (800584c <prvSwitchTimerLists+0xc4>)
 80057e4:	681a      	ldr	r2, [r3, #0]
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	3304      	adds	r3, #4
 80057ea:	4619      	mov	r1, r3
 80057ec:	4610      	mov	r0, r2
 80057ee:	f7fd feb8 	bl	8003562 <vListInsert>
 80057f2:	e017      	b.n	8005824 <prvSwitchTimerLists+0x9c>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80057f4:	2300      	movs	r3, #0
 80057f6:	9300      	str	r3, [sp, #0]
 80057f8:	2300      	movs	r3, #0
 80057fa:	693a      	ldr	r2, [r7, #16]
 80057fc:	2100      	movs	r1, #0
 80057fe:	68f8      	ldr	r0, [r7, #12]
 8005800:	f7ff fd74 	bl	80052ec <xTimerGenericCommand>
 8005804:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d10b      	bne.n	8005824 <prvSwitchTimerLists+0x9c>
        __asm volatile
 800580c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005810:	f383 8811 	msr	BASEPRI, r3
 8005814:	f3bf 8f6f 	isb	sy
 8005818:	f3bf 8f4f 	dsb	sy
 800581c:	603b      	str	r3, [r7, #0]
    }
 800581e:	bf00      	nop
 8005820:	bf00      	nop
 8005822:	e7fd      	b.n	8005820 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005824:	4b09      	ldr	r3, [pc, #36]	@ (800584c <prvSwitchTimerLists+0xc4>)
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d1b0      	bne.n	8005790 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 800582e:	4b07      	ldr	r3, [pc, #28]	@ (800584c <prvSwitchTimerLists+0xc4>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8005834:	4b06      	ldr	r3, [pc, #24]	@ (8005850 <prvSwitchTimerLists+0xc8>)
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	4a04      	ldr	r2, [pc, #16]	@ (800584c <prvSwitchTimerLists+0xc4>)
 800583a:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 800583c:	4a04      	ldr	r2, [pc, #16]	@ (8005850 <prvSwitchTimerLists+0xc8>)
 800583e:	697b      	ldr	r3, [r7, #20]
 8005840:	6013      	str	r3, [r2, #0]
    }
 8005842:	bf00      	nop
 8005844:	3718      	adds	r7, #24
 8005846:	46bd      	mov	sp, r7
 8005848:	bd80      	pop	{r7, pc}
 800584a:	bf00      	nop
 800584c:	200004f8 	.word	0x200004f8
 8005850:	200004fc 	.word	0x200004fc

08005854 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8005854:	b580      	push	{r7, lr}
 8005856:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8005858:	f000 f9e8 	bl	8005c2c <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 800585c:	4b12      	ldr	r3, [pc, #72]	@ (80058a8 <prvCheckForValidListAndQueue+0x54>)
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d11d      	bne.n	80058a0 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8005864:	4811      	ldr	r0, [pc, #68]	@ (80058ac <prvCheckForValidListAndQueue+0x58>)
 8005866:	f7fd fe2b 	bl	80034c0 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800586a:	4811      	ldr	r0, [pc, #68]	@ (80058b0 <prvCheckForValidListAndQueue+0x5c>)
 800586c:	f7fd fe28 	bl	80034c0 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8005870:	4b10      	ldr	r3, [pc, #64]	@ (80058b4 <prvCheckForValidListAndQueue+0x60>)
 8005872:	4a0e      	ldr	r2, [pc, #56]	@ (80058ac <prvCheckForValidListAndQueue+0x58>)
 8005874:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8005876:	4b10      	ldr	r3, [pc, #64]	@ (80058b8 <prvCheckForValidListAndQueue+0x64>)
 8005878:	4a0d      	ldr	r2, [pc, #52]	@ (80058b0 <prvCheckForValidListAndQueue+0x5c>)
 800587a:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800587c:	2200      	movs	r2, #0
 800587e:	210c      	movs	r1, #12
 8005880:	200a      	movs	r0, #10
 8005882:	f7fd ff3b 	bl	80036fc <xQueueGenericCreate>
 8005886:	4603      	mov	r3, r0
 8005888:	4a07      	ldr	r2, [pc, #28]	@ (80058a8 <prvCheckForValidListAndQueue+0x54>)
 800588a:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 800588c:	4b06      	ldr	r3, [pc, #24]	@ (80058a8 <prvCheckForValidListAndQueue+0x54>)
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d005      	beq.n	80058a0 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005894:	4b04      	ldr	r3, [pc, #16]	@ (80058a8 <prvCheckForValidListAndQueue+0x54>)
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4908      	ldr	r1, [pc, #32]	@ (80058bc <prvCheckForValidListAndQueue+0x68>)
 800589a:	4618      	mov	r0, r3
 800589c:	f7fe fbca 	bl	8004034 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80058a0:	f000 f9f6 	bl	8005c90 <vPortExitCritical>
    }
 80058a4:	bf00      	nop
 80058a6:	bd80      	pop	{r7, pc}
 80058a8:	20000500 	.word	0x20000500
 80058ac:	200004d0 	.word	0x200004d0
 80058b0:	200004e4 	.word	0x200004e4
 80058b4:	200004f8 	.word	0x200004f8
 80058b8:	200004fc 	.word	0x200004fc
 80058bc:	080083d8 	.word	0x080083d8

080058c0 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80058c0:	b480      	push	{r7}
 80058c2:	b085      	sub	sp, #20
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	60f8      	str	r0, [r7, #12]
 80058c8:	60b9      	str	r1, [r7, #8]
 80058ca:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	3b04      	subs	r3, #4
 80058d0:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80058d8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	3b04      	subs	r3, #4
 80058de:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	f023 0201 	bic.w	r2, r3, #1
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	3b04      	subs	r3, #4
 80058ee:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80058f0:	4a0c      	ldr	r2, [pc, #48]	@ (8005924 <pxPortInitialiseStack+0x64>)
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	3b14      	subs	r3, #20
 80058fa:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80058fc:	687a      	ldr	r2, [r7, #4]
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	3b04      	subs	r3, #4
 8005906:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	f06f 0202 	mvn.w	r2, #2
 800590e:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	3b20      	subs	r3, #32
 8005914:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8005916:	68fb      	ldr	r3, [r7, #12]
}
 8005918:	4618      	mov	r0, r3
 800591a:	3714      	adds	r7, #20
 800591c:	46bd      	mov	sp, r7
 800591e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005922:	4770      	bx	lr
 8005924:	08005929 	.word	0x08005929

08005928 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005928:	b480      	push	{r7}
 800592a:	b085      	sub	sp, #20
 800592c:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800592e:	2300      	movs	r3, #0
 8005930:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8005932:	4b13      	ldr	r3, [pc, #76]	@ (8005980 <prvTaskExitError+0x58>)
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f1b3 3fff 	cmp.w	r3, #4294967295
 800593a:	d00b      	beq.n	8005954 <prvTaskExitError+0x2c>
        __asm volatile
 800593c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005940:	f383 8811 	msr	BASEPRI, r3
 8005944:	f3bf 8f6f 	isb	sy
 8005948:	f3bf 8f4f 	dsb	sy
 800594c:	60fb      	str	r3, [r7, #12]
    }
 800594e:	bf00      	nop
 8005950:	bf00      	nop
 8005952:	e7fd      	b.n	8005950 <prvTaskExitError+0x28>
        __asm volatile
 8005954:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005958:	f383 8811 	msr	BASEPRI, r3
 800595c:	f3bf 8f6f 	isb	sy
 8005960:	f3bf 8f4f 	dsb	sy
 8005964:	60bb      	str	r3, [r7, #8]
    }
 8005966:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8005968:	bf00      	nop
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d0fc      	beq.n	800596a <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8005970:	bf00      	nop
 8005972:	bf00      	nop
 8005974:	3714      	adds	r7, #20
 8005976:	46bd      	mov	sp, r7
 8005978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597c:	4770      	bx	lr
 800597e:	bf00      	nop
 8005980:	20000070 	.word	0x20000070
	...

08005990 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8005990:	4b07      	ldr	r3, [pc, #28]	@ (80059b0 <pxCurrentTCBConst2>)
 8005992:	6819      	ldr	r1, [r3, #0]
 8005994:	6808      	ldr	r0, [r1, #0]
 8005996:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800599a:	f380 8809 	msr	PSP, r0
 800599e:	f3bf 8f6f 	isb	sy
 80059a2:	f04f 0000 	mov.w	r0, #0
 80059a6:	f380 8811 	msr	BASEPRI, r0
 80059aa:	4770      	bx	lr
 80059ac:	f3af 8000 	nop.w

080059b0 <pxCurrentTCBConst2>:
 80059b0:	200003cc 	.word	0x200003cc
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80059b4:	bf00      	nop
 80059b6:	bf00      	nop

080059b8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80059b8:	4808      	ldr	r0, [pc, #32]	@ (80059dc <prvPortStartFirstTask+0x24>)
 80059ba:	6800      	ldr	r0, [r0, #0]
 80059bc:	6800      	ldr	r0, [r0, #0]
 80059be:	f380 8808 	msr	MSP, r0
 80059c2:	f04f 0000 	mov.w	r0, #0
 80059c6:	f380 8814 	msr	CONTROL, r0
 80059ca:	b662      	cpsie	i
 80059cc:	b661      	cpsie	f
 80059ce:	f3bf 8f4f 	dsb	sy
 80059d2:	f3bf 8f6f 	isb	sy
 80059d6:	df00      	svc	0
 80059d8:	bf00      	nop
 80059da:	0000      	.short	0x0000
 80059dc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80059e0:	bf00      	nop
 80059e2:	bf00      	nop

080059e4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b086      	sub	sp, #24
 80059e8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80059ea:	4b47      	ldr	r3, [pc, #284]	@ (8005b08 <xPortStartScheduler+0x124>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	4a47      	ldr	r2, [pc, #284]	@ (8005b0c <xPortStartScheduler+0x128>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d10b      	bne.n	8005a0c <xPortStartScheduler+0x28>
        __asm volatile
 80059f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059f8:	f383 8811 	msr	BASEPRI, r3
 80059fc:	f3bf 8f6f 	isb	sy
 8005a00:	f3bf 8f4f 	dsb	sy
 8005a04:	613b      	str	r3, [r7, #16]
    }
 8005a06:	bf00      	nop
 8005a08:	bf00      	nop
 8005a0a:	e7fd      	b.n	8005a08 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005a0c:	4b3e      	ldr	r3, [pc, #248]	@ (8005b08 <xPortStartScheduler+0x124>)
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	4a3f      	ldr	r2, [pc, #252]	@ (8005b10 <xPortStartScheduler+0x12c>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d10b      	bne.n	8005a2e <xPortStartScheduler+0x4a>
        __asm volatile
 8005a16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a1a:	f383 8811 	msr	BASEPRI, r3
 8005a1e:	f3bf 8f6f 	isb	sy
 8005a22:	f3bf 8f4f 	dsb	sy
 8005a26:	60fb      	str	r3, [r7, #12]
    }
 8005a28:	bf00      	nop
 8005a2a:	bf00      	nop
 8005a2c:	e7fd      	b.n	8005a2a <xPortStartScheduler+0x46>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005a2e:	4b39      	ldr	r3, [pc, #228]	@ (8005b14 <xPortStartScheduler+0x130>)
 8005a30:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005a32:	697b      	ldr	r3, [r7, #20]
 8005a34:	781b      	ldrb	r3, [r3, #0]
 8005a36:	b2db      	uxtb	r3, r3
 8005a38:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005a3a:	697b      	ldr	r3, [r7, #20]
 8005a3c:	22ff      	movs	r2, #255	@ 0xff
 8005a3e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005a40:	697b      	ldr	r3, [r7, #20]
 8005a42:	781b      	ldrb	r3, [r3, #0]
 8005a44:	b2db      	uxtb	r3, r3
 8005a46:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005a48:	78fb      	ldrb	r3, [r7, #3]
 8005a4a:	b2db      	uxtb	r3, r3
 8005a4c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005a50:	b2da      	uxtb	r2, r3
 8005a52:	4b31      	ldr	r3, [pc, #196]	@ (8005b18 <xPortStartScheduler+0x134>)
 8005a54:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005a56:	4b31      	ldr	r3, [pc, #196]	@ (8005b1c <xPortStartScheduler+0x138>)
 8005a58:	2207      	movs	r2, #7
 8005a5a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005a5c:	e009      	b.n	8005a72 <xPortStartScheduler+0x8e>
            {
                ulMaxPRIGROUPValue--;
 8005a5e:	4b2f      	ldr	r3, [pc, #188]	@ (8005b1c <xPortStartScheduler+0x138>)
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	3b01      	subs	r3, #1
 8005a64:	4a2d      	ldr	r2, [pc, #180]	@ (8005b1c <xPortStartScheduler+0x138>)
 8005a66:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005a68:	78fb      	ldrb	r3, [r7, #3]
 8005a6a:	b2db      	uxtb	r3, r3
 8005a6c:	005b      	lsls	r3, r3, #1
 8005a6e:	b2db      	uxtb	r3, r3
 8005a70:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005a72:	78fb      	ldrb	r3, [r7, #3]
 8005a74:	b2db      	uxtb	r3, r3
 8005a76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a7a:	2b80      	cmp	r3, #128	@ 0x80
 8005a7c:	d0ef      	beq.n	8005a5e <xPortStartScheduler+0x7a>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005a7e:	4b27      	ldr	r3, [pc, #156]	@ (8005b1c <xPortStartScheduler+0x138>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f1c3 0307 	rsb	r3, r3, #7
 8005a86:	2b04      	cmp	r3, #4
 8005a88:	d00b      	beq.n	8005aa2 <xPortStartScheduler+0xbe>
        __asm volatile
 8005a8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a8e:	f383 8811 	msr	BASEPRI, r3
 8005a92:	f3bf 8f6f 	isb	sy
 8005a96:	f3bf 8f4f 	dsb	sy
 8005a9a:	60bb      	str	r3, [r7, #8]
    }
 8005a9c:	bf00      	nop
 8005a9e:	bf00      	nop
 8005aa0:	e7fd      	b.n	8005a9e <xPortStartScheduler+0xba>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005aa2:	4b1e      	ldr	r3, [pc, #120]	@ (8005b1c <xPortStartScheduler+0x138>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	021b      	lsls	r3, r3, #8
 8005aa8:	4a1c      	ldr	r2, [pc, #112]	@ (8005b1c <xPortStartScheduler+0x138>)
 8005aaa:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005aac:	4b1b      	ldr	r3, [pc, #108]	@ (8005b1c <xPortStartScheduler+0x138>)
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005ab4:	4a19      	ldr	r2, [pc, #100]	@ (8005b1c <xPortStartScheduler+0x138>)
 8005ab6:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	b2da      	uxtb	r2, r3
 8005abc:	697b      	ldr	r3, [r7, #20]
 8005abe:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8005ac0:	4b17      	ldr	r3, [pc, #92]	@ (8005b20 <xPortStartScheduler+0x13c>)
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	4a16      	ldr	r2, [pc, #88]	@ (8005b20 <xPortStartScheduler+0x13c>)
 8005ac6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005aca:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8005acc:	4b14      	ldr	r3, [pc, #80]	@ (8005b20 <xPortStartScheduler+0x13c>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	4a13      	ldr	r2, [pc, #76]	@ (8005b20 <xPortStartScheduler+0x13c>)
 8005ad2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005ad6:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8005ad8:	f000 f968 	bl	8005dac <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8005adc:	4b11      	ldr	r3, [pc, #68]	@ (8005b24 <xPortStartScheduler+0x140>)
 8005ade:	2200      	movs	r2, #0
 8005ae0:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8005ae2:	f000 f987 	bl	8005df4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005ae6:	4b10      	ldr	r3, [pc, #64]	@ (8005b28 <xPortStartScheduler+0x144>)
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	4a0f      	ldr	r2, [pc, #60]	@ (8005b28 <xPortStartScheduler+0x144>)
 8005aec:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8005af0:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8005af2:	f7ff ff61 	bl	80059b8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8005af6:	f7fe fe47 	bl	8004788 <vTaskSwitchContext>
    prvTaskExitError();
 8005afa:	f7ff ff15 	bl	8005928 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8005afe:	2300      	movs	r3, #0
}
 8005b00:	4618      	mov	r0, r3
 8005b02:	3718      	adds	r7, #24
 8005b04:	46bd      	mov	sp, r7
 8005b06:	bd80      	pop	{r7, pc}
 8005b08:	e000ed00 	.word	0xe000ed00
 8005b0c:	410fc271 	.word	0x410fc271
 8005b10:	410fc270 	.word	0x410fc270
 8005b14:	e000e400 	.word	0xe000e400
 8005b18:	2000050c 	.word	0x2000050c
 8005b1c:	20000510 	.word	0x20000510
 8005b20:	e000ed20 	.word	0xe000ed20
 8005b24:	20000070 	.word	0x20000070
 8005b28:	e000ef34 	.word	0xe000ef34

08005b2c <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8005b2c:	b480      	push	{r7}
 8005b2e:	b087      	sub	sp, #28
 8005b30:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005b32:	4b38      	ldr	r3, [pc, #224]	@ (8005c14 <vInitPrioGroupValue+0xe8>)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	4a38      	ldr	r2, [pc, #224]	@ (8005c18 <vInitPrioGroupValue+0xec>)
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d10b      	bne.n	8005b54 <vInitPrioGroupValue+0x28>
        __asm volatile
 8005b3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b40:	f383 8811 	msr	BASEPRI, r3
 8005b44:	f3bf 8f6f 	isb	sy
 8005b48:	f3bf 8f4f 	dsb	sy
 8005b4c:	613b      	str	r3, [r7, #16]
    }
 8005b4e:	bf00      	nop
 8005b50:	bf00      	nop
 8005b52:	e7fd      	b.n	8005b50 <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005b54:	4b2f      	ldr	r3, [pc, #188]	@ (8005c14 <vInitPrioGroupValue+0xe8>)
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	4a30      	ldr	r2, [pc, #192]	@ (8005c1c <vInitPrioGroupValue+0xf0>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d10b      	bne.n	8005b76 <vInitPrioGroupValue+0x4a>
        __asm volatile
 8005b5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b62:	f383 8811 	msr	BASEPRI, r3
 8005b66:	f3bf 8f6f 	isb	sy
 8005b6a:	f3bf 8f4f 	dsb	sy
 8005b6e:	60fb      	str	r3, [r7, #12]
    }
 8005b70:	bf00      	nop
 8005b72:	bf00      	nop
 8005b74:	e7fd      	b.n	8005b72 <vInitPrioGroupValue+0x46>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005b76:	4b2a      	ldr	r3, [pc, #168]	@ (8005c20 <vInitPrioGroupValue+0xf4>)
 8005b78:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005b7a:	697b      	ldr	r3, [r7, #20]
 8005b7c:	781b      	ldrb	r3, [r3, #0]
 8005b7e:	b2db      	uxtb	r3, r3
 8005b80:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005b82:	697b      	ldr	r3, [r7, #20]
 8005b84:	22ff      	movs	r2, #255	@ 0xff
 8005b86:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005b88:	697b      	ldr	r3, [r7, #20]
 8005b8a:	781b      	ldrb	r3, [r3, #0]
 8005b8c:	b2db      	uxtb	r3, r3
 8005b8e:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005b90:	78fb      	ldrb	r3, [r7, #3]
 8005b92:	b2db      	uxtb	r3, r3
 8005b94:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005b98:	b2da      	uxtb	r2, r3
 8005b9a:	4b22      	ldr	r3, [pc, #136]	@ (8005c24 <vInitPrioGroupValue+0xf8>)
 8005b9c:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005b9e:	4b22      	ldr	r3, [pc, #136]	@ (8005c28 <vInitPrioGroupValue+0xfc>)
 8005ba0:	2207      	movs	r2, #7
 8005ba2:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005ba4:	e009      	b.n	8005bba <vInitPrioGroupValue+0x8e>
            {
                ulMaxPRIGROUPValue--;
 8005ba6:	4b20      	ldr	r3, [pc, #128]	@ (8005c28 <vInitPrioGroupValue+0xfc>)
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	3b01      	subs	r3, #1
 8005bac:	4a1e      	ldr	r2, [pc, #120]	@ (8005c28 <vInitPrioGroupValue+0xfc>)
 8005bae:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005bb0:	78fb      	ldrb	r3, [r7, #3]
 8005bb2:	b2db      	uxtb	r3, r3
 8005bb4:	005b      	lsls	r3, r3, #1
 8005bb6:	b2db      	uxtb	r3, r3
 8005bb8:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005bba:	78fb      	ldrb	r3, [r7, #3]
 8005bbc:	b2db      	uxtb	r3, r3
 8005bbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005bc2:	2b80      	cmp	r3, #128	@ 0x80
 8005bc4:	d0ef      	beq.n	8005ba6 <vInitPrioGroupValue+0x7a>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005bc6:	4b18      	ldr	r3, [pc, #96]	@ (8005c28 <vInitPrioGroupValue+0xfc>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f1c3 0307 	rsb	r3, r3, #7
 8005bce:	2b04      	cmp	r3, #4
 8005bd0:	d00b      	beq.n	8005bea <vInitPrioGroupValue+0xbe>
        __asm volatile
 8005bd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bd6:	f383 8811 	msr	BASEPRI, r3
 8005bda:	f3bf 8f6f 	isb	sy
 8005bde:	f3bf 8f4f 	dsb	sy
 8005be2:	60bb      	str	r3, [r7, #8]
    }
 8005be4:	bf00      	nop
 8005be6:	bf00      	nop
 8005be8:	e7fd      	b.n	8005be6 <vInitPrioGroupValue+0xba>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005bea:	4b0f      	ldr	r3, [pc, #60]	@ (8005c28 <vInitPrioGroupValue+0xfc>)
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	021b      	lsls	r3, r3, #8
 8005bf0:	4a0d      	ldr	r2, [pc, #52]	@ (8005c28 <vInitPrioGroupValue+0xfc>)
 8005bf2:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005bf4:	4b0c      	ldr	r3, [pc, #48]	@ (8005c28 <vInitPrioGroupValue+0xfc>)
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005bfc:	4a0a      	ldr	r2, [pc, #40]	@ (8005c28 <vInitPrioGroupValue+0xfc>)
 8005bfe:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	b2da      	uxtb	r2, r3
 8005c04:	697b      	ldr	r3, [r7, #20]
 8005c06:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 8005c08:	bf00      	nop
 8005c0a:	371c      	adds	r7, #28
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c12:	4770      	bx	lr
 8005c14:	e000ed00 	.word	0xe000ed00
 8005c18:	410fc271 	.word	0x410fc271
 8005c1c:	410fc270 	.word	0x410fc270
 8005c20:	e000e400 	.word	0xe000e400
 8005c24:	2000050c 	.word	0x2000050c
 8005c28:	20000510 	.word	0x20000510

08005c2c <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b083      	sub	sp, #12
 8005c30:	af00      	add	r7, sp, #0
        __asm volatile
 8005c32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c36:	f383 8811 	msr	BASEPRI, r3
 8005c3a:	f3bf 8f6f 	isb	sy
 8005c3e:	f3bf 8f4f 	dsb	sy
 8005c42:	607b      	str	r3, [r7, #4]
    }
 8005c44:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8005c46:	4b10      	ldr	r3, [pc, #64]	@ (8005c88 <vPortEnterCritical+0x5c>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	3301      	adds	r3, #1
 8005c4c:	4a0e      	ldr	r2, [pc, #56]	@ (8005c88 <vPortEnterCritical+0x5c>)
 8005c4e:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8005c50:	4b0d      	ldr	r3, [pc, #52]	@ (8005c88 <vPortEnterCritical+0x5c>)
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	2b01      	cmp	r3, #1
 8005c56:	d110      	bne.n	8005c7a <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005c58:	4b0c      	ldr	r3, [pc, #48]	@ (8005c8c <vPortEnterCritical+0x60>)
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	b2db      	uxtb	r3, r3
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d00b      	beq.n	8005c7a <vPortEnterCritical+0x4e>
        __asm volatile
 8005c62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c66:	f383 8811 	msr	BASEPRI, r3
 8005c6a:	f3bf 8f6f 	isb	sy
 8005c6e:	f3bf 8f4f 	dsb	sy
 8005c72:	603b      	str	r3, [r7, #0]
    }
 8005c74:	bf00      	nop
 8005c76:	bf00      	nop
 8005c78:	e7fd      	b.n	8005c76 <vPortEnterCritical+0x4a>
    }
}
 8005c7a:	bf00      	nop
 8005c7c:	370c      	adds	r7, #12
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c84:	4770      	bx	lr
 8005c86:	bf00      	nop
 8005c88:	20000070 	.word	0x20000070
 8005c8c:	e000ed04 	.word	0xe000ed04

08005c90 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005c90:	b480      	push	{r7}
 8005c92:	b083      	sub	sp, #12
 8005c94:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8005c96:	4b12      	ldr	r3, [pc, #72]	@ (8005ce0 <vPortExitCritical+0x50>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d10b      	bne.n	8005cb6 <vPortExitCritical+0x26>
        __asm volatile
 8005c9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ca2:	f383 8811 	msr	BASEPRI, r3
 8005ca6:	f3bf 8f6f 	isb	sy
 8005caa:	f3bf 8f4f 	dsb	sy
 8005cae:	607b      	str	r3, [r7, #4]
    }
 8005cb0:	bf00      	nop
 8005cb2:	bf00      	nop
 8005cb4:	e7fd      	b.n	8005cb2 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8005cb6:	4b0a      	ldr	r3, [pc, #40]	@ (8005ce0 <vPortExitCritical+0x50>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	3b01      	subs	r3, #1
 8005cbc:	4a08      	ldr	r2, [pc, #32]	@ (8005ce0 <vPortExitCritical+0x50>)
 8005cbe:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8005cc0:	4b07      	ldr	r3, [pc, #28]	@ (8005ce0 <vPortExitCritical+0x50>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d105      	bne.n	8005cd4 <vPortExitCritical+0x44>
 8005cc8:	2300      	movs	r3, #0
 8005cca:	603b      	str	r3, [r7, #0]
        __asm volatile
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	f383 8811 	msr	BASEPRI, r3
    }
 8005cd2:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8005cd4:	bf00      	nop
 8005cd6:	370c      	adds	r7, #12
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cde:	4770      	bx	lr
 8005ce0:	20000070 	.word	0x20000070
	...

08005cf0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8005cf0:	f3ef 8009 	mrs	r0, PSP
 8005cf4:	f3bf 8f6f 	isb	sy
 8005cf8:	4b15      	ldr	r3, [pc, #84]	@ (8005d50 <pxCurrentTCBConst>)
 8005cfa:	681a      	ldr	r2, [r3, #0]
 8005cfc:	f01e 0f10 	tst.w	lr, #16
 8005d00:	bf08      	it	eq
 8005d02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005d06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d0a:	6010      	str	r0, [r2, #0]
 8005d0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005d10:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005d14:	f380 8811 	msr	BASEPRI, r0
 8005d18:	f3bf 8f4f 	dsb	sy
 8005d1c:	f3bf 8f6f 	isb	sy
 8005d20:	f7fe fd32 	bl	8004788 <vTaskSwitchContext>
 8005d24:	f04f 0000 	mov.w	r0, #0
 8005d28:	f380 8811 	msr	BASEPRI, r0
 8005d2c:	bc09      	pop	{r0, r3}
 8005d2e:	6819      	ldr	r1, [r3, #0]
 8005d30:	6808      	ldr	r0, [r1, #0]
 8005d32:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d36:	f01e 0f10 	tst.w	lr, #16
 8005d3a:	bf08      	it	eq
 8005d3c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005d40:	f380 8809 	msr	PSP, r0
 8005d44:	f3bf 8f6f 	isb	sy
 8005d48:	4770      	bx	lr
 8005d4a:	bf00      	nop
 8005d4c:	f3af 8000 	nop.w

08005d50 <pxCurrentTCBConst>:
 8005d50:	200003cc 	.word	0x200003cc
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8005d54:	bf00      	nop
 8005d56:	bf00      	nop

08005d58 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b082      	sub	sp, #8
 8005d5c:	af00      	add	r7, sp, #0
        __asm volatile
 8005d5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d62:	f383 8811 	msr	BASEPRI, r3
 8005d66:	f3bf 8f6f 	isb	sy
 8005d6a:	f3bf 8f4f 	dsb	sy
 8005d6e:	607b      	str	r3, [r7, #4]
    }
 8005d70:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8005d72:	f001 fb3d 	bl	80073f0 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8005d76:	f7fe fc49 	bl	800460c <xTaskIncrementTick>
 8005d7a:	4603      	mov	r3, r0
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d006      	beq.n	8005d8e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8005d80:	f001 fb94 	bl	80074ac <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005d84:	4b08      	ldr	r3, [pc, #32]	@ (8005da8 <SysTick_Handler+0x50>)
 8005d86:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005d8a:	601a      	str	r2, [r3, #0]
 8005d8c:	e001      	b.n	8005d92 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 8005d8e:	f001 fb71 	bl	8007474 <SEGGER_SYSVIEW_RecordExitISR>
 8005d92:	2300      	movs	r3, #0
 8005d94:	603b      	str	r3, [r7, #0]
        __asm volatile
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	f383 8811 	msr	BASEPRI, r3
    }
 8005d9c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 8005d9e:	bf00      	nop
 8005da0:	3708      	adds	r7, #8
 8005da2:	46bd      	mov	sp, r7
 8005da4:	bd80      	pop	{r7, pc}
 8005da6:	bf00      	nop
 8005da8:	e000ed04 	.word	0xe000ed04

08005dac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8005dac:	b480      	push	{r7}
 8005dae:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005db0:	4b0b      	ldr	r3, [pc, #44]	@ (8005de0 <vPortSetupTimerInterrupt+0x34>)
 8005db2:	2200      	movs	r2, #0
 8005db4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005db6:	4b0b      	ldr	r3, [pc, #44]	@ (8005de4 <vPortSetupTimerInterrupt+0x38>)
 8005db8:	2200      	movs	r2, #0
 8005dba:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005dbc:	4b0a      	ldr	r3, [pc, #40]	@ (8005de8 <vPortSetupTimerInterrupt+0x3c>)
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	4a0a      	ldr	r2, [pc, #40]	@ (8005dec <vPortSetupTimerInterrupt+0x40>)
 8005dc2:	fba2 2303 	umull	r2, r3, r2, r3
 8005dc6:	099b      	lsrs	r3, r3, #6
 8005dc8:	4a09      	ldr	r2, [pc, #36]	@ (8005df0 <vPortSetupTimerInterrupt+0x44>)
 8005dca:	3b01      	subs	r3, #1
 8005dcc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005dce:	4b04      	ldr	r3, [pc, #16]	@ (8005de0 <vPortSetupTimerInterrupt+0x34>)
 8005dd0:	2207      	movs	r2, #7
 8005dd2:	601a      	str	r2, [r3, #0]
}
 8005dd4:	bf00      	nop
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ddc:	4770      	bx	lr
 8005dde:	bf00      	nop
 8005de0:	e000e010 	.word	0xe000e010
 8005de4:	e000e018 	.word	0xe000e018
 8005de8:	20000060 	.word	0x20000060
 8005dec:	10624dd3 	.word	0x10624dd3
 8005df0:	e000e014 	.word	0xe000e014

08005df4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8005df4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005e04 <vPortEnableVFP+0x10>
 8005df8:	6801      	ldr	r1, [r0, #0]
 8005dfa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8005dfe:	6001      	str	r1, [r0, #0]
 8005e00:	4770      	bx	lr
 8005e02:	0000      	.short	0x0000
 8005e04:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8005e08:	bf00      	nop
 8005e0a:	bf00      	nop

08005e0c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8005e0c:	b480      	push	{r7}
 8005e0e:	b085      	sub	sp, #20
 8005e10:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8005e12:	f3ef 8305 	mrs	r3, IPSR
 8005e16:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	2b0f      	cmp	r3, #15
 8005e1c:	d915      	bls.n	8005e4a <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005e1e:	4a18      	ldr	r2, [pc, #96]	@ (8005e80 <vPortValidateInterruptPriority+0x74>)
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	4413      	add	r3, r2
 8005e24:	781b      	ldrb	r3, [r3, #0]
 8005e26:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005e28:	4b16      	ldr	r3, [pc, #88]	@ (8005e84 <vPortValidateInterruptPriority+0x78>)
 8005e2a:	781b      	ldrb	r3, [r3, #0]
 8005e2c:	7afa      	ldrb	r2, [r7, #11]
 8005e2e:	429a      	cmp	r2, r3
 8005e30:	d20b      	bcs.n	8005e4a <vPortValidateInterruptPriority+0x3e>
        __asm volatile
 8005e32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e36:	f383 8811 	msr	BASEPRI, r3
 8005e3a:	f3bf 8f6f 	isb	sy
 8005e3e:	f3bf 8f4f 	dsb	sy
 8005e42:	607b      	str	r3, [r7, #4]
    }
 8005e44:	bf00      	nop
 8005e46:	bf00      	nop
 8005e48:	e7fd      	b.n	8005e46 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005e4a:	4b0f      	ldr	r3, [pc, #60]	@ (8005e88 <vPortValidateInterruptPriority+0x7c>)
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005e52:	4b0e      	ldr	r3, [pc, #56]	@ (8005e8c <vPortValidateInterruptPriority+0x80>)
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	429a      	cmp	r2, r3
 8005e58:	d90b      	bls.n	8005e72 <vPortValidateInterruptPriority+0x66>
        __asm volatile
 8005e5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e5e:	f383 8811 	msr	BASEPRI, r3
 8005e62:	f3bf 8f6f 	isb	sy
 8005e66:	f3bf 8f4f 	dsb	sy
 8005e6a:	603b      	str	r3, [r7, #0]
    }
 8005e6c:	bf00      	nop
 8005e6e:	bf00      	nop
 8005e70:	e7fd      	b.n	8005e6e <vPortValidateInterruptPriority+0x62>
    }
 8005e72:	bf00      	nop
 8005e74:	3714      	adds	r7, #20
 8005e76:	46bd      	mov	sp, r7
 8005e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7c:	4770      	bx	lr
 8005e7e:	bf00      	nop
 8005e80:	e000e3f0 	.word	0xe000e3f0
 8005e84:	2000050c 	.word	0x2000050c
 8005e88:	e000ed0c 	.word	0xe000ed0c
 8005e8c:	20000510 	.word	0x20000510

08005e90 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b08a      	sub	sp, #40	@ 0x28
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8005e98:	2300      	movs	r3, #0
 8005e9a:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8005e9c:	f7fe faf6 	bl	800448c <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8005ea0:	4b66      	ldr	r3, [pc, #408]	@ (800603c <pvPortMalloc+0x1ac>)
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d101      	bne.n	8005eac <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8005ea8:	f000 f938 	bl	800611c <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005eac:	4b64      	ldr	r3, [pc, #400]	@ (8006040 <pvPortMalloc+0x1b0>)
 8005eae:	681a      	ldr	r2, [r3, #0]
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	4013      	ands	r3, r2
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	f040 80a9 	bne.w	800600c <pvPortMalloc+0x17c>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d02e      	beq.n	8005f1e <pvPortMalloc+0x8e>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8005ec0:	2208      	movs	r2, #8
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8005ec6:	687a      	ldr	r2, [r7, #4]
 8005ec8:	429a      	cmp	r2, r3
 8005eca:	d228      	bcs.n	8005f1e <pvPortMalloc+0x8e>
            {
                xWantedSize += xHeapStructSize;
 8005ecc:	2208      	movs	r2, #8
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	4413      	add	r3, r2
 8005ed2:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	f003 0307 	and.w	r3, r3, #7
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d022      	beq.n	8005f24 <pvPortMalloc+0x94>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	f023 0307 	bic.w	r3, r3, #7
 8005ee4:	3308      	adds	r3, #8
 8005ee6:	687a      	ldr	r2, [r7, #4]
 8005ee8:	429a      	cmp	r2, r3
 8005eea:	d215      	bcs.n	8005f18 <pvPortMalloc+0x88>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	f023 0307 	bic.w	r3, r3, #7
 8005ef2:	3308      	adds	r3, #8
 8005ef4:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	f003 0307 	and.w	r3, r3, #7
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d011      	beq.n	8005f24 <pvPortMalloc+0x94>
        __asm volatile
 8005f00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f04:	f383 8811 	msr	BASEPRI, r3
 8005f08:	f3bf 8f6f 	isb	sy
 8005f0c:	f3bf 8f4f 	dsb	sy
 8005f10:	617b      	str	r3, [r7, #20]
    }
 8005f12:	bf00      	nop
 8005f14:	bf00      	nop
 8005f16:	e7fd      	b.n	8005f14 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8005f18:	2300      	movs	r3, #0
 8005f1a:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005f1c:	e002      	b.n	8005f24 <pvPortMalloc+0x94>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8005f1e:	2300      	movs	r3, #0
 8005f20:	607b      	str	r3, [r7, #4]
 8005f22:	e000      	b.n	8005f26 <pvPortMalloc+0x96>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005f24:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d06f      	beq.n	800600c <pvPortMalloc+0x17c>
 8005f2c:	4b45      	ldr	r3, [pc, #276]	@ (8006044 <pvPortMalloc+0x1b4>)
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	687a      	ldr	r2, [r7, #4]
 8005f32:	429a      	cmp	r2, r3
 8005f34:	d86a      	bhi.n	800600c <pvPortMalloc+0x17c>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8005f36:	4b44      	ldr	r3, [pc, #272]	@ (8006048 <pvPortMalloc+0x1b8>)
 8005f38:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8005f3a:	4b43      	ldr	r3, [pc, #268]	@ (8006048 <pvPortMalloc+0x1b8>)
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	627b      	str	r3, [r7, #36]	@ 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005f40:	e004      	b.n	8005f4c <pvPortMalloc+0xbc>
                {
                    pxPreviousBlock = pxBlock;
 8005f42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f44:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8005f46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	627b      	str	r3, [r7, #36]	@ 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005f4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f4e:	685b      	ldr	r3, [r3, #4]
 8005f50:	687a      	ldr	r2, [r7, #4]
 8005f52:	429a      	cmp	r2, r3
 8005f54:	d903      	bls.n	8005f5e <pvPortMalloc+0xce>
 8005f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d1f1      	bne.n	8005f42 <pvPortMalloc+0xb2>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8005f5e:	4b37      	ldr	r3, [pc, #220]	@ (800603c <pvPortMalloc+0x1ac>)
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f64:	429a      	cmp	r2, r3
 8005f66:	d051      	beq.n	800600c <pvPortMalloc+0x17c>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005f68:	6a3b      	ldr	r3, [r7, #32]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	2208      	movs	r2, #8
 8005f6e:	4413      	add	r3, r2
 8005f70:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005f72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f74:	681a      	ldr	r2, [r3, #0]
 8005f76:	6a3b      	ldr	r3, [r7, #32]
 8005f78:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005f7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f7c:	685a      	ldr	r2, [r3, #4]
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	1ad2      	subs	r2, r2, r3
 8005f82:	2308      	movs	r3, #8
 8005f84:	005b      	lsls	r3, r3, #1
 8005f86:	429a      	cmp	r2, r3
 8005f88:	d920      	bls.n	8005fcc <pvPortMalloc+0x13c>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005f8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	4413      	add	r3, r2
 8005f90:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005f92:	69bb      	ldr	r3, [r7, #24]
 8005f94:	f003 0307 	and.w	r3, r3, #7
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d00b      	beq.n	8005fb4 <pvPortMalloc+0x124>
        __asm volatile
 8005f9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fa0:	f383 8811 	msr	BASEPRI, r3
 8005fa4:	f3bf 8f6f 	isb	sy
 8005fa8:	f3bf 8f4f 	dsb	sy
 8005fac:	613b      	str	r3, [r7, #16]
    }
 8005fae:	bf00      	nop
 8005fb0:	bf00      	nop
 8005fb2:	e7fd      	b.n	8005fb0 <pvPortMalloc+0x120>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005fb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fb6:	685a      	ldr	r2, [r3, #4]
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	1ad2      	subs	r2, r2, r3
 8005fbc:	69bb      	ldr	r3, [r7, #24]
 8005fbe:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8005fc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fc2:	687a      	ldr	r2, [r7, #4]
 8005fc4:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005fc6:	69b8      	ldr	r0, [r7, #24]
 8005fc8:	f000 f90a 	bl	80061e0 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005fcc:	4b1d      	ldr	r3, [pc, #116]	@ (8006044 <pvPortMalloc+0x1b4>)
 8005fce:	681a      	ldr	r2, [r3, #0]
 8005fd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fd2:	685b      	ldr	r3, [r3, #4]
 8005fd4:	1ad3      	subs	r3, r2, r3
 8005fd6:	4a1b      	ldr	r2, [pc, #108]	@ (8006044 <pvPortMalloc+0x1b4>)
 8005fd8:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005fda:	4b1a      	ldr	r3, [pc, #104]	@ (8006044 <pvPortMalloc+0x1b4>)
 8005fdc:	681a      	ldr	r2, [r3, #0]
 8005fde:	4b1b      	ldr	r3, [pc, #108]	@ (800604c <pvPortMalloc+0x1bc>)
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	429a      	cmp	r2, r3
 8005fe4:	d203      	bcs.n	8005fee <pvPortMalloc+0x15e>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005fe6:	4b17      	ldr	r3, [pc, #92]	@ (8006044 <pvPortMalloc+0x1b4>)
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	4a18      	ldr	r2, [pc, #96]	@ (800604c <pvPortMalloc+0x1bc>)
 8005fec:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005fee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ff0:	685a      	ldr	r2, [r3, #4]
 8005ff2:	4b13      	ldr	r3, [pc, #76]	@ (8006040 <pvPortMalloc+0x1b0>)
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	431a      	orrs	r2, r3
 8005ff8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ffa:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8005ffc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ffe:	2200      	movs	r2, #0
 8006000:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8006002:	4b13      	ldr	r3, [pc, #76]	@ (8006050 <pvPortMalloc+0x1c0>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	3301      	adds	r3, #1
 8006008:	4a11      	ldr	r2, [pc, #68]	@ (8006050 <pvPortMalloc+0x1c0>)
 800600a:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 800600c:	f7fe fa4c 	bl	80044a8 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006010:	69fb      	ldr	r3, [r7, #28]
 8006012:	f003 0307 	and.w	r3, r3, #7
 8006016:	2b00      	cmp	r3, #0
 8006018:	d00b      	beq.n	8006032 <pvPortMalloc+0x1a2>
        __asm volatile
 800601a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800601e:	f383 8811 	msr	BASEPRI, r3
 8006022:	f3bf 8f6f 	isb	sy
 8006026:	f3bf 8f4f 	dsb	sy
 800602a:	60fb      	str	r3, [r7, #12]
    }
 800602c:	bf00      	nop
 800602e:	bf00      	nop
 8006030:	e7fd      	b.n	800602e <pvPortMalloc+0x19e>
    return pvReturn;
 8006032:	69fb      	ldr	r3, [r7, #28]
}
 8006034:	4618      	mov	r0, r3
 8006036:	3728      	adds	r7, #40	@ 0x28
 8006038:	46bd      	mov	sp, r7
 800603a:	bd80      	pop	{r7, pc}
 800603c:	2001311c 	.word	0x2001311c
 8006040:	20013130 	.word	0x20013130
 8006044:	20013120 	.word	0x20013120
 8006048:	20013114 	.word	0x20013114
 800604c:	20013124 	.word	0x20013124
 8006050:	20013128 	.word	0x20013128

08006054 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b086      	sub	sp, #24
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d04f      	beq.n	8006106 <vPortFree+0xb2>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8006066:	2308      	movs	r3, #8
 8006068:	425b      	negs	r3, r3
 800606a:	697a      	ldr	r2, [r7, #20]
 800606c:	4413      	add	r3, r2
 800606e:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8006070:	697b      	ldr	r3, [r7, #20]
 8006072:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006074:	693b      	ldr	r3, [r7, #16]
 8006076:	685a      	ldr	r2, [r3, #4]
 8006078:	4b25      	ldr	r3, [pc, #148]	@ (8006110 <vPortFree+0xbc>)
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	4013      	ands	r3, r2
 800607e:	2b00      	cmp	r3, #0
 8006080:	d10b      	bne.n	800609a <vPortFree+0x46>
        __asm volatile
 8006082:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006086:	f383 8811 	msr	BASEPRI, r3
 800608a:	f3bf 8f6f 	isb	sy
 800608e:	f3bf 8f4f 	dsb	sy
 8006092:	60fb      	str	r3, [r7, #12]
    }
 8006094:	bf00      	nop
 8006096:	bf00      	nop
 8006098:	e7fd      	b.n	8006096 <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800609a:	693b      	ldr	r3, [r7, #16]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d00b      	beq.n	80060ba <vPortFree+0x66>
        __asm volatile
 80060a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060a6:	f383 8811 	msr	BASEPRI, r3
 80060aa:	f3bf 8f6f 	isb	sy
 80060ae:	f3bf 8f4f 	dsb	sy
 80060b2:	60bb      	str	r3, [r7, #8]
    }
 80060b4:	bf00      	nop
 80060b6:	bf00      	nop
 80060b8:	e7fd      	b.n	80060b6 <vPortFree+0x62>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80060ba:	693b      	ldr	r3, [r7, #16]
 80060bc:	685a      	ldr	r2, [r3, #4]
 80060be:	4b14      	ldr	r3, [pc, #80]	@ (8006110 <vPortFree+0xbc>)
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	4013      	ands	r3, r2
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d01e      	beq.n	8006106 <vPortFree+0xb2>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80060c8:	693b      	ldr	r3, [r7, #16]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d11a      	bne.n	8006106 <vPortFree+0xb2>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80060d0:	693b      	ldr	r3, [r7, #16]
 80060d2:	685a      	ldr	r2, [r3, #4]
 80060d4:	4b0e      	ldr	r3, [pc, #56]	@ (8006110 <vPortFree+0xbc>)
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	43db      	mvns	r3, r3
 80060da:	401a      	ands	r2, r3
 80060dc:	693b      	ldr	r3, [r7, #16]
 80060de:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 80060e0:	f7fe f9d4 	bl	800448c <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80060e4:	693b      	ldr	r3, [r7, #16]
 80060e6:	685a      	ldr	r2, [r3, #4]
 80060e8:	4b0a      	ldr	r3, [pc, #40]	@ (8006114 <vPortFree+0xc0>)
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	4413      	add	r3, r2
 80060ee:	4a09      	ldr	r2, [pc, #36]	@ (8006114 <vPortFree+0xc0>)
 80060f0:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80060f2:	6938      	ldr	r0, [r7, #16]
 80060f4:	f000 f874 	bl	80061e0 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80060f8:	4b07      	ldr	r3, [pc, #28]	@ (8006118 <vPortFree+0xc4>)
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	3301      	adds	r3, #1
 80060fe:	4a06      	ldr	r2, [pc, #24]	@ (8006118 <vPortFree+0xc4>)
 8006100:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8006102:	f7fe f9d1 	bl	80044a8 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8006106:	bf00      	nop
 8006108:	3718      	adds	r7, #24
 800610a:	46bd      	mov	sp, r7
 800610c:	bd80      	pop	{r7, pc}
 800610e:	bf00      	nop
 8006110:	20013130 	.word	0x20013130
 8006114:	20013120 	.word	0x20013120
 8006118:	2001312c 	.word	0x2001312c

0800611c <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 800611c:	b480      	push	{r7}
 800611e:	b085      	sub	sp, #20
 8006120:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006122:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 8006126:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8006128:	4b27      	ldr	r3, [pc, #156]	@ (80061c8 <prvHeapInit+0xac>)
 800612a:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	f003 0307 	and.w	r3, r3, #7
 8006132:	2b00      	cmp	r3, #0
 8006134:	d00c      	beq.n	8006150 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	3307      	adds	r3, #7
 800613a:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	f023 0307 	bic.w	r3, r3, #7
 8006142:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006144:	68ba      	ldr	r2, [r7, #8]
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	1ad3      	subs	r3, r2, r3
 800614a:	4a1f      	ldr	r2, [pc, #124]	@ (80061c8 <prvHeapInit+0xac>)
 800614c:	4413      	add	r3, r2
 800614e:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006154:	4a1d      	ldr	r2, [pc, #116]	@ (80061cc <prvHeapInit+0xb0>)
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800615a:	4b1c      	ldr	r3, [pc, #112]	@ (80061cc <prvHeapInit+0xb0>)
 800615c:	2200      	movs	r2, #0
 800615e:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	68ba      	ldr	r2, [r7, #8]
 8006164:	4413      	add	r3, r2
 8006166:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8006168:	2208      	movs	r2, #8
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	1a9b      	subs	r3, r3, r2
 800616e:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	f023 0307 	bic.w	r3, r3, #7
 8006176:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	4a15      	ldr	r2, [pc, #84]	@ (80061d0 <prvHeapInit+0xb4>)
 800617c:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800617e:	4b14      	ldr	r3, [pc, #80]	@ (80061d0 <prvHeapInit+0xb4>)
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	2200      	movs	r2, #0
 8006184:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8006186:	4b12      	ldr	r3, [pc, #72]	@ (80061d0 <prvHeapInit+0xb4>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	2200      	movs	r2, #0
 800618c:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	68fa      	ldr	r2, [r7, #12]
 8006196:	1ad2      	subs	r2, r2, r3
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800619c:	4b0c      	ldr	r3, [pc, #48]	@ (80061d0 <prvHeapInit+0xb4>)
 800619e:	681a      	ldr	r2, [r3, #0]
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	685b      	ldr	r3, [r3, #4]
 80061a8:	4a0a      	ldr	r2, [pc, #40]	@ (80061d4 <prvHeapInit+0xb8>)
 80061aa:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	685b      	ldr	r3, [r3, #4]
 80061b0:	4a09      	ldr	r2, [pc, #36]	@ (80061d8 <prvHeapInit+0xbc>)
 80061b2:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80061b4:	4b09      	ldr	r3, [pc, #36]	@ (80061dc <prvHeapInit+0xc0>)
 80061b6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80061ba:	601a      	str	r2, [r3, #0]
}
 80061bc:	bf00      	nop
 80061be:	3714      	adds	r7, #20
 80061c0:	46bd      	mov	sp, r7
 80061c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c6:	4770      	bx	lr
 80061c8:	20000514 	.word	0x20000514
 80061cc:	20013114 	.word	0x20013114
 80061d0:	2001311c 	.word	0x2001311c
 80061d4:	20013124 	.word	0x20013124
 80061d8:	20013120 	.word	0x20013120
 80061dc:	20013130 	.word	0x20013130

080061e0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80061e0:	b480      	push	{r7}
 80061e2:	b085      	sub	sp, #20
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80061e8:	4b28      	ldr	r3, [pc, #160]	@ (800628c <prvInsertBlockIntoFreeList+0xac>)
 80061ea:	60fb      	str	r3, [r7, #12]
 80061ec:	e002      	b.n	80061f4 <prvInsertBlockIntoFreeList+0x14>
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	60fb      	str	r3, [r7, #12]
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	687a      	ldr	r2, [r7, #4]
 80061fa:	429a      	cmp	r2, r3
 80061fc:	d8f7      	bhi.n	80061ee <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	685b      	ldr	r3, [r3, #4]
 8006206:	68ba      	ldr	r2, [r7, #8]
 8006208:	4413      	add	r3, r2
 800620a:	687a      	ldr	r2, [r7, #4]
 800620c:	429a      	cmp	r2, r3
 800620e:	d108      	bne.n	8006222 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	685a      	ldr	r2, [r3, #4]
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	685b      	ldr	r3, [r3, #4]
 8006218:	441a      	add	r2, r3
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	685b      	ldr	r3, [r3, #4]
 800622a:	68ba      	ldr	r2, [r7, #8]
 800622c:	441a      	add	r2, r3
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	429a      	cmp	r2, r3
 8006234:	d118      	bne.n	8006268 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	681a      	ldr	r2, [r3, #0]
 800623a:	4b15      	ldr	r3, [pc, #84]	@ (8006290 <prvInsertBlockIntoFreeList+0xb0>)
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	429a      	cmp	r2, r3
 8006240:	d00d      	beq.n	800625e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	685a      	ldr	r2, [r3, #4]
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	685b      	ldr	r3, [r3, #4]
 800624c:	441a      	add	r2, r3
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	681a      	ldr	r2, [r3, #0]
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	601a      	str	r2, [r3, #0]
 800625c:	e008      	b.n	8006270 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800625e:	4b0c      	ldr	r3, [pc, #48]	@ (8006290 <prvInsertBlockIntoFreeList+0xb0>)
 8006260:	681a      	ldr	r2, [r3, #0]
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	601a      	str	r2, [r3, #0]
 8006266:	e003      	b.n	8006270 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681a      	ldr	r2, [r3, #0]
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8006270:	68fa      	ldr	r2, [r7, #12]
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	429a      	cmp	r2, r3
 8006276:	d002      	beq.n	800627e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	687a      	ldr	r2, [r7, #4]
 800627c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800627e:	bf00      	nop
 8006280:	3714      	adds	r7, #20
 8006282:	46bd      	mov	sp, r7
 8006284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006288:	4770      	bx	lr
 800628a:	bf00      	nop
 800628c:	20013114 	.word	0x20013114
 8006290:	2001311c 	.word	0x2001311c

08006294 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8006294:	b580      	push	{r7, lr}
 8006296:	b086      	sub	sp, #24
 8006298:	af02      	add	r7, sp, #8
 800629a:	60f8      	str	r0, [r7, #12]
 800629c:	60b9      	str	r1, [r7, #8]
 800629e:	607a      	str	r2, [r7, #4]
 80062a0:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 80062a2:	2205      	movs	r2, #5
 80062a4:	492b      	ldr	r1, [pc, #172]	@ (8006354 <SYSVIEW_AddTask+0xc0>)
 80062a6:	68b8      	ldr	r0, [r7, #8]
 80062a8:	f001 fbc6 	bl	8007a38 <memcmp>
 80062ac:	4603      	mov	r3, r0
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d04b      	beq.n	800634a <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 80062b2:	4b29      	ldr	r3, [pc, #164]	@ (8006358 <SYSVIEW_AddTask+0xc4>)
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	2b07      	cmp	r3, #7
 80062b8:	d903      	bls.n	80062c2 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 80062ba:	4828      	ldr	r0, [pc, #160]	@ (800635c <SYSVIEW_AddTask+0xc8>)
 80062bc:	f001 fb40 	bl	8007940 <SEGGER_SYSVIEW_Warn>
    return;
 80062c0:	e044      	b.n	800634c <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 80062c2:	4b25      	ldr	r3, [pc, #148]	@ (8006358 <SYSVIEW_AddTask+0xc4>)
 80062c4:	681a      	ldr	r2, [r3, #0]
 80062c6:	4926      	ldr	r1, [pc, #152]	@ (8006360 <SYSVIEW_AddTask+0xcc>)
 80062c8:	4613      	mov	r3, r2
 80062ca:	009b      	lsls	r3, r3, #2
 80062cc:	4413      	add	r3, r2
 80062ce:	009b      	lsls	r3, r3, #2
 80062d0:	440b      	add	r3, r1
 80062d2:	68fa      	ldr	r2, [r7, #12]
 80062d4:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 80062d6:	4b20      	ldr	r3, [pc, #128]	@ (8006358 <SYSVIEW_AddTask+0xc4>)
 80062d8:	681a      	ldr	r2, [r3, #0]
 80062da:	4921      	ldr	r1, [pc, #132]	@ (8006360 <SYSVIEW_AddTask+0xcc>)
 80062dc:	4613      	mov	r3, r2
 80062de:	009b      	lsls	r3, r3, #2
 80062e0:	4413      	add	r3, r2
 80062e2:	009b      	lsls	r3, r3, #2
 80062e4:	440b      	add	r3, r1
 80062e6:	3304      	adds	r3, #4
 80062e8:	68ba      	ldr	r2, [r7, #8]
 80062ea:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 80062ec:	4b1a      	ldr	r3, [pc, #104]	@ (8006358 <SYSVIEW_AddTask+0xc4>)
 80062ee:	681a      	ldr	r2, [r3, #0]
 80062f0:	491b      	ldr	r1, [pc, #108]	@ (8006360 <SYSVIEW_AddTask+0xcc>)
 80062f2:	4613      	mov	r3, r2
 80062f4:	009b      	lsls	r3, r3, #2
 80062f6:	4413      	add	r3, r2
 80062f8:	009b      	lsls	r3, r3, #2
 80062fa:	440b      	add	r3, r1
 80062fc:	3308      	adds	r3, #8
 80062fe:	687a      	ldr	r2, [r7, #4]
 8006300:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8006302:	4b15      	ldr	r3, [pc, #84]	@ (8006358 <SYSVIEW_AddTask+0xc4>)
 8006304:	681a      	ldr	r2, [r3, #0]
 8006306:	4916      	ldr	r1, [pc, #88]	@ (8006360 <SYSVIEW_AddTask+0xcc>)
 8006308:	4613      	mov	r3, r2
 800630a:	009b      	lsls	r3, r3, #2
 800630c:	4413      	add	r3, r2
 800630e:	009b      	lsls	r3, r3, #2
 8006310:	440b      	add	r3, r1
 8006312:	330c      	adds	r3, #12
 8006314:	683a      	ldr	r2, [r7, #0]
 8006316:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8006318:	4b0f      	ldr	r3, [pc, #60]	@ (8006358 <SYSVIEW_AddTask+0xc4>)
 800631a:	681a      	ldr	r2, [r3, #0]
 800631c:	4910      	ldr	r1, [pc, #64]	@ (8006360 <SYSVIEW_AddTask+0xcc>)
 800631e:	4613      	mov	r3, r2
 8006320:	009b      	lsls	r3, r3, #2
 8006322:	4413      	add	r3, r2
 8006324:	009b      	lsls	r3, r3, #2
 8006326:	440b      	add	r3, r1
 8006328:	3310      	adds	r3, #16
 800632a:	69ba      	ldr	r2, [r7, #24]
 800632c:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 800632e:	4b0a      	ldr	r3, [pc, #40]	@ (8006358 <SYSVIEW_AddTask+0xc4>)
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	3301      	adds	r3, #1
 8006334:	4a08      	ldr	r2, [pc, #32]	@ (8006358 <SYSVIEW_AddTask+0xc4>)
 8006336:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8006338:	69bb      	ldr	r3, [r7, #24]
 800633a:	9300      	str	r3, [sp, #0]
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	687a      	ldr	r2, [r7, #4]
 8006340:	68b9      	ldr	r1, [r7, #8]
 8006342:	68f8      	ldr	r0, [r7, #12]
 8006344:	f000 f80e 	bl	8006364 <SYSVIEW_SendTaskInfo>
 8006348:	e000      	b.n	800634c <SYSVIEW_AddTask+0xb8>
    return;
 800634a:	bf00      	nop

}
 800634c:	3710      	adds	r7, #16
 800634e:	46bd      	mov	sp, r7
 8006350:	bd80      	pop	{r7, pc}
 8006352:	bf00      	nop
 8006354:	080083e0 	.word	0x080083e0
 8006358:	200131d4 	.word	0x200131d4
 800635c:	080083e8 	.word	0x080083e8
 8006360:	20013134 	.word	0x20013134

08006364 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8006364:	b580      	push	{r7, lr}
 8006366:	b08a      	sub	sp, #40	@ 0x28
 8006368:	af00      	add	r7, sp, #0
 800636a:	60f8      	str	r0, [r7, #12]
 800636c:	60b9      	str	r1, [r7, #8]
 800636e:	607a      	str	r2, [r7, #4]
 8006370:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8006372:	f107 0314 	add.w	r3, r7, #20
 8006376:	2214      	movs	r2, #20
 8006378:	2100      	movs	r1, #0
 800637a:	4618      	mov	r0, r3
 800637c:	f001 fb6c 	bl	8007a58 <memset>
  TaskInfo.TaskID     = TaskID;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8006384:	68bb      	ldr	r3, [r7, #8]
 8006386:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8006390:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006392:	627b      	str	r3, [r7, #36]	@ 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8006394:	f107 0314 	add.w	r3, r7, #20
 8006398:	4618      	mov	r0, r3
 800639a:	f000 feff 	bl	800719c <SEGGER_SYSVIEW_SendTaskInfo>
}
 800639e:	bf00      	nop
 80063a0:	3728      	adds	r7, #40	@ 0x28
 80063a2:	46bd      	mov	sp, r7
 80063a4:	bd80      	pop	{r7, pc}
	...

080063a8 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 80063a8:	b480      	push	{r7}
 80063aa:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 80063ac:	4b05      	ldr	r3, [pc, #20]	@ (80063c4 <HIF_UART_EnableTXEInterrupt+0x1c>)
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	4a04      	ldr	r2, [pc, #16]	@ (80063c4 <HIF_UART_EnableTXEInterrupt+0x1c>)
 80063b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80063b6:	6013      	str	r3, [r2, #0]
}
 80063b8:	bf00      	nop
 80063ba:	46bd      	mov	sp, r7
 80063bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c0:	4770      	bx	lr
 80063c2:	bf00      	nop
 80063c4:	4000440c 	.word	0x4000440c

080063c8 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 80063c8:	b480      	push	{r7}
 80063ca:	b083      	sub	sp, #12
 80063cc:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 80063ce:	4b24      	ldr	r3, [pc, #144]	@ (8006460 <_DoInit+0x98>)
 80063d0:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2203      	movs	r2, #3
 80063d6:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2203      	movs	r2, #3
 80063dc:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	4a20      	ldr	r2, [pc, #128]	@ (8006464 <_DoInit+0x9c>)
 80063e2:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	4a20      	ldr	r2, [pc, #128]	@ (8006468 <_DoInit+0xa0>)
 80063e8:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80063f0:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	2200      	movs	r2, #0
 80063f6:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2200      	movs	r2, #0
 80063fc:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2200      	movs	r2, #0
 8006402:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	4a17      	ldr	r2, [pc, #92]	@ (8006464 <_DoInit+0x9c>)
 8006408:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	4a17      	ldr	r2, [pc, #92]	@ (800646c <_DoInit+0xa4>)
 800640e:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2210      	movs	r2, #16
 8006414:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	2200      	movs	r2, #0
 800641a:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2200      	movs	r2, #0
 8006420:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2200      	movs	r2, #0
 8006426:	675a      	str	r2, [r3, #116]	@ 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	3307      	adds	r3, #7
 800642c:	4a10      	ldr	r2, [pc, #64]	@ (8006470 <_DoInit+0xa8>)
 800642e:	6810      	ldr	r0, [r2, #0]
 8006430:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8006432:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	4a0e      	ldr	r2, [pc, #56]	@ (8006474 <_DoInit+0xac>)
 800643a:	6810      	ldr	r0, [r2, #0]
 800643c:	6018      	str	r0, [r3, #0]
 800643e:	8891      	ldrh	r1, [r2, #4]
 8006440:	7992      	ldrb	r2, [r2, #6]
 8006442:	8099      	strh	r1, [r3, #4]
 8006444:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8006446:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2220      	movs	r2, #32
 800644e:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8006450:	f3bf 8f5f 	dmb	sy
}
 8006454:	bf00      	nop
 8006456:	370c      	adds	r7, #12
 8006458:	46bd      	mov	sp, r7
 800645a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645e:	4770      	bx	lr
 8006460:	200131d8 	.word	0x200131d8
 8006464:	08008438 	.word	0x08008438
 8006468:	20013280 	.word	0x20013280
 800646c:	20013680 	.word	0x20013680
 8006470:	08008444 	.word	0x08008444
 8006474:	08008448 	.word	0x08008448

08006478 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8006478:	b580      	push	{r7, lr}
 800647a:	b08c      	sub	sp, #48	@ 0x30
 800647c:	af00      	add	r7, sp, #0
 800647e:	60f8      	str	r0, [r7, #12]
 8006480:	60b9      	str	r1, [r7, #8]
 8006482:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8006484:	4b3e      	ldr	r3, [pc, #248]	@ (8006580 <SEGGER_RTT_ReadNoLock+0x108>)
 8006486:	623b      	str	r3, [r7, #32]
 8006488:	6a3b      	ldr	r3, [r7, #32]
 800648a:	781b      	ldrb	r3, [r3, #0]
 800648c:	b2db      	uxtb	r3, r3
 800648e:	2b00      	cmp	r3, #0
 8006490:	d101      	bne.n	8006496 <SEGGER_RTT_ReadNoLock+0x1e>
 8006492:	f7ff ff99 	bl	80063c8 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8006496:	68fa      	ldr	r2, [r7, #12]
 8006498:	4613      	mov	r3, r2
 800649a:	005b      	lsls	r3, r3, #1
 800649c:	4413      	add	r3, r2
 800649e:	00db      	lsls	r3, r3, #3
 80064a0:	3360      	adds	r3, #96	@ 0x60
 80064a2:	4a37      	ldr	r2, [pc, #220]	@ (8006580 <SEGGER_RTT_ReadNoLock+0x108>)
 80064a4:	4413      	add	r3, r2
 80064a6:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80064a8:	68bb      	ldr	r3, [r7, #8]
 80064aa:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 80064ac:	69fb      	ldr	r3, [r7, #28]
 80064ae:	691b      	ldr	r3, [r3, #16]
 80064b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 80064b2:	69fb      	ldr	r3, [r7, #28]
 80064b4:	68db      	ldr	r3, [r3, #12]
 80064b6:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80064b8:	2300      	movs	r3, #0
 80064ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80064bc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80064be:	69bb      	ldr	r3, [r7, #24]
 80064c0:	429a      	cmp	r2, r3
 80064c2:	d92b      	bls.n	800651c <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80064c4:	69fb      	ldr	r3, [r7, #28]
 80064c6:	689a      	ldr	r2, [r3, #8]
 80064c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064ca:	1ad3      	subs	r3, r2, r3
 80064cc:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80064ce:	697a      	ldr	r2, [r7, #20]
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	4293      	cmp	r3, r2
 80064d4:	bf28      	it	cs
 80064d6:	4613      	movcs	r3, r2
 80064d8:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80064da:	69fb      	ldr	r3, [r7, #28]
 80064dc:	685a      	ldr	r2, [r3, #4]
 80064de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064e0:	4413      	add	r3, r2
 80064e2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80064e4:	697a      	ldr	r2, [r7, #20]
 80064e6:	6939      	ldr	r1, [r7, #16]
 80064e8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80064ea:	f001 fae3 	bl	8007ab4 <memcpy>
    NumBytesRead += NumBytesRem;
 80064ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80064f0:	697b      	ldr	r3, [r7, #20]
 80064f2:	4413      	add	r3, r2
 80064f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 80064f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80064f8:	697b      	ldr	r3, [r7, #20]
 80064fa:	4413      	add	r3, r2
 80064fc:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 80064fe:	687a      	ldr	r2, [r7, #4]
 8006500:	697b      	ldr	r3, [r7, #20]
 8006502:	1ad3      	subs	r3, r2, r3
 8006504:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8006506:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006508:	697b      	ldr	r3, [r7, #20]
 800650a:	4413      	add	r3, r2
 800650c:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800650e:	69fb      	ldr	r3, [r7, #28]
 8006510:	689b      	ldr	r3, [r3, #8]
 8006512:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006514:	429a      	cmp	r2, r3
 8006516:	d101      	bne.n	800651c <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8006518:	2300      	movs	r3, #0
 800651a:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 800651c:	69ba      	ldr	r2, [r7, #24]
 800651e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006520:	1ad3      	subs	r3, r2, r3
 8006522:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8006524:	697a      	ldr	r2, [r7, #20]
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	4293      	cmp	r3, r2
 800652a:	bf28      	it	cs
 800652c:	4613      	movcs	r3, r2
 800652e:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8006530:	697b      	ldr	r3, [r7, #20]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d019      	beq.n	800656a <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8006536:	69fb      	ldr	r3, [r7, #28]
 8006538:	685a      	ldr	r2, [r3, #4]
 800653a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800653c:	4413      	add	r3, r2
 800653e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8006540:	697a      	ldr	r2, [r7, #20]
 8006542:	6939      	ldr	r1, [r7, #16]
 8006544:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006546:	f001 fab5 	bl	8007ab4 <memcpy>
    NumBytesRead += NumBytesRem;
 800654a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800654c:	697b      	ldr	r3, [r7, #20]
 800654e:	4413      	add	r3, r2
 8006550:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8006552:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006554:	697b      	ldr	r3, [r7, #20]
 8006556:	4413      	add	r3, r2
 8006558:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 800655a:	687a      	ldr	r2, [r7, #4]
 800655c:	697b      	ldr	r3, [r7, #20]
 800655e:	1ad3      	subs	r3, r2, r3
 8006560:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8006562:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006564:	697b      	ldr	r3, [r7, #20]
 8006566:	4413      	add	r3, r2
 8006568:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  if (NumBytesRead) {
 800656a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800656c:	2b00      	cmp	r3, #0
 800656e:	d002      	beq.n	8006576 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8006570:	69fb      	ldr	r3, [r7, #28]
 8006572:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006574:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8006576:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8006578:	4618      	mov	r0, r3
 800657a:	3730      	adds	r7, #48	@ 0x30
 800657c:	46bd      	mov	sp, r7
 800657e:	bd80      	pop	{r7, pc}
 8006580:	200131d8 	.word	0x200131d8

08006584 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8006584:	b480      	push	{r7}
 8006586:	b087      	sub	sp, #28
 8006588:	af00      	add	r7, sp, #0
 800658a:	60f8      	str	r0, [r7, #12]
 800658c:	60b9      	str	r1, [r7, #8]
 800658e:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8006590:	2300      	movs	r3, #0
 8006592:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8006594:	e002      	b.n	800659c <_EncodeStr+0x18>
    Len++;
 8006596:	693b      	ldr	r3, [r7, #16]
 8006598:	3301      	adds	r3, #1
 800659a:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 800659c:	68ba      	ldr	r2, [r7, #8]
 800659e:	693b      	ldr	r3, [r7, #16]
 80065a0:	4413      	add	r3, r2
 80065a2:	781b      	ldrb	r3, [r3, #0]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d1f6      	bne.n	8006596 <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 80065a8:	693a      	ldr	r2, [r7, #16]
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	429a      	cmp	r2, r3
 80065ae:	d901      	bls.n	80065b4 <_EncodeStr+0x30>
    Len = Limit;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 80065b4:	693b      	ldr	r3, [r7, #16]
 80065b6:	2bfe      	cmp	r3, #254	@ 0xfe
 80065b8:	d806      	bhi.n	80065c8 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	1c5a      	adds	r2, r3, #1
 80065be:	60fa      	str	r2, [r7, #12]
 80065c0:	693a      	ldr	r2, [r7, #16]
 80065c2:	b2d2      	uxtb	r2, r2
 80065c4:	701a      	strb	r2, [r3, #0]
 80065c6:	e011      	b.n	80065ec <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	1c5a      	adds	r2, r3, #1
 80065cc:	60fa      	str	r2, [r7, #12]
 80065ce:	22ff      	movs	r2, #255	@ 0xff
 80065d0:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	1c5a      	adds	r2, r3, #1
 80065d6:	60fa      	str	r2, [r7, #12]
 80065d8:	693a      	ldr	r2, [r7, #16]
 80065da:	b2d2      	uxtb	r2, r2
 80065dc:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 80065de:	693b      	ldr	r3, [r7, #16]
 80065e0:	0a19      	lsrs	r1, r3, #8
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	1c5a      	adds	r2, r3, #1
 80065e6:	60fa      	str	r2, [r7, #12]
 80065e8:	b2ca      	uxtb	r2, r1
 80065ea:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 80065ec:	2300      	movs	r3, #0
 80065ee:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80065f0:	e00a      	b.n	8006608 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 80065f2:	68ba      	ldr	r2, [r7, #8]
 80065f4:	1c53      	adds	r3, r2, #1
 80065f6:	60bb      	str	r3, [r7, #8]
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	1c59      	adds	r1, r3, #1
 80065fc:	60f9      	str	r1, [r7, #12]
 80065fe:	7812      	ldrb	r2, [r2, #0]
 8006600:	701a      	strb	r2, [r3, #0]
    n++;
 8006602:	697b      	ldr	r3, [r7, #20]
 8006604:	3301      	adds	r3, #1
 8006606:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8006608:	697a      	ldr	r2, [r7, #20]
 800660a:	693b      	ldr	r3, [r7, #16]
 800660c:	429a      	cmp	r2, r3
 800660e:	d3f0      	bcc.n	80065f2 <_EncodeStr+0x6e>
  }
  return pPayload;
 8006610:	68fb      	ldr	r3, [r7, #12]
}
 8006612:	4618      	mov	r0, r3
 8006614:	371c      	adds	r7, #28
 8006616:	46bd      	mov	sp, r7
 8006618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661c:	4770      	bx	lr

0800661e <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 800661e:	b480      	push	{r7}
 8006620:	b083      	sub	sp, #12
 8006622:	af00      	add	r7, sp, #0
 8006624:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	3304      	adds	r3, #4
}
 800662a:	4618      	mov	r0, r3
 800662c:	370c      	adds	r7, #12
 800662e:	46bd      	mov	sp, r7
 8006630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006634:	4770      	bx	lr
	...

08006638 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8006638:	b580      	push	{r7, lr}
 800663a:	b082      	sub	sp, #8
 800663c:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800663e:	4b35      	ldr	r3, [pc, #212]	@ (8006714 <_HandleIncomingPacket+0xdc>)
 8006640:	7e1b      	ldrb	r3, [r3, #24]
 8006642:	4618      	mov	r0, r3
 8006644:	1cfb      	adds	r3, r7, #3
 8006646:	2201      	movs	r2, #1
 8006648:	4619      	mov	r1, r3
 800664a:	f7ff ff15 	bl	8006478 <SEGGER_RTT_ReadNoLock>
 800664e:	4603      	mov	r3, r0
 8006650:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	2b00      	cmp	r3, #0
 8006656:	dd59      	ble.n	800670c <_HandleIncomingPacket+0xd4>
    switch (Cmd) {
 8006658:	78fb      	ldrb	r3, [r7, #3]
 800665a:	2b80      	cmp	r3, #128	@ 0x80
 800665c:	d032      	beq.n	80066c4 <_HandleIncomingPacket+0x8c>
 800665e:	2b80      	cmp	r3, #128	@ 0x80
 8006660:	dc42      	bgt.n	80066e8 <_HandleIncomingPacket+0xb0>
 8006662:	2b07      	cmp	r3, #7
 8006664:	dc16      	bgt.n	8006694 <_HandleIncomingPacket+0x5c>
 8006666:	2b00      	cmp	r3, #0
 8006668:	dd3e      	ble.n	80066e8 <_HandleIncomingPacket+0xb0>
 800666a:	3b01      	subs	r3, #1
 800666c:	2b06      	cmp	r3, #6
 800666e:	d83b      	bhi.n	80066e8 <_HandleIncomingPacket+0xb0>
 8006670:	a201      	add	r2, pc, #4	@ (adr r2, 8006678 <_HandleIncomingPacket+0x40>)
 8006672:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006676:	bf00      	nop
 8006678:	0800669b 	.word	0x0800669b
 800667c:	080066a1 	.word	0x080066a1
 8006680:	080066a7 	.word	0x080066a7
 8006684:	080066ad 	.word	0x080066ad
 8006688:	080066b3 	.word	0x080066b3
 800668c:	080066b9 	.word	0x080066b9
 8006690:	080066bf 	.word	0x080066bf
 8006694:	2b7f      	cmp	r3, #127	@ 0x7f
 8006696:	d034      	beq.n	8006702 <_HandleIncomingPacket+0xca>
 8006698:	e026      	b.n	80066e8 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 800669a:	f000 fc03 	bl	8006ea4 <SEGGER_SYSVIEW_Start>
      break;
 800669e:	e035      	b.n	800670c <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 80066a0:	f000 fcbc 	bl	800701c <SEGGER_SYSVIEW_Stop>
      break;
 80066a4:	e032      	b.n	800670c <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 80066a6:	f000 fe71 	bl	800738c <SEGGER_SYSVIEW_RecordSystime>
      break;
 80066aa:	e02f      	b.n	800670c <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 80066ac:	f000 fe5a 	bl	8007364 <SEGGER_SYSVIEW_SendTaskList>
      break;
 80066b0:	e02c      	b.n	800670c <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 80066b2:	f000 fcd9 	bl	8007068 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 80066b6:	e029      	b.n	800670c <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 80066b8:	f001 f904 	bl	80078c4 <SEGGER_SYSVIEW_SendNumModules>
      break;
 80066bc:	e026      	b.n	800670c <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 80066be:	f001 f8e3 	bl	8007888 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 80066c2:	e023      	b.n	800670c <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80066c4:	4b13      	ldr	r3, [pc, #76]	@ (8006714 <_HandleIncomingPacket+0xdc>)
 80066c6:	7e1b      	ldrb	r3, [r3, #24]
 80066c8:	4618      	mov	r0, r3
 80066ca:	1cfb      	adds	r3, r7, #3
 80066cc:	2201      	movs	r2, #1
 80066ce:	4619      	mov	r1, r3
 80066d0:	f7ff fed2 	bl	8006478 <SEGGER_RTT_ReadNoLock>
 80066d4:	4603      	mov	r3, r0
 80066d6:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	dd13      	ble.n	8006706 <_HandleIncomingPacket+0xce>
        SEGGER_SYSVIEW_SendModule(Cmd);
 80066de:	78fb      	ldrb	r3, [r7, #3]
 80066e0:	4618      	mov	r0, r3
 80066e2:	f001 f851 	bl	8007788 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 80066e6:	e00e      	b.n	8006706 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 80066e8:	78fb      	ldrb	r3, [r7, #3]
 80066ea:	b25b      	sxtb	r3, r3
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	da0c      	bge.n	800670a <_HandleIncomingPacket+0xd2>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80066f0:	4b08      	ldr	r3, [pc, #32]	@ (8006714 <_HandleIncomingPacket+0xdc>)
 80066f2:	7e1b      	ldrb	r3, [r3, #24]
 80066f4:	4618      	mov	r0, r3
 80066f6:	1cfb      	adds	r3, r7, #3
 80066f8:	2201      	movs	r2, #1
 80066fa:	4619      	mov	r1, r3
 80066fc:	f7ff febc 	bl	8006478 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8006700:	e003      	b.n	800670a <_HandleIncomingPacket+0xd2>
      break;
 8006702:	bf00      	nop
 8006704:	e002      	b.n	800670c <_HandleIncomingPacket+0xd4>
      break;
 8006706:	bf00      	nop
 8006708:	e000      	b.n	800670c <_HandleIncomingPacket+0xd4>
      break;
 800670a:	bf00      	nop
    }
  }
}
 800670c:	bf00      	nop
 800670e:	3708      	adds	r7, #8
 8006710:	46bd      	mov	sp, r7
 8006712:	bd80      	pop	{r7, pc}
 8006714:	20013690 	.word	0x20013690

08006718 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8006718:	b580      	push	{r7, lr}
 800671a:	b08c      	sub	sp, #48	@ 0x30
 800671c:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 800671e:	2301      	movs	r3, #1
 8006720:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8006722:	1d3b      	adds	r3, r7, #4
 8006724:	3301      	adds	r3, #1
 8006726:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8006728:	69fb      	ldr	r3, [r7, #28]
 800672a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800672c:	4b32      	ldr	r3, [pc, #200]	@ (80067f8 <_TrySendOverflowPacket+0xe0>)
 800672e:	695b      	ldr	r3, [r3, #20]
 8006730:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006732:	e00b      	b.n	800674c <_TrySendOverflowPacket+0x34>
 8006734:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006736:	b2da      	uxtb	r2, r3
 8006738:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800673a:	1c59      	adds	r1, r3, #1
 800673c:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800673e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006742:	b2d2      	uxtb	r2, r2
 8006744:	701a      	strb	r2, [r3, #0]
 8006746:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006748:	09db      	lsrs	r3, r3, #7
 800674a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800674c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800674e:	2b7f      	cmp	r3, #127	@ 0x7f
 8006750:	d8f0      	bhi.n	8006734 <_TrySendOverflowPacket+0x1c>
 8006752:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006754:	1c5a      	adds	r2, r3, #1
 8006756:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006758:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800675a:	b2d2      	uxtb	r2, r2
 800675c:	701a      	strb	r2, [r3, #0]
 800675e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006760:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8006762:	4b26      	ldr	r3, [pc, #152]	@ (80067fc <_TrySendOverflowPacket+0xe4>)
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8006768:	4b23      	ldr	r3, [pc, #140]	@ (80067f8 <_TrySendOverflowPacket+0xe0>)
 800676a:	68db      	ldr	r3, [r3, #12]
 800676c:	69ba      	ldr	r2, [r7, #24]
 800676e:	1ad3      	subs	r3, r2, r3
 8006770:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8006772:	69fb      	ldr	r3, [r7, #28]
 8006774:	627b      	str	r3, [r7, #36]	@ 0x24
 8006776:	697b      	ldr	r3, [r7, #20]
 8006778:	623b      	str	r3, [r7, #32]
 800677a:	e00b      	b.n	8006794 <_TrySendOverflowPacket+0x7c>
 800677c:	6a3b      	ldr	r3, [r7, #32]
 800677e:	b2da      	uxtb	r2, r3
 8006780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006782:	1c59      	adds	r1, r3, #1
 8006784:	6279      	str	r1, [r7, #36]	@ 0x24
 8006786:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800678a:	b2d2      	uxtb	r2, r2
 800678c:	701a      	strb	r2, [r3, #0]
 800678e:	6a3b      	ldr	r3, [r7, #32]
 8006790:	09db      	lsrs	r3, r3, #7
 8006792:	623b      	str	r3, [r7, #32]
 8006794:	6a3b      	ldr	r3, [r7, #32]
 8006796:	2b7f      	cmp	r3, #127	@ 0x7f
 8006798:	d8f0      	bhi.n	800677c <_TrySendOverflowPacket+0x64>
 800679a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800679c:	1c5a      	adds	r2, r3, #1
 800679e:	627a      	str	r2, [r7, #36]	@ 0x24
 80067a0:	6a3a      	ldr	r2, [r7, #32]
 80067a2:	b2d2      	uxtb	r2, r2
 80067a4:	701a      	strb	r2, [r3, #0]
 80067a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067a8:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 80067aa:	4b13      	ldr	r3, [pc, #76]	@ (80067f8 <_TrySendOverflowPacket+0xe0>)
 80067ac:	785b      	ldrb	r3, [r3, #1]
 80067ae:	4618      	mov	r0, r3
 80067b0:	1d3b      	adds	r3, r7, #4
 80067b2:	69fa      	ldr	r2, [r7, #28]
 80067b4:	1ad3      	subs	r3, r2, r3
 80067b6:	461a      	mov	r2, r3
 80067b8:	1d3b      	adds	r3, r7, #4
 80067ba:	4619      	mov	r1, r3
 80067bc:	f7f9 fd08 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80067c0:	4603      	mov	r3, r0
 80067c2:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 80067c4:	f7ff fdf0 	bl	80063a8 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 80067c8:	693b      	ldr	r3, [r7, #16]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d009      	beq.n	80067e2 <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80067ce:	4a0a      	ldr	r2, [pc, #40]	@ (80067f8 <_TrySendOverflowPacket+0xe0>)
 80067d0:	69bb      	ldr	r3, [r7, #24]
 80067d2:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 80067d4:	4b08      	ldr	r3, [pc, #32]	@ (80067f8 <_TrySendOverflowPacket+0xe0>)
 80067d6:	781b      	ldrb	r3, [r3, #0]
 80067d8:	3b01      	subs	r3, #1
 80067da:	b2da      	uxtb	r2, r3
 80067dc:	4b06      	ldr	r3, [pc, #24]	@ (80067f8 <_TrySendOverflowPacket+0xe0>)
 80067de:	701a      	strb	r2, [r3, #0]
 80067e0:	e004      	b.n	80067ec <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 80067e2:	4b05      	ldr	r3, [pc, #20]	@ (80067f8 <_TrySendOverflowPacket+0xe0>)
 80067e4:	695b      	ldr	r3, [r3, #20]
 80067e6:	3301      	adds	r3, #1
 80067e8:	4a03      	ldr	r2, [pc, #12]	@ (80067f8 <_TrySendOverflowPacket+0xe0>)
 80067ea:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 80067ec:	693b      	ldr	r3, [r7, #16]
}
 80067ee:	4618      	mov	r0, r3
 80067f0:	3730      	adds	r7, #48	@ 0x30
 80067f2:	46bd      	mov	sp, r7
 80067f4:	bd80      	pop	{r7, pc}
 80067f6:	bf00      	nop
 80067f8:	20013690 	.word	0x20013690
 80067fc:	e0001004 	.word	0xe0001004

08006800 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8006800:	b580      	push	{r7, lr}
 8006802:	b08a      	sub	sp, #40	@ 0x28
 8006804:	af00      	add	r7, sp, #0
 8006806:	60f8      	str	r0, [r7, #12]
 8006808:	60b9      	str	r1, [r7, #8]
 800680a:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 800680c:	4b6d      	ldr	r3, [pc, #436]	@ (80069c4 <_SendPacket+0x1c4>)
 800680e:	781b      	ldrb	r3, [r3, #0]
 8006810:	2b01      	cmp	r3, #1
 8006812:	d010      	beq.n	8006836 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8006814:	4b6b      	ldr	r3, [pc, #428]	@ (80069c4 <_SendPacket+0x1c4>)
 8006816:	781b      	ldrb	r3, [r3, #0]
 8006818:	2b00      	cmp	r3, #0
 800681a:	f000 80a5 	beq.w	8006968 <_SendPacket+0x168>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 800681e:	4b69      	ldr	r3, [pc, #420]	@ (80069c4 <_SendPacket+0x1c4>)
 8006820:	781b      	ldrb	r3, [r3, #0]
 8006822:	2b02      	cmp	r3, #2
 8006824:	d109      	bne.n	800683a <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8006826:	f7ff ff77 	bl	8006718 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 800682a:	4b66      	ldr	r3, [pc, #408]	@ (80069c4 <_SendPacket+0x1c4>)
 800682c:	781b      	ldrb	r3, [r3, #0]
 800682e:	2b01      	cmp	r3, #1
 8006830:	f040 809c 	bne.w	800696c <_SendPacket+0x16c>
      goto SendDone;
    }
  }
Send:
 8006834:	e001      	b.n	800683a <_SendPacket+0x3a>
    goto Send;
 8006836:	bf00      	nop
 8006838:	e000      	b.n	800683c <_SendPacket+0x3c>
Send:
 800683a:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2b1f      	cmp	r3, #31
 8006840:	d809      	bhi.n	8006856 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8006842:	4b60      	ldr	r3, [pc, #384]	@ (80069c4 <_SendPacket+0x1c4>)
 8006844:	69da      	ldr	r2, [r3, #28]
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	fa22 f303 	lsr.w	r3, r2, r3
 800684c:	f003 0301 	and.w	r3, r3, #1
 8006850:	2b00      	cmp	r3, #0
 8006852:	f040 808d 	bne.w	8006970 <_SendPacket+0x170>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2b17      	cmp	r3, #23
 800685a:	d807      	bhi.n	800686c <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	3b01      	subs	r3, #1
 8006860:	60fb      	str	r3, [r7, #12]
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	b2da      	uxtb	r2, r3
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	701a      	strb	r2, [r3, #0]
 800686a:	e03d      	b.n	80068e8 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 800686c:	68ba      	ldr	r2, [r7, #8]
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	1ad3      	subs	r3, r2, r3
 8006872:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8006874:	69fb      	ldr	r3, [r7, #28]
 8006876:	2b7f      	cmp	r3, #127	@ 0x7f
 8006878:	d912      	bls.n	80068a0 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 800687a:	69fb      	ldr	r3, [r7, #28]
 800687c:	09da      	lsrs	r2, r3, #7
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	3b01      	subs	r3, #1
 8006882:	60fb      	str	r3, [r7, #12]
 8006884:	b2d2      	uxtb	r2, r2
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 800688a:	69fb      	ldr	r3, [r7, #28]
 800688c:	b2db      	uxtb	r3, r3
 800688e:	68fa      	ldr	r2, [r7, #12]
 8006890:	3a01      	subs	r2, #1
 8006892:	60fa      	str	r2, [r7, #12]
 8006894:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006898:	b2da      	uxtb	r2, r3
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	701a      	strb	r2, [r3, #0]
 800689e:	e006      	b.n	80068ae <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	3b01      	subs	r3, #1
 80068a4:	60fb      	str	r3, [r7, #12]
 80068a6:	69fb      	ldr	r3, [r7, #28]
 80068a8:	b2da      	uxtb	r2, r3
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2b7f      	cmp	r3, #127	@ 0x7f
 80068b2:	d912      	bls.n	80068da <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	09da      	lsrs	r2, r3, #7
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	3b01      	subs	r3, #1
 80068bc:	60fb      	str	r3, [r7, #12]
 80068be:	b2d2      	uxtb	r2, r2
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	b2db      	uxtb	r3, r3
 80068c8:	68fa      	ldr	r2, [r7, #12]
 80068ca:	3a01      	subs	r2, #1
 80068cc:	60fa      	str	r2, [r7, #12]
 80068ce:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80068d2:	b2da      	uxtb	r2, r3
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	701a      	strb	r2, [r3, #0]
 80068d8:	e006      	b.n	80068e8 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	3b01      	subs	r3, #1
 80068de:	60fb      	str	r3, [r7, #12]
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	b2da      	uxtb	r2, r3
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80068e8:	4b37      	ldr	r3, [pc, #220]	@ (80069c8 <_SendPacket+0x1c8>)
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80068ee:	4b35      	ldr	r3, [pc, #212]	@ (80069c4 <_SendPacket+0x1c4>)
 80068f0:	68db      	ldr	r3, [r3, #12]
 80068f2:	69ba      	ldr	r2, [r7, #24]
 80068f4:	1ad3      	subs	r3, r2, r3
 80068f6:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 80068f8:	68bb      	ldr	r3, [r7, #8]
 80068fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80068fc:	697b      	ldr	r3, [r7, #20]
 80068fe:	623b      	str	r3, [r7, #32]
 8006900:	e00b      	b.n	800691a <_SendPacket+0x11a>
 8006902:	6a3b      	ldr	r3, [r7, #32]
 8006904:	b2da      	uxtb	r2, r3
 8006906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006908:	1c59      	adds	r1, r3, #1
 800690a:	6279      	str	r1, [r7, #36]	@ 0x24
 800690c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006910:	b2d2      	uxtb	r2, r2
 8006912:	701a      	strb	r2, [r3, #0]
 8006914:	6a3b      	ldr	r3, [r7, #32]
 8006916:	09db      	lsrs	r3, r3, #7
 8006918:	623b      	str	r3, [r7, #32]
 800691a:	6a3b      	ldr	r3, [r7, #32]
 800691c:	2b7f      	cmp	r3, #127	@ 0x7f
 800691e:	d8f0      	bhi.n	8006902 <_SendPacket+0x102>
 8006920:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006922:	1c5a      	adds	r2, r3, #1
 8006924:	627a      	str	r2, [r7, #36]	@ 0x24
 8006926:	6a3a      	ldr	r2, [r7, #32]
 8006928:	b2d2      	uxtb	r2, r2
 800692a:	701a      	strb	r2, [r3, #0]
 800692c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800692e:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8006930:	4b24      	ldr	r3, [pc, #144]	@ (80069c4 <_SendPacket+0x1c4>)
 8006932:	785b      	ldrb	r3, [r3, #1]
 8006934:	4618      	mov	r0, r3
 8006936:	68ba      	ldr	r2, [r7, #8]
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	1ad3      	subs	r3, r2, r3
 800693c:	461a      	mov	r2, r3
 800693e:	68f9      	ldr	r1, [r7, #12]
 8006940:	f7f9 fc46 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8006944:	4603      	mov	r3, r0
 8006946:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 8006948:	f7ff fd2e 	bl	80063a8 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 800694c:	693b      	ldr	r3, [r7, #16]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d003      	beq.n	800695a <_SendPacket+0x15a>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8006952:	4a1c      	ldr	r2, [pc, #112]	@ (80069c4 <_SendPacket+0x1c4>)
 8006954:	69bb      	ldr	r3, [r7, #24]
 8006956:	60d3      	str	r3, [r2, #12]
 8006958:	e00b      	b.n	8006972 <_SendPacket+0x172>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 800695a:	4b1a      	ldr	r3, [pc, #104]	@ (80069c4 <_SendPacket+0x1c4>)
 800695c:	781b      	ldrb	r3, [r3, #0]
 800695e:	3301      	adds	r3, #1
 8006960:	b2da      	uxtb	r2, r3
 8006962:	4b18      	ldr	r3, [pc, #96]	@ (80069c4 <_SendPacket+0x1c4>)
 8006964:	701a      	strb	r2, [r3, #0]
 8006966:	e004      	b.n	8006972 <_SendPacket+0x172>
    goto SendDone;
 8006968:	bf00      	nop
 800696a:	e002      	b.n	8006972 <_SendPacket+0x172>
      goto SendDone;
 800696c:	bf00      	nop
 800696e:	e000      	b.n	8006972 <_SendPacket+0x172>
      goto SendDone;
 8006970:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8006972:	4b14      	ldr	r3, [pc, #80]	@ (80069c4 <_SendPacket+0x1c4>)
 8006974:	7e1b      	ldrb	r3, [r3, #24]
 8006976:	4619      	mov	r1, r3
 8006978:	4a14      	ldr	r2, [pc, #80]	@ (80069cc <_SendPacket+0x1cc>)
 800697a:	460b      	mov	r3, r1
 800697c:	005b      	lsls	r3, r3, #1
 800697e:	440b      	add	r3, r1
 8006980:	00db      	lsls	r3, r3, #3
 8006982:	4413      	add	r3, r2
 8006984:	336c      	adds	r3, #108	@ 0x6c
 8006986:	681a      	ldr	r2, [r3, #0]
 8006988:	4b0e      	ldr	r3, [pc, #56]	@ (80069c4 <_SendPacket+0x1c4>)
 800698a:	7e1b      	ldrb	r3, [r3, #24]
 800698c:	4618      	mov	r0, r3
 800698e:	490f      	ldr	r1, [pc, #60]	@ (80069cc <_SendPacket+0x1cc>)
 8006990:	4603      	mov	r3, r0
 8006992:	005b      	lsls	r3, r3, #1
 8006994:	4403      	add	r3, r0
 8006996:	00db      	lsls	r3, r3, #3
 8006998:	440b      	add	r3, r1
 800699a:	3370      	adds	r3, #112	@ 0x70
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	429a      	cmp	r2, r3
 80069a0:	d00b      	beq.n	80069ba <_SendPacket+0x1ba>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80069a2:	4b08      	ldr	r3, [pc, #32]	@ (80069c4 <_SendPacket+0x1c4>)
 80069a4:	789b      	ldrb	r3, [r3, #2]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d107      	bne.n	80069ba <_SendPacket+0x1ba>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80069aa:	4b06      	ldr	r3, [pc, #24]	@ (80069c4 <_SendPacket+0x1c4>)
 80069ac:	2201      	movs	r2, #1
 80069ae:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80069b0:	f7ff fe42 	bl	8006638 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80069b4:	4b03      	ldr	r3, [pc, #12]	@ (80069c4 <_SendPacket+0x1c4>)
 80069b6:	2200      	movs	r2, #0
 80069b8:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 80069ba:	bf00      	nop
 80069bc:	3728      	adds	r7, #40	@ 0x28
 80069be:	46bd      	mov	sp, r7
 80069c0:	bd80      	pop	{r7, pc}
 80069c2:	bf00      	nop
 80069c4:	20013690 	.word	0x20013690
 80069c8:	e0001004 	.word	0xe0001004
 80069cc:	200131d8 	.word	0x200131d8

080069d0 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b084      	sub	sp, #16
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80069d8:	f3ef 8311 	mrs	r3, BASEPRI
 80069dc:	f04f 0120 	mov.w	r1, #32
 80069e0:	f381 8811 	msr	BASEPRI, r1
 80069e4:	60fb      	str	r3, [r7, #12]
 80069e6:	4808      	ldr	r0, [pc, #32]	@ (8006a08 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 80069e8:	f7ff fe19 	bl	800661e <_PreparePacket>
 80069ec:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 80069ee:	687a      	ldr	r2, [r7, #4]
 80069f0:	68b9      	ldr	r1, [r7, #8]
 80069f2:	68b8      	ldr	r0, [r7, #8]
 80069f4:	f7ff ff04 	bl	8006800 <_SendPacket>
  RECORD_END();
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	f383 8811 	msr	BASEPRI, r3
}
 80069fe:	bf00      	nop
 8006a00:	3710      	adds	r7, #16
 8006a02:	46bd      	mov	sp, r7
 8006a04:	bd80      	pop	{r7, pc}
 8006a06:	bf00      	nop
 8006a08:	200136c0 	.word	0x200136c0

08006a0c <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	b088      	sub	sp, #32
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
 8006a14:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006a16:	f3ef 8311 	mrs	r3, BASEPRI
 8006a1a:	f04f 0120 	mov.w	r1, #32
 8006a1e:	f381 8811 	msr	BASEPRI, r1
 8006a22:	617b      	str	r3, [r7, #20]
 8006a24:	4816      	ldr	r0, [pc, #88]	@ (8006a80 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8006a26:	f7ff fdfa 	bl	800661e <_PreparePacket>
 8006a2a:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006a2c:	693b      	ldr	r3, [r7, #16]
 8006a2e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	61fb      	str	r3, [r7, #28]
 8006a34:	683b      	ldr	r3, [r7, #0]
 8006a36:	61bb      	str	r3, [r7, #24]
 8006a38:	e00b      	b.n	8006a52 <SEGGER_SYSVIEW_RecordU32+0x46>
 8006a3a:	69bb      	ldr	r3, [r7, #24]
 8006a3c:	b2da      	uxtb	r2, r3
 8006a3e:	69fb      	ldr	r3, [r7, #28]
 8006a40:	1c59      	adds	r1, r3, #1
 8006a42:	61f9      	str	r1, [r7, #28]
 8006a44:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006a48:	b2d2      	uxtb	r2, r2
 8006a4a:	701a      	strb	r2, [r3, #0]
 8006a4c:	69bb      	ldr	r3, [r7, #24]
 8006a4e:	09db      	lsrs	r3, r3, #7
 8006a50:	61bb      	str	r3, [r7, #24]
 8006a52:	69bb      	ldr	r3, [r7, #24]
 8006a54:	2b7f      	cmp	r3, #127	@ 0x7f
 8006a56:	d8f0      	bhi.n	8006a3a <SEGGER_SYSVIEW_RecordU32+0x2e>
 8006a58:	69fb      	ldr	r3, [r7, #28]
 8006a5a:	1c5a      	adds	r2, r3, #1
 8006a5c:	61fa      	str	r2, [r7, #28]
 8006a5e:	69ba      	ldr	r2, [r7, #24]
 8006a60:	b2d2      	uxtb	r2, r2
 8006a62:	701a      	strb	r2, [r3, #0]
 8006a64:	69fb      	ldr	r3, [r7, #28]
 8006a66:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006a68:	687a      	ldr	r2, [r7, #4]
 8006a6a:	68f9      	ldr	r1, [r7, #12]
 8006a6c:	6938      	ldr	r0, [r7, #16]
 8006a6e:	f7ff fec7 	bl	8006800 <_SendPacket>
  RECORD_END();
 8006a72:	697b      	ldr	r3, [r7, #20]
 8006a74:	f383 8811 	msr	BASEPRI, r3
}
 8006a78:	bf00      	nop
 8006a7a:	3720      	adds	r7, #32
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	bd80      	pop	{r7, pc}
 8006a80:	200136c0 	.word	0x200136c0

08006a84 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b08c      	sub	sp, #48	@ 0x30
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	60f8      	str	r0, [r7, #12]
 8006a8c:	60b9      	str	r1, [r7, #8]
 8006a8e:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006a90:	f3ef 8311 	mrs	r3, BASEPRI
 8006a94:	f04f 0120 	mov.w	r1, #32
 8006a98:	f381 8811 	msr	BASEPRI, r1
 8006a9c:	61fb      	str	r3, [r7, #28]
 8006a9e:	4825      	ldr	r0, [pc, #148]	@ (8006b34 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8006aa0:	f7ff fdbd 	bl	800661e <_PreparePacket>
 8006aa4:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006aa6:	69bb      	ldr	r3, [r7, #24]
 8006aa8:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006aaa:	697b      	ldr	r3, [r7, #20]
 8006aac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006aae:	68bb      	ldr	r3, [r7, #8]
 8006ab0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006ab2:	e00b      	b.n	8006acc <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8006ab4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ab6:	b2da      	uxtb	r2, r3
 8006ab8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006aba:	1c59      	adds	r1, r3, #1
 8006abc:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8006abe:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006ac2:	b2d2      	uxtb	r2, r2
 8006ac4:	701a      	strb	r2, [r3, #0]
 8006ac6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ac8:	09db      	lsrs	r3, r3, #7
 8006aca:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006acc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ace:	2b7f      	cmp	r3, #127	@ 0x7f
 8006ad0:	d8f0      	bhi.n	8006ab4 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8006ad2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ad4:	1c5a      	adds	r2, r3, #1
 8006ad6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006ad8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006ada:	b2d2      	uxtb	r2, r2
 8006adc:	701a      	strb	r2, [r3, #0]
 8006ade:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ae0:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006ae2:	697b      	ldr	r3, [r7, #20]
 8006ae4:	627b      	str	r3, [r7, #36]	@ 0x24
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	623b      	str	r3, [r7, #32]
 8006aea:	e00b      	b.n	8006b04 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8006aec:	6a3b      	ldr	r3, [r7, #32]
 8006aee:	b2da      	uxtb	r2, r3
 8006af0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006af2:	1c59      	adds	r1, r3, #1
 8006af4:	6279      	str	r1, [r7, #36]	@ 0x24
 8006af6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006afa:	b2d2      	uxtb	r2, r2
 8006afc:	701a      	strb	r2, [r3, #0]
 8006afe:	6a3b      	ldr	r3, [r7, #32]
 8006b00:	09db      	lsrs	r3, r3, #7
 8006b02:	623b      	str	r3, [r7, #32]
 8006b04:	6a3b      	ldr	r3, [r7, #32]
 8006b06:	2b7f      	cmp	r3, #127	@ 0x7f
 8006b08:	d8f0      	bhi.n	8006aec <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8006b0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b0c:	1c5a      	adds	r2, r3, #1
 8006b0e:	627a      	str	r2, [r7, #36]	@ 0x24
 8006b10:	6a3a      	ldr	r2, [r7, #32]
 8006b12:	b2d2      	uxtb	r2, r2
 8006b14:	701a      	strb	r2, [r3, #0]
 8006b16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b18:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006b1a:	68fa      	ldr	r2, [r7, #12]
 8006b1c:	6979      	ldr	r1, [r7, #20]
 8006b1e:	69b8      	ldr	r0, [r7, #24]
 8006b20:	f7ff fe6e 	bl	8006800 <_SendPacket>
  RECORD_END();
 8006b24:	69fb      	ldr	r3, [r7, #28]
 8006b26:	f383 8811 	msr	BASEPRI, r3
}
 8006b2a:	bf00      	nop
 8006b2c:	3730      	adds	r7, #48	@ 0x30
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	bd80      	pop	{r7, pc}
 8006b32:	bf00      	nop
 8006b34:	200136c0 	.word	0x200136c0

08006b38 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b08e      	sub	sp, #56	@ 0x38
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	60f8      	str	r0, [r7, #12]
 8006b40:	60b9      	str	r1, [r7, #8]
 8006b42:	607a      	str	r2, [r7, #4]
 8006b44:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8006b46:	f3ef 8311 	mrs	r3, BASEPRI
 8006b4a:	f04f 0120 	mov.w	r1, #32
 8006b4e:	f381 8811 	msr	BASEPRI, r1
 8006b52:	61fb      	str	r3, [r7, #28]
 8006b54:	4832      	ldr	r0, [pc, #200]	@ (8006c20 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8006b56:	f7ff fd62 	bl	800661e <_PreparePacket>
 8006b5a:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006b5c:	69bb      	ldr	r3, [r7, #24]
 8006b5e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006b60:	697b      	ldr	r3, [r7, #20]
 8006b62:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b64:	68bb      	ldr	r3, [r7, #8]
 8006b66:	633b      	str	r3, [r7, #48]	@ 0x30
 8006b68:	e00b      	b.n	8006b82 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8006b6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b6c:	b2da      	uxtb	r2, r3
 8006b6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b70:	1c59      	adds	r1, r3, #1
 8006b72:	6379      	str	r1, [r7, #52]	@ 0x34
 8006b74:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006b78:	b2d2      	uxtb	r2, r2
 8006b7a:	701a      	strb	r2, [r3, #0]
 8006b7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b7e:	09db      	lsrs	r3, r3, #7
 8006b80:	633b      	str	r3, [r7, #48]	@ 0x30
 8006b82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b84:	2b7f      	cmp	r3, #127	@ 0x7f
 8006b86:	d8f0      	bhi.n	8006b6a <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8006b88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b8a:	1c5a      	adds	r2, r3, #1
 8006b8c:	637a      	str	r2, [r7, #52]	@ 0x34
 8006b8e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006b90:	b2d2      	uxtb	r2, r2
 8006b92:	701a      	strb	r2, [r3, #0]
 8006b94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b96:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006b98:	697b      	ldr	r3, [r7, #20]
 8006b9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006ba0:	e00b      	b.n	8006bba <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8006ba2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ba4:	b2da      	uxtb	r2, r3
 8006ba6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ba8:	1c59      	adds	r1, r3, #1
 8006baa:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8006bac:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006bb0:	b2d2      	uxtb	r2, r2
 8006bb2:	701a      	strb	r2, [r3, #0]
 8006bb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bb6:	09db      	lsrs	r3, r3, #7
 8006bb8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006bba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bbc:	2b7f      	cmp	r3, #127	@ 0x7f
 8006bbe:	d8f0      	bhi.n	8006ba2 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8006bc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bc2:	1c5a      	adds	r2, r3, #1
 8006bc4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006bc6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006bc8:	b2d2      	uxtb	r2, r2
 8006bca:	701a      	strb	r2, [r3, #0]
 8006bcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bce:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8006bd0:	697b      	ldr	r3, [r7, #20]
 8006bd2:	627b      	str	r3, [r7, #36]	@ 0x24
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	623b      	str	r3, [r7, #32]
 8006bd8:	e00b      	b.n	8006bf2 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8006bda:	6a3b      	ldr	r3, [r7, #32]
 8006bdc:	b2da      	uxtb	r2, r3
 8006bde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006be0:	1c59      	adds	r1, r3, #1
 8006be2:	6279      	str	r1, [r7, #36]	@ 0x24
 8006be4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006be8:	b2d2      	uxtb	r2, r2
 8006bea:	701a      	strb	r2, [r3, #0]
 8006bec:	6a3b      	ldr	r3, [r7, #32]
 8006bee:	09db      	lsrs	r3, r3, #7
 8006bf0:	623b      	str	r3, [r7, #32]
 8006bf2:	6a3b      	ldr	r3, [r7, #32]
 8006bf4:	2b7f      	cmp	r3, #127	@ 0x7f
 8006bf6:	d8f0      	bhi.n	8006bda <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8006bf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bfa:	1c5a      	adds	r2, r3, #1
 8006bfc:	627a      	str	r2, [r7, #36]	@ 0x24
 8006bfe:	6a3a      	ldr	r2, [r7, #32]
 8006c00:	b2d2      	uxtb	r2, r2
 8006c02:	701a      	strb	r2, [r3, #0]
 8006c04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c06:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006c08:	68fa      	ldr	r2, [r7, #12]
 8006c0a:	6979      	ldr	r1, [r7, #20]
 8006c0c:	69b8      	ldr	r0, [r7, #24]
 8006c0e:	f7ff fdf7 	bl	8006800 <_SendPacket>
  RECORD_END();
 8006c12:	69fb      	ldr	r3, [r7, #28]
 8006c14:	f383 8811 	msr	BASEPRI, r3
}
 8006c18:	bf00      	nop
 8006c1a:	3738      	adds	r7, #56	@ 0x38
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	bd80      	pop	{r7, pc}
 8006c20:	200136c0 	.word	0x200136c0

08006c24 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8006c24:	b580      	push	{r7, lr}
 8006c26:	b090      	sub	sp, #64	@ 0x40
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	60f8      	str	r0, [r7, #12]
 8006c2c:	60b9      	str	r1, [r7, #8]
 8006c2e:	607a      	str	r2, [r7, #4]
 8006c30:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006c32:	f3ef 8311 	mrs	r3, BASEPRI
 8006c36:	f04f 0120 	mov.w	r1, #32
 8006c3a:	f381 8811 	msr	BASEPRI, r1
 8006c3e:	61fb      	str	r3, [r7, #28]
 8006c40:	4840      	ldr	r0, [pc, #256]	@ (8006d44 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8006c42:	f7ff fcec 	bl	800661e <_PreparePacket>
 8006c46:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006c48:	69bb      	ldr	r3, [r7, #24]
 8006c4a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006c4c:	697b      	ldr	r3, [r7, #20]
 8006c4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006c50:	68bb      	ldr	r3, [r7, #8]
 8006c52:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006c54:	e00b      	b.n	8006c6e <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8006c56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c58:	b2da      	uxtb	r2, r3
 8006c5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c5c:	1c59      	adds	r1, r3, #1
 8006c5e:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8006c60:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006c64:	b2d2      	uxtb	r2, r2
 8006c66:	701a      	strb	r2, [r3, #0]
 8006c68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c6a:	09db      	lsrs	r3, r3, #7
 8006c6c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006c6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c70:	2b7f      	cmp	r3, #127	@ 0x7f
 8006c72:	d8f0      	bhi.n	8006c56 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8006c74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c76:	1c5a      	adds	r2, r3, #1
 8006c78:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006c7a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006c7c:	b2d2      	uxtb	r2, r2
 8006c7e:	701a      	strb	r2, [r3, #0]
 8006c80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c82:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006c84:	697b      	ldr	r3, [r7, #20]
 8006c86:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	633b      	str	r3, [r7, #48]	@ 0x30
 8006c8c:	e00b      	b.n	8006ca6 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8006c8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c90:	b2da      	uxtb	r2, r3
 8006c92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c94:	1c59      	adds	r1, r3, #1
 8006c96:	6379      	str	r1, [r7, #52]	@ 0x34
 8006c98:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006c9c:	b2d2      	uxtb	r2, r2
 8006c9e:	701a      	strb	r2, [r3, #0]
 8006ca0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ca2:	09db      	lsrs	r3, r3, #7
 8006ca4:	633b      	str	r3, [r7, #48]	@ 0x30
 8006ca6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ca8:	2b7f      	cmp	r3, #127	@ 0x7f
 8006caa:	d8f0      	bhi.n	8006c8e <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8006cac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006cae:	1c5a      	adds	r2, r3, #1
 8006cb0:	637a      	str	r2, [r7, #52]	@ 0x34
 8006cb2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006cb4:	b2d2      	uxtb	r2, r2
 8006cb6:	701a      	strb	r2, [r3, #0]
 8006cb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006cba:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8006cbc:	697b      	ldr	r3, [r7, #20]
 8006cbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006cc4:	e00b      	b.n	8006cde <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8006cc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cc8:	b2da      	uxtb	r2, r3
 8006cca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ccc:	1c59      	adds	r1, r3, #1
 8006cce:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8006cd0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006cd4:	b2d2      	uxtb	r2, r2
 8006cd6:	701a      	strb	r2, [r3, #0]
 8006cd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cda:	09db      	lsrs	r3, r3, #7
 8006cdc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006cde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ce0:	2b7f      	cmp	r3, #127	@ 0x7f
 8006ce2:	d8f0      	bhi.n	8006cc6 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8006ce4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ce6:	1c5a      	adds	r2, r3, #1
 8006ce8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006cea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006cec:	b2d2      	uxtb	r2, r2
 8006cee:	701a      	strb	r2, [r3, #0]
 8006cf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cf2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8006cf4:	697b      	ldr	r3, [r7, #20]
 8006cf6:	627b      	str	r3, [r7, #36]	@ 0x24
 8006cf8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006cfa:	623b      	str	r3, [r7, #32]
 8006cfc:	e00b      	b.n	8006d16 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8006cfe:	6a3b      	ldr	r3, [r7, #32]
 8006d00:	b2da      	uxtb	r2, r3
 8006d02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d04:	1c59      	adds	r1, r3, #1
 8006d06:	6279      	str	r1, [r7, #36]	@ 0x24
 8006d08:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006d0c:	b2d2      	uxtb	r2, r2
 8006d0e:	701a      	strb	r2, [r3, #0]
 8006d10:	6a3b      	ldr	r3, [r7, #32]
 8006d12:	09db      	lsrs	r3, r3, #7
 8006d14:	623b      	str	r3, [r7, #32]
 8006d16:	6a3b      	ldr	r3, [r7, #32]
 8006d18:	2b7f      	cmp	r3, #127	@ 0x7f
 8006d1a:	d8f0      	bhi.n	8006cfe <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8006d1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d1e:	1c5a      	adds	r2, r3, #1
 8006d20:	627a      	str	r2, [r7, #36]	@ 0x24
 8006d22:	6a3a      	ldr	r2, [r7, #32]
 8006d24:	b2d2      	uxtb	r2, r2
 8006d26:	701a      	strb	r2, [r3, #0]
 8006d28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d2a:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006d2c:	68fa      	ldr	r2, [r7, #12]
 8006d2e:	6979      	ldr	r1, [r7, #20]
 8006d30:	69b8      	ldr	r0, [r7, #24]
 8006d32:	f7ff fd65 	bl	8006800 <_SendPacket>
  RECORD_END();
 8006d36:	69fb      	ldr	r3, [r7, #28]
 8006d38:	f383 8811 	msr	BASEPRI, r3
}
 8006d3c:	bf00      	nop
 8006d3e:	3740      	adds	r7, #64	@ 0x40
 8006d40:	46bd      	mov	sp, r7
 8006d42:	bd80      	pop	{r7, pc}
 8006d44:	200136c0 	.word	0x200136c0

08006d48 <SEGGER_SYSVIEW_RecordU32x5>:
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*    Para4   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x5(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3, U32 Para4) {
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b092      	sub	sp, #72	@ 0x48
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	60f8      	str	r0, [r7, #12]
 8006d50:	60b9      	str	r1, [r7, #8]
 8006d52:	607a      	str	r2, [r7, #4]
 8006d54:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 5 * SEGGER_SYSVIEW_QUANTA_U32);
 8006d56:	f3ef 8311 	mrs	r3, BASEPRI
 8006d5a:	f04f 0120 	mov.w	r1, #32
 8006d5e:	f381 8811 	msr	BASEPRI, r1
 8006d62:	61fb      	str	r3, [r7, #28]
 8006d64:	484e      	ldr	r0, [pc, #312]	@ (8006ea0 <SEGGER_SYSVIEW_RecordU32x5+0x158>)
 8006d66:	f7ff fc5a 	bl	800661e <_PreparePacket>
 8006d6a:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006d6c:	69bb      	ldr	r3, [r7, #24]
 8006d6e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006d70:	697b      	ldr	r3, [r7, #20]
 8006d72:	647b      	str	r3, [r7, #68]	@ 0x44
 8006d74:	68bb      	ldr	r3, [r7, #8]
 8006d76:	643b      	str	r3, [r7, #64]	@ 0x40
 8006d78:	e00b      	b.n	8006d92 <SEGGER_SYSVIEW_RecordU32x5+0x4a>
 8006d7a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006d7c:	b2da      	uxtb	r2, r3
 8006d7e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d80:	1c59      	adds	r1, r3, #1
 8006d82:	6479      	str	r1, [r7, #68]	@ 0x44
 8006d84:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006d88:	b2d2      	uxtb	r2, r2
 8006d8a:	701a      	strb	r2, [r3, #0]
 8006d8c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006d8e:	09db      	lsrs	r3, r3, #7
 8006d90:	643b      	str	r3, [r7, #64]	@ 0x40
 8006d92:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006d94:	2b7f      	cmp	r3, #127	@ 0x7f
 8006d96:	d8f0      	bhi.n	8006d7a <SEGGER_SYSVIEW_RecordU32x5+0x32>
 8006d98:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d9a:	1c5a      	adds	r2, r3, #1
 8006d9c:	647a      	str	r2, [r7, #68]	@ 0x44
 8006d9e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006da0:	b2d2      	uxtb	r2, r2
 8006da2:	701a      	strb	r2, [r3, #0]
 8006da4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006da6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006da8:	697b      	ldr	r3, [r7, #20]
 8006daa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006db0:	e00b      	b.n	8006dca <SEGGER_SYSVIEW_RecordU32x5+0x82>
 8006db2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006db4:	b2da      	uxtb	r2, r3
 8006db6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006db8:	1c59      	adds	r1, r3, #1
 8006dba:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8006dbc:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006dc0:	b2d2      	uxtb	r2, r2
 8006dc2:	701a      	strb	r2, [r3, #0]
 8006dc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dc6:	09db      	lsrs	r3, r3, #7
 8006dc8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006dca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dcc:	2b7f      	cmp	r3, #127	@ 0x7f
 8006dce:	d8f0      	bhi.n	8006db2 <SEGGER_SYSVIEW_RecordU32x5+0x6a>
 8006dd0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006dd2:	1c5a      	adds	r2, r3, #1
 8006dd4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006dd6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006dd8:	b2d2      	uxtb	r2, r2
 8006dda:	701a      	strb	r2, [r3, #0]
 8006ddc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006dde:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8006de0:	697b      	ldr	r3, [r7, #20]
 8006de2:	637b      	str	r3, [r7, #52]	@ 0x34
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	633b      	str	r3, [r7, #48]	@ 0x30
 8006de8:	e00b      	b.n	8006e02 <SEGGER_SYSVIEW_RecordU32x5+0xba>
 8006dea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dec:	b2da      	uxtb	r2, r3
 8006dee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006df0:	1c59      	adds	r1, r3, #1
 8006df2:	6379      	str	r1, [r7, #52]	@ 0x34
 8006df4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006df8:	b2d2      	uxtb	r2, r2
 8006dfa:	701a      	strb	r2, [r3, #0]
 8006dfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dfe:	09db      	lsrs	r3, r3, #7
 8006e00:	633b      	str	r3, [r7, #48]	@ 0x30
 8006e02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e04:	2b7f      	cmp	r3, #127	@ 0x7f
 8006e06:	d8f0      	bhi.n	8006dea <SEGGER_SYSVIEW_RecordU32x5+0xa2>
 8006e08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e0a:	1c5a      	adds	r2, r3, #1
 8006e0c:	637a      	str	r2, [r7, #52]	@ 0x34
 8006e0e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006e10:	b2d2      	uxtb	r2, r2
 8006e12:	701a      	strb	r2, [r3, #0]
 8006e14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e16:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8006e18:	697b      	ldr	r3, [r7, #20]
 8006e1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006e1c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006e1e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006e20:	e00b      	b.n	8006e3a <SEGGER_SYSVIEW_RecordU32x5+0xf2>
 8006e22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e24:	b2da      	uxtb	r2, r3
 8006e26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e28:	1c59      	adds	r1, r3, #1
 8006e2a:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8006e2c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006e30:	b2d2      	uxtb	r2, r2
 8006e32:	701a      	strb	r2, [r3, #0]
 8006e34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e36:	09db      	lsrs	r3, r3, #7
 8006e38:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006e3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e3c:	2b7f      	cmp	r3, #127	@ 0x7f
 8006e3e:	d8f0      	bhi.n	8006e22 <SEGGER_SYSVIEW_RecordU32x5+0xda>
 8006e40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e42:	1c5a      	adds	r2, r3, #1
 8006e44:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006e46:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006e48:	b2d2      	uxtb	r2, r2
 8006e4a:	701a      	strb	r2, [r3, #0]
 8006e4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e4e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para4);
 8006e50:	697b      	ldr	r3, [r7, #20]
 8006e52:	627b      	str	r3, [r7, #36]	@ 0x24
 8006e54:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006e56:	623b      	str	r3, [r7, #32]
 8006e58:	e00b      	b.n	8006e72 <SEGGER_SYSVIEW_RecordU32x5+0x12a>
 8006e5a:	6a3b      	ldr	r3, [r7, #32]
 8006e5c:	b2da      	uxtb	r2, r3
 8006e5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e60:	1c59      	adds	r1, r3, #1
 8006e62:	6279      	str	r1, [r7, #36]	@ 0x24
 8006e64:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006e68:	b2d2      	uxtb	r2, r2
 8006e6a:	701a      	strb	r2, [r3, #0]
 8006e6c:	6a3b      	ldr	r3, [r7, #32]
 8006e6e:	09db      	lsrs	r3, r3, #7
 8006e70:	623b      	str	r3, [r7, #32]
 8006e72:	6a3b      	ldr	r3, [r7, #32]
 8006e74:	2b7f      	cmp	r3, #127	@ 0x7f
 8006e76:	d8f0      	bhi.n	8006e5a <SEGGER_SYSVIEW_RecordU32x5+0x112>
 8006e78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e7a:	1c5a      	adds	r2, r3, #1
 8006e7c:	627a      	str	r2, [r7, #36]	@ 0x24
 8006e7e:	6a3a      	ldr	r2, [r7, #32]
 8006e80:	b2d2      	uxtb	r2, r2
 8006e82:	701a      	strb	r2, [r3, #0]
 8006e84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e86:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006e88:	68fa      	ldr	r2, [r7, #12]
 8006e8a:	6979      	ldr	r1, [r7, #20]
 8006e8c:	69b8      	ldr	r0, [r7, #24]
 8006e8e:	f7ff fcb7 	bl	8006800 <_SendPacket>
  RECORD_END();
 8006e92:	69fb      	ldr	r3, [r7, #28]
 8006e94:	f383 8811 	msr	BASEPRI, r3
}
 8006e98:	bf00      	nop
 8006e9a:	3748      	adds	r7, #72	@ 0x48
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	bd80      	pop	{r7, pc}
 8006ea0:	200136c0 	.word	0x200136c0

08006ea4 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b08c      	sub	sp, #48	@ 0x30
 8006ea8:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8006eaa:	4b59      	ldr	r3, [pc, #356]	@ (8007010 <SEGGER_SYSVIEW_Start+0x16c>)
 8006eac:	2201      	movs	r2, #1
 8006eae:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8006eb0:	f3ef 8311 	mrs	r3, BASEPRI
 8006eb4:	f04f 0120 	mov.w	r1, #32
 8006eb8:	f381 8811 	msr	BASEPRI, r1
 8006ebc:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8006ebe:	4b54      	ldr	r3, [pc, #336]	@ (8007010 <SEGGER_SYSVIEW_Start+0x16c>)
 8006ec0:	785b      	ldrb	r3, [r3, #1]
 8006ec2:	220a      	movs	r2, #10
 8006ec4:	4953      	ldr	r1, [pc, #332]	@ (8007014 <SEGGER_SYSVIEW_Start+0x170>)
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	f7f9 f982 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 8006ed2:	f7ff fa69 	bl	80063a8 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8006ed6:	200a      	movs	r0, #10
 8006ed8:	f7ff fd7a 	bl	80069d0 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006edc:	f3ef 8311 	mrs	r3, BASEPRI
 8006ee0:	f04f 0120 	mov.w	r1, #32
 8006ee4:	f381 8811 	msr	BASEPRI, r1
 8006ee8:	60bb      	str	r3, [r7, #8]
 8006eea:	484b      	ldr	r0, [pc, #300]	@ (8007018 <SEGGER_SYSVIEW_Start+0x174>)
 8006eec:	f7ff fb97 	bl	800661e <_PreparePacket>
 8006ef0:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006efa:	4b45      	ldr	r3, [pc, #276]	@ (8007010 <SEGGER_SYSVIEW_Start+0x16c>)
 8006efc:	685b      	ldr	r3, [r3, #4]
 8006efe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006f00:	e00b      	b.n	8006f1a <SEGGER_SYSVIEW_Start+0x76>
 8006f02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f04:	b2da      	uxtb	r2, r3
 8006f06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f08:	1c59      	adds	r1, r3, #1
 8006f0a:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8006f0c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006f10:	b2d2      	uxtb	r2, r2
 8006f12:	701a      	strb	r2, [r3, #0]
 8006f14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f16:	09db      	lsrs	r3, r3, #7
 8006f18:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006f1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f1c:	2b7f      	cmp	r3, #127	@ 0x7f
 8006f1e:	d8f0      	bhi.n	8006f02 <SEGGER_SYSVIEW_Start+0x5e>
 8006f20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f22:	1c5a      	adds	r2, r3, #1
 8006f24:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006f26:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006f28:	b2d2      	uxtb	r2, r2
 8006f2a:	701a      	strb	r2, [r3, #0]
 8006f2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f2e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	627b      	str	r3, [r7, #36]	@ 0x24
 8006f34:	4b36      	ldr	r3, [pc, #216]	@ (8007010 <SEGGER_SYSVIEW_Start+0x16c>)
 8006f36:	689b      	ldr	r3, [r3, #8]
 8006f38:	623b      	str	r3, [r7, #32]
 8006f3a:	e00b      	b.n	8006f54 <SEGGER_SYSVIEW_Start+0xb0>
 8006f3c:	6a3b      	ldr	r3, [r7, #32]
 8006f3e:	b2da      	uxtb	r2, r3
 8006f40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f42:	1c59      	adds	r1, r3, #1
 8006f44:	6279      	str	r1, [r7, #36]	@ 0x24
 8006f46:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006f4a:	b2d2      	uxtb	r2, r2
 8006f4c:	701a      	strb	r2, [r3, #0]
 8006f4e:	6a3b      	ldr	r3, [r7, #32]
 8006f50:	09db      	lsrs	r3, r3, #7
 8006f52:	623b      	str	r3, [r7, #32]
 8006f54:	6a3b      	ldr	r3, [r7, #32]
 8006f56:	2b7f      	cmp	r3, #127	@ 0x7f
 8006f58:	d8f0      	bhi.n	8006f3c <SEGGER_SYSVIEW_Start+0x98>
 8006f5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f5c:	1c5a      	adds	r2, r3, #1
 8006f5e:	627a      	str	r2, [r7, #36]	@ 0x24
 8006f60:	6a3a      	ldr	r2, [r7, #32]
 8006f62:	b2d2      	uxtb	r2, r2
 8006f64:	701a      	strb	r2, [r3, #0]
 8006f66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f68:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006f6a:	683b      	ldr	r3, [r7, #0]
 8006f6c:	61fb      	str	r3, [r7, #28]
 8006f6e:	4b28      	ldr	r3, [pc, #160]	@ (8007010 <SEGGER_SYSVIEW_Start+0x16c>)
 8006f70:	691b      	ldr	r3, [r3, #16]
 8006f72:	61bb      	str	r3, [r7, #24]
 8006f74:	e00b      	b.n	8006f8e <SEGGER_SYSVIEW_Start+0xea>
 8006f76:	69bb      	ldr	r3, [r7, #24]
 8006f78:	b2da      	uxtb	r2, r3
 8006f7a:	69fb      	ldr	r3, [r7, #28]
 8006f7c:	1c59      	adds	r1, r3, #1
 8006f7e:	61f9      	str	r1, [r7, #28]
 8006f80:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006f84:	b2d2      	uxtb	r2, r2
 8006f86:	701a      	strb	r2, [r3, #0]
 8006f88:	69bb      	ldr	r3, [r7, #24]
 8006f8a:	09db      	lsrs	r3, r3, #7
 8006f8c:	61bb      	str	r3, [r7, #24]
 8006f8e:	69bb      	ldr	r3, [r7, #24]
 8006f90:	2b7f      	cmp	r3, #127	@ 0x7f
 8006f92:	d8f0      	bhi.n	8006f76 <SEGGER_SYSVIEW_Start+0xd2>
 8006f94:	69fb      	ldr	r3, [r7, #28]
 8006f96:	1c5a      	adds	r2, r3, #1
 8006f98:	61fa      	str	r2, [r7, #28]
 8006f9a:	69ba      	ldr	r2, [r7, #24]
 8006f9c:	b2d2      	uxtb	r2, r2
 8006f9e:	701a      	strb	r2, [r3, #0]
 8006fa0:	69fb      	ldr	r3, [r7, #28]
 8006fa2:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	617b      	str	r3, [r7, #20]
 8006fa8:	2300      	movs	r3, #0
 8006faa:	613b      	str	r3, [r7, #16]
 8006fac:	e00b      	b.n	8006fc6 <SEGGER_SYSVIEW_Start+0x122>
 8006fae:	693b      	ldr	r3, [r7, #16]
 8006fb0:	b2da      	uxtb	r2, r3
 8006fb2:	697b      	ldr	r3, [r7, #20]
 8006fb4:	1c59      	adds	r1, r3, #1
 8006fb6:	6179      	str	r1, [r7, #20]
 8006fb8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006fbc:	b2d2      	uxtb	r2, r2
 8006fbe:	701a      	strb	r2, [r3, #0]
 8006fc0:	693b      	ldr	r3, [r7, #16]
 8006fc2:	09db      	lsrs	r3, r3, #7
 8006fc4:	613b      	str	r3, [r7, #16]
 8006fc6:	693b      	ldr	r3, [r7, #16]
 8006fc8:	2b7f      	cmp	r3, #127	@ 0x7f
 8006fca:	d8f0      	bhi.n	8006fae <SEGGER_SYSVIEW_Start+0x10a>
 8006fcc:	697b      	ldr	r3, [r7, #20]
 8006fce:	1c5a      	adds	r2, r3, #1
 8006fd0:	617a      	str	r2, [r7, #20]
 8006fd2:	693a      	ldr	r2, [r7, #16]
 8006fd4:	b2d2      	uxtb	r2, r2
 8006fd6:	701a      	strb	r2, [r3, #0]
 8006fd8:	697b      	ldr	r3, [r7, #20]
 8006fda:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006fdc:	2218      	movs	r2, #24
 8006fde:	6839      	ldr	r1, [r7, #0]
 8006fe0:	6878      	ldr	r0, [r7, #4]
 8006fe2:	f7ff fc0d 	bl	8006800 <_SendPacket>
      RECORD_END();
 8006fe6:	68bb      	ldr	r3, [r7, #8]
 8006fe8:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006fec:	4b08      	ldr	r3, [pc, #32]	@ (8007010 <SEGGER_SYSVIEW_Start+0x16c>)
 8006fee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d002      	beq.n	8006ffa <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8006ff4:	4b06      	ldr	r3, [pc, #24]	@ (8007010 <SEGGER_SYSVIEW_Start+0x16c>)
 8006ff6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ff8:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8006ffa:	f000 f9c7 	bl	800738c <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8006ffe:	f000 f9b1 	bl	8007364 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8007002:	f000 fc5f 	bl	80078c4 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8007006:	bf00      	nop
 8007008:	3730      	adds	r7, #48	@ 0x30
 800700a:	46bd      	mov	sp, r7
 800700c:	bd80      	pop	{r7, pc}
 800700e:	bf00      	nop
 8007010:	20013690 	.word	0x20013690
 8007014:	08008468 	.word	0x08008468
 8007018:	200136c0 	.word	0x200136c0

0800701c <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 800701c:	b580      	push	{r7, lr}
 800701e:	b082      	sub	sp, #8
 8007020:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8007022:	f3ef 8311 	mrs	r3, BASEPRI
 8007026:	f04f 0120 	mov.w	r1, #32
 800702a:	f381 8811 	msr	BASEPRI, r1
 800702e:	607b      	str	r3, [r7, #4]
 8007030:	480b      	ldr	r0, [pc, #44]	@ (8007060 <SEGGER_SYSVIEW_Stop+0x44>)
 8007032:	f7ff faf4 	bl	800661e <_PreparePacket>
 8007036:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8007038:	4b0a      	ldr	r3, [pc, #40]	@ (8007064 <SEGGER_SYSVIEW_Stop+0x48>)
 800703a:	781b      	ldrb	r3, [r3, #0]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d007      	beq.n	8007050 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8007040:	220b      	movs	r2, #11
 8007042:	6839      	ldr	r1, [r7, #0]
 8007044:	6838      	ldr	r0, [r7, #0]
 8007046:	f7ff fbdb 	bl	8006800 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800704a:	4b06      	ldr	r3, [pc, #24]	@ (8007064 <SEGGER_SYSVIEW_Stop+0x48>)
 800704c:	2200      	movs	r2, #0
 800704e:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	f383 8811 	msr	BASEPRI, r3
}
 8007056:	bf00      	nop
 8007058:	3708      	adds	r7, #8
 800705a:	46bd      	mov	sp, r7
 800705c:	bd80      	pop	{r7, pc}
 800705e:	bf00      	nop
 8007060:	200136c0 	.word	0x200136c0
 8007064:	20013690 	.word	0x20013690

08007068 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8007068:	b580      	push	{r7, lr}
 800706a:	b08c      	sub	sp, #48	@ 0x30
 800706c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800706e:	f3ef 8311 	mrs	r3, BASEPRI
 8007072:	f04f 0120 	mov.w	r1, #32
 8007076:	f381 8811 	msr	BASEPRI, r1
 800707a:	60fb      	str	r3, [r7, #12]
 800707c:	4845      	ldr	r0, [pc, #276]	@ (8007194 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 800707e:	f7ff face 	bl	800661e <_PreparePacket>
 8007082:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8007084:	68bb      	ldr	r3, [r7, #8]
 8007086:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800708c:	4b42      	ldr	r3, [pc, #264]	@ (8007198 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800708e:	685b      	ldr	r3, [r3, #4]
 8007090:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007092:	e00b      	b.n	80070ac <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8007094:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007096:	b2da      	uxtb	r2, r3
 8007098:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800709a:	1c59      	adds	r1, r3, #1
 800709c:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800709e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80070a2:	b2d2      	uxtb	r2, r2
 80070a4:	701a      	strb	r2, [r3, #0]
 80070a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070a8:	09db      	lsrs	r3, r3, #7
 80070aa:	62bb      	str	r3, [r7, #40]	@ 0x28
 80070ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070ae:	2b7f      	cmp	r3, #127	@ 0x7f
 80070b0:	d8f0      	bhi.n	8007094 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 80070b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070b4:	1c5a      	adds	r2, r3, #1
 80070b6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80070b8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80070ba:	b2d2      	uxtb	r2, r2
 80070bc:	701a      	strb	r2, [r3, #0]
 80070be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070c0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80070c6:	4b34      	ldr	r3, [pc, #208]	@ (8007198 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80070c8:	689b      	ldr	r3, [r3, #8]
 80070ca:	623b      	str	r3, [r7, #32]
 80070cc:	e00b      	b.n	80070e6 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 80070ce:	6a3b      	ldr	r3, [r7, #32]
 80070d0:	b2da      	uxtb	r2, r3
 80070d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070d4:	1c59      	adds	r1, r3, #1
 80070d6:	6279      	str	r1, [r7, #36]	@ 0x24
 80070d8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80070dc:	b2d2      	uxtb	r2, r2
 80070de:	701a      	strb	r2, [r3, #0]
 80070e0:	6a3b      	ldr	r3, [r7, #32]
 80070e2:	09db      	lsrs	r3, r3, #7
 80070e4:	623b      	str	r3, [r7, #32]
 80070e6:	6a3b      	ldr	r3, [r7, #32]
 80070e8:	2b7f      	cmp	r3, #127	@ 0x7f
 80070ea:	d8f0      	bhi.n	80070ce <SEGGER_SYSVIEW_GetSysDesc+0x66>
 80070ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070ee:	1c5a      	adds	r2, r3, #1
 80070f0:	627a      	str	r2, [r7, #36]	@ 0x24
 80070f2:	6a3a      	ldr	r2, [r7, #32]
 80070f4:	b2d2      	uxtb	r2, r2
 80070f6:	701a      	strb	r2, [r3, #0]
 80070f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070fa:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	61fb      	str	r3, [r7, #28]
 8007100:	4b25      	ldr	r3, [pc, #148]	@ (8007198 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8007102:	691b      	ldr	r3, [r3, #16]
 8007104:	61bb      	str	r3, [r7, #24]
 8007106:	e00b      	b.n	8007120 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8007108:	69bb      	ldr	r3, [r7, #24]
 800710a:	b2da      	uxtb	r2, r3
 800710c:	69fb      	ldr	r3, [r7, #28]
 800710e:	1c59      	adds	r1, r3, #1
 8007110:	61f9      	str	r1, [r7, #28]
 8007112:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007116:	b2d2      	uxtb	r2, r2
 8007118:	701a      	strb	r2, [r3, #0]
 800711a:	69bb      	ldr	r3, [r7, #24]
 800711c:	09db      	lsrs	r3, r3, #7
 800711e:	61bb      	str	r3, [r7, #24]
 8007120:	69bb      	ldr	r3, [r7, #24]
 8007122:	2b7f      	cmp	r3, #127	@ 0x7f
 8007124:	d8f0      	bhi.n	8007108 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8007126:	69fb      	ldr	r3, [r7, #28]
 8007128:	1c5a      	adds	r2, r3, #1
 800712a:	61fa      	str	r2, [r7, #28]
 800712c:	69ba      	ldr	r2, [r7, #24]
 800712e:	b2d2      	uxtb	r2, r2
 8007130:	701a      	strb	r2, [r3, #0]
 8007132:	69fb      	ldr	r3, [r7, #28]
 8007134:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	617b      	str	r3, [r7, #20]
 800713a:	2300      	movs	r3, #0
 800713c:	613b      	str	r3, [r7, #16]
 800713e:	e00b      	b.n	8007158 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8007140:	693b      	ldr	r3, [r7, #16]
 8007142:	b2da      	uxtb	r2, r3
 8007144:	697b      	ldr	r3, [r7, #20]
 8007146:	1c59      	adds	r1, r3, #1
 8007148:	6179      	str	r1, [r7, #20]
 800714a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800714e:	b2d2      	uxtb	r2, r2
 8007150:	701a      	strb	r2, [r3, #0]
 8007152:	693b      	ldr	r3, [r7, #16]
 8007154:	09db      	lsrs	r3, r3, #7
 8007156:	613b      	str	r3, [r7, #16]
 8007158:	693b      	ldr	r3, [r7, #16]
 800715a:	2b7f      	cmp	r3, #127	@ 0x7f
 800715c:	d8f0      	bhi.n	8007140 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 800715e:	697b      	ldr	r3, [r7, #20]
 8007160:	1c5a      	adds	r2, r3, #1
 8007162:	617a      	str	r2, [r7, #20]
 8007164:	693a      	ldr	r2, [r7, #16]
 8007166:	b2d2      	uxtb	r2, r2
 8007168:	701a      	strb	r2, [r3, #0]
 800716a:	697b      	ldr	r3, [r7, #20]
 800716c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800716e:	2218      	movs	r2, #24
 8007170:	6879      	ldr	r1, [r7, #4]
 8007172:	68b8      	ldr	r0, [r7, #8]
 8007174:	f7ff fb44 	bl	8006800 <_SendPacket>
  RECORD_END();
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 800717e:	4b06      	ldr	r3, [pc, #24]	@ (8007198 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8007180:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007182:	2b00      	cmp	r3, #0
 8007184:	d002      	beq.n	800718c <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8007186:	4b04      	ldr	r3, [pc, #16]	@ (8007198 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8007188:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800718a:	4798      	blx	r3
  }
}
 800718c:	bf00      	nop
 800718e:	3730      	adds	r7, #48	@ 0x30
 8007190:	46bd      	mov	sp, r7
 8007192:	bd80      	pop	{r7, pc}
 8007194:	200136c0 	.word	0x200136c0
 8007198:	20013690 	.word	0x20013690

0800719c <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 800719c:	b580      	push	{r7, lr}
 800719e:	b092      	sub	sp, #72	@ 0x48
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 80071a4:	f3ef 8311 	mrs	r3, BASEPRI
 80071a8:	f04f 0120 	mov.w	r1, #32
 80071ac:	f381 8811 	msr	BASEPRI, r1
 80071b0:	617b      	str	r3, [r7, #20]
 80071b2:	486a      	ldr	r0, [pc, #424]	@ (800735c <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 80071b4:	f7ff fa33 	bl	800661e <_PreparePacket>
 80071b8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80071ba:	693b      	ldr	r3, [r7, #16]
 80071bc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681a      	ldr	r2, [r3, #0]
 80071c6:	4b66      	ldr	r3, [pc, #408]	@ (8007360 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80071c8:	691b      	ldr	r3, [r3, #16]
 80071ca:	1ad3      	subs	r3, r2, r3
 80071cc:	643b      	str	r3, [r7, #64]	@ 0x40
 80071ce:	e00b      	b.n	80071e8 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 80071d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80071d2:	b2da      	uxtb	r2, r3
 80071d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80071d6:	1c59      	adds	r1, r3, #1
 80071d8:	6479      	str	r1, [r7, #68]	@ 0x44
 80071da:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80071de:	b2d2      	uxtb	r2, r2
 80071e0:	701a      	strb	r2, [r3, #0]
 80071e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80071e4:	09db      	lsrs	r3, r3, #7
 80071e6:	643b      	str	r3, [r7, #64]	@ 0x40
 80071e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80071ea:	2b7f      	cmp	r3, #127	@ 0x7f
 80071ec:	d8f0      	bhi.n	80071d0 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 80071ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80071f0:	1c5a      	adds	r2, r3, #1
 80071f2:	647a      	str	r2, [r7, #68]	@ 0x44
 80071f4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80071f6:	b2d2      	uxtb	r2, r2
 80071f8:	701a      	strb	r2, [r3, #0]
 80071fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80071fc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	689b      	ldr	r3, [r3, #8]
 8007206:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007208:	e00b      	b.n	8007222 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 800720a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800720c:	b2da      	uxtb	r2, r3
 800720e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007210:	1c59      	adds	r1, r3, #1
 8007212:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8007214:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007218:	b2d2      	uxtb	r2, r2
 800721a:	701a      	strb	r2, [r3, #0]
 800721c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800721e:	09db      	lsrs	r3, r3, #7
 8007220:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007222:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007224:	2b7f      	cmp	r3, #127	@ 0x7f
 8007226:	d8f0      	bhi.n	800720a <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8007228:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800722a:	1c5a      	adds	r2, r3, #1
 800722c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800722e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007230:	b2d2      	uxtb	r2, r2
 8007232:	701a      	strb	r2, [r3, #0]
 8007234:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007236:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	685b      	ldr	r3, [r3, #4]
 800723c:	2220      	movs	r2, #32
 800723e:	4619      	mov	r1, r3
 8007240:	68f8      	ldr	r0, [r7, #12]
 8007242:	f7ff f99f 	bl	8006584 <_EncodeStr>
 8007246:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8007248:	2209      	movs	r2, #9
 800724a:	68f9      	ldr	r1, [r7, #12]
 800724c:	6938      	ldr	r0, [r7, #16]
 800724e:	f7ff fad7 	bl	8006800 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8007252:	693b      	ldr	r3, [r7, #16]
 8007254:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	637b      	str	r3, [r7, #52]	@ 0x34
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681a      	ldr	r2, [r3, #0]
 800725e:	4b40      	ldr	r3, [pc, #256]	@ (8007360 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8007260:	691b      	ldr	r3, [r3, #16]
 8007262:	1ad3      	subs	r3, r2, r3
 8007264:	633b      	str	r3, [r7, #48]	@ 0x30
 8007266:	e00b      	b.n	8007280 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8007268:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800726a:	b2da      	uxtb	r2, r3
 800726c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800726e:	1c59      	adds	r1, r3, #1
 8007270:	6379      	str	r1, [r7, #52]	@ 0x34
 8007272:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007276:	b2d2      	uxtb	r2, r2
 8007278:	701a      	strb	r2, [r3, #0]
 800727a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800727c:	09db      	lsrs	r3, r3, #7
 800727e:	633b      	str	r3, [r7, #48]	@ 0x30
 8007280:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007282:	2b7f      	cmp	r3, #127	@ 0x7f
 8007284:	d8f0      	bhi.n	8007268 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8007286:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007288:	1c5a      	adds	r2, r3, #1
 800728a:	637a      	str	r2, [r7, #52]	@ 0x34
 800728c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800728e:	b2d2      	uxtb	r2, r2
 8007290:	701a      	strb	r2, [r3, #0]
 8007292:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007294:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	68db      	ldr	r3, [r3, #12]
 800729e:	62bb      	str	r3, [r7, #40]	@ 0x28
 80072a0:	e00b      	b.n	80072ba <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 80072a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072a4:	b2da      	uxtb	r2, r3
 80072a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072a8:	1c59      	adds	r1, r3, #1
 80072aa:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80072ac:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80072b0:	b2d2      	uxtb	r2, r2
 80072b2:	701a      	strb	r2, [r3, #0]
 80072b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072b6:	09db      	lsrs	r3, r3, #7
 80072b8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80072ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072bc:	2b7f      	cmp	r3, #127	@ 0x7f
 80072be:	d8f0      	bhi.n	80072a2 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 80072c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072c2:	1c5a      	adds	r2, r3, #1
 80072c4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80072c6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80072c8:	b2d2      	uxtb	r2, r2
 80072ca:	701a      	strb	r2, [r3, #0]
 80072cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072ce:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	691b      	ldr	r3, [r3, #16]
 80072d8:	623b      	str	r3, [r7, #32]
 80072da:	e00b      	b.n	80072f4 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 80072dc:	6a3b      	ldr	r3, [r7, #32]
 80072de:	b2da      	uxtb	r2, r3
 80072e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072e2:	1c59      	adds	r1, r3, #1
 80072e4:	6279      	str	r1, [r7, #36]	@ 0x24
 80072e6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80072ea:	b2d2      	uxtb	r2, r2
 80072ec:	701a      	strb	r2, [r3, #0]
 80072ee:	6a3b      	ldr	r3, [r7, #32]
 80072f0:	09db      	lsrs	r3, r3, #7
 80072f2:	623b      	str	r3, [r7, #32]
 80072f4:	6a3b      	ldr	r3, [r7, #32]
 80072f6:	2b7f      	cmp	r3, #127	@ 0x7f
 80072f8:	d8f0      	bhi.n	80072dc <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 80072fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072fc:	1c5a      	adds	r2, r3, #1
 80072fe:	627a      	str	r2, [r7, #36]	@ 0x24
 8007300:	6a3a      	ldr	r2, [r7, #32]
 8007302:	b2d2      	uxtb	r2, r2
 8007304:	701a      	strb	r2, [r3, #0]
 8007306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007308:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	61fb      	str	r3, [r7, #28]
 800730e:	2300      	movs	r3, #0
 8007310:	61bb      	str	r3, [r7, #24]
 8007312:	e00b      	b.n	800732c <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8007314:	69bb      	ldr	r3, [r7, #24]
 8007316:	b2da      	uxtb	r2, r3
 8007318:	69fb      	ldr	r3, [r7, #28]
 800731a:	1c59      	adds	r1, r3, #1
 800731c:	61f9      	str	r1, [r7, #28]
 800731e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007322:	b2d2      	uxtb	r2, r2
 8007324:	701a      	strb	r2, [r3, #0]
 8007326:	69bb      	ldr	r3, [r7, #24]
 8007328:	09db      	lsrs	r3, r3, #7
 800732a:	61bb      	str	r3, [r7, #24]
 800732c:	69bb      	ldr	r3, [r7, #24]
 800732e:	2b7f      	cmp	r3, #127	@ 0x7f
 8007330:	d8f0      	bhi.n	8007314 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8007332:	69fb      	ldr	r3, [r7, #28]
 8007334:	1c5a      	adds	r2, r3, #1
 8007336:	61fa      	str	r2, [r7, #28]
 8007338:	69ba      	ldr	r2, [r7, #24]
 800733a:	b2d2      	uxtb	r2, r2
 800733c:	701a      	strb	r2, [r3, #0]
 800733e:	69fb      	ldr	r3, [r7, #28]
 8007340:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8007342:	2215      	movs	r2, #21
 8007344:	68f9      	ldr	r1, [r7, #12]
 8007346:	6938      	ldr	r0, [r7, #16]
 8007348:	f7ff fa5a 	bl	8006800 <_SendPacket>
  RECORD_END();
 800734c:	697b      	ldr	r3, [r7, #20]
 800734e:	f383 8811 	msr	BASEPRI, r3
}
 8007352:	bf00      	nop
 8007354:	3748      	adds	r7, #72	@ 0x48
 8007356:	46bd      	mov	sp, r7
 8007358:	bd80      	pop	{r7, pc}
 800735a:	bf00      	nop
 800735c:	200136c0 	.word	0x200136c0
 8007360:	20013690 	.word	0x20013690

08007364 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8007364:	b580      	push	{r7, lr}
 8007366:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8007368:	4b07      	ldr	r3, [pc, #28]	@ (8007388 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800736a:	6a1b      	ldr	r3, [r3, #32]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d008      	beq.n	8007382 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8007370:	4b05      	ldr	r3, [pc, #20]	@ (8007388 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8007372:	6a1b      	ldr	r3, [r3, #32]
 8007374:	685b      	ldr	r3, [r3, #4]
 8007376:	2b00      	cmp	r3, #0
 8007378:	d003      	beq.n	8007382 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 800737a:	4b03      	ldr	r3, [pc, #12]	@ (8007388 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800737c:	6a1b      	ldr	r3, [r3, #32]
 800737e:	685b      	ldr	r3, [r3, #4]
 8007380:	4798      	blx	r3
  }
}
 8007382:	bf00      	nop
 8007384:	bd80      	pop	{r7, pc}
 8007386:	bf00      	nop
 8007388:	20013690 	.word	0x20013690

0800738c <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 800738c:	b590      	push	{r4, r7, lr}
 800738e:	b083      	sub	sp, #12
 8007390:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8007392:	4b15      	ldr	r3, [pc, #84]	@ (80073e8 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8007394:	6a1b      	ldr	r3, [r3, #32]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d01a      	beq.n	80073d0 <SEGGER_SYSVIEW_RecordSystime+0x44>
 800739a:	4b13      	ldr	r3, [pc, #76]	@ (80073e8 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800739c:	6a1b      	ldr	r3, [r3, #32]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d015      	beq.n	80073d0 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 80073a4:	4b10      	ldr	r3, [pc, #64]	@ (80073e8 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80073a6:	6a1b      	ldr	r3, [r3, #32]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	4798      	blx	r3
 80073ac:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80073b0:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 80073b2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80073b6:	f04f 0200 	mov.w	r2, #0
 80073ba:	f04f 0300 	mov.w	r3, #0
 80073be:	000a      	movs	r2, r1
 80073c0:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80073c2:	4613      	mov	r3, r2
 80073c4:	461a      	mov	r2, r3
 80073c6:	4621      	mov	r1, r4
 80073c8:	200d      	movs	r0, #13
 80073ca:	f7ff fb5b 	bl	8006a84 <SEGGER_SYSVIEW_RecordU32x2>
 80073ce:	e006      	b.n	80073de <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 80073d0:	4b06      	ldr	r3, [pc, #24]	@ (80073ec <SEGGER_SYSVIEW_RecordSystime+0x60>)
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	4619      	mov	r1, r3
 80073d6:	200c      	movs	r0, #12
 80073d8:	f7ff fb18 	bl	8006a0c <SEGGER_SYSVIEW_RecordU32>
  }
}
 80073dc:	bf00      	nop
 80073de:	bf00      	nop
 80073e0:	370c      	adds	r7, #12
 80073e2:	46bd      	mov	sp, r7
 80073e4:	bd90      	pop	{r4, r7, pc}
 80073e6:	bf00      	nop
 80073e8:	20013690 	.word	0x20013690
 80073ec:	e0001004 	.word	0xe0001004

080073f0 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b086      	sub	sp, #24
 80073f4:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80073f6:	f3ef 8311 	mrs	r3, BASEPRI
 80073fa:	f04f 0120 	mov.w	r1, #32
 80073fe:	f381 8811 	msr	BASEPRI, r1
 8007402:	60fb      	str	r3, [r7, #12]
 8007404:	4819      	ldr	r0, [pc, #100]	@ (800746c <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8007406:	f7ff f90a 	bl	800661e <_PreparePacket>
 800740a:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800740c:	68bb      	ldr	r3, [r7, #8]
 800740e:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8007410:	4b17      	ldr	r3, [pc, #92]	@ (8007470 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007418:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	617b      	str	r3, [r7, #20]
 800741e:	683b      	ldr	r3, [r7, #0]
 8007420:	613b      	str	r3, [r7, #16]
 8007422:	e00b      	b.n	800743c <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8007424:	693b      	ldr	r3, [r7, #16]
 8007426:	b2da      	uxtb	r2, r3
 8007428:	697b      	ldr	r3, [r7, #20]
 800742a:	1c59      	adds	r1, r3, #1
 800742c:	6179      	str	r1, [r7, #20]
 800742e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007432:	b2d2      	uxtb	r2, r2
 8007434:	701a      	strb	r2, [r3, #0]
 8007436:	693b      	ldr	r3, [r7, #16]
 8007438:	09db      	lsrs	r3, r3, #7
 800743a:	613b      	str	r3, [r7, #16]
 800743c:	693b      	ldr	r3, [r7, #16]
 800743e:	2b7f      	cmp	r3, #127	@ 0x7f
 8007440:	d8f0      	bhi.n	8007424 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8007442:	697b      	ldr	r3, [r7, #20]
 8007444:	1c5a      	adds	r2, r3, #1
 8007446:	617a      	str	r2, [r7, #20]
 8007448:	693a      	ldr	r2, [r7, #16]
 800744a:	b2d2      	uxtb	r2, r2
 800744c:	701a      	strb	r2, [r3, #0]
 800744e:	697b      	ldr	r3, [r7, #20]
 8007450:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8007452:	2202      	movs	r2, #2
 8007454:	6879      	ldr	r1, [r7, #4]
 8007456:	68b8      	ldr	r0, [r7, #8]
 8007458:	f7ff f9d2 	bl	8006800 <_SendPacket>
  RECORD_END();
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	f383 8811 	msr	BASEPRI, r3
}
 8007462:	bf00      	nop
 8007464:	3718      	adds	r7, #24
 8007466:	46bd      	mov	sp, r7
 8007468:	bd80      	pop	{r7, pc}
 800746a:	bf00      	nop
 800746c:	200136c0 	.word	0x200136c0
 8007470:	e000ed04 	.word	0xe000ed04

08007474 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8007474:	b580      	push	{r7, lr}
 8007476:	b082      	sub	sp, #8
 8007478:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800747a:	f3ef 8311 	mrs	r3, BASEPRI
 800747e:	f04f 0120 	mov.w	r1, #32
 8007482:	f381 8811 	msr	BASEPRI, r1
 8007486:	607b      	str	r3, [r7, #4]
 8007488:	4807      	ldr	r0, [pc, #28]	@ (80074a8 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 800748a:	f7ff f8c8 	bl	800661e <_PreparePacket>
 800748e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8007490:	2203      	movs	r2, #3
 8007492:	6839      	ldr	r1, [r7, #0]
 8007494:	6838      	ldr	r0, [r7, #0]
 8007496:	f7ff f9b3 	bl	8006800 <_SendPacket>
  RECORD_END();
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	f383 8811 	msr	BASEPRI, r3
}
 80074a0:	bf00      	nop
 80074a2:	3708      	adds	r7, #8
 80074a4:	46bd      	mov	sp, r7
 80074a6:	bd80      	pop	{r7, pc}
 80074a8:	200136c0 	.word	0x200136c0

080074ac <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b082      	sub	sp, #8
 80074b0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80074b2:	f3ef 8311 	mrs	r3, BASEPRI
 80074b6:	f04f 0120 	mov.w	r1, #32
 80074ba:	f381 8811 	msr	BASEPRI, r1
 80074be:	607b      	str	r3, [r7, #4]
 80074c0:	4807      	ldr	r0, [pc, #28]	@ (80074e0 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 80074c2:	f7ff f8ac 	bl	800661e <_PreparePacket>
 80074c6:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 80074c8:	2212      	movs	r2, #18
 80074ca:	6839      	ldr	r1, [r7, #0]
 80074cc:	6838      	ldr	r0, [r7, #0]
 80074ce:	f7ff f997 	bl	8006800 <_SendPacket>
  RECORD_END();
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	f383 8811 	msr	BASEPRI, r3
}
 80074d8:	bf00      	nop
 80074da:	3708      	adds	r7, #8
 80074dc:	46bd      	mov	sp, r7
 80074de:	bd80      	pop	{r7, pc}
 80074e0:	200136c0 	.word	0x200136c0

080074e4 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b082      	sub	sp, #8
 80074e8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80074ea:	f3ef 8311 	mrs	r3, BASEPRI
 80074ee:	f04f 0120 	mov.w	r1, #32
 80074f2:	f381 8811 	msr	BASEPRI, r1
 80074f6:	607b      	str	r3, [r7, #4]
 80074f8:	4807      	ldr	r0, [pc, #28]	@ (8007518 <SEGGER_SYSVIEW_OnIdle+0x34>)
 80074fa:	f7ff f890 	bl	800661e <_PreparePacket>
 80074fe:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8007500:	2211      	movs	r2, #17
 8007502:	6839      	ldr	r1, [r7, #0]
 8007504:	6838      	ldr	r0, [r7, #0]
 8007506:	f7ff f97b 	bl	8006800 <_SendPacket>
  RECORD_END();
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	f383 8811 	msr	BASEPRI, r3
}
 8007510:	bf00      	nop
 8007512:	3708      	adds	r7, #8
 8007514:	46bd      	mov	sp, r7
 8007516:	bd80      	pop	{r7, pc}
 8007518:	200136c0 	.word	0x200136c0

0800751c <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 800751c:	b580      	push	{r7, lr}
 800751e:	b088      	sub	sp, #32
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007524:	f3ef 8311 	mrs	r3, BASEPRI
 8007528:	f04f 0120 	mov.w	r1, #32
 800752c:	f381 8811 	msr	BASEPRI, r1
 8007530:	617b      	str	r3, [r7, #20]
 8007532:	4819      	ldr	r0, [pc, #100]	@ (8007598 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8007534:	f7ff f873 	bl	800661e <_PreparePacket>
 8007538:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800753a:	693b      	ldr	r3, [r7, #16]
 800753c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800753e:	4b17      	ldr	r3, [pc, #92]	@ (800759c <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8007540:	691b      	ldr	r3, [r3, #16]
 8007542:	687a      	ldr	r2, [r7, #4]
 8007544:	1ad3      	subs	r3, r2, r3
 8007546:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	61fb      	str	r3, [r7, #28]
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	61bb      	str	r3, [r7, #24]
 8007550:	e00b      	b.n	800756a <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8007552:	69bb      	ldr	r3, [r7, #24]
 8007554:	b2da      	uxtb	r2, r3
 8007556:	69fb      	ldr	r3, [r7, #28]
 8007558:	1c59      	adds	r1, r3, #1
 800755a:	61f9      	str	r1, [r7, #28]
 800755c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007560:	b2d2      	uxtb	r2, r2
 8007562:	701a      	strb	r2, [r3, #0]
 8007564:	69bb      	ldr	r3, [r7, #24]
 8007566:	09db      	lsrs	r3, r3, #7
 8007568:	61bb      	str	r3, [r7, #24]
 800756a:	69bb      	ldr	r3, [r7, #24]
 800756c:	2b7f      	cmp	r3, #127	@ 0x7f
 800756e:	d8f0      	bhi.n	8007552 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8007570:	69fb      	ldr	r3, [r7, #28]
 8007572:	1c5a      	adds	r2, r3, #1
 8007574:	61fa      	str	r2, [r7, #28]
 8007576:	69ba      	ldr	r2, [r7, #24]
 8007578:	b2d2      	uxtb	r2, r2
 800757a:	701a      	strb	r2, [r3, #0]
 800757c:	69fb      	ldr	r3, [r7, #28]
 800757e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8007580:	2208      	movs	r2, #8
 8007582:	68f9      	ldr	r1, [r7, #12]
 8007584:	6938      	ldr	r0, [r7, #16]
 8007586:	f7ff f93b 	bl	8006800 <_SendPacket>
  RECORD_END();
 800758a:	697b      	ldr	r3, [r7, #20]
 800758c:	f383 8811 	msr	BASEPRI, r3
}
 8007590:	bf00      	nop
 8007592:	3720      	adds	r7, #32
 8007594:	46bd      	mov	sp, r7
 8007596:	bd80      	pop	{r7, pc}
 8007598:	200136c0 	.word	0x200136c0
 800759c:	20013690 	.word	0x20013690

080075a0 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b088      	sub	sp, #32
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80075a8:	f3ef 8311 	mrs	r3, BASEPRI
 80075ac:	f04f 0120 	mov.w	r1, #32
 80075b0:	f381 8811 	msr	BASEPRI, r1
 80075b4:	617b      	str	r3, [r7, #20]
 80075b6:	4819      	ldr	r0, [pc, #100]	@ (800761c <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 80075b8:	f7ff f831 	bl	800661e <_PreparePacket>
 80075bc:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80075be:	693b      	ldr	r3, [r7, #16]
 80075c0:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80075c2:	4b17      	ldr	r3, [pc, #92]	@ (8007620 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 80075c4:	691b      	ldr	r3, [r3, #16]
 80075c6:	687a      	ldr	r2, [r7, #4]
 80075c8:	1ad3      	subs	r3, r2, r3
 80075ca:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	61fb      	str	r3, [r7, #28]
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	61bb      	str	r3, [r7, #24]
 80075d4:	e00b      	b.n	80075ee <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 80075d6:	69bb      	ldr	r3, [r7, #24]
 80075d8:	b2da      	uxtb	r2, r3
 80075da:	69fb      	ldr	r3, [r7, #28]
 80075dc:	1c59      	adds	r1, r3, #1
 80075de:	61f9      	str	r1, [r7, #28]
 80075e0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80075e4:	b2d2      	uxtb	r2, r2
 80075e6:	701a      	strb	r2, [r3, #0]
 80075e8:	69bb      	ldr	r3, [r7, #24]
 80075ea:	09db      	lsrs	r3, r3, #7
 80075ec:	61bb      	str	r3, [r7, #24]
 80075ee:	69bb      	ldr	r3, [r7, #24]
 80075f0:	2b7f      	cmp	r3, #127	@ 0x7f
 80075f2:	d8f0      	bhi.n	80075d6 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 80075f4:	69fb      	ldr	r3, [r7, #28]
 80075f6:	1c5a      	adds	r2, r3, #1
 80075f8:	61fa      	str	r2, [r7, #28]
 80075fa:	69ba      	ldr	r2, [r7, #24]
 80075fc:	b2d2      	uxtb	r2, r2
 80075fe:	701a      	strb	r2, [r3, #0]
 8007600:	69fb      	ldr	r3, [r7, #28]
 8007602:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8007604:	2204      	movs	r2, #4
 8007606:	68f9      	ldr	r1, [r7, #12]
 8007608:	6938      	ldr	r0, [r7, #16]
 800760a:	f7ff f8f9 	bl	8006800 <_SendPacket>
  RECORD_END();
 800760e:	697b      	ldr	r3, [r7, #20]
 8007610:	f383 8811 	msr	BASEPRI, r3
}
 8007614:	bf00      	nop
 8007616:	3720      	adds	r7, #32
 8007618:	46bd      	mov	sp, r7
 800761a:	bd80      	pop	{r7, pc}
 800761c:	200136c0 	.word	0x200136c0
 8007620:	20013690 	.word	0x20013690

08007624 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8007624:	b580      	push	{r7, lr}
 8007626:	b088      	sub	sp, #32
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800762c:	f3ef 8311 	mrs	r3, BASEPRI
 8007630:	f04f 0120 	mov.w	r1, #32
 8007634:	f381 8811 	msr	BASEPRI, r1
 8007638:	617b      	str	r3, [r7, #20]
 800763a:	4819      	ldr	r0, [pc, #100]	@ (80076a0 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 800763c:	f7fe ffef 	bl	800661e <_PreparePacket>
 8007640:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007642:	693b      	ldr	r3, [r7, #16]
 8007644:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8007646:	4b17      	ldr	r3, [pc, #92]	@ (80076a4 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8007648:	691b      	ldr	r3, [r3, #16]
 800764a:	687a      	ldr	r2, [r7, #4]
 800764c:	1ad3      	subs	r3, r2, r3
 800764e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	61fb      	str	r3, [r7, #28]
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	61bb      	str	r3, [r7, #24]
 8007658:	e00b      	b.n	8007672 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 800765a:	69bb      	ldr	r3, [r7, #24]
 800765c:	b2da      	uxtb	r2, r3
 800765e:	69fb      	ldr	r3, [r7, #28]
 8007660:	1c59      	adds	r1, r3, #1
 8007662:	61f9      	str	r1, [r7, #28]
 8007664:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007668:	b2d2      	uxtb	r2, r2
 800766a:	701a      	strb	r2, [r3, #0]
 800766c:	69bb      	ldr	r3, [r7, #24]
 800766e:	09db      	lsrs	r3, r3, #7
 8007670:	61bb      	str	r3, [r7, #24]
 8007672:	69bb      	ldr	r3, [r7, #24]
 8007674:	2b7f      	cmp	r3, #127	@ 0x7f
 8007676:	d8f0      	bhi.n	800765a <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8007678:	69fb      	ldr	r3, [r7, #28]
 800767a:	1c5a      	adds	r2, r3, #1
 800767c:	61fa      	str	r2, [r7, #28]
 800767e:	69ba      	ldr	r2, [r7, #24]
 8007680:	b2d2      	uxtb	r2, r2
 8007682:	701a      	strb	r2, [r3, #0]
 8007684:	69fb      	ldr	r3, [r7, #28]
 8007686:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8007688:	2206      	movs	r2, #6
 800768a:	68f9      	ldr	r1, [r7, #12]
 800768c:	6938      	ldr	r0, [r7, #16]
 800768e:	f7ff f8b7 	bl	8006800 <_SendPacket>
  RECORD_END();
 8007692:	697b      	ldr	r3, [r7, #20]
 8007694:	f383 8811 	msr	BASEPRI, r3
}
 8007698:	bf00      	nop
 800769a:	3720      	adds	r7, #32
 800769c:	46bd      	mov	sp, r7
 800769e:	bd80      	pop	{r7, pc}
 80076a0:	200136c0 	.word	0x200136c0
 80076a4:	20013690 	.word	0x20013690

080076a8 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 80076a8:	b580      	push	{r7, lr}
 80076aa:	b08a      	sub	sp, #40	@ 0x28
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
 80076b0:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80076b2:	f3ef 8311 	mrs	r3, BASEPRI
 80076b6:	f04f 0120 	mov.w	r1, #32
 80076ba:	f381 8811 	msr	BASEPRI, r1
 80076be:	617b      	str	r3, [r7, #20]
 80076c0:	4827      	ldr	r0, [pc, #156]	@ (8007760 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 80076c2:	f7fe ffac 	bl	800661e <_PreparePacket>
 80076c6:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80076c8:	693b      	ldr	r3, [r7, #16]
 80076ca:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80076cc:	4b25      	ldr	r3, [pc, #148]	@ (8007764 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 80076ce:	691b      	ldr	r3, [r3, #16]
 80076d0:	687a      	ldr	r2, [r7, #4]
 80076d2:	1ad3      	subs	r3, r2, r3
 80076d4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	623b      	str	r3, [r7, #32]
 80076de:	e00b      	b.n	80076f8 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 80076e0:	6a3b      	ldr	r3, [r7, #32]
 80076e2:	b2da      	uxtb	r2, r3
 80076e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076e6:	1c59      	adds	r1, r3, #1
 80076e8:	6279      	str	r1, [r7, #36]	@ 0x24
 80076ea:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80076ee:	b2d2      	uxtb	r2, r2
 80076f0:	701a      	strb	r2, [r3, #0]
 80076f2:	6a3b      	ldr	r3, [r7, #32]
 80076f4:	09db      	lsrs	r3, r3, #7
 80076f6:	623b      	str	r3, [r7, #32]
 80076f8:	6a3b      	ldr	r3, [r7, #32]
 80076fa:	2b7f      	cmp	r3, #127	@ 0x7f
 80076fc:	d8f0      	bhi.n	80076e0 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 80076fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007700:	1c5a      	adds	r2, r3, #1
 8007702:	627a      	str	r2, [r7, #36]	@ 0x24
 8007704:	6a3a      	ldr	r2, [r7, #32]
 8007706:	b2d2      	uxtb	r2, r2
 8007708:	701a      	strb	r2, [r3, #0]
 800770a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800770c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	61fb      	str	r3, [r7, #28]
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	61bb      	str	r3, [r7, #24]
 8007716:	e00b      	b.n	8007730 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8007718:	69bb      	ldr	r3, [r7, #24]
 800771a:	b2da      	uxtb	r2, r3
 800771c:	69fb      	ldr	r3, [r7, #28]
 800771e:	1c59      	adds	r1, r3, #1
 8007720:	61f9      	str	r1, [r7, #28]
 8007722:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007726:	b2d2      	uxtb	r2, r2
 8007728:	701a      	strb	r2, [r3, #0]
 800772a:	69bb      	ldr	r3, [r7, #24]
 800772c:	09db      	lsrs	r3, r3, #7
 800772e:	61bb      	str	r3, [r7, #24]
 8007730:	69bb      	ldr	r3, [r7, #24]
 8007732:	2b7f      	cmp	r3, #127	@ 0x7f
 8007734:	d8f0      	bhi.n	8007718 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 8007736:	69fb      	ldr	r3, [r7, #28]
 8007738:	1c5a      	adds	r2, r3, #1
 800773a:	61fa      	str	r2, [r7, #28]
 800773c:	69ba      	ldr	r2, [r7, #24]
 800773e:	b2d2      	uxtb	r2, r2
 8007740:	701a      	strb	r2, [r3, #0]
 8007742:	69fb      	ldr	r3, [r7, #28]
 8007744:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8007746:	2207      	movs	r2, #7
 8007748:	68f9      	ldr	r1, [r7, #12]
 800774a:	6938      	ldr	r0, [r7, #16]
 800774c:	f7ff f858 	bl	8006800 <_SendPacket>
  RECORD_END();
 8007750:	697b      	ldr	r3, [r7, #20]
 8007752:	f383 8811 	msr	BASEPRI, r3
}
 8007756:	bf00      	nop
 8007758:	3728      	adds	r7, #40	@ 0x28
 800775a:	46bd      	mov	sp, r7
 800775c:	bd80      	pop	{r7, pc}
 800775e:	bf00      	nop
 8007760:	200136c0 	.word	0x200136c0
 8007764:	20013690 	.word	0x20013690

08007768 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8007768:	b480      	push	{r7}
 800776a:	b083      	sub	sp, #12
 800776c:	af00      	add	r7, sp, #0
 800776e:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8007770:	4b04      	ldr	r3, [pc, #16]	@ (8007784 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8007772:	691b      	ldr	r3, [r3, #16]
 8007774:	687a      	ldr	r2, [r7, #4]
 8007776:	1ad3      	subs	r3, r2, r3
}
 8007778:	4618      	mov	r0, r3
 800777a:	370c      	adds	r7, #12
 800777c:	46bd      	mov	sp, r7
 800777e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007782:	4770      	bx	lr
 8007784:	20013690 	.word	0x20013690

08007788 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8007788:	b580      	push	{r7, lr}
 800778a:	b08c      	sub	sp, #48	@ 0x30
 800778c:	af00      	add	r7, sp, #0
 800778e:	4603      	mov	r3, r0
 8007790:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8007792:	4b3b      	ldr	r3, [pc, #236]	@ (8007880 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	2b00      	cmp	r3, #0
 8007798:	d06d      	beq.n	8007876 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 800779a:	4b39      	ldr	r3, [pc, #228]	@ (8007880 <SEGGER_SYSVIEW_SendModule+0xf8>)
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (n = 0; n < ModuleId; n++) {
 80077a0:	2300      	movs	r3, #0
 80077a2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80077a4:	e008      	b.n	80077b8 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 80077a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077a8:	691b      	ldr	r3, [r3, #16]
 80077aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (pModule == 0) {
 80077ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d007      	beq.n	80077c2 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 80077b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077b4:	3301      	adds	r3, #1
 80077b6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80077b8:	79fb      	ldrb	r3, [r7, #7]
 80077ba:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80077bc:	429a      	cmp	r2, r3
 80077be:	d3f2      	bcc.n	80077a6 <SEGGER_SYSVIEW_SendModule+0x1e>
 80077c0:	e000      	b.n	80077c4 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 80077c2:	bf00      	nop
      }
    }
    if (pModule != 0) {
 80077c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d055      	beq.n	8007876 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80077ca:	f3ef 8311 	mrs	r3, BASEPRI
 80077ce:	f04f 0120 	mov.w	r1, #32
 80077d2:	f381 8811 	msr	BASEPRI, r1
 80077d6:	617b      	str	r3, [r7, #20]
 80077d8:	482a      	ldr	r0, [pc, #168]	@ (8007884 <SEGGER_SYSVIEW_SendModule+0xfc>)
 80077da:	f7fe ff20 	bl	800661e <_PreparePacket>
 80077de:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 80077e0:	693b      	ldr	r3, [r7, #16]
 80077e2:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80077e8:	79fb      	ldrb	r3, [r7, #7]
 80077ea:	623b      	str	r3, [r7, #32]
 80077ec:	e00b      	b.n	8007806 <SEGGER_SYSVIEW_SendModule+0x7e>
 80077ee:	6a3b      	ldr	r3, [r7, #32]
 80077f0:	b2da      	uxtb	r2, r3
 80077f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077f4:	1c59      	adds	r1, r3, #1
 80077f6:	6279      	str	r1, [r7, #36]	@ 0x24
 80077f8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80077fc:	b2d2      	uxtb	r2, r2
 80077fe:	701a      	strb	r2, [r3, #0]
 8007800:	6a3b      	ldr	r3, [r7, #32]
 8007802:	09db      	lsrs	r3, r3, #7
 8007804:	623b      	str	r3, [r7, #32]
 8007806:	6a3b      	ldr	r3, [r7, #32]
 8007808:	2b7f      	cmp	r3, #127	@ 0x7f
 800780a:	d8f0      	bhi.n	80077ee <SEGGER_SYSVIEW_SendModule+0x66>
 800780c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800780e:	1c5a      	adds	r2, r3, #1
 8007810:	627a      	str	r2, [r7, #36]	@ 0x24
 8007812:	6a3a      	ldr	r2, [r7, #32]
 8007814:	b2d2      	uxtb	r2, r2
 8007816:	701a      	strb	r2, [r3, #0]
 8007818:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800781a:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	61fb      	str	r3, [r7, #28]
 8007820:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007822:	689b      	ldr	r3, [r3, #8]
 8007824:	61bb      	str	r3, [r7, #24]
 8007826:	e00b      	b.n	8007840 <SEGGER_SYSVIEW_SendModule+0xb8>
 8007828:	69bb      	ldr	r3, [r7, #24]
 800782a:	b2da      	uxtb	r2, r3
 800782c:	69fb      	ldr	r3, [r7, #28]
 800782e:	1c59      	adds	r1, r3, #1
 8007830:	61f9      	str	r1, [r7, #28]
 8007832:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007836:	b2d2      	uxtb	r2, r2
 8007838:	701a      	strb	r2, [r3, #0]
 800783a:	69bb      	ldr	r3, [r7, #24]
 800783c:	09db      	lsrs	r3, r3, #7
 800783e:	61bb      	str	r3, [r7, #24]
 8007840:	69bb      	ldr	r3, [r7, #24]
 8007842:	2b7f      	cmp	r3, #127	@ 0x7f
 8007844:	d8f0      	bhi.n	8007828 <SEGGER_SYSVIEW_SendModule+0xa0>
 8007846:	69fb      	ldr	r3, [r7, #28]
 8007848:	1c5a      	adds	r2, r3, #1
 800784a:	61fa      	str	r2, [r7, #28]
 800784c:	69ba      	ldr	r2, [r7, #24]
 800784e:	b2d2      	uxtb	r2, r2
 8007850:	701a      	strb	r2, [r3, #0]
 8007852:	69fb      	ldr	r3, [r7, #28]
 8007854:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007856:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	2280      	movs	r2, #128	@ 0x80
 800785c:	4619      	mov	r1, r3
 800785e:	68f8      	ldr	r0, [r7, #12]
 8007860:	f7fe fe90 	bl	8006584 <_EncodeStr>
 8007864:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8007866:	2216      	movs	r2, #22
 8007868:	68f9      	ldr	r1, [r7, #12]
 800786a:	6938      	ldr	r0, [r7, #16]
 800786c:	f7fe ffc8 	bl	8006800 <_SendPacket>
      RECORD_END();
 8007870:	697b      	ldr	r3, [r7, #20]
 8007872:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8007876:	bf00      	nop
 8007878:	3730      	adds	r7, #48	@ 0x30
 800787a:	46bd      	mov	sp, r7
 800787c:	bd80      	pop	{r7, pc}
 800787e:	bf00      	nop
 8007880:	200136b8 	.word	0x200136b8
 8007884:	200136c0 	.word	0x200136c0

08007888 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8007888:	b580      	push	{r7, lr}
 800788a:	b082      	sub	sp, #8
 800788c:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800788e:	4b0c      	ldr	r3, [pc, #48]	@ (80078c0 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	2b00      	cmp	r3, #0
 8007894:	d00f      	beq.n	80078b6 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8007896:	4b0a      	ldr	r3, [pc, #40]	@ (80078c0 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	68db      	ldr	r3, [r3, #12]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d002      	beq.n	80078aa <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	68db      	ldr	r3, [r3, #12]
 80078a8:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	691b      	ldr	r3, [r3, #16]
 80078ae:	607b      	str	r3, [r7, #4]
    } while (pModule);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d1f2      	bne.n	800789c <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 80078b6:	bf00      	nop
 80078b8:	3708      	adds	r7, #8
 80078ba:	46bd      	mov	sp, r7
 80078bc:	bd80      	pop	{r7, pc}
 80078be:	bf00      	nop
 80078c0:	200136b8 	.word	0x200136b8

080078c4 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 80078c4:	b580      	push	{r7, lr}
 80078c6:	b086      	sub	sp, #24
 80078c8:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 80078ca:	f3ef 8311 	mrs	r3, BASEPRI
 80078ce:	f04f 0120 	mov.w	r1, #32
 80078d2:	f381 8811 	msr	BASEPRI, r1
 80078d6:	60fb      	str	r3, [r7, #12]
 80078d8:	4817      	ldr	r0, [pc, #92]	@ (8007938 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 80078da:	f7fe fea0 	bl	800661e <_PreparePacket>
 80078de:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 80078e0:	68bb      	ldr	r3, [r7, #8]
 80078e2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	617b      	str	r3, [r7, #20]
 80078e8:	4b14      	ldr	r3, [pc, #80]	@ (800793c <SEGGER_SYSVIEW_SendNumModules+0x78>)
 80078ea:	781b      	ldrb	r3, [r3, #0]
 80078ec:	613b      	str	r3, [r7, #16]
 80078ee:	e00b      	b.n	8007908 <SEGGER_SYSVIEW_SendNumModules+0x44>
 80078f0:	693b      	ldr	r3, [r7, #16]
 80078f2:	b2da      	uxtb	r2, r3
 80078f4:	697b      	ldr	r3, [r7, #20]
 80078f6:	1c59      	adds	r1, r3, #1
 80078f8:	6179      	str	r1, [r7, #20]
 80078fa:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80078fe:	b2d2      	uxtb	r2, r2
 8007900:	701a      	strb	r2, [r3, #0]
 8007902:	693b      	ldr	r3, [r7, #16]
 8007904:	09db      	lsrs	r3, r3, #7
 8007906:	613b      	str	r3, [r7, #16]
 8007908:	693b      	ldr	r3, [r7, #16]
 800790a:	2b7f      	cmp	r3, #127	@ 0x7f
 800790c:	d8f0      	bhi.n	80078f0 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 800790e:	697b      	ldr	r3, [r7, #20]
 8007910:	1c5a      	adds	r2, r3, #1
 8007912:	617a      	str	r2, [r7, #20]
 8007914:	693a      	ldr	r2, [r7, #16]
 8007916:	b2d2      	uxtb	r2, r2
 8007918:	701a      	strb	r2, [r3, #0]
 800791a:	697b      	ldr	r3, [r7, #20]
 800791c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 800791e:	221b      	movs	r2, #27
 8007920:	6879      	ldr	r1, [r7, #4]
 8007922:	68b8      	ldr	r0, [r7, #8]
 8007924:	f7fe ff6c 	bl	8006800 <_SendPacket>
  RECORD_END();
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	f383 8811 	msr	BASEPRI, r3
}
 800792e:	bf00      	nop
 8007930:	3718      	adds	r7, #24
 8007932:	46bd      	mov	sp, r7
 8007934:	bd80      	pop	{r7, pc}
 8007936:	bf00      	nop
 8007938:	200136c0 	.word	0x200136c0
 800793c:	200136bc 	.word	0x200136bc

08007940 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8007940:	b580      	push	{r7, lr}
 8007942:	b08a      	sub	sp, #40	@ 0x28
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007948:	f3ef 8311 	mrs	r3, BASEPRI
 800794c:	f04f 0120 	mov.w	r1, #32
 8007950:	f381 8811 	msr	BASEPRI, r1
 8007954:	617b      	str	r3, [r7, #20]
 8007956:	4827      	ldr	r0, [pc, #156]	@ (80079f4 <SEGGER_SYSVIEW_Warn+0xb4>)
 8007958:	f7fe fe61 	bl	800661e <_PreparePacket>
 800795c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800795e:	2280      	movs	r2, #128	@ 0x80
 8007960:	6879      	ldr	r1, [r7, #4]
 8007962:	6938      	ldr	r0, [r7, #16]
 8007964:	f7fe fe0e 	bl	8006584 <_EncodeStr>
 8007968:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	627b      	str	r3, [r7, #36]	@ 0x24
 800796e:	2301      	movs	r3, #1
 8007970:	623b      	str	r3, [r7, #32]
 8007972:	e00b      	b.n	800798c <SEGGER_SYSVIEW_Warn+0x4c>
 8007974:	6a3b      	ldr	r3, [r7, #32]
 8007976:	b2da      	uxtb	r2, r3
 8007978:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800797a:	1c59      	adds	r1, r3, #1
 800797c:	6279      	str	r1, [r7, #36]	@ 0x24
 800797e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007982:	b2d2      	uxtb	r2, r2
 8007984:	701a      	strb	r2, [r3, #0]
 8007986:	6a3b      	ldr	r3, [r7, #32]
 8007988:	09db      	lsrs	r3, r3, #7
 800798a:	623b      	str	r3, [r7, #32]
 800798c:	6a3b      	ldr	r3, [r7, #32]
 800798e:	2b7f      	cmp	r3, #127	@ 0x7f
 8007990:	d8f0      	bhi.n	8007974 <SEGGER_SYSVIEW_Warn+0x34>
 8007992:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007994:	1c5a      	adds	r2, r3, #1
 8007996:	627a      	str	r2, [r7, #36]	@ 0x24
 8007998:	6a3a      	ldr	r2, [r7, #32]
 800799a:	b2d2      	uxtb	r2, r2
 800799c:	701a      	strb	r2, [r3, #0]
 800799e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079a0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	61fb      	str	r3, [r7, #28]
 80079a6:	2300      	movs	r3, #0
 80079a8:	61bb      	str	r3, [r7, #24]
 80079aa:	e00b      	b.n	80079c4 <SEGGER_SYSVIEW_Warn+0x84>
 80079ac:	69bb      	ldr	r3, [r7, #24]
 80079ae:	b2da      	uxtb	r2, r3
 80079b0:	69fb      	ldr	r3, [r7, #28]
 80079b2:	1c59      	adds	r1, r3, #1
 80079b4:	61f9      	str	r1, [r7, #28]
 80079b6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80079ba:	b2d2      	uxtb	r2, r2
 80079bc:	701a      	strb	r2, [r3, #0]
 80079be:	69bb      	ldr	r3, [r7, #24]
 80079c0:	09db      	lsrs	r3, r3, #7
 80079c2:	61bb      	str	r3, [r7, #24]
 80079c4:	69bb      	ldr	r3, [r7, #24]
 80079c6:	2b7f      	cmp	r3, #127	@ 0x7f
 80079c8:	d8f0      	bhi.n	80079ac <SEGGER_SYSVIEW_Warn+0x6c>
 80079ca:	69fb      	ldr	r3, [r7, #28]
 80079cc:	1c5a      	adds	r2, r3, #1
 80079ce:	61fa      	str	r2, [r7, #28]
 80079d0:	69ba      	ldr	r2, [r7, #24]
 80079d2:	b2d2      	uxtb	r2, r2
 80079d4:	701a      	strb	r2, [r3, #0]
 80079d6:	69fb      	ldr	r3, [r7, #28]
 80079d8:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80079da:	221a      	movs	r2, #26
 80079dc:	68f9      	ldr	r1, [r7, #12]
 80079de:	6938      	ldr	r0, [r7, #16]
 80079e0:	f7fe ff0e 	bl	8006800 <_SendPacket>
  RECORD_END();
 80079e4:	697b      	ldr	r3, [r7, #20]
 80079e6:	f383 8811 	msr	BASEPRI, r3
}
 80079ea:	bf00      	nop
 80079ec:	3728      	adds	r7, #40	@ 0x28
 80079ee:	46bd      	mov	sp, r7
 80079f0:	bd80      	pop	{r7, pc}
 80079f2:	bf00      	nop
 80079f4:	200136c0 	.word	0x200136c0

080079f8 <siprintf>:
 80079f8:	b40e      	push	{r1, r2, r3}
 80079fa:	b500      	push	{lr}
 80079fc:	b09c      	sub	sp, #112	@ 0x70
 80079fe:	ab1d      	add	r3, sp, #116	@ 0x74
 8007a00:	9002      	str	r0, [sp, #8]
 8007a02:	9006      	str	r0, [sp, #24]
 8007a04:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007a08:	4809      	ldr	r0, [pc, #36]	@ (8007a30 <siprintf+0x38>)
 8007a0a:	9107      	str	r1, [sp, #28]
 8007a0c:	9104      	str	r1, [sp, #16]
 8007a0e:	4909      	ldr	r1, [pc, #36]	@ (8007a34 <siprintf+0x3c>)
 8007a10:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a14:	9105      	str	r1, [sp, #20]
 8007a16:	6800      	ldr	r0, [r0, #0]
 8007a18:	9301      	str	r3, [sp, #4]
 8007a1a:	a902      	add	r1, sp, #8
 8007a1c:	f000 f9ac 	bl	8007d78 <_svfiprintf_r>
 8007a20:	9b02      	ldr	r3, [sp, #8]
 8007a22:	2200      	movs	r2, #0
 8007a24:	701a      	strb	r2, [r3, #0]
 8007a26:	b01c      	add	sp, #112	@ 0x70
 8007a28:	f85d eb04 	ldr.w	lr, [sp], #4
 8007a2c:	b003      	add	sp, #12
 8007a2e:	4770      	bx	lr
 8007a30:	20000074 	.word	0x20000074
 8007a34:	ffff0208 	.word	0xffff0208

08007a38 <memcmp>:
 8007a38:	b510      	push	{r4, lr}
 8007a3a:	3901      	subs	r1, #1
 8007a3c:	4402      	add	r2, r0
 8007a3e:	4290      	cmp	r0, r2
 8007a40:	d101      	bne.n	8007a46 <memcmp+0xe>
 8007a42:	2000      	movs	r0, #0
 8007a44:	e005      	b.n	8007a52 <memcmp+0x1a>
 8007a46:	7803      	ldrb	r3, [r0, #0]
 8007a48:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007a4c:	42a3      	cmp	r3, r4
 8007a4e:	d001      	beq.n	8007a54 <memcmp+0x1c>
 8007a50:	1b18      	subs	r0, r3, r4
 8007a52:	bd10      	pop	{r4, pc}
 8007a54:	3001      	adds	r0, #1
 8007a56:	e7f2      	b.n	8007a3e <memcmp+0x6>

08007a58 <memset>:
 8007a58:	4402      	add	r2, r0
 8007a5a:	4603      	mov	r3, r0
 8007a5c:	4293      	cmp	r3, r2
 8007a5e:	d100      	bne.n	8007a62 <memset+0xa>
 8007a60:	4770      	bx	lr
 8007a62:	f803 1b01 	strb.w	r1, [r3], #1
 8007a66:	e7f9      	b.n	8007a5c <memset+0x4>

08007a68 <__libc_init_array>:
 8007a68:	b570      	push	{r4, r5, r6, lr}
 8007a6a:	4d0d      	ldr	r5, [pc, #52]	@ (8007aa0 <__libc_init_array+0x38>)
 8007a6c:	4c0d      	ldr	r4, [pc, #52]	@ (8007aa4 <__libc_init_array+0x3c>)
 8007a6e:	1b64      	subs	r4, r4, r5
 8007a70:	10a4      	asrs	r4, r4, #2
 8007a72:	2600      	movs	r6, #0
 8007a74:	42a6      	cmp	r6, r4
 8007a76:	d109      	bne.n	8007a8c <__libc_init_array+0x24>
 8007a78:	4d0b      	ldr	r5, [pc, #44]	@ (8007aa8 <__libc_init_array+0x40>)
 8007a7a:	4c0c      	ldr	r4, [pc, #48]	@ (8007aac <__libc_init_array+0x44>)
 8007a7c:	f000 fc74 	bl	8008368 <_init>
 8007a80:	1b64      	subs	r4, r4, r5
 8007a82:	10a4      	asrs	r4, r4, #2
 8007a84:	2600      	movs	r6, #0
 8007a86:	42a6      	cmp	r6, r4
 8007a88:	d105      	bne.n	8007a96 <__libc_init_array+0x2e>
 8007a8a:	bd70      	pop	{r4, r5, r6, pc}
 8007a8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a90:	4798      	blx	r3
 8007a92:	3601      	adds	r6, #1
 8007a94:	e7ee      	b.n	8007a74 <__libc_init_array+0xc>
 8007a96:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a9a:	4798      	blx	r3
 8007a9c:	3601      	adds	r6, #1
 8007a9e:	e7f2      	b.n	8007a86 <__libc_init_array+0x1e>
 8007aa0:	080084b0 	.word	0x080084b0
 8007aa4:	080084b0 	.word	0x080084b0
 8007aa8:	080084b0 	.word	0x080084b0
 8007aac:	080084b4 	.word	0x080084b4

08007ab0 <__retarget_lock_acquire_recursive>:
 8007ab0:	4770      	bx	lr

08007ab2 <__retarget_lock_release_recursive>:
 8007ab2:	4770      	bx	lr

08007ab4 <memcpy>:
 8007ab4:	440a      	add	r2, r1
 8007ab6:	4291      	cmp	r1, r2
 8007ab8:	f100 33ff 	add.w	r3, r0, #4294967295
 8007abc:	d100      	bne.n	8007ac0 <memcpy+0xc>
 8007abe:	4770      	bx	lr
 8007ac0:	b510      	push	{r4, lr}
 8007ac2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007ac6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007aca:	4291      	cmp	r1, r2
 8007acc:	d1f9      	bne.n	8007ac2 <memcpy+0xe>
 8007ace:	bd10      	pop	{r4, pc}

08007ad0 <_free_r>:
 8007ad0:	b538      	push	{r3, r4, r5, lr}
 8007ad2:	4605      	mov	r5, r0
 8007ad4:	2900      	cmp	r1, #0
 8007ad6:	d041      	beq.n	8007b5c <_free_r+0x8c>
 8007ad8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007adc:	1f0c      	subs	r4, r1, #4
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	bfb8      	it	lt
 8007ae2:	18e4      	addlt	r4, r4, r3
 8007ae4:	f000 f8e0 	bl	8007ca8 <__malloc_lock>
 8007ae8:	4a1d      	ldr	r2, [pc, #116]	@ (8007b60 <_free_r+0x90>)
 8007aea:	6813      	ldr	r3, [r2, #0]
 8007aec:	b933      	cbnz	r3, 8007afc <_free_r+0x2c>
 8007aee:	6063      	str	r3, [r4, #4]
 8007af0:	6014      	str	r4, [r2, #0]
 8007af2:	4628      	mov	r0, r5
 8007af4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007af8:	f000 b8dc 	b.w	8007cb4 <__malloc_unlock>
 8007afc:	42a3      	cmp	r3, r4
 8007afe:	d908      	bls.n	8007b12 <_free_r+0x42>
 8007b00:	6820      	ldr	r0, [r4, #0]
 8007b02:	1821      	adds	r1, r4, r0
 8007b04:	428b      	cmp	r3, r1
 8007b06:	bf01      	itttt	eq
 8007b08:	6819      	ldreq	r1, [r3, #0]
 8007b0a:	685b      	ldreq	r3, [r3, #4]
 8007b0c:	1809      	addeq	r1, r1, r0
 8007b0e:	6021      	streq	r1, [r4, #0]
 8007b10:	e7ed      	b.n	8007aee <_free_r+0x1e>
 8007b12:	461a      	mov	r2, r3
 8007b14:	685b      	ldr	r3, [r3, #4]
 8007b16:	b10b      	cbz	r3, 8007b1c <_free_r+0x4c>
 8007b18:	42a3      	cmp	r3, r4
 8007b1a:	d9fa      	bls.n	8007b12 <_free_r+0x42>
 8007b1c:	6811      	ldr	r1, [r2, #0]
 8007b1e:	1850      	adds	r0, r2, r1
 8007b20:	42a0      	cmp	r0, r4
 8007b22:	d10b      	bne.n	8007b3c <_free_r+0x6c>
 8007b24:	6820      	ldr	r0, [r4, #0]
 8007b26:	4401      	add	r1, r0
 8007b28:	1850      	adds	r0, r2, r1
 8007b2a:	4283      	cmp	r3, r0
 8007b2c:	6011      	str	r1, [r2, #0]
 8007b2e:	d1e0      	bne.n	8007af2 <_free_r+0x22>
 8007b30:	6818      	ldr	r0, [r3, #0]
 8007b32:	685b      	ldr	r3, [r3, #4]
 8007b34:	6053      	str	r3, [r2, #4]
 8007b36:	4408      	add	r0, r1
 8007b38:	6010      	str	r0, [r2, #0]
 8007b3a:	e7da      	b.n	8007af2 <_free_r+0x22>
 8007b3c:	d902      	bls.n	8007b44 <_free_r+0x74>
 8007b3e:	230c      	movs	r3, #12
 8007b40:	602b      	str	r3, [r5, #0]
 8007b42:	e7d6      	b.n	8007af2 <_free_r+0x22>
 8007b44:	6820      	ldr	r0, [r4, #0]
 8007b46:	1821      	adds	r1, r4, r0
 8007b48:	428b      	cmp	r3, r1
 8007b4a:	bf04      	itt	eq
 8007b4c:	6819      	ldreq	r1, [r3, #0]
 8007b4e:	685b      	ldreq	r3, [r3, #4]
 8007b50:	6063      	str	r3, [r4, #4]
 8007b52:	bf04      	itt	eq
 8007b54:	1809      	addeq	r1, r1, r0
 8007b56:	6021      	streq	r1, [r4, #0]
 8007b58:	6054      	str	r4, [r2, #4]
 8007b5a:	e7ca      	b.n	8007af2 <_free_r+0x22>
 8007b5c:	bd38      	pop	{r3, r4, r5, pc}
 8007b5e:	bf00      	nop
 8007b60:	200138e8 	.word	0x200138e8

08007b64 <sbrk_aligned>:
 8007b64:	b570      	push	{r4, r5, r6, lr}
 8007b66:	4e0f      	ldr	r6, [pc, #60]	@ (8007ba4 <sbrk_aligned+0x40>)
 8007b68:	460c      	mov	r4, r1
 8007b6a:	6831      	ldr	r1, [r6, #0]
 8007b6c:	4605      	mov	r5, r0
 8007b6e:	b911      	cbnz	r1, 8007b76 <sbrk_aligned+0x12>
 8007b70:	f000 fba6 	bl	80082c0 <_sbrk_r>
 8007b74:	6030      	str	r0, [r6, #0]
 8007b76:	4621      	mov	r1, r4
 8007b78:	4628      	mov	r0, r5
 8007b7a:	f000 fba1 	bl	80082c0 <_sbrk_r>
 8007b7e:	1c43      	adds	r3, r0, #1
 8007b80:	d103      	bne.n	8007b8a <sbrk_aligned+0x26>
 8007b82:	f04f 34ff 	mov.w	r4, #4294967295
 8007b86:	4620      	mov	r0, r4
 8007b88:	bd70      	pop	{r4, r5, r6, pc}
 8007b8a:	1cc4      	adds	r4, r0, #3
 8007b8c:	f024 0403 	bic.w	r4, r4, #3
 8007b90:	42a0      	cmp	r0, r4
 8007b92:	d0f8      	beq.n	8007b86 <sbrk_aligned+0x22>
 8007b94:	1a21      	subs	r1, r4, r0
 8007b96:	4628      	mov	r0, r5
 8007b98:	f000 fb92 	bl	80082c0 <_sbrk_r>
 8007b9c:	3001      	adds	r0, #1
 8007b9e:	d1f2      	bne.n	8007b86 <sbrk_aligned+0x22>
 8007ba0:	e7ef      	b.n	8007b82 <sbrk_aligned+0x1e>
 8007ba2:	bf00      	nop
 8007ba4:	200138e4 	.word	0x200138e4

08007ba8 <_malloc_r>:
 8007ba8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007bac:	1ccd      	adds	r5, r1, #3
 8007bae:	f025 0503 	bic.w	r5, r5, #3
 8007bb2:	3508      	adds	r5, #8
 8007bb4:	2d0c      	cmp	r5, #12
 8007bb6:	bf38      	it	cc
 8007bb8:	250c      	movcc	r5, #12
 8007bba:	2d00      	cmp	r5, #0
 8007bbc:	4606      	mov	r6, r0
 8007bbe:	db01      	blt.n	8007bc4 <_malloc_r+0x1c>
 8007bc0:	42a9      	cmp	r1, r5
 8007bc2:	d904      	bls.n	8007bce <_malloc_r+0x26>
 8007bc4:	230c      	movs	r3, #12
 8007bc6:	6033      	str	r3, [r6, #0]
 8007bc8:	2000      	movs	r0, #0
 8007bca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007bce:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007ca4 <_malloc_r+0xfc>
 8007bd2:	f000 f869 	bl	8007ca8 <__malloc_lock>
 8007bd6:	f8d8 3000 	ldr.w	r3, [r8]
 8007bda:	461c      	mov	r4, r3
 8007bdc:	bb44      	cbnz	r4, 8007c30 <_malloc_r+0x88>
 8007bde:	4629      	mov	r1, r5
 8007be0:	4630      	mov	r0, r6
 8007be2:	f7ff ffbf 	bl	8007b64 <sbrk_aligned>
 8007be6:	1c43      	adds	r3, r0, #1
 8007be8:	4604      	mov	r4, r0
 8007bea:	d158      	bne.n	8007c9e <_malloc_r+0xf6>
 8007bec:	f8d8 4000 	ldr.w	r4, [r8]
 8007bf0:	4627      	mov	r7, r4
 8007bf2:	2f00      	cmp	r7, #0
 8007bf4:	d143      	bne.n	8007c7e <_malloc_r+0xd6>
 8007bf6:	2c00      	cmp	r4, #0
 8007bf8:	d04b      	beq.n	8007c92 <_malloc_r+0xea>
 8007bfa:	6823      	ldr	r3, [r4, #0]
 8007bfc:	4639      	mov	r1, r7
 8007bfe:	4630      	mov	r0, r6
 8007c00:	eb04 0903 	add.w	r9, r4, r3
 8007c04:	f000 fb5c 	bl	80082c0 <_sbrk_r>
 8007c08:	4581      	cmp	r9, r0
 8007c0a:	d142      	bne.n	8007c92 <_malloc_r+0xea>
 8007c0c:	6821      	ldr	r1, [r4, #0]
 8007c0e:	1a6d      	subs	r5, r5, r1
 8007c10:	4629      	mov	r1, r5
 8007c12:	4630      	mov	r0, r6
 8007c14:	f7ff ffa6 	bl	8007b64 <sbrk_aligned>
 8007c18:	3001      	adds	r0, #1
 8007c1a:	d03a      	beq.n	8007c92 <_malloc_r+0xea>
 8007c1c:	6823      	ldr	r3, [r4, #0]
 8007c1e:	442b      	add	r3, r5
 8007c20:	6023      	str	r3, [r4, #0]
 8007c22:	f8d8 3000 	ldr.w	r3, [r8]
 8007c26:	685a      	ldr	r2, [r3, #4]
 8007c28:	bb62      	cbnz	r2, 8007c84 <_malloc_r+0xdc>
 8007c2a:	f8c8 7000 	str.w	r7, [r8]
 8007c2e:	e00f      	b.n	8007c50 <_malloc_r+0xa8>
 8007c30:	6822      	ldr	r2, [r4, #0]
 8007c32:	1b52      	subs	r2, r2, r5
 8007c34:	d420      	bmi.n	8007c78 <_malloc_r+0xd0>
 8007c36:	2a0b      	cmp	r2, #11
 8007c38:	d917      	bls.n	8007c6a <_malloc_r+0xc2>
 8007c3a:	1961      	adds	r1, r4, r5
 8007c3c:	42a3      	cmp	r3, r4
 8007c3e:	6025      	str	r5, [r4, #0]
 8007c40:	bf18      	it	ne
 8007c42:	6059      	strne	r1, [r3, #4]
 8007c44:	6863      	ldr	r3, [r4, #4]
 8007c46:	bf08      	it	eq
 8007c48:	f8c8 1000 	streq.w	r1, [r8]
 8007c4c:	5162      	str	r2, [r4, r5]
 8007c4e:	604b      	str	r3, [r1, #4]
 8007c50:	4630      	mov	r0, r6
 8007c52:	f000 f82f 	bl	8007cb4 <__malloc_unlock>
 8007c56:	f104 000b 	add.w	r0, r4, #11
 8007c5a:	1d23      	adds	r3, r4, #4
 8007c5c:	f020 0007 	bic.w	r0, r0, #7
 8007c60:	1ac2      	subs	r2, r0, r3
 8007c62:	bf1c      	itt	ne
 8007c64:	1a1b      	subne	r3, r3, r0
 8007c66:	50a3      	strne	r3, [r4, r2]
 8007c68:	e7af      	b.n	8007bca <_malloc_r+0x22>
 8007c6a:	6862      	ldr	r2, [r4, #4]
 8007c6c:	42a3      	cmp	r3, r4
 8007c6e:	bf0c      	ite	eq
 8007c70:	f8c8 2000 	streq.w	r2, [r8]
 8007c74:	605a      	strne	r2, [r3, #4]
 8007c76:	e7eb      	b.n	8007c50 <_malloc_r+0xa8>
 8007c78:	4623      	mov	r3, r4
 8007c7a:	6864      	ldr	r4, [r4, #4]
 8007c7c:	e7ae      	b.n	8007bdc <_malloc_r+0x34>
 8007c7e:	463c      	mov	r4, r7
 8007c80:	687f      	ldr	r7, [r7, #4]
 8007c82:	e7b6      	b.n	8007bf2 <_malloc_r+0x4a>
 8007c84:	461a      	mov	r2, r3
 8007c86:	685b      	ldr	r3, [r3, #4]
 8007c88:	42a3      	cmp	r3, r4
 8007c8a:	d1fb      	bne.n	8007c84 <_malloc_r+0xdc>
 8007c8c:	2300      	movs	r3, #0
 8007c8e:	6053      	str	r3, [r2, #4]
 8007c90:	e7de      	b.n	8007c50 <_malloc_r+0xa8>
 8007c92:	230c      	movs	r3, #12
 8007c94:	6033      	str	r3, [r6, #0]
 8007c96:	4630      	mov	r0, r6
 8007c98:	f000 f80c 	bl	8007cb4 <__malloc_unlock>
 8007c9c:	e794      	b.n	8007bc8 <_malloc_r+0x20>
 8007c9e:	6005      	str	r5, [r0, #0]
 8007ca0:	e7d6      	b.n	8007c50 <_malloc_r+0xa8>
 8007ca2:	bf00      	nop
 8007ca4:	200138e8 	.word	0x200138e8

08007ca8 <__malloc_lock>:
 8007ca8:	4801      	ldr	r0, [pc, #4]	@ (8007cb0 <__malloc_lock+0x8>)
 8007caa:	f7ff bf01 	b.w	8007ab0 <__retarget_lock_acquire_recursive>
 8007cae:	bf00      	nop
 8007cb0:	200138e0 	.word	0x200138e0

08007cb4 <__malloc_unlock>:
 8007cb4:	4801      	ldr	r0, [pc, #4]	@ (8007cbc <__malloc_unlock+0x8>)
 8007cb6:	f7ff befc 	b.w	8007ab2 <__retarget_lock_release_recursive>
 8007cba:	bf00      	nop
 8007cbc:	200138e0 	.word	0x200138e0

08007cc0 <__ssputs_r>:
 8007cc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007cc4:	688e      	ldr	r6, [r1, #8]
 8007cc6:	461f      	mov	r7, r3
 8007cc8:	42be      	cmp	r6, r7
 8007cca:	680b      	ldr	r3, [r1, #0]
 8007ccc:	4682      	mov	sl, r0
 8007cce:	460c      	mov	r4, r1
 8007cd0:	4690      	mov	r8, r2
 8007cd2:	d82d      	bhi.n	8007d30 <__ssputs_r+0x70>
 8007cd4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007cd8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007cdc:	d026      	beq.n	8007d2c <__ssputs_r+0x6c>
 8007cde:	6965      	ldr	r5, [r4, #20]
 8007ce0:	6909      	ldr	r1, [r1, #16]
 8007ce2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007ce6:	eba3 0901 	sub.w	r9, r3, r1
 8007cea:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007cee:	1c7b      	adds	r3, r7, #1
 8007cf0:	444b      	add	r3, r9
 8007cf2:	106d      	asrs	r5, r5, #1
 8007cf4:	429d      	cmp	r5, r3
 8007cf6:	bf38      	it	cc
 8007cf8:	461d      	movcc	r5, r3
 8007cfa:	0553      	lsls	r3, r2, #21
 8007cfc:	d527      	bpl.n	8007d4e <__ssputs_r+0x8e>
 8007cfe:	4629      	mov	r1, r5
 8007d00:	f7ff ff52 	bl	8007ba8 <_malloc_r>
 8007d04:	4606      	mov	r6, r0
 8007d06:	b360      	cbz	r0, 8007d62 <__ssputs_r+0xa2>
 8007d08:	6921      	ldr	r1, [r4, #16]
 8007d0a:	464a      	mov	r2, r9
 8007d0c:	f7ff fed2 	bl	8007ab4 <memcpy>
 8007d10:	89a3      	ldrh	r3, [r4, #12]
 8007d12:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007d16:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007d1a:	81a3      	strh	r3, [r4, #12]
 8007d1c:	6126      	str	r6, [r4, #16]
 8007d1e:	6165      	str	r5, [r4, #20]
 8007d20:	444e      	add	r6, r9
 8007d22:	eba5 0509 	sub.w	r5, r5, r9
 8007d26:	6026      	str	r6, [r4, #0]
 8007d28:	60a5      	str	r5, [r4, #8]
 8007d2a:	463e      	mov	r6, r7
 8007d2c:	42be      	cmp	r6, r7
 8007d2e:	d900      	bls.n	8007d32 <__ssputs_r+0x72>
 8007d30:	463e      	mov	r6, r7
 8007d32:	6820      	ldr	r0, [r4, #0]
 8007d34:	4632      	mov	r2, r6
 8007d36:	4641      	mov	r1, r8
 8007d38:	f000 faa8 	bl	800828c <memmove>
 8007d3c:	68a3      	ldr	r3, [r4, #8]
 8007d3e:	1b9b      	subs	r3, r3, r6
 8007d40:	60a3      	str	r3, [r4, #8]
 8007d42:	6823      	ldr	r3, [r4, #0]
 8007d44:	4433      	add	r3, r6
 8007d46:	6023      	str	r3, [r4, #0]
 8007d48:	2000      	movs	r0, #0
 8007d4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d4e:	462a      	mov	r2, r5
 8007d50:	f000 fac6 	bl	80082e0 <_realloc_r>
 8007d54:	4606      	mov	r6, r0
 8007d56:	2800      	cmp	r0, #0
 8007d58:	d1e0      	bne.n	8007d1c <__ssputs_r+0x5c>
 8007d5a:	6921      	ldr	r1, [r4, #16]
 8007d5c:	4650      	mov	r0, sl
 8007d5e:	f7ff feb7 	bl	8007ad0 <_free_r>
 8007d62:	230c      	movs	r3, #12
 8007d64:	f8ca 3000 	str.w	r3, [sl]
 8007d68:	89a3      	ldrh	r3, [r4, #12]
 8007d6a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007d6e:	81a3      	strh	r3, [r4, #12]
 8007d70:	f04f 30ff 	mov.w	r0, #4294967295
 8007d74:	e7e9      	b.n	8007d4a <__ssputs_r+0x8a>
	...

08007d78 <_svfiprintf_r>:
 8007d78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d7c:	4698      	mov	r8, r3
 8007d7e:	898b      	ldrh	r3, [r1, #12]
 8007d80:	061b      	lsls	r3, r3, #24
 8007d82:	b09d      	sub	sp, #116	@ 0x74
 8007d84:	4607      	mov	r7, r0
 8007d86:	460d      	mov	r5, r1
 8007d88:	4614      	mov	r4, r2
 8007d8a:	d510      	bpl.n	8007dae <_svfiprintf_r+0x36>
 8007d8c:	690b      	ldr	r3, [r1, #16]
 8007d8e:	b973      	cbnz	r3, 8007dae <_svfiprintf_r+0x36>
 8007d90:	2140      	movs	r1, #64	@ 0x40
 8007d92:	f7ff ff09 	bl	8007ba8 <_malloc_r>
 8007d96:	6028      	str	r0, [r5, #0]
 8007d98:	6128      	str	r0, [r5, #16]
 8007d9a:	b930      	cbnz	r0, 8007daa <_svfiprintf_r+0x32>
 8007d9c:	230c      	movs	r3, #12
 8007d9e:	603b      	str	r3, [r7, #0]
 8007da0:	f04f 30ff 	mov.w	r0, #4294967295
 8007da4:	b01d      	add	sp, #116	@ 0x74
 8007da6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007daa:	2340      	movs	r3, #64	@ 0x40
 8007dac:	616b      	str	r3, [r5, #20]
 8007dae:	2300      	movs	r3, #0
 8007db0:	9309      	str	r3, [sp, #36]	@ 0x24
 8007db2:	2320      	movs	r3, #32
 8007db4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007db8:	f8cd 800c 	str.w	r8, [sp, #12]
 8007dbc:	2330      	movs	r3, #48	@ 0x30
 8007dbe:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007f5c <_svfiprintf_r+0x1e4>
 8007dc2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007dc6:	f04f 0901 	mov.w	r9, #1
 8007dca:	4623      	mov	r3, r4
 8007dcc:	469a      	mov	sl, r3
 8007dce:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007dd2:	b10a      	cbz	r2, 8007dd8 <_svfiprintf_r+0x60>
 8007dd4:	2a25      	cmp	r2, #37	@ 0x25
 8007dd6:	d1f9      	bne.n	8007dcc <_svfiprintf_r+0x54>
 8007dd8:	ebba 0b04 	subs.w	fp, sl, r4
 8007ddc:	d00b      	beq.n	8007df6 <_svfiprintf_r+0x7e>
 8007dde:	465b      	mov	r3, fp
 8007de0:	4622      	mov	r2, r4
 8007de2:	4629      	mov	r1, r5
 8007de4:	4638      	mov	r0, r7
 8007de6:	f7ff ff6b 	bl	8007cc0 <__ssputs_r>
 8007dea:	3001      	adds	r0, #1
 8007dec:	f000 80a7 	beq.w	8007f3e <_svfiprintf_r+0x1c6>
 8007df0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007df2:	445a      	add	r2, fp
 8007df4:	9209      	str	r2, [sp, #36]	@ 0x24
 8007df6:	f89a 3000 	ldrb.w	r3, [sl]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	f000 809f 	beq.w	8007f3e <_svfiprintf_r+0x1c6>
 8007e00:	2300      	movs	r3, #0
 8007e02:	f04f 32ff 	mov.w	r2, #4294967295
 8007e06:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007e0a:	f10a 0a01 	add.w	sl, sl, #1
 8007e0e:	9304      	str	r3, [sp, #16]
 8007e10:	9307      	str	r3, [sp, #28]
 8007e12:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007e16:	931a      	str	r3, [sp, #104]	@ 0x68
 8007e18:	4654      	mov	r4, sl
 8007e1a:	2205      	movs	r2, #5
 8007e1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e20:	484e      	ldr	r0, [pc, #312]	@ (8007f5c <_svfiprintf_r+0x1e4>)
 8007e22:	f7f8 fa25 	bl	8000270 <memchr>
 8007e26:	9a04      	ldr	r2, [sp, #16]
 8007e28:	b9d8      	cbnz	r0, 8007e62 <_svfiprintf_r+0xea>
 8007e2a:	06d0      	lsls	r0, r2, #27
 8007e2c:	bf44      	itt	mi
 8007e2e:	2320      	movmi	r3, #32
 8007e30:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007e34:	0711      	lsls	r1, r2, #28
 8007e36:	bf44      	itt	mi
 8007e38:	232b      	movmi	r3, #43	@ 0x2b
 8007e3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007e3e:	f89a 3000 	ldrb.w	r3, [sl]
 8007e42:	2b2a      	cmp	r3, #42	@ 0x2a
 8007e44:	d015      	beq.n	8007e72 <_svfiprintf_r+0xfa>
 8007e46:	9a07      	ldr	r2, [sp, #28]
 8007e48:	4654      	mov	r4, sl
 8007e4a:	2000      	movs	r0, #0
 8007e4c:	f04f 0c0a 	mov.w	ip, #10
 8007e50:	4621      	mov	r1, r4
 8007e52:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007e56:	3b30      	subs	r3, #48	@ 0x30
 8007e58:	2b09      	cmp	r3, #9
 8007e5a:	d94b      	bls.n	8007ef4 <_svfiprintf_r+0x17c>
 8007e5c:	b1b0      	cbz	r0, 8007e8c <_svfiprintf_r+0x114>
 8007e5e:	9207      	str	r2, [sp, #28]
 8007e60:	e014      	b.n	8007e8c <_svfiprintf_r+0x114>
 8007e62:	eba0 0308 	sub.w	r3, r0, r8
 8007e66:	fa09 f303 	lsl.w	r3, r9, r3
 8007e6a:	4313      	orrs	r3, r2
 8007e6c:	9304      	str	r3, [sp, #16]
 8007e6e:	46a2      	mov	sl, r4
 8007e70:	e7d2      	b.n	8007e18 <_svfiprintf_r+0xa0>
 8007e72:	9b03      	ldr	r3, [sp, #12]
 8007e74:	1d19      	adds	r1, r3, #4
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	9103      	str	r1, [sp, #12]
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	bfbb      	ittet	lt
 8007e7e:	425b      	neglt	r3, r3
 8007e80:	f042 0202 	orrlt.w	r2, r2, #2
 8007e84:	9307      	strge	r3, [sp, #28]
 8007e86:	9307      	strlt	r3, [sp, #28]
 8007e88:	bfb8      	it	lt
 8007e8a:	9204      	strlt	r2, [sp, #16]
 8007e8c:	7823      	ldrb	r3, [r4, #0]
 8007e8e:	2b2e      	cmp	r3, #46	@ 0x2e
 8007e90:	d10a      	bne.n	8007ea8 <_svfiprintf_r+0x130>
 8007e92:	7863      	ldrb	r3, [r4, #1]
 8007e94:	2b2a      	cmp	r3, #42	@ 0x2a
 8007e96:	d132      	bne.n	8007efe <_svfiprintf_r+0x186>
 8007e98:	9b03      	ldr	r3, [sp, #12]
 8007e9a:	1d1a      	adds	r2, r3, #4
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	9203      	str	r2, [sp, #12]
 8007ea0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007ea4:	3402      	adds	r4, #2
 8007ea6:	9305      	str	r3, [sp, #20]
 8007ea8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007f6c <_svfiprintf_r+0x1f4>
 8007eac:	7821      	ldrb	r1, [r4, #0]
 8007eae:	2203      	movs	r2, #3
 8007eb0:	4650      	mov	r0, sl
 8007eb2:	f7f8 f9dd 	bl	8000270 <memchr>
 8007eb6:	b138      	cbz	r0, 8007ec8 <_svfiprintf_r+0x150>
 8007eb8:	9b04      	ldr	r3, [sp, #16]
 8007eba:	eba0 000a 	sub.w	r0, r0, sl
 8007ebe:	2240      	movs	r2, #64	@ 0x40
 8007ec0:	4082      	lsls	r2, r0
 8007ec2:	4313      	orrs	r3, r2
 8007ec4:	3401      	adds	r4, #1
 8007ec6:	9304      	str	r3, [sp, #16]
 8007ec8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ecc:	4824      	ldr	r0, [pc, #144]	@ (8007f60 <_svfiprintf_r+0x1e8>)
 8007ece:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007ed2:	2206      	movs	r2, #6
 8007ed4:	f7f8 f9cc 	bl	8000270 <memchr>
 8007ed8:	2800      	cmp	r0, #0
 8007eda:	d036      	beq.n	8007f4a <_svfiprintf_r+0x1d2>
 8007edc:	4b21      	ldr	r3, [pc, #132]	@ (8007f64 <_svfiprintf_r+0x1ec>)
 8007ede:	bb1b      	cbnz	r3, 8007f28 <_svfiprintf_r+0x1b0>
 8007ee0:	9b03      	ldr	r3, [sp, #12]
 8007ee2:	3307      	adds	r3, #7
 8007ee4:	f023 0307 	bic.w	r3, r3, #7
 8007ee8:	3308      	adds	r3, #8
 8007eea:	9303      	str	r3, [sp, #12]
 8007eec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007eee:	4433      	add	r3, r6
 8007ef0:	9309      	str	r3, [sp, #36]	@ 0x24
 8007ef2:	e76a      	b.n	8007dca <_svfiprintf_r+0x52>
 8007ef4:	fb0c 3202 	mla	r2, ip, r2, r3
 8007ef8:	460c      	mov	r4, r1
 8007efa:	2001      	movs	r0, #1
 8007efc:	e7a8      	b.n	8007e50 <_svfiprintf_r+0xd8>
 8007efe:	2300      	movs	r3, #0
 8007f00:	3401      	adds	r4, #1
 8007f02:	9305      	str	r3, [sp, #20]
 8007f04:	4619      	mov	r1, r3
 8007f06:	f04f 0c0a 	mov.w	ip, #10
 8007f0a:	4620      	mov	r0, r4
 8007f0c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007f10:	3a30      	subs	r2, #48	@ 0x30
 8007f12:	2a09      	cmp	r2, #9
 8007f14:	d903      	bls.n	8007f1e <_svfiprintf_r+0x1a6>
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d0c6      	beq.n	8007ea8 <_svfiprintf_r+0x130>
 8007f1a:	9105      	str	r1, [sp, #20]
 8007f1c:	e7c4      	b.n	8007ea8 <_svfiprintf_r+0x130>
 8007f1e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007f22:	4604      	mov	r4, r0
 8007f24:	2301      	movs	r3, #1
 8007f26:	e7f0      	b.n	8007f0a <_svfiprintf_r+0x192>
 8007f28:	ab03      	add	r3, sp, #12
 8007f2a:	9300      	str	r3, [sp, #0]
 8007f2c:	462a      	mov	r2, r5
 8007f2e:	4b0e      	ldr	r3, [pc, #56]	@ (8007f68 <_svfiprintf_r+0x1f0>)
 8007f30:	a904      	add	r1, sp, #16
 8007f32:	4638      	mov	r0, r7
 8007f34:	f3af 8000 	nop.w
 8007f38:	1c42      	adds	r2, r0, #1
 8007f3a:	4606      	mov	r6, r0
 8007f3c:	d1d6      	bne.n	8007eec <_svfiprintf_r+0x174>
 8007f3e:	89ab      	ldrh	r3, [r5, #12]
 8007f40:	065b      	lsls	r3, r3, #25
 8007f42:	f53f af2d 	bmi.w	8007da0 <_svfiprintf_r+0x28>
 8007f46:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007f48:	e72c      	b.n	8007da4 <_svfiprintf_r+0x2c>
 8007f4a:	ab03      	add	r3, sp, #12
 8007f4c:	9300      	str	r3, [sp, #0]
 8007f4e:	462a      	mov	r2, r5
 8007f50:	4b05      	ldr	r3, [pc, #20]	@ (8007f68 <_svfiprintf_r+0x1f0>)
 8007f52:	a904      	add	r1, sp, #16
 8007f54:	4638      	mov	r0, r7
 8007f56:	f000 f879 	bl	800804c <_printf_i>
 8007f5a:	e7ed      	b.n	8007f38 <_svfiprintf_r+0x1c0>
 8007f5c:	08008472 	.word	0x08008472
 8007f60:	0800847c 	.word	0x0800847c
 8007f64:	00000000 	.word	0x00000000
 8007f68:	08007cc1 	.word	0x08007cc1
 8007f6c:	08008478 	.word	0x08008478

08007f70 <_printf_common>:
 8007f70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f74:	4616      	mov	r6, r2
 8007f76:	4698      	mov	r8, r3
 8007f78:	688a      	ldr	r2, [r1, #8]
 8007f7a:	690b      	ldr	r3, [r1, #16]
 8007f7c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007f80:	4293      	cmp	r3, r2
 8007f82:	bfb8      	it	lt
 8007f84:	4613      	movlt	r3, r2
 8007f86:	6033      	str	r3, [r6, #0]
 8007f88:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007f8c:	4607      	mov	r7, r0
 8007f8e:	460c      	mov	r4, r1
 8007f90:	b10a      	cbz	r2, 8007f96 <_printf_common+0x26>
 8007f92:	3301      	adds	r3, #1
 8007f94:	6033      	str	r3, [r6, #0]
 8007f96:	6823      	ldr	r3, [r4, #0]
 8007f98:	0699      	lsls	r1, r3, #26
 8007f9a:	bf42      	ittt	mi
 8007f9c:	6833      	ldrmi	r3, [r6, #0]
 8007f9e:	3302      	addmi	r3, #2
 8007fa0:	6033      	strmi	r3, [r6, #0]
 8007fa2:	6825      	ldr	r5, [r4, #0]
 8007fa4:	f015 0506 	ands.w	r5, r5, #6
 8007fa8:	d106      	bne.n	8007fb8 <_printf_common+0x48>
 8007faa:	f104 0a19 	add.w	sl, r4, #25
 8007fae:	68e3      	ldr	r3, [r4, #12]
 8007fb0:	6832      	ldr	r2, [r6, #0]
 8007fb2:	1a9b      	subs	r3, r3, r2
 8007fb4:	42ab      	cmp	r3, r5
 8007fb6:	dc26      	bgt.n	8008006 <_printf_common+0x96>
 8007fb8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007fbc:	6822      	ldr	r2, [r4, #0]
 8007fbe:	3b00      	subs	r3, #0
 8007fc0:	bf18      	it	ne
 8007fc2:	2301      	movne	r3, #1
 8007fc4:	0692      	lsls	r2, r2, #26
 8007fc6:	d42b      	bmi.n	8008020 <_printf_common+0xb0>
 8007fc8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007fcc:	4641      	mov	r1, r8
 8007fce:	4638      	mov	r0, r7
 8007fd0:	47c8      	blx	r9
 8007fd2:	3001      	adds	r0, #1
 8007fd4:	d01e      	beq.n	8008014 <_printf_common+0xa4>
 8007fd6:	6823      	ldr	r3, [r4, #0]
 8007fd8:	6922      	ldr	r2, [r4, #16]
 8007fda:	f003 0306 	and.w	r3, r3, #6
 8007fde:	2b04      	cmp	r3, #4
 8007fe0:	bf02      	ittt	eq
 8007fe2:	68e5      	ldreq	r5, [r4, #12]
 8007fe4:	6833      	ldreq	r3, [r6, #0]
 8007fe6:	1aed      	subeq	r5, r5, r3
 8007fe8:	68a3      	ldr	r3, [r4, #8]
 8007fea:	bf0c      	ite	eq
 8007fec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007ff0:	2500      	movne	r5, #0
 8007ff2:	4293      	cmp	r3, r2
 8007ff4:	bfc4      	itt	gt
 8007ff6:	1a9b      	subgt	r3, r3, r2
 8007ff8:	18ed      	addgt	r5, r5, r3
 8007ffa:	2600      	movs	r6, #0
 8007ffc:	341a      	adds	r4, #26
 8007ffe:	42b5      	cmp	r5, r6
 8008000:	d11a      	bne.n	8008038 <_printf_common+0xc8>
 8008002:	2000      	movs	r0, #0
 8008004:	e008      	b.n	8008018 <_printf_common+0xa8>
 8008006:	2301      	movs	r3, #1
 8008008:	4652      	mov	r2, sl
 800800a:	4641      	mov	r1, r8
 800800c:	4638      	mov	r0, r7
 800800e:	47c8      	blx	r9
 8008010:	3001      	adds	r0, #1
 8008012:	d103      	bne.n	800801c <_printf_common+0xac>
 8008014:	f04f 30ff 	mov.w	r0, #4294967295
 8008018:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800801c:	3501      	adds	r5, #1
 800801e:	e7c6      	b.n	8007fae <_printf_common+0x3e>
 8008020:	18e1      	adds	r1, r4, r3
 8008022:	1c5a      	adds	r2, r3, #1
 8008024:	2030      	movs	r0, #48	@ 0x30
 8008026:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800802a:	4422      	add	r2, r4
 800802c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008030:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008034:	3302      	adds	r3, #2
 8008036:	e7c7      	b.n	8007fc8 <_printf_common+0x58>
 8008038:	2301      	movs	r3, #1
 800803a:	4622      	mov	r2, r4
 800803c:	4641      	mov	r1, r8
 800803e:	4638      	mov	r0, r7
 8008040:	47c8      	blx	r9
 8008042:	3001      	adds	r0, #1
 8008044:	d0e6      	beq.n	8008014 <_printf_common+0xa4>
 8008046:	3601      	adds	r6, #1
 8008048:	e7d9      	b.n	8007ffe <_printf_common+0x8e>
	...

0800804c <_printf_i>:
 800804c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008050:	7e0f      	ldrb	r7, [r1, #24]
 8008052:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008054:	2f78      	cmp	r7, #120	@ 0x78
 8008056:	4691      	mov	r9, r2
 8008058:	4680      	mov	r8, r0
 800805a:	460c      	mov	r4, r1
 800805c:	469a      	mov	sl, r3
 800805e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008062:	d807      	bhi.n	8008074 <_printf_i+0x28>
 8008064:	2f62      	cmp	r7, #98	@ 0x62
 8008066:	d80a      	bhi.n	800807e <_printf_i+0x32>
 8008068:	2f00      	cmp	r7, #0
 800806a:	f000 80d2 	beq.w	8008212 <_printf_i+0x1c6>
 800806e:	2f58      	cmp	r7, #88	@ 0x58
 8008070:	f000 80b9 	beq.w	80081e6 <_printf_i+0x19a>
 8008074:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008078:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800807c:	e03a      	b.n	80080f4 <_printf_i+0xa8>
 800807e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008082:	2b15      	cmp	r3, #21
 8008084:	d8f6      	bhi.n	8008074 <_printf_i+0x28>
 8008086:	a101      	add	r1, pc, #4	@ (adr r1, 800808c <_printf_i+0x40>)
 8008088:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800808c:	080080e5 	.word	0x080080e5
 8008090:	080080f9 	.word	0x080080f9
 8008094:	08008075 	.word	0x08008075
 8008098:	08008075 	.word	0x08008075
 800809c:	08008075 	.word	0x08008075
 80080a0:	08008075 	.word	0x08008075
 80080a4:	080080f9 	.word	0x080080f9
 80080a8:	08008075 	.word	0x08008075
 80080ac:	08008075 	.word	0x08008075
 80080b0:	08008075 	.word	0x08008075
 80080b4:	08008075 	.word	0x08008075
 80080b8:	080081f9 	.word	0x080081f9
 80080bc:	08008123 	.word	0x08008123
 80080c0:	080081b3 	.word	0x080081b3
 80080c4:	08008075 	.word	0x08008075
 80080c8:	08008075 	.word	0x08008075
 80080cc:	0800821b 	.word	0x0800821b
 80080d0:	08008075 	.word	0x08008075
 80080d4:	08008123 	.word	0x08008123
 80080d8:	08008075 	.word	0x08008075
 80080dc:	08008075 	.word	0x08008075
 80080e0:	080081bb 	.word	0x080081bb
 80080e4:	6833      	ldr	r3, [r6, #0]
 80080e6:	1d1a      	adds	r2, r3, #4
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	6032      	str	r2, [r6, #0]
 80080ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80080f0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80080f4:	2301      	movs	r3, #1
 80080f6:	e09d      	b.n	8008234 <_printf_i+0x1e8>
 80080f8:	6833      	ldr	r3, [r6, #0]
 80080fa:	6820      	ldr	r0, [r4, #0]
 80080fc:	1d19      	adds	r1, r3, #4
 80080fe:	6031      	str	r1, [r6, #0]
 8008100:	0606      	lsls	r6, r0, #24
 8008102:	d501      	bpl.n	8008108 <_printf_i+0xbc>
 8008104:	681d      	ldr	r5, [r3, #0]
 8008106:	e003      	b.n	8008110 <_printf_i+0xc4>
 8008108:	0645      	lsls	r5, r0, #25
 800810a:	d5fb      	bpl.n	8008104 <_printf_i+0xb8>
 800810c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008110:	2d00      	cmp	r5, #0
 8008112:	da03      	bge.n	800811c <_printf_i+0xd0>
 8008114:	232d      	movs	r3, #45	@ 0x2d
 8008116:	426d      	negs	r5, r5
 8008118:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800811c:	4859      	ldr	r0, [pc, #356]	@ (8008284 <_printf_i+0x238>)
 800811e:	230a      	movs	r3, #10
 8008120:	e011      	b.n	8008146 <_printf_i+0xfa>
 8008122:	6821      	ldr	r1, [r4, #0]
 8008124:	6833      	ldr	r3, [r6, #0]
 8008126:	0608      	lsls	r0, r1, #24
 8008128:	f853 5b04 	ldr.w	r5, [r3], #4
 800812c:	d402      	bmi.n	8008134 <_printf_i+0xe8>
 800812e:	0649      	lsls	r1, r1, #25
 8008130:	bf48      	it	mi
 8008132:	b2ad      	uxthmi	r5, r5
 8008134:	2f6f      	cmp	r7, #111	@ 0x6f
 8008136:	4853      	ldr	r0, [pc, #332]	@ (8008284 <_printf_i+0x238>)
 8008138:	6033      	str	r3, [r6, #0]
 800813a:	bf14      	ite	ne
 800813c:	230a      	movne	r3, #10
 800813e:	2308      	moveq	r3, #8
 8008140:	2100      	movs	r1, #0
 8008142:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008146:	6866      	ldr	r6, [r4, #4]
 8008148:	60a6      	str	r6, [r4, #8]
 800814a:	2e00      	cmp	r6, #0
 800814c:	bfa2      	ittt	ge
 800814e:	6821      	ldrge	r1, [r4, #0]
 8008150:	f021 0104 	bicge.w	r1, r1, #4
 8008154:	6021      	strge	r1, [r4, #0]
 8008156:	b90d      	cbnz	r5, 800815c <_printf_i+0x110>
 8008158:	2e00      	cmp	r6, #0
 800815a:	d04b      	beq.n	80081f4 <_printf_i+0x1a8>
 800815c:	4616      	mov	r6, r2
 800815e:	fbb5 f1f3 	udiv	r1, r5, r3
 8008162:	fb03 5711 	mls	r7, r3, r1, r5
 8008166:	5dc7      	ldrb	r7, [r0, r7]
 8008168:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800816c:	462f      	mov	r7, r5
 800816e:	42bb      	cmp	r3, r7
 8008170:	460d      	mov	r5, r1
 8008172:	d9f4      	bls.n	800815e <_printf_i+0x112>
 8008174:	2b08      	cmp	r3, #8
 8008176:	d10b      	bne.n	8008190 <_printf_i+0x144>
 8008178:	6823      	ldr	r3, [r4, #0]
 800817a:	07df      	lsls	r7, r3, #31
 800817c:	d508      	bpl.n	8008190 <_printf_i+0x144>
 800817e:	6923      	ldr	r3, [r4, #16]
 8008180:	6861      	ldr	r1, [r4, #4]
 8008182:	4299      	cmp	r1, r3
 8008184:	bfde      	ittt	le
 8008186:	2330      	movle	r3, #48	@ 0x30
 8008188:	f806 3c01 	strble.w	r3, [r6, #-1]
 800818c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008190:	1b92      	subs	r2, r2, r6
 8008192:	6122      	str	r2, [r4, #16]
 8008194:	f8cd a000 	str.w	sl, [sp]
 8008198:	464b      	mov	r3, r9
 800819a:	aa03      	add	r2, sp, #12
 800819c:	4621      	mov	r1, r4
 800819e:	4640      	mov	r0, r8
 80081a0:	f7ff fee6 	bl	8007f70 <_printf_common>
 80081a4:	3001      	adds	r0, #1
 80081a6:	d14a      	bne.n	800823e <_printf_i+0x1f2>
 80081a8:	f04f 30ff 	mov.w	r0, #4294967295
 80081ac:	b004      	add	sp, #16
 80081ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081b2:	6823      	ldr	r3, [r4, #0]
 80081b4:	f043 0320 	orr.w	r3, r3, #32
 80081b8:	6023      	str	r3, [r4, #0]
 80081ba:	4833      	ldr	r0, [pc, #204]	@ (8008288 <_printf_i+0x23c>)
 80081bc:	2778      	movs	r7, #120	@ 0x78
 80081be:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80081c2:	6823      	ldr	r3, [r4, #0]
 80081c4:	6831      	ldr	r1, [r6, #0]
 80081c6:	061f      	lsls	r7, r3, #24
 80081c8:	f851 5b04 	ldr.w	r5, [r1], #4
 80081cc:	d402      	bmi.n	80081d4 <_printf_i+0x188>
 80081ce:	065f      	lsls	r7, r3, #25
 80081d0:	bf48      	it	mi
 80081d2:	b2ad      	uxthmi	r5, r5
 80081d4:	6031      	str	r1, [r6, #0]
 80081d6:	07d9      	lsls	r1, r3, #31
 80081d8:	bf44      	itt	mi
 80081da:	f043 0320 	orrmi.w	r3, r3, #32
 80081de:	6023      	strmi	r3, [r4, #0]
 80081e0:	b11d      	cbz	r5, 80081ea <_printf_i+0x19e>
 80081e2:	2310      	movs	r3, #16
 80081e4:	e7ac      	b.n	8008140 <_printf_i+0xf4>
 80081e6:	4827      	ldr	r0, [pc, #156]	@ (8008284 <_printf_i+0x238>)
 80081e8:	e7e9      	b.n	80081be <_printf_i+0x172>
 80081ea:	6823      	ldr	r3, [r4, #0]
 80081ec:	f023 0320 	bic.w	r3, r3, #32
 80081f0:	6023      	str	r3, [r4, #0]
 80081f2:	e7f6      	b.n	80081e2 <_printf_i+0x196>
 80081f4:	4616      	mov	r6, r2
 80081f6:	e7bd      	b.n	8008174 <_printf_i+0x128>
 80081f8:	6833      	ldr	r3, [r6, #0]
 80081fa:	6825      	ldr	r5, [r4, #0]
 80081fc:	6961      	ldr	r1, [r4, #20]
 80081fe:	1d18      	adds	r0, r3, #4
 8008200:	6030      	str	r0, [r6, #0]
 8008202:	062e      	lsls	r6, r5, #24
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	d501      	bpl.n	800820c <_printf_i+0x1c0>
 8008208:	6019      	str	r1, [r3, #0]
 800820a:	e002      	b.n	8008212 <_printf_i+0x1c6>
 800820c:	0668      	lsls	r0, r5, #25
 800820e:	d5fb      	bpl.n	8008208 <_printf_i+0x1bc>
 8008210:	8019      	strh	r1, [r3, #0]
 8008212:	2300      	movs	r3, #0
 8008214:	6123      	str	r3, [r4, #16]
 8008216:	4616      	mov	r6, r2
 8008218:	e7bc      	b.n	8008194 <_printf_i+0x148>
 800821a:	6833      	ldr	r3, [r6, #0]
 800821c:	1d1a      	adds	r2, r3, #4
 800821e:	6032      	str	r2, [r6, #0]
 8008220:	681e      	ldr	r6, [r3, #0]
 8008222:	6862      	ldr	r2, [r4, #4]
 8008224:	2100      	movs	r1, #0
 8008226:	4630      	mov	r0, r6
 8008228:	f7f8 f822 	bl	8000270 <memchr>
 800822c:	b108      	cbz	r0, 8008232 <_printf_i+0x1e6>
 800822e:	1b80      	subs	r0, r0, r6
 8008230:	6060      	str	r0, [r4, #4]
 8008232:	6863      	ldr	r3, [r4, #4]
 8008234:	6123      	str	r3, [r4, #16]
 8008236:	2300      	movs	r3, #0
 8008238:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800823c:	e7aa      	b.n	8008194 <_printf_i+0x148>
 800823e:	6923      	ldr	r3, [r4, #16]
 8008240:	4632      	mov	r2, r6
 8008242:	4649      	mov	r1, r9
 8008244:	4640      	mov	r0, r8
 8008246:	47d0      	blx	sl
 8008248:	3001      	adds	r0, #1
 800824a:	d0ad      	beq.n	80081a8 <_printf_i+0x15c>
 800824c:	6823      	ldr	r3, [r4, #0]
 800824e:	079b      	lsls	r3, r3, #30
 8008250:	d413      	bmi.n	800827a <_printf_i+0x22e>
 8008252:	68e0      	ldr	r0, [r4, #12]
 8008254:	9b03      	ldr	r3, [sp, #12]
 8008256:	4298      	cmp	r0, r3
 8008258:	bfb8      	it	lt
 800825a:	4618      	movlt	r0, r3
 800825c:	e7a6      	b.n	80081ac <_printf_i+0x160>
 800825e:	2301      	movs	r3, #1
 8008260:	4632      	mov	r2, r6
 8008262:	4649      	mov	r1, r9
 8008264:	4640      	mov	r0, r8
 8008266:	47d0      	blx	sl
 8008268:	3001      	adds	r0, #1
 800826a:	d09d      	beq.n	80081a8 <_printf_i+0x15c>
 800826c:	3501      	adds	r5, #1
 800826e:	68e3      	ldr	r3, [r4, #12]
 8008270:	9903      	ldr	r1, [sp, #12]
 8008272:	1a5b      	subs	r3, r3, r1
 8008274:	42ab      	cmp	r3, r5
 8008276:	dcf2      	bgt.n	800825e <_printf_i+0x212>
 8008278:	e7eb      	b.n	8008252 <_printf_i+0x206>
 800827a:	2500      	movs	r5, #0
 800827c:	f104 0619 	add.w	r6, r4, #25
 8008280:	e7f5      	b.n	800826e <_printf_i+0x222>
 8008282:	bf00      	nop
 8008284:	08008483 	.word	0x08008483
 8008288:	08008494 	.word	0x08008494

0800828c <memmove>:
 800828c:	4288      	cmp	r0, r1
 800828e:	b510      	push	{r4, lr}
 8008290:	eb01 0402 	add.w	r4, r1, r2
 8008294:	d902      	bls.n	800829c <memmove+0x10>
 8008296:	4284      	cmp	r4, r0
 8008298:	4623      	mov	r3, r4
 800829a:	d807      	bhi.n	80082ac <memmove+0x20>
 800829c:	1e43      	subs	r3, r0, #1
 800829e:	42a1      	cmp	r1, r4
 80082a0:	d008      	beq.n	80082b4 <memmove+0x28>
 80082a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80082a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80082aa:	e7f8      	b.n	800829e <memmove+0x12>
 80082ac:	4402      	add	r2, r0
 80082ae:	4601      	mov	r1, r0
 80082b0:	428a      	cmp	r2, r1
 80082b2:	d100      	bne.n	80082b6 <memmove+0x2a>
 80082b4:	bd10      	pop	{r4, pc}
 80082b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80082ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80082be:	e7f7      	b.n	80082b0 <memmove+0x24>

080082c0 <_sbrk_r>:
 80082c0:	b538      	push	{r3, r4, r5, lr}
 80082c2:	4d06      	ldr	r5, [pc, #24]	@ (80082dc <_sbrk_r+0x1c>)
 80082c4:	2300      	movs	r3, #0
 80082c6:	4604      	mov	r4, r0
 80082c8:	4608      	mov	r0, r1
 80082ca:	602b      	str	r3, [r5, #0]
 80082cc:	f000 f83e 	bl	800834c <_sbrk>
 80082d0:	1c43      	adds	r3, r0, #1
 80082d2:	d102      	bne.n	80082da <_sbrk_r+0x1a>
 80082d4:	682b      	ldr	r3, [r5, #0]
 80082d6:	b103      	cbz	r3, 80082da <_sbrk_r+0x1a>
 80082d8:	6023      	str	r3, [r4, #0]
 80082da:	bd38      	pop	{r3, r4, r5, pc}
 80082dc:	200138dc 	.word	0x200138dc

080082e0 <_realloc_r>:
 80082e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082e4:	4680      	mov	r8, r0
 80082e6:	4615      	mov	r5, r2
 80082e8:	460c      	mov	r4, r1
 80082ea:	b921      	cbnz	r1, 80082f6 <_realloc_r+0x16>
 80082ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80082f0:	4611      	mov	r1, r2
 80082f2:	f7ff bc59 	b.w	8007ba8 <_malloc_r>
 80082f6:	b92a      	cbnz	r2, 8008304 <_realloc_r+0x24>
 80082f8:	f7ff fbea 	bl	8007ad0 <_free_r>
 80082fc:	2400      	movs	r4, #0
 80082fe:	4620      	mov	r0, r4
 8008300:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008304:	f000 f81a 	bl	800833c <_malloc_usable_size_r>
 8008308:	4285      	cmp	r5, r0
 800830a:	4606      	mov	r6, r0
 800830c:	d802      	bhi.n	8008314 <_realloc_r+0x34>
 800830e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008312:	d8f4      	bhi.n	80082fe <_realloc_r+0x1e>
 8008314:	4629      	mov	r1, r5
 8008316:	4640      	mov	r0, r8
 8008318:	f7ff fc46 	bl	8007ba8 <_malloc_r>
 800831c:	4607      	mov	r7, r0
 800831e:	2800      	cmp	r0, #0
 8008320:	d0ec      	beq.n	80082fc <_realloc_r+0x1c>
 8008322:	42b5      	cmp	r5, r6
 8008324:	462a      	mov	r2, r5
 8008326:	4621      	mov	r1, r4
 8008328:	bf28      	it	cs
 800832a:	4632      	movcs	r2, r6
 800832c:	f7ff fbc2 	bl	8007ab4 <memcpy>
 8008330:	4621      	mov	r1, r4
 8008332:	4640      	mov	r0, r8
 8008334:	f7ff fbcc 	bl	8007ad0 <_free_r>
 8008338:	463c      	mov	r4, r7
 800833a:	e7e0      	b.n	80082fe <_realloc_r+0x1e>

0800833c <_malloc_usable_size_r>:
 800833c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008340:	1f18      	subs	r0, r3, #4
 8008342:	2b00      	cmp	r3, #0
 8008344:	bfbc      	itt	lt
 8008346:	580b      	ldrlt	r3, [r1, r0]
 8008348:	18c0      	addlt	r0, r0, r3
 800834a:	4770      	bx	lr

0800834c <_sbrk>:
 800834c:	4a04      	ldr	r2, [pc, #16]	@ (8008360 <_sbrk+0x14>)
 800834e:	6811      	ldr	r1, [r2, #0]
 8008350:	4603      	mov	r3, r0
 8008352:	b909      	cbnz	r1, 8008358 <_sbrk+0xc>
 8008354:	4903      	ldr	r1, [pc, #12]	@ (8008364 <_sbrk+0x18>)
 8008356:	6011      	str	r1, [r2, #0]
 8008358:	6810      	ldr	r0, [r2, #0]
 800835a:	4403      	add	r3, r0
 800835c:	6013      	str	r3, [r2, #0]
 800835e:	4770      	bx	lr
 8008360:	200138ec 	.word	0x200138ec
 8008364:	200138f0 	.word	0x200138f0

08008368 <_init>:
 8008368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800836a:	bf00      	nop
 800836c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800836e:	bc08      	pop	{r3}
 8008370:	469e      	mov	lr, r3
 8008372:	4770      	bx	lr

08008374 <_fini>:
 8008374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008376:	bf00      	nop
 8008378:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800837a:	bc08      	pop	{r3}
 800837c:	469e      	mov	lr, r3
 800837e:	4770      	bx	lr
