
003_FreeRTOS_TaskNotification.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000550c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  0800569c  0800569c  0000669c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005750  08005750  00007014  2**0
                  CONTENTS
  4 .ARM          00000008  08005750  08005750  00006750  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005758  08005758  00007014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005758  08005758  00006758  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800575c  0800575c  0000675c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08005760  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001344c  20000014  08005774  00007014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20013460  08005774  00007460  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007014  2**0
                  CONTENTS, READONLY
 12 .debug_info   000121e1  00000000  00000000  00007044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d83  00000000  00000000  00019225  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012a8  00000000  00000000  0001bfa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e48  00000000  00000000  0001d250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023533  00000000  00000000  0001e098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001404a  00000000  00000000  000415cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d66f2  00000000  00000000  00055615  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012bd07  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e5c  00000000  00000000  0012bd4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000b9  00000000  00000000  00130ba8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000014 	.word	0x20000014
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005684 	.word	0x08005684

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000018 	.word	0x20000018
 80001cc:	08005684 	.word	0x08005684

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	@ 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	20012e94 	.word	0x20012e94

08000264 <__aeabi_uldivmod>:
 8000264:	b953      	cbnz	r3, 800027c <__aeabi_uldivmod+0x18>
 8000266:	b94a      	cbnz	r2, 800027c <__aeabi_uldivmod+0x18>
 8000268:	2900      	cmp	r1, #0
 800026a:	bf08      	it	eq
 800026c:	2800      	cmpeq	r0, #0
 800026e:	bf1c      	itt	ne
 8000270:	f04f 31ff 	movne.w	r1, #4294967295
 8000274:	f04f 30ff 	movne.w	r0, #4294967295
 8000278:	f000 b96a 	b.w	8000550 <__aeabi_idiv0>
 800027c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000280:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000284:	f000 f806 	bl	8000294 <__udivmoddi4>
 8000288:	f8dd e004 	ldr.w	lr, [sp, #4]
 800028c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000290:	b004      	add	sp, #16
 8000292:	4770      	bx	lr

08000294 <__udivmoddi4>:
 8000294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000298:	9d08      	ldr	r5, [sp, #32]
 800029a:	460c      	mov	r4, r1
 800029c:	2b00      	cmp	r3, #0
 800029e:	d14e      	bne.n	800033e <__udivmoddi4+0xaa>
 80002a0:	4694      	mov	ip, r2
 80002a2:	458c      	cmp	ip, r1
 80002a4:	4686      	mov	lr, r0
 80002a6:	fab2 f282 	clz	r2, r2
 80002aa:	d962      	bls.n	8000372 <__udivmoddi4+0xde>
 80002ac:	b14a      	cbz	r2, 80002c2 <__udivmoddi4+0x2e>
 80002ae:	f1c2 0320 	rsb	r3, r2, #32
 80002b2:	4091      	lsls	r1, r2
 80002b4:	fa20 f303 	lsr.w	r3, r0, r3
 80002b8:	fa0c fc02 	lsl.w	ip, ip, r2
 80002bc:	4319      	orrs	r1, r3
 80002be:	fa00 fe02 	lsl.w	lr, r0, r2
 80002c2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002c6:	fa1f f68c 	uxth.w	r6, ip
 80002ca:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002d2:	fb07 1114 	mls	r1, r7, r4, r1
 80002d6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002da:	fb04 f106 	mul.w	r1, r4, r6
 80002de:	4299      	cmp	r1, r3
 80002e0:	d90a      	bls.n	80002f8 <__udivmoddi4+0x64>
 80002e2:	eb1c 0303 	adds.w	r3, ip, r3
 80002e6:	f104 30ff 	add.w	r0, r4, #4294967295
 80002ea:	f080 8112 	bcs.w	8000512 <__udivmoddi4+0x27e>
 80002ee:	4299      	cmp	r1, r3
 80002f0:	f240 810f 	bls.w	8000512 <__udivmoddi4+0x27e>
 80002f4:	3c02      	subs	r4, #2
 80002f6:	4463      	add	r3, ip
 80002f8:	1a59      	subs	r1, r3, r1
 80002fa:	fa1f f38e 	uxth.w	r3, lr
 80002fe:	fbb1 f0f7 	udiv	r0, r1, r7
 8000302:	fb07 1110 	mls	r1, r7, r0, r1
 8000306:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800030a:	fb00 f606 	mul.w	r6, r0, r6
 800030e:	429e      	cmp	r6, r3
 8000310:	d90a      	bls.n	8000328 <__udivmoddi4+0x94>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f100 31ff 	add.w	r1, r0, #4294967295
 800031a:	f080 80fc 	bcs.w	8000516 <__udivmoddi4+0x282>
 800031e:	429e      	cmp	r6, r3
 8000320:	f240 80f9 	bls.w	8000516 <__udivmoddi4+0x282>
 8000324:	4463      	add	r3, ip
 8000326:	3802      	subs	r0, #2
 8000328:	1b9b      	subs	r3, r3, r6
 800032a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800032e:	2100      	movs	r1, #0
 8000330:	b11d      	cbz	r5, 800033a <__udivmoddi4+0xa6>
 8000332:	40d3      	lsrs	r3, r2
 8000334:	2200      	movs	r2, #0
 8000336:	e9c5 3200 	strd	r3, r2, [r5]
 800033a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033e:	428b      	cmp	r3, r1
 8000340:	d905      	bls.n	800034e <__udivmoddi4+0xba>
 8000342:	b10d      	cbz	r5, 8000348 <__udivmoddi4+0xb4>
 8000344:	e9c5 0100 	strd	r0, r1, [r5]
 8000348:	2100      	movs	r1, #0
 800034a:	4608      	mov	r0, r1
 800034c:	e7f5      	b.n	800033a <__udivmoddi4+0xa6>
 800034e:	fab3 f183 	clz	r1, r3
 8000352:	2900      	cmp	r1, #0
 8000354:	d146      	bne.n	80003e4 <__udivmoddi4+0x150>
 8000356:	42a3      	cmp	r3, r4
 8000358:	d302      	bcc.n	8000360 <__udivmoddi4+0xcc>
 800035a:	4290      	cmp	r0, r2
 800035c:	f0c0 80f0 	bcc.w	8000540 <__udivmoddi4+0x2ac>
 8000360:	1a86      	subs	r6, r0, r2
 8000362:	eb64 0303 	sbc.w	r3, r4, r3
 8000366:	2001      	movs	r0, #1
 8000368:	2d00      	cmp	r5, #0
 800036a:	d0e6      	beq.n	800033a <__udivmoddi4+0xa6>
 800036c:	e9c5 6300 	strd	r6, r3, [r5]
 8000370:	e7e3      	b.n	800033a <__udivmoddi4+0xa6>
 8000372:	2a00      	cmp	r2, #0
 8000374:	f040 8090 	bne.w	8000498 <__udivmoddi4+0x204>
 8000378:	eba1 040c 	sub.w	r4, r1, ip
 800037c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000380:	fa1f f78c 	uxth.w	r7, ip
 8000384:	2101      	movs	r1, #1
 8000386:	fbb4 f6f8 	udiv	r6, r4, r8
 800038a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800038e:	fb08 4416 	mls	r4, r8, r6, r4
 8000392:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000396:	fb07 f006 	mul.w	r0, r7, r6
 800039a:	4298      	cmp	r0, r3
 800039c:	d908      	bls.n	80003b0 <__udivmoddi4+0x11c>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f106 34ff 	add.w	r4, r6, #4294967295
 80003a6:	d202      	bcs.n	80003ae <__udivmoddi4+0x11a>
 80003a8:	4298      	cmp	r0, r3
 80003aa:	f200 80cd 	bhi.w	8000548 <__udivmoddi4+0x2b4>
 80003ae:	4626      	mov	r6, r4
 80003b0:	1a1c      	subs	r4, r3, r0
 80003b2:	fa1f f38e 	uxth.w	r3, lr
 80003b6:	fbb4 f0f8 	udiv	r0, r4, r8
 80003ba:	fb08 4410 	mls	r4, r8, r0, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb00 f707 	mul.w	r7, r0, r7
 80003c6:	429f      	cmp	r7, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x148>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x146>
 80003d4:	429f      	cmp	r7, r3
 80003d6:	f200 80b0 	bhi.w	800053a <__udivmoddi4+0x2a6>
 80003da:	4620      	mov	r0, r4
 80003dc:	1bdb      	subs	r3, r3, r7
 80003de:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003e2:	e7a5      	b.n	8000330 <__udivmoddi4+0x9c>
 80003e4:	f1c1 0620 	rsb	r6, r1, #32
 80003e8:	408b      	lsls	r3, r1
 80003ea:	fa22 f706 	lsr.w	r7, r2, r6
 80003ee:	431f      	orrs	r7, r3
 80003f0:	fa20 fc06 	lsr.w	ip, r0, r6
 80003f4:	fa04 f301 	lsl.w	r3, r4, r1
 80003f8:	ea43 030c 	orr.w	r3, r3, ip
 80003fc:	40f4      	lsrs	r4, r6
 80003fe:	fa00 f801 	lsl.w	r8, r0, r1
 8000402:	0c38      	lsrs	r0, r7, #16
 8000404:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000408:	fbb4 fef0 	udiv	lr, r4, r0
 800040c:	fa1f fc87 	uxth.w	ip, r7
 8000410:	fb00 441e 	mls	r4, r0, lr, r4
 8000414:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000418:	fb0e f90c 	mul.w	r9, lr, ip
 800041c:	45a1      	cmp	r9, r4
 800041e:	fa02 f201 	lsl.w	r2, r2, r1
 8000422:	d90a      	bls.n	800043a <__udivmoddi4+0x1a6>
 8000424:	193c      	adds	r4, r7, r4
 8000426:	f10e 3aff 	add.w	sl, lr, #4294967295
 800042a:	f080 8084 	bcs.w	8000536 <__udivmoddi4+0x2a2>
 800042e:	45a1      	cmp	r9, r4
 8000430:	f240 8081 	bls.w	8000536 <__udivmoddi4+0x2a2>
 8000434:	f1ae 0e02 	sub.w	lr, lr, #2
 8000438:	443c      	add	r4, r7
 800043a:	eba4 0409 	sub.w	r4, r4, r9
 800043e:	fa1f f983 	uxth.w	r9, r3
 8000442:	fbb4 f3f0 	udiv	r3, r4, r0
 8000446:	fb00 4413 	mls	r4, r0, r3, r4
 800044a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800044e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000452:	45a4      	cmp	ip, r4
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x1d2>
 8000456:	193c      	adds	r4, r7, r4
 8000458:	f103 30ff 	add.w	r0, r3, #4294967295
 800045c:	d267      	bcs.n	800052e <__udivmoddi4+0x29a>
 800045e:	45a4      	cmp	ip, r4
 8000460:	d965      	bls.n	800052e <__udivmoddi4+0x29a>
 8000462:	3b02      	subs	r3, #2
 8000464:	443c      	add	r4, r7
 8000466:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800046a:	fba0 9302 	umull	r9, r3, r0, r2
 800046e:	eba4 040c 	sub.w	r4, r4, ip
 8000472:	429c      	cmp	r4, r3
 8000474:	46ce      	mov	lr, r9
 8000476:	469c      	mov	ip, r3
 8000478:	d351      	bcc.n	800051e <__udivmoddi4+0x28a>
 800047a:	d04e      	beq.n	800051a <__udivmoddi4+0x286>
 800047c:	b155      	cbz	r5, 8000494 <__udivmoddi4+0x200>
 800047e:	ebb8 030e 	subs.w	r3, r8, lr
 8000482:	eb64 040c 	sbc.w	r4, r4, ip
 8000486:	fa04 f606 	lsl.w	r6, r4, r6
 800048a:	40cb      	lsrs	r3, r1
 800048c:	431e      	orrs	r6, r3
 800048e:	40cc      	lsrs	r4, r1
 8000490:	e9c5 6400 	strd	r6, r4, [r5]
 8000494:	2100      	movs	r1, #0
 8000496:	e750      	b.n	800033a <__udivmoddi4+0xa6>
 8000498:	f1c2 0320 	rsb	r3, r2, #32
 800049c:	fa20 f103 	lsr.w	r1, r0, r3
 80004a0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004a4:	fa24 f303 	lsr.w	r3, r4, r3
 80004a8:	4094      	lsls	r4, r2
 80004aa:	430c      	orrs	r4, r1
 80004ac:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004b0:	fa00 fe02 	lsl.w	lr, r0, r2
 80004b4:	fa1f f78c 	uxth.w	r7, ip
 80004b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80004bc:	fb08 3110 	mls	r1, r8, r0, r3
 80004c0:	0c23      	lsrs	r3, r4, #16
 80004c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004c6:	fb00 f107 	mul.w	r1, r0, r7
 80004ca:	4299      	cmp	r1, r3
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x24c>
 80004ce:	eb1c 0303 	adds.w	r3, ip, r3
 80004d2:	f100 36ff 	add.w	r6, r0, #4294967295
 80004d6:	d22c      	bcs.n	8000532 <__udivmoddi4+0x29e>
 80004d8:	4299      	cmp	r1, r3
 80004da:	d92a      	bls.n	8000532 <__udivmoddi4+0x29e>
 80004dc:	3802      	subs	r0, #2
 80004de:	4463      	add	r3, ip
 80004e0:	1a5b      	subs	r3, r3, r1
 80004e2:	b2a4      	uxth	r4, r4
 80004e4:	fbb3 f1f8 	udiv	r1, r3, r8
 80004e8:	fb08 3311 	mls	r3, r8, r1, r3
 80004ec:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004f0:	fb01 f307 	mul.w	r3, r1, r7
 80004f4:	42a3      	cmp	r3, r4
 80004f6:	d908      	bls.n	800050a <__udivmoddi4+0x276>
 80004f8:	eb1c 0404 	adds.w	r4, ip, r4
 80004fc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000500:	d213      	bcs.n	800052a <__udivmoddi4+0x296>
 8000502:	42a3      	cmp	r3, r4
 8000504:	d911      	bls.n	800052a <__udivmoddi4+0x296>
 8000506:	3902      	subs	r1, #2
 8000508:	4464      	add	r4, ip
 800050a:	1ae4      	subs	r4, r4, r3
 800050c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000510:	e739      	b.n	8000386 <__udivmoddi4+0xf2>
 8000512:	4604      	mov	r4, r0
 8000514:	e6f0      	b.n	80002f8 <__udivmoddi4+0x64>
 8000516:	4608      	mov	r0, r1
 8000518:	e706      	b.n	8000328 <__udivmoddi4+0x94>
 800051a:	45c8      	cmp	r8, r9
 800051c:	d2ae      	bcs.n	800047c <__udivmoddi4+0x1e8>
 800051e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000522:	eb63 0c07 	sbc.w	ip, r3, r7
 8000526:	3801      	subs	r0, #1
 8000528:	e7a8      	b.n	800047c <__udivmoddi4+0x1e8>
 800052a:	4631      	mov	r1, r6
 800052c:	e7ed      	b.n	800050a <__udivmoddi4+0x276>
 800052e:	4603      	mov	r3, r0
 8000530:	e799      	b.n	8000466 <__udivmoddi4+0x1d2>
 8000532:	4630      	mov	r0, r6
 8000534:	e7d4      	b.n	80004e0 <__udivmoddi4+0x24c>
 8000536:	46d6      	mov	lr, sl
 8000538:	e77f      	b.n	800043a <__udivmoddi4+0x1a6>
 800053a:	4463      	add	r3, ip
 800053c:	3802      	subs	r0, #2
 800053e:	e74d      	b.n	80003dc <__udivmoddi4+0x148>
 8000540:	4606      	mov	r6, r0
 8000542:	4623      	mov	r3, r4
 8000544:	4608      	mov	r0, r1
 8000546:	e70f      	b.n	8000368 <__udivmoddi4+0xd4>
 8000548:	3e02      	subs	r6, #2
 800054a:	4463      	add	r3, ip
 800054c:	e730      	b.n	80003b0 <__udivmoddi4+0x11c>
 800054e:	bf00      	nop

08000550 <__aeabi_idiv0>:
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop

08000554 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b086      	sub	sp, #24
 8000558:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800055a:	f000 fac9 	bl	8000af0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800055e:	f000 f847 	bl	80005f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000562:	f000 f8d9 	bl	8000718 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000566:	f000 f8ad 	bl	80006c4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  status = xTaskCreate(led_task_handler, "LED Task", configMINIMAL_STACK_SIZE, NULL, 1, &next_taskhandler);
 800056a:	4b1c      	ldr	r3, [pc, #112]	@ (80005dc <main+0x88>)
 800056c:	9301      	str	r3, [sp, #4]
 800056e:	2301      	movs	r3, #1
 8000570:	9300      	str	r3, [sp, #0]
 8000572:	2300      	movs	r3, #0
 8000574:	2282      	movs	r2, #130	@ 0x82
 8000576:	491a      	ldr	r1, [pc, #104]	@ (80005e0 <main+0x8c>)
 8000578:	481a      	ldr	r0, [pc, #104]	@ (80005e4 <main+0x90>)
 800057a:	f002 fa7b 	bl	8002a74 <xTaskCreate>
 800057e:	60f8      	str	r0, [r7, #12]
  configASSERT(status == pdPASS);
 8000580:	68fb      	ldr	r3, [r7, #12]
 8000582:	2b01      	cmp	r3, #1
 8000584:	d00b      	beq.n	800059e <main+0x4a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000586:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800058a:	f383 8811 	msr	BASEPRI, r3
 800058e:	f3bf 8f6f 	isb	sy
 8000592:	f3bf 8f4f 	dsb	sy
 8000596:	60bb      	str	r3, [r7, #8]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000598:	bf00      	nop
 800059a:	bf00      	nop
 800059c:	e7fd      	b.n	800059a <main+0x46>

  status = xTaskCreate(btn_task_handler, "BTN Task", configMINIMAL_STACK_SIZE, NULL, 1, NULL);
 800059e:	2300      	movs	r3, #0
 80005a0:	9301      	str	r3, [sp, #4]
 80005a2:	2301      	movs	r3, #1
 80005a4:	9300      	str	r3, [sp, #0]
 80005a6:	2300      	movs	r3, #0
 80005a8:	2282      	movs	r2, #130	@ 0x82
 80005aa:	490f      	ldr	r1, [pc, #60]	@ (80005e8 <main+0x94>)
 80005ac:	480f      	ldr	r0, [pc, #60]	@ (80005ec <main+0x98>)
 80005ae:	f002 fa61 	bl	8002a74 <xTaskCreate>
 80005b2:	60f8      	str	r0, [r7, #12]
  configASSERT(status == pdPASS);
 80005b4:	68fb      	ldr	r3, [r7, #12]
 80005b6:	2b01      	cmp	r3, #1
 80005b8:	d00b      	beq.n	80005d2 <main+0x7e>
        __asm volatile
 80005ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80005be:	f383 8811 	msr	BASEPRI, r3
 80005c2:	f3bf 8f6f 	isb	sy
 80005c6:	f3bf 8f4f 	dsb	sy
 80005ca:	607b      	str	r3, [r7, #4]
    }
 80005cc:	bf00      	nop
 80005ce:	bf00      	nop
 80005d0:	e7fd      	b.n	80005ce <main+0x7a>

  //start the freeRTOS scheduler
  vTaskStartScheduler();
 80005d2:	f002 fbb3 	bl	8002d3c <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005d6:	bf00      	nop
 80005d8:	e7fd      	b.n	80005d6 <main+0x82>
 80005da:	bf00      	nop
 80005dc:	20000074 	.word	0x20000074
 80005e0:	0800569c 	.word	0x0800569c
 80005e4:	080007dd 	.word	0x080007dd
 80005e8:	080056a8 	.word	0x080056a8
 80005ec:	08000825 	.word	0x08000825

080005f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b094      	sub	sp, #80	@ 0x50
 80005f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005f6:	f107 0320 	add.w	r3, r7, #32
 80005fa:	2230      	movs	r2, #48	@ 0x30
 80005fc:	2100      	movs	r1, #0
 80005fe:	4618      	mov	r0, r3
 8000600:	f005 f806 	bl	8005610 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000604:	f107 030c 	add.w	r3, r7, #12
 8000608:	2200      	movs	r2, #0
 800060a:	601a      	str	r2, [r3, #0]
 800060c:	605a      	str	r2, [r3, #4]
 800060e:	609a      	str	r2, [r3, #8]
 8000610:	60da      	str	r2, [r3, #12]
 8000612:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000614:	2300      	movs	r3, #0
 8000616:	60bb      	str	r3, [r7, #8]
 8000618:	4b28      	ldr	r3, [pc, #160]	@ (80006bc <SystemClock_Config+0xcc>)
 800061a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800061c:	4a27      	ldr	r2, [pc, #156]	@ (80006bc <SystemClock_Config+0xcc>)
 800061e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000622:	6413      	str	r3, [r2, #64]	@ 0x40
 8000624:	4b25      	ldr	r3, [pc, #148]	@ (80006bc <SystemClock_Config+0xcc>)
 8000626:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000628:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800062c:	60bb      	str	r3, [r7, #8]
 800062e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000630:	2300      	movs	r3, #0
 8000632:	607b      	str	r3, [r7, #4]
 8000634:	4b22      	ldr	r3, [pc, #136]	@ (80006c0 <SystemClock_Config+0xd0>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	4a21      	ldr	r2, [pc, #132]	@ (80006c0 <SystemClock_Config+0xd0>)
 800063a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800063e:	6013      	str	r3, [r2, #0]
 8000640:	4b1f      	ldr	r3, [pc, #124]	@ (80006c0 <SystemClock_Config+0xd0>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000648:	607b      	str	r3, [r7, #4]
 800064a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800064c:	2302      	movs	r3, #2
 800064e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000650:	2301      	movs	r3, #1
 8000652:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000654:	2310      	movs	r3, #16
 8000656:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000658:	2302      	movs	r3, #2
 800065a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800065c:	2300      	movs	r3, #0
 800065e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000660:	2308      	movs	r3, #8
 8000662:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000664:	23a8      	movs	r3, #168	@ 0xa8
 8000666:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000668:	2302      	movs	r3, #2
 800066a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800066c:	2307      	movs	r3, #7
 800066e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000670:	f107 0320 	add.w	r3, r7, #32
 8000674:	4618      	mov	r0, r3
 8000676:	f000 fd2d 	bl	80010d4 <HAL_RCC_OscConfig>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000680:	f000 f8fc 	bl	800087c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000684:	230f      	movs	r3, #15
 8000686:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000688:	2302      	movs	r3, #2
 800068a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800068c:	2300      	movs	r3, #0
 800068e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000690:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000694:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000696:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800069a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800069c:	f107 030c 	add.w	r3, r7, #12
 80006a0:	2105      	movs	r1, #5
 80006a2:	4618      	mov	r0, r3
 80006a4:	f000 ff84 	bl	80015b0 <HAL_RCC_ClockConfig>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006ae:	f000 f8e5 	bl	800087c <Error_Handler>
  }
}
 80006b2:	bf00      	nop
 80006b4:	3750      	adds	r7, #80	@ 0x50
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	40023800 	.word	0x40023800
 80006c0:	40007000 	.word	0x40007000

080006c4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006c8:	4b11      	ldr	r3, [pc, #68]	@ (8000710 <MX_USART1_UART_Init+0x4c>)
 80006ca:	4a12      	ldr	r2, [pc, #72]	@ (8000714 <MX_USART1_UART_Init+0x50>)
 80006cc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80006ce:	4b10      	ldr	r3, [pc, #64]	@ (8000710 <MX_USART1_UART_Init+0x4c>)
 80006d0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80006d4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006d6:	4b0e      	ldr	r3, [pc, #56]	@ (8000710 <MX_USART1_UART_Init+0x4c>)
 80006d8:	2200      	movs	r2, #0
 80006da:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006dc:	4b0c      	ldr	r3, [pc, #48]	@ (8000710 <MX_USART1_UART_Init+0x4c>)
 80006de:	2200      	movs	r2, #0
 80006e0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_EVEN;
 80006e2:	4b0b      	ldr	r3, [pc, #44]	@ (8000710 <MX_USART1_UART_Init+0x4c>)
 80006e4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80006e8:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006ea:	4b09      	ldr	r3, [pc, #36]	@ (8000710 <MX_USART1_UART_Init+0x4c>)
 80006ec:	220c      	movs	r2, #12
 80006ee:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006f0:	4b07      	ldr	r3, [pc, #28]	@ (8000710 <MX_USART1_UART_Init+0x4c>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006f6:	4b06      	ldr	r3, [pc, #24]	@ (8000710 <MX_USART1_UART_Init+0x4c>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80006fc:	4804      	ldr	r0, [pc, #16]	@ (8000710 <MX_USART1_UART_Init+0x4c>)
 80006fe:	f001 fbe7 	bl	8001ed0 <HAL_UART_Init>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d001      	beq.n	800070c <MX_USART1_UART_Init+0x48>
  {
    Error_Handler();
 8000708:	f000 f8b8 	bl	800087c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800070c:	bf00      	nop
 800070e:	bd80      	pop	{r7, pc}
 8000710:	20000030 	.word	0x20000030
 8000714:	40011000 	.word	0x40011000

08000718 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b088      	sub	sp, #32
 800071c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800071e:	f107 030c 	add.w	r3, r7, #12
 8000722:	2200      	movs	r2, #0
 8000724:	601a      	str	r2, [r3, #0]
 8000726:	605a      	str	r2, [r3, #4]
 8000728:	609a      	str	r2, [r3, #8]
 800072a:	60da      	str	r2, [r3, #12]
 800072c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800072e:	2300      	movs	r3, #0
 8000730:	60bb      	str	r3, [r7, #8]
 8000732:	4b26      	ldr	r3, [pc, #152]	@ (80007cc <MX_GPIO_Init+0xb4>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000736:	4a25      	ldr	r2, [pc, #148]	@ (80007cc <MX_GPIO_Init+0xb4>)
 8000738:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800073c:	6313      	str	r3, [r2, #48]	@ 0x30
 800073e:	4b23      	ldr	r3, [pc, #140]	@ (80007cc <MX_GPIO_Init+0xb4>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000742:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000746:	60bb      	str	r3, [r7, #8]
 8000748:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800074a:	2300      	movs	r3, #0
 800074c:	607b      	str	r3, [r7, #4]
 800074e:	4b1f      	ldr	r3, [pc, #124]	@ (80007cc <MX_GPIO_Init+0xb4>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000752:	4a1e      	ldr	r2, [pc, #120]	@ (80007cc <MX_GPIO_Init+0xb4>)
 8000754:	f043 0301 	orr.w	r3, r3, #1
 8000758:	6313      	str	r3, [r2, #48]	@ 0x30
 800075a:	4b1c      	ldr	r3, [pc, #112]	@ (80007cc <MX_GPIO_Init+0xb4>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800075e:	f003 0301 	and.w	r3, r3, #1
 8000762:	607b      	str	r3, [r7, #4]
 8000764:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000766:	2300      	movs	r3, #0
 8000768:	603b      	str	r3, [r7, #0]
 800076a:	4b18      	ldr	r3, [pc, #96]	@ (80007cc <MX_GPIO_Init+0xb4>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800076e:	4a17      	ldr	r2, [pc, #92]	@ (80007cc <MX_GPIO_Init+0xb4>)
 8000770:	f043 0308 	orr.w	r3, r3, #8
 8000774:	6313      	str	r3, [r2, #48]	@ 0x30
 8000776:	4b15      	ldr	r3, [pc, #84]	@ (80007cc <MX_GPIO_Init+0xb4>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800077a:	f003 0308 	and.w	r3, r3, #8
 800077e:	603b      	str	r3, [r7, #0]
 8000780:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8000782:	2200      	movs	r2, #0
 8000784:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000788:	4811      	ldr	r0, [pc, #68]	@ (80007d0 <MX_GPIO_Init+0xb8>)
 800078a:	f000 fc89 	bl	80010a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800078e:	2301      	movs	r3, #1
 8000790:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000792:	4b10      	ldr	r3, [pc, #64]	@ (80007d4 <MX_GPIO_Init+0xbc>)
 8000794:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000796:	2300      	movs	r3, #0
 8000798:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800079a:	f107 030c 	add.w	r3, r7, #12
 800079e:	4619      	mov	r1, r3
 80007a0:	480d      	ldr	r0, [pc, #52]	@ (80007d8 <MX_GPIO_Init+0xc0>)
 80007a2:	f000 fac9 	bl	8000d38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80007a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80007aa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ac:	2301      	movs	r3, #1
 80007ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b0:	2300      	movs	r3, #0
 80007b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b4:	2300      	movs	r3, #0
 80007b6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007b8:	f107 030c 	add.w	r3, r7, #12
 80007bc:	4619      	mov	r1, r3
 80007be:	4804      	ldr	r0, [pc, #16]	@ (80007d0 <MX_GPIO_Init+0xb8>)
 80007c0:	f000 faba 	bl	8000d38 <HAL_GPIO_Init>

}
 80007c4:	bf00      	nop
 80007c6:	3720      	adds	r7, #32
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	40023800 	.word	0x40023800
 80007d0:	40020c00 	.word	0x40020c00
 80007d4:	10110000 	.word	0x10110000
 80007d8:	40020000 	.word	0x40020000

080007dc <led_task_handler>:

/* USER CODE BEGIN 4 */

static void led_task_handler(void* parameters)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b084      	sub	sp, #16
 80007e0:	af02      	add	r7, sp, #8
 80007e2:	6078      	str	r0, [r7, #4]
	while(1)
	{
		xTaskNotifyWait(0, 0, NULL, pdMS_TO_TICKS(1000));
 80007e4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80007e8:	9300      	str	r3, [sp, #0]
 80007ea:	2300      	movs	r3, #0
 80007ec:	2200      	movs	r2, #0
 80007ee:	2100      	movs	r1, #0
 80007f0:	2000      	movs	r0, #0
 80007f2:	f002 fd89 	bl	8003308 <xTaskGenericNotifyWait>
		if(BNT_Status == PRESS)
 80007f6:	4b09      	ldr	r3, [pc, #36]	@ (800081c <led_task_handler+0x40>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	2b01      	cmp	r3, #1
 80007fc:	d106      	bne.n	800080c <led_task_handler+0x30>
		{
			// set led
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 80007fe:	2201      	movs	r2, #1
 8000800:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000804:	4806      	ldr	r0, [pc, #24]	@ (8000820 <led_task_handler+0x44>)
 8000806:	f000 fc4b 	bl	80010a0 <HAL_GPIO_WritePin>
 800080a:	e7eb      	b.n	80007e4 <led_task_handler+0x8>
		}else
		{
			// off led
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 800080c:	2200      	movs	r2, #0
 800080e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000812:	4803      	ldr	r0, [pc, #12]	@ (8000820 <led_task_handler+0x44>)
 8000814:	f000 fc44 	bl	80010a0 <HAL_GPIO_WritePin>
		xTaskNotifyWait(0, 0, NULL, pdMS_TO_TICKS(1000));
 8000818:	e7e4      	b.n	80007e4 <led_task_handler+0x8>
 800081a:	bf00      	nop
 800081c:	20000070 	.word	0x20000070
 8000820:	40020c00 	.word	0x40020c00

08000824 <btn_task_handler>:
		}
	}
}

static void btn_task_handler(void* parameters)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b084      	sub	sp, #16
 8000828:	af02      	add	r7, sp, #8
 800082a:	6078      	str	r0, [r7, #4]

	while(1)
	{
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_SET)
 800082c:	2101      	movs	r1, #1
 800082e:	4808      	ldr	r0, [pc, #32]	@ (8000850 <btn_task_handler+0x2c>)
 8000830:	f000 fc1e 	bl	8001070 <HAL_GPIO_ReadPin>
 8000834:	4603      	mov	r3, r0
 8000836:	2b01      	cmp	r3, #1
 8000838:	d1f8      	bne.n	800082c <btn_task_handler+0x8>
		{
			xTaskNotify(next_taskhandler,0,eNoAction);
 800083a:	4b06      	ldr	r3, [pc, #24]	@ (8000854 <btn_task_handler+0x30>)
 800083c:	6818      	ldr	r0, [r3, #0]
 800083e:	2300      	movs	r3, #0
 8000840:	9300      	str	r3, [sp, #0]
 8000842:	2300      	movs	r3, #0
 8000844:	2200      	movs	r2, #0
 8000846:	2100      	movs	r1, #0
 8000848:	f002 fde8 	bl	800341c <xTaskGenericNotify>
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_SET)
 800084c:	e7ee      	b.n	800082c <btn_task_handler+0x8>
 800084e:	bf00      	nop
 8000850:	40020000 	.word	0x40020000
 8000854:	20000074 	.word	0x20000074

08000858 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b082      	sub	sp, #8
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	4a04      	ldr	r2, [pc, #16]	@ (8000878 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000866:	4293      	cmp	r3, r2
 8000868:	d101      	bne.n	800086e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800086a:	f000 f963 	bl	8000b34 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800086e:	bf00      	nop
 8000870:	3708      	adds	r7, #8
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	40001000 	.word	0x40001000

0800087c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000880:	bf00      	nop
 8000882:	46bd      	mov	sp, r7
 8000884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000888:	4770      	bx	lr
	...

0800088c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b082      	sub	sp, #8
 8000890:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000892:	2300      	movs	r3, #0
 8000894:	607b      	str	r3, [r7, #4]
 8000896:	4b10      	ldr	r3, [pc, #64]	@ (80008d8 <HAL_MspInit+0x4c>)
 8000898:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800089a:	4a0f      	ldr	r2, [pc, #60]	@ (80008d8 <HAL_MspInit+0x4c>)
 800089c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80008a2:	4b0d      	ldr	r3, [pc, #52]	@ (80008d8 <HAL_MspInit+0x4c>)
 80008a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80008aa:	607b      	str	r3, [r7, #4]
 80008ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ae:	2300      	movs	r3, #0
 80008b0:	603b      	str	r3, [r7, #0]
 80008b2:	4b09      	ldr	r3, [pc, #36]	@ (80008d8 <HAL_MspInit+0x4c>)
 80008b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008b6:	4a08      	ldr	r2, [pc, #32]	@ (80008d8 <HAL_MspInit+0x4c>)
 80008b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80008be:	4b06      	ldr	r3, [pc, #24]	@ (80008d8 <HAL_MspInit+0x4c>)
 80008c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008c6:	603b      	str	r3, [r7, #0]
 80008c8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  vInitPrioGroupValue();
 80008ca:	f003 f847 	bl	800395c <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 80008ce:	bf00      	nop
 80008d0:	3708      	adds	r7, #8
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	40023800 	.word	0x40023800

080008dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b08a      	sub	sp, #40	@ 0x28
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e4:	f107 0314 	add.w	r3, r7, #20
 80008e8:	2200      	movs	r2, #0
 80008ea:	601a      	str	r2, [r3, #0]
 80008ec:	605a      	str	r2, [r3, #4]
 80008ee:	609a      	str	r2, [r3, #8]
 80008f0:	60da      	str	r2, [r3, #12]
 80008f2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	4a19      	ldr	r2, [pc, #100]	@ (8000960 <HAL_UART_MspInit+0x84>)
 80008fa:	4293      	cmp	r3, r2
 80008fc:	d12c      	bne.n	8000958 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80008fe:	2300      	movs	r3, #0
 8000900:	613b      	str	r3, [r7, #16]
 8000902:	4b18      	ldr	r3, [pc, #96]	@ (8000964 <HAL_UART_MspInit+0x88>)
 8000904:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000906:	4a17      	ldr	r2, [pc, #92]	@ (8000964 <HAL_UART_MspInit+0x88>)
 8000908:	f043 0310 	orr.w	r3, r3, #16
 800090c:	6453      	str	r3, [r2, #68]	@ 0x44
 800090e:	4b15      	ldr	r3, [pc, #84]	@ (8000964 <HAL_UART_MspInit+0x88>)
 8000910:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000912:	f003 0310 	and.w	r3, r3, #16
 8000916:	613b      	str	r3, [r7, #16]
 8000918:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800091a:	2300      	movs	r3, #0
 800091c:	60fb      	str	r3, [r7, #12]
 800091e:	4b11      	ldr	r3, [pc, #68]	@ (8000964 <HAL_UART_MspInit+0x88>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000922:	4a10      	ldr	r2, [pc, #64]	@ (8000964 <HAL_UART_MspInit+0x88>)
 8000924:	f043 0301 	orr.w	r3, r3, #1
 8000928:	6313      	str	r3, [r2, #48]	@ 0x30
 800092a:	4b0e      	ldr	r3, [pc, #56]	@ (8000964 <HAL_UART_MspInit+0x88>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800092e:	f003 0301 	and.w	r3, r3, #1
 8000932:	60fb      	str	r3, [r7, #12]
 8000934:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000936:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800093a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800093c:	2302      	movs	r3, #2
 800093e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000940:	2300      	movs	r3, #0
 8000942:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000944:	2303      	movs	r3, #3
 8000946:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000948:	2307      	movs	r3, #7
 800094a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800094c:	f107 0314 	add.w	r3, r7, #20
 8000950:	4619      	mov	r1, r3
 8000952:	4805      	ldr	r0, [pc, #20]	@ (8000968 <HAL_UART_MspInit+0x8c>)
 8000954:	f000 f9f0 	bl	8000d38 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000958:	bf00      	nop
 800095a:	3728      	adds	r7, #40	@ 0x28
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}
 8000960:	40011000 	.word	0x40011000
 8000964:	40023800 	.word	0x40023800
 8000968:	40020000 	.word	0x40020000

0800096c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b08c      	sub	sp, #48	@ 0x30
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000974:	2300      	movs	r3, #0
 8000976:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000978:	2300      	movs	r3, #0
 800097a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 800097c:	2200      	movs	r2, #0
 800097e:	6879      	ldr	r1, [r7, #4]
 8000980:	2036      	movs	r0, #54	@ 0x36
 8000982:	f000 f9af 	bl	8000ce4 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000986:	2036      	movs	r0, #54	@ 0x36
 8000988:	f000 f9c8 	bl	8000d1c <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800098c:	2300      	movs	r3, #0
 800098e:	60fb      	str	r3, [r7, #12]
 8000990:	4b1f      	ldr	r3, [pc, #124]	@ (8000a10 <HAL_InitTick+0xa4>)
 8000992:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000994:	4a1e      	ldr	r2, [pc, #120]	@ (8000a10 <HAL_InitTick+0xa4>)
 8000996:	f043 0310 	orr.w	r3, r3, #16
 800099a:	6413      	str	r3, [r2, #64]	@ 0x40
 800099c:	4b1c      	ldr	r3, [pc, #112]	@ (8000a10 <HAL_InitTick+0xa4>)
 800099e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009a0:	f003 0310 	and.w	r3, r3, #16
 80009a4:	60fb      	str	r3, [r7, #12]
 80009a6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80009a8:	f107 0210 	add.w	r2, r7, #16
 80009ac:	f107 0314 	add.w	r3, r7, #20
 80009b0:	4611      	mov	r1, r2
 80009b2:	4618      	mov	r0, r3
 80009b4:	f001 f81c 	bl	80019f0 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80009b8:	f000 fff2 	bl	80019a0 <HAL_RCC_GetPCLK1Freq>
 80009bc:	4603      	mov	r3, r0
 80009be:	005b      	lsls	r3, r3, #1
 80009c0:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80009c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80009c4:	4a13      	ldr	r2, [pc, #76]	@ (8000a14 <HAL_InitTick+0xa8>)
 80009c6:	fba2 2303 	umull	r2, r3, r2, r3
 80009ca:	0c9b      	lsrs	r3, r3, #18
 80009cc:	3b01      	subs	r3, #1
 80009ce:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80009d0:	4b11      	ldr	r3, [pc, #68]	@ (8000a18 <HAL_InitTick+0xac>)
 80009d2:	4a12      	ldr	r2, [pc, #72]	@ (8000a1c <HAL_InitTick+0xb0>)
 80009d4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 80009d6:	4b10      	ldr	r3, [pc, #64]	@ (8000a18 <HAL_InitTick+0xac>)
 80009d8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80009dc:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80009de:	4a0e      	ldr	r2, [pc, #56]	@ (8000a18 <HAL_InitTick+0xac>)
 80009e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80009e2:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80009e4:	4b0c      	ldr	r3, [pc, #48]	@ (8000a18 <HAL_InitTick+0xac>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009ea:	4b0b      	ldr	r3, [pc, #44]	@ (8000a18 <HAL_InitTick+0xac>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80009f0:	4809      	ldr	r0, [pc, #36]	@ (8000a18 <HAL_InitTick+0xac>)
 80009f2:	f001 f82f 	bl	8001a54 <HAL_TIM_Base_Init>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d104      	bne.n	8000a06 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80009fc:	4806      	ldr	r0, [pc, #24]	@ (8000a18 <HAL_InitTick+0xac>)
 80009fe:	f001 f85e 	bl	8001abe <HAL_TIM_Base_Start_IT>
 8000a02:	4603      	mov	r3, r0
 8000a04:	e000      	b.n	8000a08 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000a06:	2301      	movs	r3, #1
}
 8000a08:	4618      	mov	r0, r3
 8000a0a:	3730      	adds	r7, #48	@ 0x30
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	40023800 	.word	0x40023800
 8000a14:	431bde83 	.word	0x431bde83
 8000a18:	20000078 	.word	0x20000078
 8000a1c:	40001000 	.word	0x40001000

08000a20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000a24:	bf00      	nop
 8000a26:	46bd      	mov	sp, r7
 8000a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2c:	4770      	bx	lr

08000a2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a2e:	b480      	push	{r7}
 8000a30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a32:	bf00      	nop
 8000a34:	e7fd      	b.n	8000a32 <HardFault_Handler+0x4>

08000a36 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a36:	b480      	push	{r7}
 8000a38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a3a:	bf00      	nop
 8000a3c:	e7fd      	b.n	8000a3a <MemManage_Handler+0x4>

08000a3e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a3e:	b480      	push	{r7}
 8000a40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a42:	bf00      	nop
 8000a44:	e7fd      	b.n	8000a42 <BusFault_Handler+0x4>

08000a46 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a46:	b480      	push	{r7}
 8000a48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a4a:	bf00      	nop
 8000a4c:	e7fd      	b.n	8000a4a <UsageFault_Handler+0x4>

08000a4e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a4e:	b480      	push	{r7}
 8000a50:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a52:	bf00      	nop
 8000a54:	46bd      	mov	sp, r7
 8000a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5a:	4770      	bx	lr

08000a5c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000a60:	4802      	ldr	r0, [pc, #8]	@ (8000a6c <TIM6_DAC_IRQHandler+0x10>)
 8000a62:	f001 f850 	bl	8001b06 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000a66:	bf00      	nop
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	20000078 	.word	0x20000078

08000a70 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a74:	4b08      	ldr	r3, [pc, #32]	@ (8000a98 <SystemInit+0x28>)
 8000a76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a7a:	4a07      	ldr	r2, [pc, #28]	@ (8000a98 <SystemInit+0x28>)
 8000a7c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a80:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a84:	4b04      	ldr	r3, [pc, #16]	@ (8000a98 <SystemInit+0x28>)
 8000a86:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000a8a:	609a      	str	r2, [r3, #8]
#endif
}
 8000a8c:	bf00      	nop
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop
 8000a98:	e000ed00 	.word	0xe000ed00

08000a9c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000a9c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ad4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000aa0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000aa2:	e003      	b.n	8000aac <LoopCopyDataInit>

08000aa4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000aa4:	4b0c      	ldr	r3, [pc, #48]	@ (8000ad8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000aa6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000aa8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000aaa:	3104      	adds	r1, #4

08000aac <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000aac:	480b      	ldr	r0, [pc, #44]	@ (8000adc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000aae:	4b0c      	ldr	r3, [pc, #48]	@ (8000ae0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000ab0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000ab2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000ab4:	d3f6      	bcc.n	8000aa4 <CopyDataInit>
  ldr  r2, =_sbss
 8000ab6:	4a0b      	ldr	r2, [pc, #44]	@ (8000ae4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000ab8:	e002      	b.n	8000ac0 <LoopFillZerobss>

08000aba <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000aba:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000abc:	f842 3b04 	str.w	r3, [r2], #4

08000ac0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000ac0:	4b09      	ldr	r3, [pc, #36]	@ (8000ae8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000ac2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000ac4:	d3f9      	bcc.n	8000aba <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000ac6:	f7ff ffd3 	bl	8000a70 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000aca:	f004 fda9 	bl	8005620 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ace:	f7ff fd41 	bl	8000554 <main>
  bx  lr    
 8000ad2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000ad4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000ad8:	08005760 	.word	0x08005760
  ldr  r0, =_sdata
 8000adc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000ae0:	20000014 	.word	0x20000014
  ldr  r2, =_sbss
 8000ae4:	20000014 	.word	0x20000014
  ldr  r3, = _ebss
 8000ae8:	20013460 	.word	0x20013460

08000aec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000aec:	e7fe      	b.n	8000aec <ADC_IRQHandler>
	...

08000af0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000af4:	4b0e      	ldr	r3, [pc, #56]	@ (8000b30 <HAL_Init+0x40>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4a0d      	ldr	r2, [pc, #52]	@ (8000b30 <HAL_Init+0x40>)
 8000afa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000afe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b00:	4b0b      	ldr	r3, [pc, #44]	@ (8000b30 <HAL_Init+0x40>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	4a0a      	ldr	r2, [pc, #40]	@ (8000b30 <HAL_Init+0x40>)
 8000b06:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000b0a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b0c:	4b08      	ldr	r3, [pc, #32]	@ (8000b30 <HAL_Init+0x40>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	4a07      	ldr	r2, [pc, #28]	@ (8000b30 <HAL_Init+0x40>)
 8000b12:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b16:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b18:	2003      	movs	r0, #3
 8000b1a:	f000 f8d8 	bl	8000cce <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b1e:	2000      	movs	r0, #0
 8000b20:	f7ff ff24 	bl	800096c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b24:	f7ff feb2 	bl	800088c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b28:	2300      	movs	r3, #0
}
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	40023c00 	.word	0x40023c00

08000b34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b38:	4b06      	ldr	r3, [pc, #24]	@ (8000b54 <HAL_IncTick+0x20>)
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	461a      	mov	r2, r3
 8000b3e:	4b06      	ldr	r3, [pc, #24]	@ (8000b58 <HAL_IncTick+0x24>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	4413      	add	r3, r2
 8000b44:	4a04      	ldr	r2, [pc, #16]	@ (8000b58 <HAL_IncTick+0x24>)
 8000b46:	6013      	str	r3, [r2, #0]
}
 8000b48:	bf00      	nop
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr
 8000b52:	bf00      	nop
 8000b54:	20000008 	.word	0x20000008
 8000b58:	200000b8 	.word	0x200000b8

08000b5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b60:	4b03      	ldr	r3, [pc, #12]	@ (8000b70 <HAL_GetTick+0x14>)
 8000b62:	681b      	ldr	r3, [r3, #0]
}
 8000b64:	4618      	mov	r0, r3
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop
 8000b70:	200000b8 	.word	0x200000b8

08000b74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b74:	b480      	push	{r7}
 8000b76:	b085      	sub	sp, #20
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	f003 0307 	and.w	r3, r3, #7
 8000b82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b84:	4b0c      	ldr	r3, [pc, #48]	@ (8000bb8 <__NVIC_SetPriorityGrouping+0x44>)
 8000b86:	68db      	ldr	r3, [r3, #12]
 8000b88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b8a:	68ba      	ldr	r2, [r7, #8]
 8000b8c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b90:	4013      	ands	r3, r2
 8000b92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b98:	68bb      	ldr	r3, [r7, #8]
 8000b9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b9c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ba0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ba4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ba6:	4a04      	ldr	r2, [pc, #16]	@ (8000bb8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ba8:	68bb      	ldr	r3, [r7, #8]
 8000baa:	60d3      	str	r3, [r2, #12]
}
 8000bac:	bf00      	nop
 8000bae:	3714      	adds	r7, #20
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb6:	4770      	bx	lr
 8000bb8:	e000ed00 	.word	0xe000ed00

08000bbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bc0:	4b04      	ldr	r3, [pc, #16]	@ (8000bd4 <__NVIC_GetPriorityGrouping+0x18>)
 8000bc2:	68db      	ldr	r3, [r3, #12]
 8000bc4:	0a1b      	lsrs	r3, r3, #8
 8000bc6:	f003 0307 	and.w	r3, r3, #7
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd2:	4770      	bx	lr
 8000bd4:	e000ed00 	.word	0xe000ed00

08000bd8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	b083      	sub	sp, #12
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	4603      	mov	r3, r0
 8000be0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	db0b      	blt.n	8000c02 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bea:	79fb      	ldrb	r3, [r7, #7]
 8000bec:	f003 021f 	and.w	r2, r3, #31
 8000bf0:	4907      	ldr	r1, [pc, #28]	@ (8000c10 <__NVIC_EnableIRQ+0x38>)
 8000bf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bf6:	095b      	lsrs	r3, r3, #5
 8000bf8:	2001      	movs	r0, #1
 8000bfa:	fa00 f202 	lsl.w	r2, r0, r2
 8000bfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c02:	bf00      	nop
 8000c04:	370c      	adds	r7, #12
 8000c06:	46bd      	mov	sp, r7
 8000c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0c:	4770      	bx	lr
 8000c0e:	bf00      	nop
 8000c10:	e000e100 	.word	0xe000e100

08000c14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b083      	sub	sp, #12
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	6039      	str	r1, [r7, #0]
 8000c1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	db0a      	blt.n	8000c3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	b2da      	uxtb	r2, r3
 8000c2c:	490c      	ldr	r1, [pc, #48]	@ (8000c60 <__NVIC_SetPriority+0x4c>)
 8000c2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c32:	0112      	lsls	r2, r2, #4
 8000c34:	b2d2      	uxtb	r2, r2
 8000c36:	440b      	add	r3, r1
 8000c38:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c3c:	e00a      	b.n	8000c54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	b2da      	uxtb	r2, r3
 8000c42:	4908      	ldr	r1, [pc, #32]	@ (8000c64 <__NVIC_SetPriority+0x50>)
 8000c44:	79fb      	ldrb	r3, [r7, #7]
 8000c46:	f003 030f 	and.w	r3, r3, #15
 8000c4a:	3b04      	subs	r3, #4
 8000c4c:	0112      	lsls	r2, r2, #4
 8000c4e:	b2d2      	uxtb	r2, r2
 8000c50:	440b      	add	r3, r1
 8000c52:	761a      	strb	r2, [r3, #24]
}
 8000c54:	bf00      	nop
 8000c56:	370c      	adds	r7, #12
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5e:	4770      	bx	lr
 8000c60:	e000e100 	.word	0xe000e100
 8000c64:	e000ed00 	.word	0xe000ed00

08000c68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b089      	sub	sp, #36	@ 0x24
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	60f8      	str	r0, [r7, #12]
 8000c70:	60b9      	str	r1, [r7, #8]
 8000c72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	f003 0307 	and.w	r3, r3, #7
 8000c7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c7c:	69fb      	ldr	r3, [r7, #28]
 8000c7e:	f1c3 0307 	rsb	r3, r3, #7
 8000c82:	2b04      	cmp	r3, #4
 8000c84:	bf28      	it	cs
 8000c86:	2304      	movcs	r3, #4
 8000c88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c8a:	69fb      	ldr	r3, [r7, #28]
 8000c8c:	3304      	adds	r3, #4
 8000c8e:	2b06      	cmp	r3, #6
 8000c90:	d902      	bls.n	8000c98 <NVIC_EncodePriority+0x30>
 8000c92:	69fb      	ldr	r3, [r7, #28]
 8000c94:	3b03      	subs	r3, #3
 8000c96:	e000      	b.n	8000c9a <NVIC_EncodePriority+0x32>
 8000c98:	2300      	movs	r3, #0
 8000c9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c9c:	f04f 32ff 	mov.w	r2, #4294967295
 8000ca0:	69bb      	ldr	r3, [r7, #24]
 8000ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca6:	43da      	mvns	r2, r3
 8000ca8:	68bb      	ldr	r3, [r7, #8]
 8000caa:	401a      	ands	r2, r3
 8000cac:	697b      	ldr	r3, [r7, #20]
 8000cae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cb0:	f04f 31ff 	mov.w	r1, #4294967295
 8000cb4:	697b      	ldr	r3, [r7, #20]
 8000cb6:	fa01 f303 	lsl.w	r3, r1, r3
 8000cba:	43d9      	mvns	r1, r3
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cc0:	4313      	orrs	r3, r2
         );
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	3724      	adds	r7, #36	@ 0x24
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr

08000cce <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cce:	b580      	push	{r7, lr}
 8000cd0:	b082      	sub	sp, #8
 8000cd2:	af00      	add	r7, sp, #0
 8000cd4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cd6:	6878      	ldr	r0, [r7, #4]
 8000cd8:	f7ff ff4c 	bl	8000b74 <__NVIC_SetPriorityGrouping>
}
 8000cdc:	bf00      	nop
 8000cde:	3708      	adds	r7, #8
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}

08000ce4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b086      	sub	sp, #24
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	4603      	mov	r3, r0
 8000cec:	60b9      	str	r1, [r7, #8]
 8000cee:	607a      	str	r2, [r7, #4]
 8000cf0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cf6:	f7ff ff61 	bl	8000bbc <__NVIC_GetPriorityGrouping>
 8000cfa:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cfc:	687a      	ldr	r2, [r7, #4]
 8000cfe:	68b9      	ldr	r1, [r7, #8]
 8000d00:	6978      	ldr	r0, [r7, #20]
 8000d02:	f7ff ffb1 	bl	8000c68 <NVIC_EncodePriority>
 8000d06:	4602      	mov	r2, r0
 8000d08:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d0c:	4611      	mov	r1, r2
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f7ff ff80 	bl	8000c14 <__NVIC_SetPriority>
}
 8000d14:	bf00      	nop
 8000d16:	3718      	adds	r7, #24
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}

08000d1c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	4603      	mov	r3, r0
 8000d24:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f7ff ff54 	bl	8000bd8 <__NVIC_EnableIRQ>
}
 8000d30:	bf00      	nop
 8000d32:	3708      	adds	r7, #8
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}

08000d38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b089      	sub	sp, #36	@ 0x24
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
 8000d40:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d42:	2300      	movs	r3, #0
 8000d44:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d46:	2300      	movs	r3, #0
 8000d48:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d4e:	2300      	movs	r3, #0
 8000d50:	61fb      	str	r3, [r7, #28]
 8000d52:	e16b      	b.n	800102c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d54:	2201      	movs	r2, #1
 8000d56:	69fb      	ldr	r3, [r7, #28]
 8000d58:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	697a      	ldr	r2, [r7, #20]
 8000d64:	4013      	ands	r3, r2
 8000d66:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d68:	693a      	ldr	r2, [r7, #16]
 8000d6a:	697b      	ldr	r3, [r7, #20]
 8000d6c:	429a      	cmp	r2, r3
 8000d6e:	f040 815a 	bne.w	8001026 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	685b      	ldr	r3, [r3, #4]
 8000d76:	2b01      	cmp	r3, #1
 8000d78:	d00b      	beq.n	8000d92 <HAL_GPIO_Init+0x5a>
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	685b      	ldr	r3, [r3, #4]
 8000d7e:	2b02      	cmp	r3, #2
 8000d80:	d007      	beq.n	8000d92 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d86:	2b11      	cmp	r3, #17
 8000d88:	d003      	beq.n	8000d92 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	685b      	ldr	r3, [r3, #4]
 8000d8e:	2b12      	cmp	r3, #18
 8000d90:	d130      	bne.n	8000df4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	689b      	ldr	r3, [r3, #8]
 8000d96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d98:	69fb      	ldr	r3, [r7, #28]
 8000d9a:	005b      	lsls	r3, r3, #1
 8000d9c:	2203      	movs	r2, #3
 8000d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000da2:	43db      	mvns	r3, r3
 8000da4:	69ba      	ldr	r2, [r7, #24]
 8000da6:	4013      	ands	r3, r2
 8000da8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	68da      	ldr	r2, [r3, #12]
 8000dae:	69fb      	ldr	r3, [r7, #28]
 8000db0:	005b      	lsls	r3, r3, #1
 8000db2:	fa02 f303 	lsl.w	r3, r2, r3
 8000db6:	69ba      	ldr	r2, [r7, #24]
 8000db8:	4313      	orrs	r3, r2
 8000dba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	69ba      	ldr	r2, [r7, #24]
 8000dc0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	685b      	ldr	r3, [r3, #4]
 8000dc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000dc8:	2201      	movs	r2, #1
 8000dca:	69fb      	ldr	r3, [r7, #28]
 8000dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd0:	43db      	mvns	r3, r3
 8000dd2:	69ba      	ldr	r2, [r7, #24]
 8000dd4:	4013      	ands	r3, r2
 8000dd6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	685b      	ldr	r3, [r3, #4]
 8000ddc:	091b      	lsrs	r3, r3, #4
 8000dde:	f003 0201 	and.w	r2, r3, #1
 8000de2:	69fb      	ldr	r3, [r7, #28]
 8000de4:	fa02 f303 	lsl.w	r3, r2, r3
 8000de8:	69ba      	ldr	r2, [r7, #24]
 8000dea:	4313      	orrs	r3, r2
 8000dec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	69ba      	ldr	r2, [r7, #24]
 8000df2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	68db      	ldr	r3, [r3, #12]
 8000df8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000dfa:	69fb      	ldr	r3, [r7, #28]
 8000dfc:	005b      	lsls	r3, r3, #1
 8000dfe:	2203      	movs	r2, #3
 8000e00:	fa02 f303 	lsl.w	r3, r2, r3
 8000e04:	43db      	mvns	r3, r3
 8000e06:	69ba      	ldr	r2, [r7, #24]
 8000e08:	4013      	ands	r3, r2
 8000e0a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	689a      	ldr	r2, [r3, #8]
 8000e10:	69fb      	ldr	r3, [r7, #28]
 8000e12:	005b      	lsls	r3, r3, #1
 8000e14:	fa02 f303 	lsl.w	r3, r2, r3
 8000e18:	69ba      	ldr	r2, [r7, #24]
 8000e1a:	4313      	orrs	r3, r2
 8000e1c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	69ba      	ldr	r2, [r7, #24]
 8000e22:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	685b      	ldr	r3, [r3, #4]
 8000e28:	2b02      	cmp	r3, #2
 8000e2a:	d003      	beq.n	8000e34 <HAL_GPIO_Init+0xfc>
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	685b      	ldr	r3, [r3, #4]
 8000e30:	2b12      	cmp	r3, #18
 8000e32:	d123      	bne.n	8000e7c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e34:	69fb      	ldr	r3, [r7, #28]
 8000e36:	08da      	lsrs	r2, r3, #3
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	3208      	adds	r2, #8
 8000e3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e40:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e42:	69fb      	ldr	r3, [r7, #28]
 8000e44:	f003 0307 	and.w	r3, r3, #7
 8000e48:	009b      	lsls	r3, r3, #2
 8000e4a:	220f      	movs	r2, #15
 8000e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e50:	43db      	mvns	r3, r3
 8000e52:	69ba      	ldr	r2, [r7, #24]
 8000e54:	4013      	ands	r3, r2
 8000e56:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	691a      	ldr	r2, [r3, #16]
 8000e5c:	69fb      	ldr	r3, [r7, #28]
 8000e5e:	f003 0307 	and.w	r3, r3, #7
 8000e62:	009b      	lsls	r3, r3, #2
 8000e64:	fa02 f303 	lsl.w	r3, r2, r3
 8000e68:	69ba      	ldr	r2, [r7, #24]
 8000e6a:	4313      	orrs	r3, r2
 8000e6c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e6e:	69fb      	ldr	r3, [r7, #28]
 8000e70:	08da      	lsrs	r2, r3, #3
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	3208      	adds	r2, #8
 8000e76:	69b9      	ldr	r1, [r7, #24]
 8000e78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e82:	69fb      	ldr	r3, [r7, #28]
 8000e84:	005b      	lsls	r3, r3, #1
 8000e86:	2203      	movs	r2, #3
 8000e88:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8c:	43db      	mvns	r3, r3
 8000e8e:	69ba      	ldr	r2, [r7, #24]
 8000e90:	4013      	ands	r3, r2
 8000e92:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	f003 0203 	and.w	r2, r3, #3
 8000e9c:	69fb      	ldr	r3, [r7, #28]
 8000e9e:	005b      	lsls	r3, r3, #1
 8000ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea4:	69ba      	ldr	r2, [r7, #24]
 8000ea6:	4313      	orrs	r3, r2
 8000ea8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	69ba      	ldr	r2, [r7, #24]
 8000eae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	685b      	ldr	r3, [r3, #4]
 8000eb4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	f000 80b4 	beq.w	8001026 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	60fb      	str	r3, [r7, #12]
 8000ec2:	4b60      	ldr	r3, [pc, #384]	@ (8001044 <HAL_GPIO_Init+0x30c>)
 8000ec4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ec6:	4a5f      	ldr	r2, [pc, #380]	@ (8001044 <HAL_GPIO_Init+0x30c>)
 8000ec8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ecc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ece:	4b5d      	ldr	r3, [pc, #372]	@ (8001044 <HAL_GPIO_Init+0x30c>)
 8000ed0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ed2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ed6:	60fb      	str	r3, [r7, #12]
 8000ed8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000eda:	4a5b      	ldr	r2, [pc, #364]	@ (8001048 <HAL_GPIO_Init+0x310>)
 8000edc:	69fb      	ldr	r3, [r7, #28]
 8000ede:	089b      	lsrs	r3, r3, #2
 8000ee0:	3302      	adds	r3, #2
 8000ee2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ee6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ee8:	69fb      	ldr	r3, [r7, #28]
 8000eea:	f003 0303 	and.w	r3, r3, #3
 8000eee:	009b      	lsls	r3, r3, #2
 8000ef0:	220f      	movs	r2, #15
 8000ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef6:	43db      	mvns	r3, r3
 8000ef8:	69ba      	ldr	r2, [r7, #24]
 8000efa:	4013      	ands	r3, r2
 8000efc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	4a52      	ldr	r2, [pc, #328]	@ (800104c <HAL_GPIO_Init+0x314>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d02b      	beq.n	8000f5e <HAL_GPIO_Init+0x226>
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	4a51      	ldr	r2, [pc, #324]	@ (8001050 <HAL_GPIO_Init+0x318>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d025      	beq.n	8000f5a <HAL_GPIO_Init+0x222>
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	4a50      	ldr	r2, [pc, #320]	@ (8001054 <HAL_GPIO_Init+0x31c>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d01f      	beq.n	8000f56 <HAL_GPIO_Init+0x21e>
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	4a4f      	ldr	r2, [pc, #316]	@ (8001058 <HAL_GPIO_Init+0x320>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d019      	beq.n	8000f52 <HAL_GPIO_Init+0x21a>
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	4a4e      	ldr	r2, [pc, #312]	@ (800105c <HAL_GPIO_Init+0x324>)
 8000f22:	4293      	cmp	r3, r2
 8000f24:	d013      	beq.n	8000f4e <HAL_GPIO_Init+0x216>
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	4a4d      	ldr	r2, [pc, #308]	@ (8001060 <HAL_GPIO_Init+0x328>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d00d      	beq.n	8000f4a <HAL_GPIO_Init+0x212>
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	4a4c      	ldr	r2, [pc, #304]	@ (8001064 <HAL_GPIO_Init+0x32c>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d007      	beq.n	8000f46 <HAL_GPIO_Init+0x20e>
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	4a4b      	ldr	r2, [pc, #300]	@ (8001068 <HAL_GPIO_Init+0x330>)
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	d101      	bne.n	8000f42 <HAL_GPIO_Init+0x20a>
 8000f3e:	2307      	movs	r3, #7
 8000f40:	e00e      	b.n	8000f60 <HAL_GPIO_Init+0x228>
 8000f42:	2308      	movs	r3, #8
 8000f44:	e00c      	b.n	8000f60 <HAL_GPIO_Init+0x228>
 8000f46:	2306      	movs	r3, #6
 8000f48:	e00a      	b.n	8000f60 <HAL_GPIO_Init+0x228>
 8000f4a:	2305      	movs	r3, #5
 8000f4c:	e008      	b.n	8000f60 <HAL_GPIO_Init+0x228>
 8000f4e:	2304      	movs	r3, #4
 8000f50:	e006      	b.n	8000f60 <HAL_GPIO_Init+0x228>
 8000f52:	2303      	movs	r3, #3
 8000f54:	e004      	b.n	8000f60 <HAL_GPIO_Init+0x228>
 8000f56:	2302      	movs	r3, #2
 8000f58:	e002      	b.n	8000f60 <HAL_GPIO_Init+0x228>
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	e000      	b.n	8000f60 <HAL_GPIO_Init+0x228>
 8000f5e:	2300      	movs	r3, #0
 8000f60:	69fa      	ldr	r2, [r7, #28]
 8000f62:	f002 0203 	and.w	r2, r2, #3
 8000f66:	0092      	lsls	r2, r2, #2
 8000f68:	4093      	lsls	r3, r2
 8000f6a:	69ba      	ldr	r2, [r7, #24]
 8000f6c:	4313      	orrs	r3, r2
 8000f6e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f70:	4935      	ldr	r1, [pc, #212]	@ (8001048 <HAL_GPIO_Init+0x310>)
 8000f72:	69fb      	ldr	r3, [r7, #28]
 8000f74:	089b      	lsrs	r3, r3, #2
 8000f76:	3302      	adds	r3, #2
 8000f78:	69ba      	ldr	r2, [r7, #24]
 8000f7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f7e:	4b3b      	ldr	r3, [pc, #236]	@ (800106c <HAL_GPIO_Init+0x334>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f84:	693b      	ldr	r3, [r7, #16]
 8000f86:	43db      	mvns	r3, r3
 8000f88:	69ba      	ldr	r2, [r7, #24]
 8000f8a:	4013      	ands	r3, r2
 8000f8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	685b      	ldr	r3, [r3, #4]
 8000f92:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d003      	beq.n	8000fa2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000f9a:	69ba      	ldr	r2, [r7, #24]
 8000f9c:	693b      	ldr	r3, [r7, #16]
 8000f9e:	4313      	orrs	r3, r2
 8000fa0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000fa2:	4a32      	ldr	r2, [pc, #200]	@ (800106c <HAL_GPIO_Init+0x334>)
 8000fa4:	69bb      	ldr	r3, [r7, #24]
 8000fa6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000fa8:	4b30      	ldr	r3, [pc, #192]	@ (800106c <HAL_GPIO_Init+0x334>)
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fae:	693b      	ldr	r3, [r7, #16]
 8000fb0:	43db      	mvns	r3, r3
 8000fb2:	69ba      	ldr	r2, [r7, #24]
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d003      	beq.n	8000fcc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000fc4:	69ba      	ldr	r2, [r7, #24]
 8000fc6:	693b      	ldr	r3, [r7, #16]
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000fcc:	4a27      	ldr	r2, [pc, #156]	@ (800106c <HAL_GPIO_Init+0x334>)
 8000fce:	69bb      	ldr	r3, [r7, #24]
 8000fd0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fd2:	4b26      	ldr	r3, [pc, #152]	@ (800106c <HAL_GPIO_Init+0x334>)
 8000fd4:	689b      	ldr	r3, [r3, #8]
 8000fd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fd8:	693b      	ldr	r3, [r7, #16]
 8000fda:	43db      	mvns	r3, r3
 8000fdc:	69ba      	ldr	r2, [r7, #24]
 8000fde:	4013      	ands	r3, r2
 8000fe0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d003      	beq.n	8000ff6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000fee:	69ba      	ldr	r2, [r7, #24]
 8000ff0:	693b      	ldr	r3, [r7, #16]
 8000ff2:	4313      	orrs	r3, r2
 8000ff4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000ff6:	4a1d      	ldr	r2, [pc, #116]	@ (800106c <HAL_GPIO_Init+0x334>)
 8000ff8:	69bb      	ldr	r3, [r7, #24]
 8000ffa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ffc:	4b1b      	ldr	r3, [pc, #108]	@ (800106c <HAL_GPIO_Init+0x334>)
 8000ffe:	68db      	ldr	r3, [r3, #12]
 8001000:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001002:	693b      	ldr	r3, [r7, #16]
 8001004:	43db      	mvns	r3, r3
 8001006:	69ba      	ldr	r2, [r7, #24]
 8001008:	4013      	ands	r3, r2
 800100a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001014:	2b00      	cmp	r3, #0
 8001016:	d003      	beq.n	8001020 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001018:	69ba      	ldr	r2, [r7, #24]
 800101a:	693b      	ldr	r3, [r7, #16]
 800101c:	4313      	orrs	r3, r2
 800101e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001020:	4a12      	ldr	r2, [pc, #72]	@ (800106c <HAL_GPIO_Init+0x334>)
 8001022:	69bb      	ldr	r3, [r7, #24]
 8001024:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001026:	69fb      	ldr	r3, [r7, #28]
 8001028:	3301      	adds	r3, #1
 800102a:	61fb      	str	r3, [r7, #28]
 800102c:	69fb      	ldr	r3, [r7, #28]
 800102e:	2b0f      	cmp	r3, #15
 8001030:	f67f ae90 	bls.w	8000d54 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001034:	bf00      	nop
 8001036:	bf00      	nop
 8001038:	3724      	adds	r7, #36	@ 0x24
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop
 8001044:	40023800 	.word	0x40023800
 8001048:	40013800 	.word	0x40013800
 800104c:	40020000 	.word	0x40020000
 8001050:	40020400 	.word	0x40020400
 8001054:	40020800 	.word	0x40020800
 8001058:	40020c00 	.word	0x40020c00
 800105c:	40021000 	.word	0x40021000
 8001060:	40021400 	.word	0x40021400
 8001064:	40021800 	.word	0x40021800
 8001068:	40021c00 	.word	0x40021c00
 800106c:	40013c00 	.word	0x40013c00

08001070 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001070:	b480      	push	{r7}
 8001072:	b085      	sub	sp, #20
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
 8001078:	460b      	mov	r3, r1
 800107a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	691a      	ldr	r2, [r3, #16]
 8001080:	887b      	ldrh	r3, [r7, #2]
 8001082:	4013      	ands	r3, r2
 8001084:	2b00      	cmp	r3, #0
 8001086:	d002      	beq.n	800108e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001088:	2301      	movs	r3, #1
 800108a:	73fb      	strb	r3, [r7, #15]
 800108c:	e001      	b.n	8001092 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800108e:	2300      	movs	r3, #0
 8001090:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001092:	7bfb      	ldrb	r3, [r7, #15]
}
 8001094:	4618      	mov	r0, r3
 8001096:	3714      	adds	r7, #20
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr

080010a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b083      	sub	sp, #12
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
 80010a8:	460b      	mov	r3, r1
 80010aa:	807b      	strh	r3, [r7, #2]
 80010ac:	4613      	mov	r3, r2
 80010ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010b0:	787b      	ldrb	r3, [r7, #1]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d003      	beq.n	80010be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010b6:	887a      	ldrh	r2, [r7, #2]
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80010bc:	e003      	b.n	80010c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80010be:	887b      	ldrh	r3, [r7, #2]
 80010c0:	041a      	lsls	r2, r3, #16
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	619a      	str	r2, [r3, #24]
}
 80010c6:	bf00      	nop
 80010c8:	370c      	adds	r7, #12
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr
	...

080010d4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b086      	sub	sp, #24
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d101      	bne.n	80010e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80010e2:	2301      	movs	r3, #1
 80010e4:	e25e      	b.n	80015a4 <HAL_RCC_OscConfig+0x4d0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f003 0301 	and.w	r3, r3, #1
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d075      	beq.n	80011de <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80010f2:	4b88      	ldr	r3, [pc, #544]	@ (8001314 <HAL_RCC_OscConfig+0x240>)
 80010f4:	689b      	ldr	r3, [r3, #8]
 80010f6:	f003 030c 	and.w	r3, r3, #12
 80010fa:	2b04      	cmp	r3, #4
 80010fc:	d00c      	beq.n	8001118 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80010fe:	4b85      	ldr	r3, [pc, #532]	@ (8001314 <HAL_RCC_OscConfig+0x240>)
 8001100:	689b      	ldr	r3, [r3, #8]
 8001102:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001106:	2b08      	cmp	r3, #8
 8001108:	d112      	bne.n	8001130 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800110a:	4b82      	ldr	r3, [pc, #520]	@ (8001314 <HAL_RCC_OscConfig+0x240>)
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001112:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001116:	d10b      	bne.n	8001130 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001118:	4b7e      	ldr	r3, [pc, #504]	@ (8001314 <HAL_RCC_OscConfig+0x240>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001120:	2b00      	cmp	r3, #0
 8001122:	d05b      	beq.n	80011dc <HAL_RCC_OscConfig+0x108>
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d157      	bne.n	80011dc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800112c:	2301      	movs	r3, #1
 800112e:	e239      	b.n	80015a4 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001138:	d106      	bne.n	8001148 <HAL_RCC_OscConfig+0x74>
 800113a:	4b76      	ldr	r3, [pc, #472]	@ (8001314 <HAL_RCC_OscConfig+0x240>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4a75      	ldr	r2, [pc, #468]	@ (8001314 <HAL_RCC_OscConfig+0x240>)
 8001140:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001144:	6013      	str	r3, [r2, #0]
 8001146:	e01d      	b.n	8001184 <HAL_RCC_OscConfig+0xb0>
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001150:	d10c      	bne.n	800116c <HAL_RCC_OscConfig+0x98>
 8001152:	4b70      	ldr	r3, [pc, #448]	@ (8001314 <HAL_RCC_OscConfig+0x240>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	4a6f      	ldr	r2, [pc, #444]	@ (8001314 <HAL_RCC_OscConfig+0x240>)
 8001158:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800115c:	6013      	str	r3, [r2, #0]
 800115e:	4b6d      	ldr	r3, [pc, #436]	@ (8001314 <HAL_RCC_OscConfig+0x240>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	4a6c      	ldr	r2, [pc, #432]	@ (8001314 <HAL_RCC_OscConfig+0x240>)
 8001164:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001168:	6013      	str	r3, [r2, #0]
 800116a:	e00b      	b.n	8001184 <HAL_RCC_OscConfig+0xb0>
 800116c:	4b69      	ldr	r3, [pc, #420]	@ (8001314 <HAL_RCC_OscConfig+0x240>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a68      	ldr	r2, [pc, #416]	@ (8001314 <HAL_RCC_OscConfig+0x240>)
 8001172:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001176:	6013      	str	r3, [r2, #0]
 8001178:	4b66      	ldr	r3, [pc, #408]	@ (8001314 <HAL_RCC_OscConfig+0x240>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a65      	ldr	r2, [pc, #404]	@ (8001314 <HAL_RCC_OscConfig+0x240>)
 800117e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001182:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d013      	beq.n	80011b4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800118c:	f7ff fce6 	bl	8000b5c <HAL_GetTick>
 8001190:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001192:	e008      	b.n	80011a6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001194:	f7ff fce2 	bl	8000b5c <HAL_GetTick>
 8001198:	4602      	mov	r2, r0
 800119a:	693b      	ldr	r3, [r7, #16]
 800119c:	1ad3      	subs	r3, r2, r3
 800119e:	2b64      	cmp	r3, #100	@ 0x64
 80011a0:	d901      	bls.n	80011a6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80011a2:	2303      	movs	r3, #3
 80011a4:	e1fe      	b.n	80015a4 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011a6:	4b5b      	ldr	r3, [pc, #364]	@ (8001314 <HAL_RCC_OscConfig+0x240>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d0f0      	beq.n	8001194 <HAL_RCC_OscConfig+0xc0>
 80011b2:	e014      	b.n	80011de <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011b4:	f7ff fcd2 	bl	8000b5c <HAL_GetTick>
 80011b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011ba:	e008      	b.n	80011ce <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011bc:	f7ff fcce 	bl	8000b5c <HAL_GetTick>
 80011c0:	4602      	mov	r2, r0
 80011c2:	693b      	ldr	r3, [r7, #16]
 80011c4:	1ad3      	subs	r3, r2, r3
 80011c6:	2b64      	cmp	r3, #100	@ 0x64
 80011c8:	d901      	bls.n	80011ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80011ca:	2303      	movs	r3, #3
 80011cc:	e1ea      	b.n	80015a4 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011ce:	4b51      	ldr	r3, [pc, #324]	@ (8001314 <HAL_RCC_OscConfig+0x240>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d1f0      	bne.n	80011bc <HAL_RCC_OscConfig+0xe8>
 80011da:	e000      	b.n	80011de <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f003 0302 	and.w	r3, r3, #2
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d063      	beq.n	80012b2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80011ea:	4b4a      	ldr	r3, [pc, #296]	@ (8001314 <HAL_RCC_OscConfig+0x240>)
 80011ec:	689b      	ldr	r3, [r3, #8]
 80011ee:	f003 030c 	and.w	r3, r3, #12
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d00b      	beq.n	800120e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80011f6:	4b47      	ldr	r3, [pc, #284]	@ (8001314 <HAL_RCC_OscConfig+0x240>)
 80011f8:	689b      	ldr	r3, [r3, #8]
 80011fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80011fe:	2b08      	cmp	r3, #8
 8001200:	d11c      	bne.n	800123c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001202:	4b44      	ldr	r3, [pc, #272]	@ (8001314 <HAL_RCC_OscConfig+0x240>)
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800120a:	2b00      	cmp	r3, #0
 800120c:	d116      	bne.n	800123c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800120e:	4b41      	ldr	r3, [pc, #260]	@ (8001314 <HAL_RCC_OscConfig+0x240>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f003 0302 	and.w	r3, r3, #2
 8001216:	2b00      	cmp	r3, #0
 8001218:	d005      	beq.n	8001226 <HAL_RCC_OscConfig+0x152>
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	68db      	ldr	r3, [r3, #12]
 800121e:	2b01      	cmp	r3, #1
 8001220:	d001      	beq.n	8001226 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001222:	2301      	movs	r3, #1
 8001224:	e1be      	b.n	80015a4 <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001226:	4b3b      	ldr	r3, [pc, #236]	@ (8001314 <HAL_RCC_OscConfig+0x240>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	691b      	ldr	r3, [r3, #16]
 8001232:	00db      	lsls	r3, r3, #3
 8001234:	4937      	ldr	r1, [pc, #220]	@ (8001314 <HAL_RCC_OscConfig+0x240>)
 8001236:	4313      	orrs	r3, r2
 8001238:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800123a:	e03a      	b.n	80012b2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	68db      	ldr	r3, [r3, #12]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d020      	beq.n	8001286 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001244:	4b34      	ldr	r3, [pc, #208]	@ (8001318 <HAL_RCC_OscConfig+0x244>)
 8001246:	2201      	movs	r2, #1
 8001248:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800124a:	f7ff fc87 	bl	8000b5c <HAL_GetTick>
 800124e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001250:	e008      	b.n	8001264 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001252:	f7ff fc83 	bl	8000b5c <HAL_GetTick>
 8001256:	4602      	mov	r2, r0
 8001258:	693b      	ldr	r3, [r7, #16]
 800125a:	1ad3      	subs	r3, r2, r3
 800125c:	2b02      	cmp	r3, #2
 800125e:	d901      	bls.n	8001264 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001260:	2303      	movs	r3, #3
 8001262:	e19f      	b.n	80015a4 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001264:	4b2b      	ldr	r3, [pc, #172]	@ (8001314 <HAL_RCC_OscConfig+0x240>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f003 0302 	and.w	r3, r3, #2
 800126c:	2b00      	cmp	r3, #0
 800126e:	d0f0      	beq.n	8001252 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001270:	4b28      	ldr	r3, [pc, #160]	@ (8001314 <HAL_RCC_OscConfig+0x240>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	691b      	ldr	r3, [r3, #16]
 800127c:	00db      	lsls	r3, r3, #3
 800127e:	4925      	ldr	r1, [pc, #148]	@ (8001314 <HAL_RCC_OscConfig+0x240>)
 8001280:	4313      	orrs	r3, r2
 8001282:	600b      	str	r3, [r1, #0]
 8001284:	e015      	b.n	80012b2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001286:	4b24      	ldr	r3, [pc, #144]	@ (8001318 <HAL_RCC_OscConfig+0x244>)
 8001288:	2200      	movs	r2, #0
 800128a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800128c:	f7ff fc66 	bl	8000b5c <HAL_GetTick>
 8001290:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001292:	e008      	b.n	80012a6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001294:	f7ff fc62 	bl	8000b5c <HAL_GetTick>
 8001298:	4602      	mov	r2, r0
 800129a:	693b      	ldr	r3, [r7, #16]
 800129c:	1ad3      	subs	r3, r2, r3
 800129e:	2b02      	cmp	r3, #2
 80012a0:	d901      	bls.n	80012a6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80012a2:	2303      	movs	r3, #3
 80012a4:	e17e      	b.n	80015a4 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012a6:	4b1b      	ldr	r3, [pc, #108]	@ (8001314 <HAL_RCC_OscConfig+0x240>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f003 0302 	and.w	r3, r3, #2
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d1f0      	bne.n	8001294 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f003 0308 	and.w	r3, r3, #8
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d036      	beq.n	800132c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	695b      	ldr	r3, [r3, #20]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d016      	beq.n	80012f4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012c6:	4b15      	ldr	r3, [pc, #84]	@ (800131c <HAL_RCC_OscConfig+0x248>)
 80012c8:	2201      	movs	r2, #1
 80012ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012cc:	f7ff fc46 	bl	8000b5c <HAL_GetTick>
 80012d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012d2:	e008      	b.n	80012e6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012d4:	f7ff fc42 	bl	8000b5c <HAL_GetTick>
 80012d8:	4602      	mov	r2, r0
 80012da:	693b      	ldr	r3, [r7, #16]
 80012dc:	1ad3      	subs	r3, r2, r3
 80012de:	2b02      	cmp	r3, #2
 80012e0:	d901      	bls.n	80012e6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80012e2:	2303      	movs	r3, #3
 80012e4:	e15e      	b.n	80015a4 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012e6:	4b0b      	ldr	r3, [pc, #44]	@ (8001314 <HAL_RCC_OscConfig+0x240>)
 80012e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80012ea:	f003 0302 	and.w	r3, r3, #2
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d0f0      	beq.n	80012d4 <HAL_RCC_OscConfig+0x200>
 80012f2:	e01b      	b.n	800132c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012f4:	4b09      	ldr	r3, [pc, #36]	@ (800131c <HAL_RCC_OscConfig+0x248>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012fa:	f7ff fc2f 	bl	8000b5c <HAL_GetTick>
 80012fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001300:	e00e      	b.n	8001320 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001302:	f7ff fc2b 	bl	8000b5c <HAL_GetTick>
 8001306:	4602      	mov	r2, r0
 8001308:	693b      	ldr	r3, [r7, #16]
 800130a:	1ad3      	subs	r3, r2, r3
 800130c:	2b02      	cmp	r3, #2
 800130e:	d907      	bls.n	8001320 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001310:	2303      	movs	r3, #3
 8001312:	e147      	b.n	80015a4 <HAL_RCC_OscConfig+0x4d0>
 8001314:	40023800 	.word	0x40023800
 8001318:	42470000 	.word	0x42470000
 800131c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001320:	4b88      	ldr	r3, [pc, #544]	@ (8001544 <HAL_RCC_OscConfig+0x470>)
 8001322:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001324:	f003 0302 	and.w	r3, r3, #2
 8001328:	2b00      	cmp	r3, #0
 800132a:	d1ea      	bne.n	8001302 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f003 0304 	and.w	r3, r3, #4
 8001334:	2b00      	cmp	r3, #0
 8001336:	f000 8097 	beq.w	8001468 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800133a:	2300      	movs	r3, #0
 800133c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800133e:	4b81      	ldr	r3, [pc, #516]	@ (8001544 <HAL_RCC_OscConfig+0x470>)
 8001340:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001342:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001346:	2b00      	cmp	r3, #0
 8001348:	d10f      	bne.n	800136a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800134a:	2300      	movs	r3, #0
 800134c:	60bb      	str	r3, [r7, #8]
 800134e:	4b7d      	ldr	r3, [pc, #500]	@ (8001544 <HAL_RCC_OscConfig+0x470>)
 8001350:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001352:	4a7c      	ldr	r2, [pc, #496]	@ (8001544 <HAL_RCC_OscConfig+0x470>)
 8001354:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001358:	6413      	str	r3, [r2, #64]	@ 0x40
 800135a:	4b7a      	ldr	r3, [pc, #488]	@ (8001544 <HAL_RCC_OscConfig+0x470>)
 800135c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800135e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001362:	60bb      	str	r3, [r7, #8]
 8001364:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001366:	2301      	movs	r3, #1
 8001368:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800136a:	4b77      	ldr	r3, [pc, #476]	@ (8001548 <HAL_RCC_OscConfig+0x474>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001372:	2b00      	cmp	r3, #0
 8001374:	d118      	bne.n	80013a8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001376:	4b74      	ldr	r3, [pc, #464]	@ (8001548 <HAL_RCC_OscConfig+0x474>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4a73      	ldr	r2, [pc, #460]	@ (8001548 <HAL_RCC_OscConfig+0x474>)
 800137c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001380:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001382:	f7ff fbeb 	bl	8000b5c <HAL_GetTick>
 8001386:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001388:	e008      	b.n	800139c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800138a:	f7ff fbe7 	bl	8000b5c <HAL_GetTick>
 800138e:	4602      	mov	r2, r0
 8001390:	693b      	ldr	r3, [r7, #16]
 8001392:	1ad3      	subs	r3, r2, r3
 8001394:	2b02      	cmp	r3, #2
 8001396:	d901      	bls.n	800139c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001398:	2303      	movs	r3, #3
 800139a:	e103      	b.n	80015a4 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800139c:	4b6a      	ldr	r3, [pc, #424]	@ (8001548 <HAL_RCC_OscConfig+0x474>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d0f0      	beq.n	800138a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	689b      	ldr	r3, [r3, #8]
 80013ac:	2b01      	cmp	r3, #1
 80013ae:	d106      	bne.n	80013be <HAL_RCC_OscConfig+0x2ea>
 80013b0:	4b64      	ldr	r3, [pc, #400]	@ (8001544 <HAL_RCC_OscConfig+0x470>)
 80013b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013b4:	4a63      	ldr	r2, [pc, #396]	@ (8001544 <HAL_RCC_OscConfig+0x470>)
 80013b6:	f043 0301 	orr.w	r3, r3, #1
 80013ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80013bc:	e01c      	b.n	80013f8 <HAL_RCC_OscConfig+0x324>
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	689b      	ldr	r3, [r3, #8]
 80013c2:	2b05      	cmp	r3, #5
 80013c4:	d10c      	bne.n	80013e0 <HAL_RCC_OscConfig+0x30c>
 80013c6:	4b5f      	ldr	r3, [pc, #380]	@ (8001544 <HAL_RCC_OscConfig+0x470>)
 80013c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013ca:	4a5e      	ldr	r2, [pc, #376]	@ (8001544 <HAL_RCC_OscConfig+0x470>)
 80013cc:	f043 0304 	orr.w	r3, r3, #4
 80013d0:	6713      	str	r3, [r2, #112]	@ 0x70
 80013d2:	4b5c      	ldr	r3, [pc, #368]	@ (8001544 <HAL_RCC_OscConfig+0x470>)
 80013d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013d6:	4a5b      	ldr	r2, [pc, #364]	@ (8001544 <HAL_RCC_OscConfig+0x470>)
 80013d8:	f043 0301 	orr.w	r3, r3, #1
 80013dc:	6713      	str	r3, [r2, #112]	@ 0x70
 80013de:	e00b      	b.n	80013f8 <HAL_RCC_OscConfig+0x324>
 80013e0:	4b58      	ldr	r3, [pc, #352]	@ (8001544 <HAL_RCC_OscConfig+0x470>)
 80013e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013e4:	4a57      	ldr	r2, [pc, #348]	@ (8001544 <HAL_RCC_OscConfig+0x470>)
 80013e6:	f023 0301 	bic.w	r3, r3, #1
 80013ea:	6713      	str	r3, [r2, #112]	@ 0x70
 80013ec:	4b55      	ldr	r3, [pc, #340]	@ (8001544 <HAL_RCC_OscConfig+0x470>)
 80013ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013f0:	4a54      	ldr	r2, [pc, #336]	@ (8001544 <HAL_RCC_OscConfig+0x470>)
 80013f2:	f023 0304 	bic.w	r3, r3, #4
 80013f6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	689b      	ldr	r3, [r3, #8]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d015      	beq.n	800142c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001400:	f7ff fbac 	bl	8000b5c <HAL_GetTick>
 8001404:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001406:	e00a      	b.n	800141e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001408:	f7ff fba8 	bl	8000b5c <HAL_GetTick>
 800140c:	4602      	mov	r2, r0
 800140e:	693b      	ldr	r3, [r7, #16]
 8001410:	1ad3      	subs	r3, r2, r3
 8001412:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001416:	4293      	cmp	r3, r2
 8001418:	d901      	bls.n	800141e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800141a:	2303      	movs	r3, #3
 800141c:	e0c2      	b.n	80015a4 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800141e:	4b49      	ldr	r3, [pc, #292]	@ (8001544 <HAL_RCC_OscConfig+0x470>)
 8001420:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001422:	f003 0302 	and.w	r3, r3, #2
 8001426:	2b00      	cmp	r3, #0
 8001428:	d0ee      	beq.n	8001408 <HAL_RCC_OscConfig+0x334>
 800142a:	e014      	b.n	8001456 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800142c:	f7ff fb96 	bl	8000b5c <HAL_GetTick>
 8001430:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001432:	e00a      	b.n	800144a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001434:	f7ff fb92 	bl	8000b5c <HAL_GetTick>
 8001438:	4602      	mov	r2, r0
 800143a:	693b      	ldr	r3, [r7, #16]
 800143c:	1ad3      	subs	r3, r2, r3
 800143e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001442:	4293      	cmp	r3, r2
 8001444:	d901      	bls.n	800144a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001446:	2303      	movs	r3, #3
 8001448:	e0ac      	b.n	80015a4 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800144a:	4b3e      	ldr	r3, [pc, #248]	@ (8001544 <HAL_RCC_OscConfig+0x470>)
 800144c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800144e:	f003 0302 	and.w	r3, r3, #2
 8001452:	2b00      	cmp	r3, #0
 8001454:	d1ee      	bne.n	8001434 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001456:	7dfb      	ldrb	r3, [r7, #23]
 8001458:	2b01      	cmp	r3, #1
 800145a:	d105      	bne.n	8001468 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800145c:	4b39      	ldr	r3, [pc, #228]	@ (8001544 <HAL_RCC_OscConfig+0x470>)
 800145e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001460:	4a38      	ldr	r2, [pc, #224]	@ (8001544 <HAL_RCC_OscConfig+0x470>)
 8001462:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001466:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	699b      	ldr	r3, [r3, #24]
 800146c:	2b00      	cmp	r3, #0
 800146e:	f000 8098 	beq.w	80015a2 <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001472:	4b34      	ldr	r3, [pc, #208]	@ (8001544 <HAL_RCC_OscConfig+0x470>)
 8001474:	689b      	ldr	r3, [r3, #8]
 8001476:	f003 030c 	and.w	r3, r3, #12
 800147a:	2b08      	cmp	r3, #8
 800147c:	d05c      	beq.n	8001538 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	699b      	ldr	r3, [r3, #24]
 8001482:	2b02      	cmp	r3, #2
 8001484:	d141      	bne.n	800150a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001486:	4b31      	ldr	r3, [pc, #196]	@ (800154c <HAL_RCC_OscConfig+0x478>)
 8001488:	2200      	movs	r2, #0
 800148a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800148c:	f7ff fb66 	bl	8000b5c <HAL_GetTick>
 8001490:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001492:	e008      	b.n	80014a6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001494:	f7ff fb62 	bl	8000b5c <HAL_GetTick>
 8001498:	4602      	mov	r2, r0
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	1ad3      	subs	r3, r2, r3
 800149e:	2b02      	cmp	r3, #2
 80014a0:	d901      	bls.n	80014a6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80014a2:	2303      	movs	r3, #3
 80014a4:	e07e      	b.n	80015a4 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014a6:	4b27      	ldr	r3, [pc, #156]	@ (8001544 <HAL_RCC_OscConfig+0x470>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d1f0      	bne.n	8001494 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	69da      	ldr	r2, [r3, #28]
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6a1b      	ldr	r3, [r3, #32]
 80014ba:	431a      	orrs	r2, r3
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014c0:	019b      	lsls	r3, r3, #6
 80014c2:	431a      	orrs	r2, r3
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014c8:	085b      	lsrs	r3, r3, #1
 80014ca:	3b01      	subs	r3, #1
 80014cc:	041b      	lsls	r3, r3, #16
 80014ce:	431a      	orrs	r2, r3
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014d4:	061b      	lsls	r3, r3, #24
 80014d6:	491b      	ldr	r1, [pc, #108]	@ (8001544 <HAL_RCC_OscConfig+0x470>)
 80014d8:	4313      	orrs	r3, r2
 80014da:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014dc:	4b1b      	ldr	r3, [pc, #108]	@ (800154c <HAL_RCC_OscConfig+0x478>)
 80014de:	2201      	movs	r2, #1
 80014e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014e2:	f7ff fb3b 	bl	8000b5c <HAL_GetTick>
 80014e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014e8:	e008      	b.n	80014fc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014ea:	f7ff fb37 	bl	8000b5c <HAL_GetTick>
 80014ee:	4602      	mov	r2, r0
 80014f0:	693b      	ldr	r3, [r7, #16]
 80014f2:	1ad3      	subs	r3, r2, r3
 80014f4:	2b02      	cmp	r3, #2
 80014f6:	d901      	bls.n	80014fc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80014f8:	2303      	movs	r3, #3
 80014fa:	e053      	b.n	80015a4 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014fc:	4b11      	ldr	r3, [pc, #68]	@ (8001544 <HAL_RCC_OscConfig+0x470>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001504:	2b00      	cmp	r3, #0
 8001506:	d0f0      	beq.n	80014ea <HAL_RCC_OscConfig+0x416>
 8001508:	e04b      	b.n	80015a2 <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800150a:	4b10      	ldr	r3, [pc, #64]	@ (800154c <HAL_RCC_OscConfig+0x478>)
 800150c:	2200      	movs	r2, #0
 800150e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001510:	f7ff fb24 	bl	8000b5c <HAL_GetTick>
 8001514:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001516:	e008      	b.n	800152a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001518:	f7ff fb20 	bl	8000b5c <HAL_GetTick>
 800151c:	4602      	mov	r2, r0
 800151e:	693b      	ldr	r3, [r7, #16]
 8001520:	1ad3      	subs	r3, r2, r3
 8001522:	2b02      	cmp	r3, #2
 8001524:	d901      	bls.n	800152a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001526:	2303      	movs	r3, #3
 8001528:	e03c      	b.n	80015a4 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800152a:	4b06      	ldr	r3, [pc, #24]	@ (8001544 <HAL_RCC_OscConfig+0x470>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001532:	2b00      	cmp	r3, #0
 8001534:	d1f0      	bne.n	8001518 <HAL_RCC_OscConfig+0x444>
 8001536:	e034      	b.n	80015a2 <HAL_RCC_OscConfig+0x4ce>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	699b      	ldr	r3, [r3, #24]
 800153c:	2b01      	cmp	r3, #1
 800153e:	d107      	bne.n	8001550 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001540:	2301      	movs	r3, #1
 8001542:	e02f      	b.n	80015a4 <HAL_RCC_OscConfig+0x4d0>
 8001544:	40023800 	.word	0x40023800
 8001548:	40007000 	.word	0x40007000
 800154c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001550:	4b16      	ldr	r3, [pc, #88]	@ (80015ac <HAL_RCC_OscConfig+0x4d8>)
 8001552:	689b      	ldr	r3, [r3, #8]
 8001554:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	69db      	ldr	r3, [r3, #28]
 8001560:	429a      	cmp	r2, r3
 8001562:	d11c      	bne.n	800159e <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800156e:	429a      	cmp	r2, r3
 8001570:	d115      	bne.n	800159e <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001572:	68fa      	ldr	r2, [r7, #12]
 8001574:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001578:	4013      	ands	r3, r2
 800157a:	687a      	ldr	r2, [r7, #4]
 800157c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800157e:	4293      	cmp	r3, r2
 8001580:	d10d      	bne.n	800159e <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800158c:	429a      	cmp	r2, r3
 800158e:	d106      	bne.n	800159e <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800159a:	429a      	cmp	r2, r3
 800159c:	d001      	beq.n	80015a2 <HAL_RCC_OscConfig+0x4ce>
        {
          return HAL_ERROR;
 800159e:	2301      	movs	r3, #1
 80015a0:	e000      	b.n	80015a4 <HAL_RCC_OscConfig+0x4d0>
        }
      }
    }
  }
  return HAL_OK;
 80015a2:	2300      	movs	r3, #0
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	3718      	adds	r7, #24
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	40023800 	.word	0x40023800

080015b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b084      	sub	sp, #16
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
 80015b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d101      	bne.n	80015c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015c0:	2301      	movs	r3, #1
 80015c2:	e0cc      	b.n	800175e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80015c4:	4b68      	ldr	r3, [pc, #416]	@ (8001768 <HAL_RCC_ClockConfig+0x1b8>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f003 030f 	and.w	r3, r3, #15
 80015cc:	683a      	ldr	r2, [r7, #0]
 80015ce:	429a      	cmp	r2, r3
 80015d0:	d90c      	bls.n	80015ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015d2:	4b65      	ldr	r3, [pc, #404]	@ (8001768 <HAL_RCC_ClockConfig+0x1b8>)
 80015d4:	683a      	ldr	r2, [r7, #0]
 80015d6:	b2d2      	uxtb	r2, r2
 80015d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015da:	4b63      	ldr	r3, [pc, #396]	@ (8001768 <HAL_RCC_ClockConfig+0x1b8>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f003 030f 	and.w	r3, r3, #15
 80015e2:	683a      	ldr	r2, [r7, #0]
 80015e4:	429a      	cmp	r2, r3
 80015e6:	d001      	beq.n	80015ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80015e8:	2301      	movs	r3, #1
 80015ea:	e0b8      	b.n	800175e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f003 0302 	and.w	r3, r3, #2
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d020      	beq.n	800163a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f003 0304 	and.w	r3, r3, #4
 8001600:	2b00      	cmp	r3, #0
 8001602:	d005      	beq.n	8001610 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001604:	4b59      	ldr	r3, [pc, #356]	@ (800176c <HAL_RCC_ClockConfig+0x1bc>)
 8001606:	689b      	ldr	r3, [r3, #8]
 8001608:	4a58      	ldr	r2, [pc, #352]	@ (800176c <HAL_RCC_ClockConfig+0x1bc>)
 800160a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800160e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f003 0308 	and.w	r3, r3, #8
 8001618:	2b00      	cmp	r3, #0
 800161a:	d005      	beq.n	8001628 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800161c:	4b53      	ldr	r3, [pc, #332]	@ (800176c <HAL_RCC_ClockConfig+0x1bc>)
 800161e:	689b      	ldr	r3, [r3, #8]
 8001620:	4a52      	ldr	r2, [pc, #328]	@ (800176c <HAL_RCC_ClockConfig+0x1bc>)
 8001622:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001626:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001628:	4b50      	ldr	r3, [pc, #320]	@ (800176c <HAL_RCC_ClockConfig+0x1bc>)
 800162a:	689b      	ldr	r3, [r3, #8]
 800162c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	689b      	ldr	r3, [r3, #8]
 8001634:	494d      	ldr	r1, [pc, #308]	@ (800176c <HAL_RCC_ClockConfig+0x1bc>)
 8001636:	4313      	orrs	r3, r2
 8001638:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f003 0301 	and.w	r3, r3, #1
 8001642:	2b00      	cmp	r3, #0
 8001644:	d044      	beq.n	80016d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	2b01      	cmp	r3, #1
 800164c:	d107      	bne.n	800165e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800164e:	4b47      	ldr	r3, [pc, #284]	@ (800176c <HAL_RCC_ClockConfig+0x1bc>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001656:	2b00      	cmp	r3, #0
 8001658:	d119      	bne.n	800168e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800165a:	2301      	movs	r3, #1
 800165c:	e07f      	b.n	800175e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	2b02      	cmp	r3, #2
 8001664:	d003      	beq.n	800166e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800166a:	2b03      	cmp	r3, #3
 800166c:	d107      	bne.n	800167e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800166e:	4b3f      	ldr	r3, [pc, #252]	@ (800176c <HAL_RCC_ClockConfig+0x1bc>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001676:	2b00      	cmp	r3, #0
 8001678:	d109      	bne.n	800168e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800167a:	2301      	movs	r3, #1
 800167c:	e06f      	b.n	800175e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800167e:	4b3b      	ldr	r3, [pc, #236]	@ (800176c <HAL_RCC_ClockConfig+0x1bc>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f003 0302 	and.w	r3, r3, #2
 8001686:	2b00      	cmp	r3, #0
 8001688:	d101      	bne.n	800168e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800168a:	2301      	movs	r3, #1
 800168c:	e067      	b.n	800175e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800168e:	4b37      	ldr	r3, [pc, #220]	@ (800176c <HAL_RCC_ClockConfig+0x1bc>)
 8001690:	689b      	ldr	r3, [r3, #8]
 8001692:	f023 0203 	bic.w	r2, r3, #3
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	4934      	ldr	r1, [pc, #208]	@ (800176c <HAL_RCC_ClockConfig+0x1bc>)
 800169c:	4313      	orrs	r3, r2
 800169e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80016a0:	f7ff fa5c 	bl	8000b5c <HAL_GetTick>
 80016a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016a6:	e00a      	b.n	80016be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016a8:	f7ff fa58 	bl	8000b5c <HAL_GetTick>
 80016ac:	4602      	mov	r2, r0
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	1ad3      	subs	r3, r2, r3
 80016b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d901      	bls.n	80016be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80016ba:	2303      	movs	r3, #3
 80016bc:	e04f      	b.n	800175e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016be:	4b2b      	ldr	r3, [pc, #172]	@ (800176c <HAL_RCC_ClockConfig+0x1bc>)
 80016c0:	689b      	ldr	r3, [r3, #8]
 80016c2:	f003 020c 	and.w	r2, r3, #12
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	009b      	lsls	r3, r3, #2
 80016cc:	429a      	cmp	r2, r3
 80016ce:	d1eb      	bne.n	80016a8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80016d0:	4b25      	ldr	r3, [pc, #148]	@ (8001768 <HAL_RCC_ClockConfig+0x1b8>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f003 030f 	and.w	r3, r3, #15
 80016d8:	683a      	ldr	r2, [r7, #0]
 80016da:	429a      	cmp	r2, r3
 80016dc:	d20c      	bcs.n	80016f8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016de:	4b22      	ldr	r3, [pc, #136]	@ (8001768 <HAL_RCC_ClockConfig+0x1b8>)
 80016e0:	683a      	ldr	r2, [r7, #0]
 80016e2:	b2d2      	uxtb	r2, r2
 80016e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016e6:	4b20      	ldr	r3, [pc, #128]	@ (8001768 <HAL_RCC_ClockConfig+0x1b8>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f003 030f 	and.w	r3, r3, #15
 80016ee:	683a      	ldr	r2, [r7, #0]
 80016f0:	429a      	cmp	r2, r3
 80016f2:	d001      	beq.n	80016f8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80016f4:	2301      	movs	r3, #1
 80016f6:	e032      	b.n	800175e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f003 0304 	and.w	r3, r3, #4
 8001700:	2b00      	cmp	r3, #0
 8001702:	d008      	beq.n	8001716 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001704:	4b19      	ldr	r3, [pc, #100]	@ (800176c <HAL_RCC_ClockConfig+0x1bc>)
 8001706:	689b      	ldr	r3, [r3, #8]
 8001708:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	68db      	ldr	r3, [r3, #12]
 8001710:	4916      	ldr	r1, [pc, #88]	@ (800176c <HAL_RCC_ClockConfig+0x1bc>)
 8001712:	4313      	orrs	r3, r2
 8001714:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f003 0308 	and.w	r3, r3, #8
 800171e:	2b00      	cmp	r3, #0
 8001720:	d009      	beq.n	8001736 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001722:	4b12      	ldr	r3, [pc, #72]	@ (800176c <HAL_RCC_ClockConfig+0x1bc>)
 8001724:	689b      	ldr	r3, [r3, #8]
 8001726:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	691b      	ldr	r3, [r3, #16]
 800172e:	00db      	lsls	r3, r3, #3
 8001730:	490e      	ldr	r1, [pc, #56]	@ (800176c <HAL_RCC_ClockConfig+0x1bc>)
 8001732:	4313      	orrs	r3, r2
 8001734:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001736:	f000 f821 	bl	800177c <HAL_RCC_GetSysClockFreq>
 800173a:	4602      	mov	r2, r0
 800173c:	4b0b      	ldr	r3, [pc, #44]	@ (800176c <HAL_RCC_ClockConfig+0x1bc>)
 800173e:	689b      	ldr	r3, [r3, #8]
 8001740:	091b      	lsrs	r3, r3, #4
 8001742:	f003 030f 	and.w	r3, r3, #15
 8001746:	490a      	ldr	r1, [pc, #40]	@ (8001770 <HAL_RCC_ClockConfig+0x1c0>)
 8001748:	5ccb      	ldrb	r3, [r1, r3]
 800174a:	fa22 f303 	lsr.w	r3, r2, r3
 800174e:	4a09      	ldr	r2, [pc, #36]	@ (8001774 <HAL_RCC_ClockConfig+0x1c4>)
 8001750:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001752:	4b09      	ldr	r3, [pc, #36]	@ (8001778 <HAL_RCC_ClockConfig+0x1c8>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4618      	mov	r0, r3
 8001758:	f7ff f908 	bl	800096c <HAL_InitTick>

  return HAL_OK;
 800175c:	2300      	movs	r3, #0
}
 800175e:	4618      	mov	r0, r3
 8001760:	3710      	adds	r7, #16
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	40023c00 	.word	0x40023c00
 800176c:	40023800 	.word	0x40023800
 8001770:	0800572c 	.word	0x0800572c
 8001774:	20000000 	.word	0x20000000
 8001778:	20000004 	.word	0x20000004

0800177c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800177c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001780:	b094      	sub	sp, #80	@ 0x50
 8001782:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001784:	2300      	movs	r3, #0
 8001786:	647b      	str	r3, [r7, #68]	@ 0x44
 8001788:	2300      	movs	r3, #0
 800178a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800178c:	2300      	movs	r3, #0
 800178e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001790:	2300      	movs	r3, #0
 8001792:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001794:	4b79      	ldr	r3, [pc, #484]	@ (800197c <HAL_RCC_GetSysClockFreq+0x200>)
 8001796:	689b      	ldr	r3, [r3, #8]
 8001798:	f003 030c 	and.w	r3, r3, #12
 800179c:	2b08      	cmp	r3, #8
 800179e:	d00d      	beq.n	80017bc <HAL_RCC_GetSysClockFreq+0x40>
 80017a0:	2b08      	cmp	r3, #8
 80017a2:	f200 80e1 	bhi.w	8001968 <HAL_RCC_GetSysClockFreq+0x1ec>
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d002      	beq.n	80017b0 <HAL_RCC_GetSysClockFreq+0x34>
 80017aa:	2b04      	cmp	r3, #4
 80017ac:	d003      	beq.n	80017b6 <HAL_RCC_GetSysClockFreq+0x3a>
 80017ae:	e0db      	b.n	8001968 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80017b0:	4b73      	ldr	r3, [pc, #460]	@ (8001980 <HAL_RCC_GetSysClockFreq+0x204>)
 80017b2:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 80017b4:	e0db      	b.n	800196e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80017b6:	4b73      	ldr	r3, [pc, #460]	@ (8001984 <HAL_RCC_GetSysClockFreq+0x208>)
 80017b8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80017ba:	e0d8      	b.n	800196e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80017bc:	4b6f      	ldr	r3, [pc, #444]	@ (800197c <HAL_RCC_GetSysClockFreq+0x200>)
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80017c4:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80017c6:	4b6d      	ldr	r3, [pc, #436]	@ (800197c <HAL_RCC_GetSysClockFreq+0x200>)
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d063      	beq.n	800189a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017d2:	4b6a      	ldr	r3, [pc, #424]	@ (800197c <HAL_RCC_GetSysClockFreq+0x200>)
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	099b      	lsrs	r3, r3, #6
 80017d8:	2200      	movs	r2, #0
 80017da:	63bb      	str	r3, [r7, #56]	@ 0x38
 80017dc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80017de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80017e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80017e4:	633b      	str	r3, [r7, #48]	@ 0x30
 80017e6:	2300      	movs	r3, #0
 80017e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80017ea:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80017ee:	4622      	mov	r2, r4
 80017f0:	462b      	mov	r3, r5
 80017f2:	f04f 0000 	mov.w	r0, #0
 80017f6:	f04f 0100 	mov.w	r1, #0
 80017fa:	0159      	lsls	r1, r3, #5
 80017fc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001800:	0150      	lsls	r0, r2, #5
 8001802:	4602      	mov	r2, r0
 8001804:	460b      	mov	r3, r1
 8001806:	4621      	mov	r1, r4
 8001808:	1a51      	subs	r1, r2, r1
 800180a:	6139      	str	r1, [r7, #16]
 800180c:	4629      	mov	r1, r5
 800180e:	eb63 0301 	sbc.w	r3, r3, r1
 8001812:	617b      	str	r3, [r7, #20]
 8001814:	f04f 0200 	mov.w	r2, #0
 8001818:	f04f 0300 	mov.w	r3, #0
 800181c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001820:	4659      	mov	r1, fp
 8001822:	018b      	lsls	r3, r1, #6
 8001824:	4651      	mov	r1, sl
 8001826:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800182a:	4651      	mov	r1, sl
 800182c:	018a      	lsls	r2, r1, #6
 800182e:	4651      	mov	r1, sl
 8001830:	ebb2 0801 	subs.w	r8, r2, r1
 8001834:	4659      	mov	r1, fp
 8001836:	eb63 0901 	sbc.w	r9, r3, r1
 800183a:	f04f 0200 	mov.w	r2, #0
 800183e:	f04f 0300 	mov.w	r3, #0
 8001842:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001846:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800184a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800184e:	4690      	mov	r8, r2
 8001850:	4699      	mov	r9, r3
 8001852:	4623      	mov	r3, r4
 8001854:	eb18 0303 	adds.w	r3, r8, r3
 8001858:	60bb      	str	r3, [r7, #8]
 800185a:	462b      	mov	r3, r5
 800185c:	eb49 0303 	adc.w	r3, r9, r3
 8001860:	60fb      	str	r3, [r7, #12]
 8001862:	f04f 0200 	mov.w	r2, #0
 8001866:	f04f 0300 	mov.w	r3, #0
 800186a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800186e:	4629      	mov	r1, r5
 8001870:	024b      	lsls	r3, r1, #9
 8001872:	4621      	mov	r1, r4
 8001874:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001878:	4621      	mov	r1, r4
 800187a:	024a      	lsls	r2, r1, #9
 800187c:	4610      	mov	r0, r2
 800187e:	4619      	mov	r1, r3
 8001880:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001882:	2200      	movs	r2, #0
 8001884:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001886:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001888:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800188c:	f7fe fcea 	bl	8000264 <__aeabi_uldivmod>
 8001890:	4602      	mov	r2, r0
 8001892:	460b      	mov	r3, r1
 8001894:	4613      	mov	r3, r2
 8001896:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001898:	e058      	b.n	800194c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800189a:	4b38      	ldr	r3, [pc, #224]	@ (800197c <HAL_RCC_GetSysClockFreq+0x200>)
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	099b      	lsrs	r3, r3, #6
 80018a0:	2200      	movs	r2, #0
 80018a2:	4618      	mov	r0, r3
 80018a4:	4611      	mov	r1, r2
 80018a6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80018aa:	623b      	str	r3, [r7, #32]
 80018ac:	2300      	movs	r3, #0
 80018ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80018b0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80018b4:	4642      	mov	r2, r8
 80018b6:	464b      	mov	r3, r9
 80018b8:	f04f 0000 	mov.w	r0, #0
 80018bc:	f04f 0100 	mov.w	r1, #0
 80018c0:	0159      	lsls	r1, r3, #5
 80018c2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80018c6:	0150      	lsls	r0, r2, #5
 80018c8:	4602      	mov	r2, r0
 80018ca:	460b      	mov	r3, r1
 80018cc:	4641      	mov	r1, r8
 80018ce:	ebb2 0a01 	subs.w	sl, r2, r1
 80018d2:	4649      	mov	r1, r9
 80018d4:	eb63 0b01 	sbc.w	fp, r3, r1
 80018d8:	f04f 0200 	mov.w	r2, #0
 80018dc:	f04f 0300 	mov.w	r3, #0
 80018e0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80018e4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80018e8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80018ec:	ebb2 040a 	subs.w	r4, r2, sl
 80018f0:	eb63 050b 	sbc.w	r5, r3, fp
 80018f4:	f04f 0200 	mov.w	r2, #0
 80018f8:	f04f 0300 	mov.w	r3, #0
 80018fc:	00eb      	lsls	r3, r5, #3
 80018fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001902:	00e2      	lsls	r2, r4, #3
 8001904:	4614      	mov	r4, r2
 8001906:	461d      	mov	r5, r3
 8001908:	4643      	mov	r3, r8
 800190a:	18e3      	adds	r3, r4, r3
 800190c:	603b      	str	r3, [r7, #0]
 800190e:	464b      	mov	r3, r9
 8001910:	eb45 0303 	adc.w	r3, r5, r3
 8001914:	607b      	str	r3, [r7, #4]
 8001916:	f04f 0200 	mov.w	r2, #0
 800191a:	f04f 0300 	mov.w	r3, #0
 800191e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001922:	4629      	mov	r1, r5
 8001924:	028b      	lsls	r3, r1, #10
 8001926:	4621      	mov	r1, r4
 8001928:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800192c:	4621      	mov	r1, r4
 800192e:	028a      	lsls	r2, r1, #10
 8001930:	4610      	mov	r0, r2
 8001932:	4619      	mov	r1, r3
 8001934:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001936:	2200      	movs	r2, #0
 8001938:	61bb      	str	r3, [r7, #24]
 800193a:	61fa      	str	r2, [r7, #28]
 800193c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001940:	f7fe fc90 	bl	8000264 <__aeabi_uldivmod>
 8001944:	4602      	mov	r2, r0
 8001946:	460b      	mov	r3, r1
 8001948:	4613      	mov	r3, r2
 800194a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800194c:	4b0b      	ldr	r3, [pc, #44]	@ (800197c <HAL_RCC_GetSysClockFreq+0x200>)
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	0c1b      	lsrs	r3, r3, #16
 8001952:	f003 0303 	and.w	r3, r3, #3
 8001956:	3301      	adds	r3, #1
 8001958:	005b      	lsls	r3, r3, #1
 800195a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 800195c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800195e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001960:	fbb2 f3f3 	udiv	r3, r2, r3
 8001964:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001966:	e002      	b.n	800196e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001968:	4b05      	ldr	r3, [pc, #20]	@ (8001980 <HAL_RCC_GetSysClockFreq+0x204>)
 800196a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800196c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800196e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001970:	4618      	mov	r0, r3
 8001972:	3750      	adds	r7, #80	@ 0x50
 8001974:	46bd      	mov	sp, r7
 8001976:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800197a:	bf00      	nop
 800197c:	40023800 	.word	0x40023800
 8001980:	00f42400 	.word	0x00f42400
 8001984:	007a1200 	.word	0x007a1200

08001988 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001988:	b480      	push	{r7}
 800198a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800198c:	4b03      	ldr	r3, [pc, #12]	@ (800199c <HAL_RCC_GetHCLKFreq+0x14>)
 800198e:	681b      	ldr	r3, [r3, #0]
}
 8001990:	4618      	mov	r0, r3
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr
 800199a:	bf00      	nop
 800199c:	20000000 	.word	0x20000000

080019a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80019a4:	f7ff fff0 	bl	8001988 <HAL_RCC_GetHCLKFreq>
 80019a8:	4602      	mov	r2, r0
 80019aa:	4b05      	ldr	r3, [pc, #20]	@ (80019c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80019ac:	689b      	ldr	r3, [r3, #8]
 80019ae:	0a9b      	lsrs	r3, r3, #10
 80019b0:	f003 0307 	and.w	r3, r3, #7
 80019b4:	4903      	ldr	r1, [pc, #12]	@ (80019c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80019b6:	5ccb      	ldrb	r3, [r1, r3]
 80019b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019bc:	4618      	mov	r0, r3
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	40023800 	.word	0x40023800
 80019c4:	0800573c 	.word	0x0800573c

080019c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80019cc:	f7ff ffdc 	bl	8001988 <HAL_RCC_GetHCLKFreq>
 80019d0:	4602      	mov	r2, r0
 80019d2:	4b05      	ldr	r3, [pc, #20]	@ (80019e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80019d4:	689b      	ldr	r3, [r3, #8]
 80019d6:	0b5b      	lsrs	r3, r3, #13
 80019d8:	f003 0307 	and.w	r3, r3, #7
 80019dc:	4903      	ldr	r1, [pc, #12]	@ (80019ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80019de:	5ccb      	ldrb	r3, [r1, r3]
 80019e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	40023800 	.word	0x40023800
 80019ec:	0800573c 	.word	0x0800573c

080019f0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b083      	sub	sp, #12
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
 80019f8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	220f      	movs	r2, #15
 80019fe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001a00:	4b12      	ldr	r3, [pc, #72]	@ (8001a4c <HAL_RCC_GetClockConfig+0x5c>)
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	f003 0203 	and.w	r2, r3, #3
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001a0c:	4b0f      	ldr	r3, [pc, #60]	@ (8001a4c <HAL_RCC_GetClockConfig+0x5c>)
 8001a0e:	689b      	ldr	r3, [r3, #8]
 8001a10:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001a18:	4b0c      	ldr	r3, [pc, #48]	@ (8001a4c <HAL_RCC_GetClockConfig+0x5c>)
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001a24:	4b09      	ldr	r3, [pc, #36]	@ (8001a4c <HAL_RCC_GetClockConfig+0x5c>)
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	08db      	lsrs	r3, r3, #3
 8001a2a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001a32:	4b07      	ldr	r3, [pc, #28]	@ (8001a50 <HAL_RCC_GetClockConfig+0x60>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f003 020f 	and.w	r2, r3, #15
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	601a      	str	r2, [r3, #0]
}
 8001a3e:	bf00      	nop
 8001a40:	370c      	adds	r7, #12
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr
 8001a4a:	bf00      	nop
 8001a4c:	40023800 	.word	0x40023800
 8001a50:	40023c00 	.word	0x40023c00

08001a54 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d101      	bne.n	8001a66 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	e01d      	b.n	8001aa2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001a6c:	b2db      	uxtb	r3, r3
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d106      	bne.n	8001a80 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2200      	movs	r2, #0
 8001a76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001a7a:	6878      	ldr	r0, [r7, #4]
 8001a7c:	f000 f815 	bl	8001aaa <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2202      	movs	r2, #2
 8001a84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681a      	ldr	r2, [r3, #0]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	3304      	adds	r3, #4
 8001a90:	4619      	mov	r1, r3
 8001a92:	4610      	mov	r0, r2
 8001a94:	f000 f968 	bl	8001d68 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001aa0:	2300      	movs	r3, #0
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	3708      	adds	r7, #8
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}

08001aaa <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001aaa:	b480      	push	{r7}
 8001aac:	b083      	sub	sp, #12
 8001aae:	af00      	add	r7, sp, #0
 8001ab0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001ab2:	bf00      	nop
 8001ab4:	370c      	adds	r7, #12
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr

08001abe <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001abe:	b480      	push	{r7}
 8001ac0:	b085      	sub	sp, #20
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	68da      	ldr	r2, [r3, #12]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f042 0201 	orr.w	r2, r2, #1
 8001ad4:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	f003 0307 	and.w	r3, r3, #7
 8001ae0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	2b06      	cmp	r3, #6
 8001ae6:	d007      	beq.n	8001af8 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	681a      	ldr	r2, [r3, #0]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f042 0201 	orr.w	r2, r2, #1
 8001af6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001af8:	2300      	movs	r3, #0
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3714      	adds	r7, #20
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr

08001b06 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001b06:	b580      	push	{r7, lr}
 8001b08:	b082      	sub	sp, #8
 8001b0a:	af00      	add	r7, sp, #0
 8001b0c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	691b      	ldr	r3, [r3, #16]
 8001b14:	f003 0302 	and.w	r3, r3, #2
 8001b18:	2b02      	cmp	r3, #2
 8001b1a:	d122      	bne.n	8001b62 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	68db      	ldr	r3, [r3, #12]
 8001b22:	f003 0302 	and.w	r3, r3, #2
 8001b26:	2b02      	cmp	r3, #2
 8001b28:	d11b      	bne.n	8001b62 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f06f 0202 	mvn.w	r2, #2
 8001b32:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2201      	movs	r2, #1
 8001b38:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	699b      	ldr	r3, [r3, #24]
 8001b40:	f003 0303 	and.w	r3, r3, #3
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d003      	beq.n	8001b50 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001b48:	6878      	ldr	r0, [r7, #4]
 8001b4a:	f000 f8ee 	bl	8001d2a <HAL_TIM_IC_CaptureCallback>
 8001b4e:	e005      	b.n	8001b5c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b50:	6878      	ldr	r0, [r7, #4]
 8001b52:	f000 f8e0 	bl	8001d16 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b56:	6878      	ldr	r0, [r7, #4]
 8001b58:	f000 f8f1 	bl	8001d3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2200      	movs	r2, #0
 8001b60:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	691b      	ldr	r3, [r3, #16]
 8001b68:	f003 0304 	and.w	r3, r3, #4
 8001b6c:	2b04      	cmp	r3, #4
 8001b6e:	d122      	bne.n	8001bb6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	68db      	ldr	r3, [r3, #12]
 8001b76:	f003 0304 	and.w	r3, r3, #4
 8001b7a:	2b04      	cmp	r3, #4
 8001b7c:	d11b      	bne.n	8001bb6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f06f 0204 	mvn.w	r2, #4
 8001b86:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2202      	movs	r2, #2
 8001b8c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	699b      	ldr	r3, [r3, #24]
 8001b94:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d003      	beq.n	8001ba4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b9c:	6878      	ldr	r0, [r7, #4]
 8001b9e:	f000 f8c4 	bl	8001d2a <HAL_TIM_IC_CaptureCallback>
 8001ba2:	e005      	b.n	8001bb0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ba4:	6878      	ldr	r0, [r7, #4]
 8001ba6:	f000 f8b6 	bl	8001d16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001baa:	6878      	ldr	r0, [r7, #4]
 8001bac:	f000 f8c7 	bl	8001d3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	691b      	ldr	r3, [r3, #16]
 8001bbc:	f003 0308 	and.w	r3, r3, #8
 8001bc0:	2b08      	cmp	r3, #8
 8001bc2:	d122      	bne.n	8001c0a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	68db      	ldr	r3, [r3, #12]
 8001bca:	f003 0308 	and.w	r3, r3, #8
 8001bce:	2b08      	cmp	r3, #8
 8001bd0:	d11b      	bne.n	8001c0a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f06f 0208 	mvn.w	r2, #8
 8001bda:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2204      	movs	r2, #4
 8001be0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	69db      	ldr	r3, [r3, #28]
 8001be8:	f003 0303 	and.w	r3, r3, #3
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d003      	beq.n	8001bf8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001bf0:	6878      	ldr	r0, [r7, #4]
 8001bf2:	f000 f89a 	bl	8001d2a <HAL_TIM_IC_CaptureCallback>
 8001bf6:	e005      	b.n	8001c04 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bf8:	6878      	ldr	r0, [r7, #4]
 8001bfa:	f000 f88c 	bl	8001d16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bfe:	6878      	ldr	r0, [r7, #4]
 8001c00:	f000 f89d 	bl	8001d3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2200      	movs	r2, #0
 8001c08:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	691b      	ldr	r3, [r3, #16]
 8001c10:	f003 0310 	and.w	r3, r3, #16
 8001c14:	2b10      	cmp	r3, #16
 8001c16:	d122      	bne.n	8001c5e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	68db      	ldr	r3, [r3, #12]
 8001c1e:	f003 0310 	and.w	r3, r3, #16
 8001c22:	2b10      	cmp	r3, #16
 8001c24:	d11b      	bne.n	8001c5e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f06f 0210 	mvn.w	r2, #16
 8001c2e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2208      	movs	r2, #8
 8001c34:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	69db      	ldr	r3, [r3, #28]
 8001c3c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d003      	beq.n	8001c4c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c44:	6878      	ldr	r0, [r7, #4]
 8001c46:	f000 f870 	bl	8001d2a <HAL_TIM_IC_CaptureCallback>
 8001c4a:	e005      	b.n	8001c58 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c4c:	6878      	ldr	r0, [r7, #4]
 8001c4e:	f000 f862 	bl	8001d16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c52:	6878      	ldr	r0, [r7, #4]
 8001c54:	f000 f873 	bl	8001d3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	691b      	ldr	r3, [r3, #16]
 8001c64:	f003 0301 	and.w	r3, r3, #1
 8001c68:	2b01      	cmp	r3, #1
 8001c6a:	d10e      	bne.n	8001c8a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	68db      	ldr	r3, [r3, #12]
 8001c72:	f003 0301 	and.w	r3, r3, #1
 8001c76:	2b01      	cmp	r3, #1
 8001c78:	d107      	bne.n	8001c8a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f06f 0201 	mvn.w	r2, #1
 8001c82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001c84:	6878      	ldr	r0, [r7, #4]
 8001c86:	f7fe fde7 	bl	8000858 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	691b      	ldr	r3, [r3, #16]
 8001c90:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c94:	2b80      	cmp	r3, #128	@ 0x80
 8001c96:	d10e      	bne.n	8001cb6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	68db      	ldr	r3, [r3, #12]
 8001c9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ca2:	2b80      	cmp	r3, #128	@ 0x80
 8001ca4:	d107      	bne.n	8001cb6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001cae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001cb0:	6878      	ldr	r0, [r7, #4]
 8001cb2:	f000 f903 	bl	8001ebc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	691b      	ldr	r3, [r3, #16]
 8001cbc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001cc0:	2b40      	cmp	r3, #64	@ 0x40
 8001cc2:	d10e      	bne.n	8001ce2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	68db      	ldr	r3, [r3, #12]
 8001cca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001cce:	2b40      	cmp	r3, #64	@ 0x40
 8001cd0:	d107      	bne.n	8001ce2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001cda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001cdc:	6878      	ldr	r0, [r7, #4]
 8001cde:	f000 f838 	bl	8001d52 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	691b      	ldr	r3, [r3, #16]
 8001ce8:	f003 0320 	and.w	r3, r3, #32
 8001cec:	2b20      	cmp	r3, #32
 8001cee:	d10e      	bne.n	8001d0e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	68db      	ldr	r3, [r3, #12]
 8001cf6:	f003 0320 	and.w	r3, r3, #32
 8001cfa:	2b20      	cmp	r3, #32
 8001cfc:	d107      	bne.n	8001d0e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f06f 0220 	mvn.w	r2, #32
 8001d06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001d08:	6878      	ldr	r0, [r7, #4]
 8001d0a:	f000 f8cd 	bl	8001ea8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001d0e:	bf00      	nop
 8001d10:	3708      	adds	r7, #8
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}

08001d16 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d16:	b480      	push	{r7}
 8001d18:	b083      	sub	sp, #12
 8001d1a:	af00      	add	r7, sp, #0
 8001d1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001d1e:	bf00      	nop
 8001d20:	370c      	adds	r7, #12
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr

08001d2a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001d2a:	b480      	push	{r7}
 8001d2c:	b083      	sub	sp, #12
 8001d2e:	af00      	add	r7, sp, #0
 8001d30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001d32:	bf00      	nop
 8001d34:	370c      	adds	r7, #12
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr

08001d3e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001d3e:	b480      	push	{r7}
 8001d40:	b083      	sub	sp, #12
 8001d42:	af00      	add	r7, sp, #0
 8001d44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001d46:	bf00      	nop
 8001d48:	370c      	adds	r7, #12
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d50:	4770      	bx	lr

08001d52 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001d52:	b480      	push	{r7}
 8001d54:	b083      	sub	sp, #12
 8001d56:	af00      	add	r7, sp, #0
 8001d58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001d5a:	bf00      	nop
 8001d5c:	370c      	adds	r7, #12
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr
	...

08001d68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b085      	sub	sp, #20
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
 8001d70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	4a40      	ldr	r2, [pc, #256]	@ (8001e7c <TIM_Base_SetConfig+0x114>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d013      	beq.n	8001da8 <TIM_Base_SetConfig+0x40>
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d86:	d00f      	beq.n	8001da8 <TIM_Base_SetConfig+0x40>
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	4a3d      	ldr	r2, [pc, #244]	@ (8001e80 <TIM_Base_SetConfig+0x118>)
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d00b      	beq.n	8001da8 <TIM_Base_SetConfig+0x40>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	4a3c      	ldr	r2, [pc, #240]	@ (8001e84 <TIM_Base_SetConfig+0x11c>)
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d007      	beq.n	8001da8 <TIM_Base_SetConfig+0x40>
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	4a3b      	ldr	r2, [pc, #236]	@ (8001e88 <TIM_Base_SetConfig+0x120>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d003      	beq.n	8001da8 <TIM_Base_SetConfig+0x40>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	4a3a      	ldr	r2, [pc, #232]	@ (8001e8c <TIM_Base_SetConfig+0x124>)
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d108      	bne.n	8001dba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001dae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	68fa      	ldr	r2, [r7, #12]
 8001db6:	4313      	orrs	r3, r2
 8001db8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	4a2f      	ldr	r2, [pc, #188]	@ (8001e7c <TIM_Base_SetConfig+0x114>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d02b      	beq.n	8001e1a <TIM_Base_SetConfig+0xb2>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001dc8:	d027      	beq.n	8001e1a <TIM_Base_SetConfig+0xb2>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	4a2c      	ldr	r2, [pc, #176]	@ (8001e80 <TIM_Base_SetConfig+0x118>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d023      	beq.n	8001e1a <TIM_Base_SetConfig+0xb2>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	4a2b      	ldr	r2, [pc, #172]	@ (8001e84 <TIM_Base_SetConfig+0x11c>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d01f      	beq.n	8001e1a <TIM_Base_SetConfig+0xb2>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	4a2a      	ldr	r2, [pc, #168]	@ (8001e88 <TIM_Base_SetConfig+0x120>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d01b      	beq.n	8001e1a <TIM_Base_SetConfig+0xb2>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	4a29      	ldr	r2, [pc, #164]	@ (8001e8c <TIM_Base_SetConfig+0x124>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d017      	beq.n	8001e1a <TIM_Base_SetConfig+0xb2>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	4a28      	ldr	r2, [pc, #160]	@ (8001e90 <TIM_Base_SetConfig+0x128>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d013      	beq.n	8001e1a <TIM_Base_SetConfig+0xb2>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	4a27      	ldr	r2, [pc, #156]	@ (8001e94 <TIM_Base_SetConfig+0x12c>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d00f      	beq.n	8001e1a <TIM_Base_SetConfig+0xb2>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	4a26      	ldr	r2, [pc, #152]	@ (8001e98 <TIM_Base_SetConfig+0x130>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d00b      	beq.n	8001e1a <TIM_Base_SetConfig+0xb2>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	4a25      	ldr	r2, [pc, #148]	@ (8001e9c <TIM_Base_SetConfig+0x134>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d007      	beq.n	8001e1a <TIM_Base_SetConfig+0xb2>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	4a24      	ldr	r2, [pc, #144]	@ (8001ea0 <TIM_Base_SetConfig+0x138>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d003      	beq.n	8001e1a <TIM_Base_SetConfig+0xb2>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	4a23      	ldr	r2, [pc, #140]	@ (8001ea4 <TIM_Base_SetConfig+0x13c>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d108      	bne.n	8001e2c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001e20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	68db      	ldr	r3, [r3, #12]
 8001e26:	68fa      	ldr	r2, [r7, #12]
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	695b      	ldr	r3, [r3, #20]
 8001e36:	4313      	orrs	r3, r2
 8001e38:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	68fa      	ldr	r2, [r7, #12]
 8001e3e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	689a      	ldr	r2, [r3, #8]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	4a0a      	ldr	r2, [pc, #40]	@ (8001e7c <TIM_Base_SetConfig+0x114>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d003      	beq.n	8001e60 <TIM_Base_SetConfig+0xf8>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	4a0c      	ldr	r2, [pc, #48]	@ (8001e8c <TIM_Base_SetConfig+0x124>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d103      	bne.n	8001e68 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	691a      	ldr	r2, [r3, #16]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	615a      	str	r2, [r3, #20]
}
 8001e6e:	bf00      	nop
 8001e70:	3714      	adds	r7, #20
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr
 8001e7a:	bf00      	nop
 8001e7c:	40010000 	.word	0x40010000
 8001e80:	40000400 	.word	0x40000400
 8001e84:	40000800 	.word	0x40000800
 8001e88:	40000c00 	.word	0x40000c00
 8001e8c:	40010400 	.word	0x40010400
 8001e90:	40014000 	.word	0x40014000
 8001e94:	40014400 	.word	0x40014400
 8001e98:	40014800 	.word	0x40014800
 8001e9c:	40001800 	.word	0x40001800
 8001ea0:	40001c00 	.word	0x40001c00
 8001ea4:	40002000 	.word	0x40002000

08001ea8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b083      	sub	sp, #12
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001eb0:	bf00      	nop
 8001eb2:	370c      	adds	r7, #12
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr

08001ebc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b083      	sub	sp, #12
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001ec4:	bf00      	nop
 8001ec6:	370c      	adds	r7, #12
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ece:	4770      	bx	lr

08001ed0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b082      	sub	sp, #8
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d101      	bne.n	8001ee2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e03f      	b.n	8001f62 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8001ee8:	b2db      	uxtb	r3, r3
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d106      	bne.n	8001efc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001ef6:	6878      	ldr	r0, [r7, #4]
 8001ef8:	f7fe fcf0 	bl	80008dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2224      	movs	r2, #36	@ 0x24
 8001f00:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	68da      	ldr	r2, [r3, #12]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001f12:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001f14:	6878      	ldr	r0, [r7, #4]
 8001f16:	f000 f829 	bl	8001f6c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	691a      	ldr	r2, [r3, #16]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001f28:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	695a      	ldr	r2, [r3, #20]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001f38:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	68da      	ldr	r2, [r3, #12]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001f48:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	63da      	str	r2, [r3, #60]	@ 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2220      	movs	r2, #32
 8001f54:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2220      	movs	r2, #32
 8001f5c:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

  return HAL_OK;
 8001f60:	2300      	movs	r3, #0
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	3708      	adds	r7, #8
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
	...

08001f6c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001f6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001f70:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	f8c7 01fc 	str.w	r0, [r7, #508]	@ 0x1fc
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001f7a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	691b      	ldr	r3, [r3, #16]
 8001f82:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8001f86:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8001f8a:	68d9      	ldr	r1, [r3, #12]
 8001f8c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8001f90:	681a      	ldr	r2, [r3, #0]
 8001f92:	ea40 0301 	orr.w	r3, r0, r1
 8001f96:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001f98:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8001f9c:	689a      	ldr	r2, [r3, #8]
 8001f9e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8001fa2:	691b      	ldr	r3, [r3, #16]
 8001fa4:	431a      	orrs	r2, r3
 8001fa6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8001faa:	695b      	ldr	r3, [r3, #20]
 8001fac:	431a      	orrs	r2, r3
 8001fae:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8001fb2:	69db      	ldr	r3, [r3, #28]
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	f8c7 3204 	str.w	r3, [r7, #516]	@ 0x204
  MODIFY_REG(huart->Instance->CR1,
 8001fba:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	68db      	ldr	r3, [r3, #12]
 8001fc2:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8001fc6:	f021 010c 	bic.w	r1, r1, #12
 8001fca:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
 8001fd4:	430b      	orrs	r3, r1
 8001fd6:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001fd8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	695b      	ldr	r3, [r3, #20]
 8001fe0:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8001fe4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8001fe8:	6999      	ldr	r1, [r3, #24]
 8001fea:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	ea40 0301 	orr.w	r3, r0, r1
 8001ff4:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001ff6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8001ffa:	69db      	ldr	r3, [r3, #28]
 8001ffc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002000:	f040 824a 	bne.w	8002498 <UART_SetConfig+0x52c>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002004:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8002008:	681a      	ldr	r2, [r3, #0]
 800200a:	4b96      	ldr	r3, [pc, #600]	@ (8002264 <UART_SetConfig+0x2f8>)
 800200c:	429a      	cmp	r2, r3
 800200e:	d006      	beq.n	800201e <UART_SetConfig+0xb2>
 8002010:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	4b94      	ldr	r3, [pc, #592]	@ (8002268 <UART_SetConfig+0x2fc>)
 8002018:	429a      	cmp	r2, r3
 800201a:	f040 8129 	bne.w	8002270 <UART_SetConfig+0x304>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800201e:	f7ff fcd3 	bl	80019c8 <HAL_RCC_GetPCLK2Freq>
 8002022:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002026:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800202a:	2200      	movs	r2, #0
 800202c:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
 8002030:	f8c7 21f4 	str.w	r2, [r7, #500]	@ 0x1f4
 8002034:	e9d7 457c 	ldrd	r4, r5, [r7, #496]	@ 0x1f0
 8002038:	4622      	mov	r2, r4
 800203a:	462b      	mov	r3, r5
 800203c:	1891      	adds	r1, r2, r2
 800203e:	f8c7 10d0 	str.w	r1, [r7, #208]	@ 0xd0
 8002042:	415b      	adcs	r3, r3
 8002044:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8002048:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	@ 0xd0
 800204c:	4621      	mov	r1, r4
 800204e:	1851      	adds	r1, r2, r1
 8002050:	f8c7 10c8 	str.w	r1, [r7, #200]	@ 0xc8
 8002054:	4629      	mov	r1, r5
 8002056:	414b      	adcs	r3, r1
 8002058:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800205c:	f04f 0200 	mov.w	r2, #0
 8002060:	f04f 0300 	mov.w	r3, #0
 8002064:	e9d7 8932 	ldrd	r8, r9, [r7, #200]	@ 0xc8
 8002068:	4649      	mov	r1, r9
 800206a:	00cb      	lsls	r3, r1, #3
 800206c:	4641      	mov	r1, r8
 800206e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002072:	4641      	mov	r1, r8
 8002074:	00ca      	lsls	r2, r1, #3
 8002076:	4610      	mov	r0, r2
 8002078:	4619      	mov	r1, r3
 800207a:	4603      	mov	r3, r0
 800207c:	4622      	mov	r2, r4
 800207e:	189b      	adds	r3, r3, r2
 8002080:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 8002084:	462b      	mov	r3, r5
 8002086:	460a      	mov	r2, r1
 8002088:	eb42 0303 	adc.w	r3, r2, r3
 800208c:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
 8002090:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	2200      	movs	r2, #0
 8002098:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 800209c:	f8c7 21e4 	str.w	r2, [r7, #484]	@ 0x1e4
 80020a0:	e9d7 1278 	ldrd	r1, r2, [r7, #480]	@ 0x1e0
 80020a4:	460b      	mov	r3, r1
 80020a6:	18db      	adds	r3, r3, r3
 80020a8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80020ac:	4613      	mov	r3, r2
 80020ae:	eb42 0303 	adc.w	r3, r2, r3
 80020b2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80020b6:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	@ 0xc0
 80020ba:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	@ 0x1e8
 80020be:	f7fe f8d1 	bl	8000264 <__aeabi_uldivmod>
 80020c2:	4602      	mov	r2, r0
 80020c4:	460b      	mov	r3, r1
 80020c6:	4b69      	ldr	r3, [pc, #420]	@ (800226c <UART_SetConfig+0x300>)
 80020c8:	fba3 2302 	umull	r2, r3, r3, r2
 80020cc:	095b      	lsrs	r3, r3, #5
 80020ce:	011c      	lsls	r4, r3, #4
 80020d0:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80020d4:	2200      	movs	r2, #0
 80020d6:	f8c7 31d8 	str.w	r3, [r7, #472]	@ 0x1d8
 80020da:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 80020de:	e9d7 8976 	ldrd	r8, r9, [r7, #472]	@ 0x1d8
 80020e2:	4642      	mov	r2, r8
 80020e4:	464b      	mov	r3, r9
 80020e6:	1891      	adds	r1, r2, r2
 80020e8:	f8c7 10b8 	str.w	r1, [r7, #184]	@ 0xb8
 80020ec:	415b      	adcs	r3, r3
 80020ee:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80020f2:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	@ 0xb8
 80020f6:	4641      	mov	r1, r8
 80020f8:	1851      	adds	r1, r2, r1
 80020fa:	f8c7 10b0 	str.w	r1, [r7, #176]	@ 0xb0
 80020fe:	4649      	mov	r1, r9
 8002100:	414b      	adcs	r3, r1
 8002102:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002106:	f04f 0200 	mov.w	r2, #0
 800210a:	f04f 0300 	mov.w	r3, #0
 800210e:	e9d7 ab2c 	ldrd	sl, fp, [r7, #176]	@ 0xb0
 8002112:	4659      	mov	r1, fp
 8002114:	00cb      	lsls	r3, r1, #3
 8002116:	4651      	mov	r1, sl
 8002118:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800211c:	4651      	mov	r1, sl
 800211e:	00ca      	lsls	r2, r1, #3
 8002120:	4610      	mov	r0, r2
 8002122:	4619      	mov	r1, r3
 8002124:	4603      	mov	r3, r0
 8002126:	4642      	mov	r2, r8
 8002128:	189b      	adds	r3, r3, r2
 800212a:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
 800212e:	464b      	mov	r3, r9
 8002130:	460a      	mov	r2, r1
 8002132:	eb42 0303 	adc.w	r3, r2, r3
 8002136:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
 800213a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	2200      	movs	r2, #0
 8002142:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8002146:	f8c7 21cc 	str.w	r2, [r7, #460]	@ 0x1cc
 800214a:	e9d7 1272 	ldrd	r1, r2, [r7, #456]	@ 0x1c8
 800214e:	460b      	mov	r3, r1
 8002150:	18db      	adds	r3, r3, r3
 8002152:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002156:	4613      	mov	r3, r2
 8002158:	eb42 0303 	adc.w	r3, r2, r3
 800215c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002160:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	@ 0xa8
 8002164:	e9d7 0174 	ldrd	r0, r1, [r7, #464]	@ 0x1d0
 8002168:	f7fe f87c 	bl	8000264 <__aeabi_uldivmod>
 800216c:	4602      	mov	r2, r0
 800216e:	460b      	mov	r3, r1
 8002170:	4611      	mov	r1, r2
 8002172:	4b3e      	ldr	r3, [pc, #248]	@ (800226c <UART_SetConfig+0x300>)
 8002174:	fba3 2301 	umull	r2, r3, r3, r1
 8002178:	095b      	lsrs	r3, r3, #5
 800217a:	2264      	movs	r2, #100	@ 0x64
 800217c:	fb02 f303 	mul.w	r3, r2, r3
 8002180:	1acb      	subs	r3, r1, r3
 8002182:	00db      	lsls	r3, r3, #3
 8002184:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002188:	4b38      	ldr	r3, [pc, #224]	@ (800226c <UART_SetConfig+0x300>)
 800218a:	fba3 2302 	umull	r2, r3, r3, r2
 800218e:	095b      	lsrs	r3, r3, #5
 8002190:	005b      	lsls	r3, r3, #1
 8002192:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002196:	441c      	add	r4, r3
 8002198:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800219c:	2200      	movs	r2, #0
 800219e:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 80021a2:	f8c7 21c4 	str.w	r2, [r7, #452]	@ 0x1c4
 80021a6:	e9d7 8970 	ldrd	r8, r9, [r7, #448]	@ 0x1c0
 80021aa:	4642      	mov	r2, r8
 80021ac:	464b      	mov	r3, r9
 80021ae:	1891      	adds	r1, r2, r2
 80021b0:	f8c7 10a0 	str.w	r1, [r7, #160]	@ 0xa0
 80021b4:	415b      	adcs	r3, r3
 80021b6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80021ba:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 80021be:	4641      	mov	r1, r8
 80021c0:	1851      	adds	r1, r2, r1
 80021c2:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
 80021c6:	4649      	mov	r1, r9
 80021c8:	414b      	adcs	r3, r1
 80021ca:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80021ce:	f04f 0200 	mov.w	r2, #0
 80021d2:	f04f 0300 	mov.w	r3, #0
 80021d6:	e9d7 ab26 	ldrd	sl, fp, [r7, #152]	@ 0x98
 80021da:	4659      	mov	r1, fp
 80021dc:	00cb      	lsls	r3, r1, #3
 80021de:	4651      	mov	r1, sl
 80021e0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80021e4:	4651      	mov	r1, sl
 80021e6:	00ca      	lsls	r2, r1, #3
 80021e8:	4610      	mov	r0, r2
 80021ea:	4619      	mov	r1, r3
 80021ec:	4603      	mov	r3, r0
 80021ee:	4642      	mov	r2, r8
 80021f0:	189b      	adds	r3, r3, r2
 80021f2:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
 80021f6:	464b      	mov	r3, r9
 80021f8:	460a      	mov	r2, r1
 80021fa:	eb42 0303 	adc.w	r3, r2, r3
 80021fe:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8002202:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	2200      	movs	r2, #0
 800220a:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
 800220e:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
 8002212:	e9d7 126c 	ldrd	r1, r2, [r7, #432]	@ 0x1b0
 8002216:	460b      	mov	r3, r1
 8002218:	18db      	adds	r3, r3, r3
 800221a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800221e:	4613      	mov	r3, r2
 8002220:	eb42 0303 	adc.w	r3, r2, r3
 8002224:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002228:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 800222c:	e9d7 016e 	ldrd	r0, r1, [r7, #440]	@ 0x1b8
 8002230:	f7fe f818 	bl	8000264 <__aeabi_uldivmod>
 8002234:	4602      	mov	r2, r0
 8002236:	460b      	mov	r3, r1
 8002238:	4b0c      	ldr	r3, [pc, #48]	@ (800226c <UART_SetConfig+0x300>)
 800223a:	fba3 1302 	umull	r1, r3, r3, r2
 800223e:	095b      	lsrs	r3, r3, #5
 8002240:	2164      	movs	r1, #100	@ 0x64
 8002242:	fb01 f303 	mul.w	r3, r1, r3
 8002246:	1ad3      	subs	r3, r2, r3
 8002248:	00db      	lsls	r3, r3, #3
 800224a:	3332      	adds	r3, #50	@ 0x32
 800224c:	4a07      	ldr	r2, [pc, #28]	@ (800226c <UART_SetConfig+0x300>)
 800224e:	fba2 2303 	umull	r2, r3, r2, r3
 8002252:	095b      	lsrs	r3, r3, #5
 8002254:	f003 0207 	and.w	r2, r3, #7
 8002258:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4422      	add	r2, r4
 8002260:	609a      	str	r2, [r3, #8]
 8002262:	e34a      	b.n	80028fa <UART_SetConfig+0x98e>
 8002264:	40011000 	.word	0x40011000
 8002268:	40011400 	.word	0x40011400
 800226c:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002270:	f7ff fb96 	bl	80019a0 <HAL_RCC_GetPCLK1Freq>
 8002274:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002278:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800227c:	2200      	movs	r2, #0
 800227e:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8002282:	f8c7 21ac 	str.w	r2, [r7, #428]	@ 0x1ac
 8002286:	e9d7 456a 	ldrd	r4, r5, [r7, #424]	@ 0x1a8
 800228a:	4622      	mov	r2, r4
 800228c:	462b      	mov	r3, r5
 800228e:	1891      	adds	r1, r2, r2
 8002290:	f8c7 1088 	str.w	r1, [r7, #136]	@ 0x88
 8002294:	415b      	adcs	r3, r3
 8002296:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800229a:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800229e:	4621      	mov	r1, r4
 80022a0:	eb12 0a01 	adds.w	sl, r2, r1
 80022a4:	4629      	mov	r1, r5
 80022a6:	eb43 0b01 	adc.w	fp, r3, r1
 80022aa:	f04f 0200 	mov.w	r2, #0
 80022ae:	f04f 0300 	mov.w	r3, #0
 80022b2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80022b6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80022ba:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80022be:	4692      	mov	sl, r2
 80022c0:	469b      	mov	fp, r3
 80022c2:	4623      	mov	r3, r4
 80022c4:	eb1a 0303 	adds.w	r3, sl, r3
 80022c8:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 80022cc:	462b      	mov	r3, r5
 80022ce:	eb4b 0303 	adc.w	r3, fp, r3
 80022d2:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 80022d6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	2200      	movs	r2, #0
 80022de:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
 80022e2:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 80022e6:	e9d7 1266 	ldrd	r1, r2, [r7, #408]	@ 0x198
 80022ea:	460b      	mov	r3, r1
 80022ec:	18db      	adds	r3, r3, r3
 80022ee:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80022f2:	4613      	mov	r3, r2
 80022f4:	eb42 0303 	adc.w	r3, r2, r3
 80022f8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80022fc:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8002300:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	@ 0x1a0
 8002304:	f7fd ffae 	bl	8000264 <__aeabi_uldivmod>
 8002308:	4602      	mov	r2, r0
 800230a:	460b      	mov	r3, r1
 800230c:	4b61      	ldr	r3, [pc, #388]	@ (8002494 <UART_SetConfig+0x528>)
 800230e:	fba3 2302 	umull	r2, r3, r3, r2
 8002312:	095b      	lsrs	r3, r3, #5
 8002314:	011c      	lsls	r4, r3, #4
 8002316:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800231a:	2200      	movs	r2, #0
 800231c:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
 8002320:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
 8002324:	e9d7 8964 	ldrd	r8, r9, [r7, #400]	@ 0x190
 8002328:	4642      	mov	r2, r8
 800232a:	464b      	mov	r3, r9
 800232c:	1891      	adds	r1, r2, r2
 800232e:	67b9      	str	r1, [r7, #120]	@ 0x78
 8002330:	415b      	adcs	r3, r3
 8002332:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002334:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 8002338:	4641      	mov	r1, r8
 800233a:	1851      	adds	r1, r2, r1
 800233c:	6739      	str	r1, [r7, #112]	@ 0x70
 800233e:	4649      	mov	r1, r9
 8002340:	414b      	adcs	r3, r1
 8002342:	677b      	str	r3, [r7, #116]	@ 0x74
 8002344:	f04f 0200 	mov.w	r2, #0
 8002348:	f04f 0300 	mov.w	r3, #0
 800234c:	e9d7 ab1c 	ldrd	sl, fp, [r7, #112]	@ 0x70
 8002350:	4659      	mov	r1, fp
 8002352:	00cb      	lsls	r3, r1, #3
 8002354:	4651      	mov	r1, sl
 8002356:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800235a:	4651      	mov	r1, sl
 800235c:	00ca      	lsls	r2, r1, #3
 800235e:	4610      	mov	r0, r2
 8002360:	4619      	mov	r1, r3
 8002362:	4603      	mov	r3, r0
 8002364:	4642      	mov	r2, r8
 8002366:	189b      	adds	r3, r3, r2
 8002368:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 800236c:	464b      	mov	r3, r9
 800236e:	460a      	mov	r2, r1
 8002370:	eb42 0303 	adc.w	r3, r2, r3
 8002374:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
 8002378:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	2200      	movs	r2, #0
 8002380:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8002384:	f8c7 2184 	str.w	r2, [r7, #388]	@ 0x184
 8002388:	e9d7 1260 	ldrd	r1, r2, [r7, #384]	@ 0x180
 800238c:	460b      	mov	r3, r1
 800238e:	18db      	adds	r3, r3, r3
 8002390:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002392:	4613      	mov	r3, r2
 8002394:	eb42 0303 	adc.w	r3, r2, r3
 8002398:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800239a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800239e:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 80023a2:	f7fd ff5f 	bl	8000264 <__aeabi_uldivmod>
 80023a6:	4602      	mov	r2, r0
 80023a8:	460b      	mov	r3, r1
 80023aa:	4611      	mov	r1, r2
 80023ac:	4b39      	ldr	r3, [pc, #228]	@ (8002494 <UART_SetConfig+0x528>)
 80023ae:	fba3 2301 	umull	r2, r3, r3, r1
 80023b2:	095b      	lsrs	r3, r3, #5
 80023b4:	2264      	movs	r2, #100	@ 0x64
 80023b6:	fb02 f303 	mul.w	r3, r2, r3
 80023ba:	1acb      	subs	r3, r1, r3
 80023bc:	00db      	lsls	r3, r3, #3
 80023be:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80023c2:	4b34      	ldr	r3, [pc, #208]	@ (8002494 <UART_SetConfig+0x528>)
 80023c4:	fba3 2302 	umull	r2, r3, r3, r2
 80023c8:	095b      	lsrs	r3, r3, #5
 80023ca:	005b      	lsls	r3, r3, #1
 80023cc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80023d0:	441c      	add	r4, r3
 80023d2:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80023d6:	2200      	movs	r2, #0
 80023d8:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
 80023dc:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 80023e0:	e9d7 895e 	ldrd	r8, r9, [r7, #376]	@ 0x178
 80023e4:	4642      	mov	r2, r8
 80023e6:	464b      	mov	r3, r9
 80023e8:	1891      	adds	r1, r2, r2
 80023ea:	6639      	str	r1, [r7, #96]	@ 0x60
 80023ec:	415b      	adcs	r3, r3
 80023ee:	667b      	str	r3, [r7, #100]	@ 0x64
 80023f0:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 80023f4:	4641      	mov	r1, r8
 80023f6:	1851      	adds	r1, r2, r1
 80023f8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80023fa:	4649      	mov	r1, r9
 80023fc:	414b      	adcs	r3, r1
 80023fe:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002400:	f04f 0200 	mov.w	r2, #0
 8002404:	f04f 0300 	mov.w	r3, #0
 8002408:	e9d7 ab16 	ldrd	sl, fp, [r7, #88]	@ 0x58
 800240c:	4659      	mov	r1, fp
 800240e:	00cb      	lsls	r3, r1, #3
 8002410:	4651      	mov	r1, sl
 8002412:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002416:	4651      	mov	r1, sl
 8002418:	00ca      	lsls	r2, r1, #3
 800241a:	4610      	mov	r0, r2
 800241c:	4619      	mov	r1, r3
 800241e:	4603      	mov	r3, r0
 8002420:	4642      	mov	r2, r8
 8002422:	189b      	adds	r3, r3, r2
 8002424:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
 8002428:	464b      	mov	r3, r9
 800242a:	460a      	mov	r2, r1
 800242c:	eb42 0303 	adc.w	r3, r2, r3
 8002430:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
 8002434:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	2200      	movs	r2, #0
 800243c:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
 8002440:	f8c7 216c 	str.w	r2, [r7, #364]	@ 0x16c
 8002444:	e9d7 125a 	ldrd	r1, r2, [r7, #360]	@ 0x168
 8002448:	460b      	mov	r3, r1
 800244a:	18db      	adds	r3, r3, r3
 800244c:	653b      	str	r3, [r7, #80]	@ 0x50
 800244e:	4613      	mov	r3, r2
 8002450:	eb42 0303 	adc.w	r3, r2, r3
 8002454:	657b      	str	r3, [r7, #84]	@ 0x54
 8002456:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800245a:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	@ 0x170
 800245e:	f7fd ff01 	bl	8000264 <__aeabi_uldivmod>
 8002462:	4602      	mov	r2, r0
 8002464:	460b      	mov	r3, r1
 8002466:	4b0b      	ldr	r3, [pc, #44]	@ (8002494 <UART_SetConfig+0x528>)
 8002468:	fba3 1302 	umull	r1, r3, r3, r2
 800246c:	095b      	lsrs	r3, r3, #5
 800246e:	2164      	movs	r1, #100	@ 0x64
 8002470:	fb01 f303 	mul.w	r3, r1, r3
 8002474:	1ad3      	subs	r3, r2, r3
 8002476:	00db      	lsls	r3, r3, #3
 8002478:	3332      	adds	r3, #50	@ 0x32
 800247a:	4a06      	ldr	r2, [pc, #24]	@ (8002494 <UART_SetConfig+0x528>)
 800247c:	fba2 2303 	umull	r2, r3, r2, r3
 8002480:	095b      	lsrs	r3, r3, #5
 8002482:	f003 0207 	and.w	r2, r3, #7
 8002486:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4422      	add	r2, r4
 800248e:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8002490:	e233      	b.n	80028fa <UART_SetConfig+0x98e>
 8002492:	bf00      	nop
 8002494:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002498:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	4b8d      	ldr	r3, [pc, #564]	@ (80026d4 <UART_SetConfig+0x768>)
 80024a0:	429a      	cmp	r2, r3
 80024a2:	d006      	beq.n	80024b2 <UART_SetConfig+0x546>
 80024a4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	4b8b      	ldr	r3, [pc, #556]	@ (80026d8 <UART_SetConfig+0x76c>)
 80024ac:	429a      	cmp	r2, r3
 80024ae:	f040 8117 	bne.w	80026e0 <UART_SetConfig+0x774>
      pclk = HAL_RCC_GetPCLK2Freq();
 80024b2:	f7ff fa89 	bl	80019c8 <HAL_RCC_GetPCLK2Freq>
 80024b6:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80024ba:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80024be:	2200      	movs	r2, #0
 80024c0:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
 80024c4:	f8c7 2164 	str.w	r2, [r7, #356]	@ 0x164
 80024c8:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	@ 0x160
 80024cc:	4622      	mov	r2, r4
 80024ce:	462b      	mov	r3, r5
 80024d0:	1891      	adds	r1, r2, r2
 80024d2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80024d4:	415b      	adcs	r3, r3
 80024d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80024d8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80024dc:	4621      	mov	r1, r4
 80024de:	eb12 0801 	adds.w	r8, r2, r1
 80024e2:	4629      	mov	r1, r5
 80024e4:	eb43 0901 	adc.w	r9, r3, r1
 80024e8:	f04f 0200 	mov.w	r2, #0
 80024ec:	f04f 0300 	mov.w	r3, #0
 80024f0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80024f4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80024f8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80024fc:	4690      	mov	r8, r2
 80024fe:	4699      	mov	r9, r3
 8002500:	4623      	mov	r3, r4
 8002502:	eb18 0303 	adds.w	r3, r8, r3
 8002506:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 800250a:	462b      	mov	r3, r5
 800250c:	eb49 0303 	adc.w	r3, r9, r3
 8002510:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
 8002514:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	2200      	movs	r2, #0
 800251c:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8002520:	f8c7 2154 	str.w	r2, [r7, #340]	@ 0x154
 8002524:	f04f 0200 	mov.w	r2, #0
 8002528:	f04f 0300 	mov.w	r3, #0
 800252c:	e9d7 4554 	ldrd	r4, r5, [r7, #336]	@ 0x150
 8002530:	4629      	mov	r1, r5
 8002532:	008b      	lsls	r3, r1, #2
 8002534:	4621      	mov	r1, r4
 8002536:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800253a:	4621      	mov	r1, r4
 800253c:	008a      	lsls	r2, r1, #2
 800253e:	e9d7 0156 	ldrd	r0, r1, [r7, #344]	@ 0x158
 8002542:	f7fd fe8f 	bl	8000264 <__aeabi_uldivmod>
 8002546:	4602      	mov	r2, r0
 8002548:	460b      	mov	r3, r1
 800254a:	4b64      	ldr	r3, [pc, #400]	@ (80026dc <UART_SetConfig+0x770>)
 800254c:	fba3 2302 	umull	r2, r3, r3, r2
 8002550:	095b      	lsrs	r3, r3, #5
 8002552:	011c      	lsls	r4, r3, #4
 8002554:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002558:	2200      	movs	r2, #0
 800255a:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
 800255e:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8002562:	e9d7 8952 	ldrd	r8, r9, [r7, #328]	@ 0x148
 8002566:	4642      	mov	r2, r8
 8002568:	464b      	mov	r3, r9
 800256a:	1891      	adds	r1, r2, r2
 800256c:	6439      	str	r1, [r7, #64]	@ 0x40
 800256e:	415b      	adcs	r3, r3
 8002570:	647b      	str	r3, [r7, #68]	@ 0x44
 8002572:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002576:	4641      	mov	r1, r8
 8002578:	1851      	adds	r1, r2, r1
 800257a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800257c:	4649      	mov	r1, r9
 800257e:	414b      	adcs	r3, r1
 8002580:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002582:	f04f 0200 	mov.w	r2, #0
 8002586:	f04f 0300 	mov.w	r3, #0
 800258a:	e9d7 ab0e 	ldrd	sl, fp, [r7, #56]	@ 0x38
 800258e:	4659      	mov	r1, fp
 8002590:	00cb      	lsls	r3, r1, #3
 8002592:	4651      	mov	r1, sl
 8002594:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002598:	4651      	mov	r1, sl
 800259a:	00ca      	lsls	r2, r1, #3
 800259c:	4610      	mov	r0, r2
 800259e:	4619      	mov	r1, r3
 80025a0:	4603      	mov	r3, r0
 80025a2:	4642      	mov	r2, r8
 80025a4:	189b      	adds	r3, r3, r2
 80025a6:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 80025aa:	464b      	mov	r3, r9
 80025ac:	460a      	mov	r2, r1
 80025ae:	eb42 0303 	adc.w	r3, r2, r3
 80025b2:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 80025b6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	2200      	movs	r2, #0
 80025be:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 80025c2:	f8c7 213c 	str.w	r2, [r7, #316]	@ 0x13c
 80025c6:	f04f 0200 	mov.w	r2, #0
 80025ca:	f04f 0300 	mov.w	r3, #0
 80025ce:	e9d7 894e 	ldrd	r8, r9, [r7, #312]	@ 0x138
 80025d2:	4649      	mov	r1, r9
 80025d4:	008b      	lsls	r3, r1, #2
 80025d6:	4641      	mov	r1, r8
 80025d8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80025dc:	4641      	mov	r1, r8
 80025de:	008a      	lsls	r2, r1, #2
 80025e0:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	@ 0x140
 80025e4:	f7fd fe3e 	bl	8000264 <__aeabi_uldivmod>
 80025e8:	4602      	mov	r2, r0
 80025ea:	460b      	mov	r3, r1
 80025ec:	4611      	mov	r1, r2
 80025ee:	4b3b      	ldr	r3, [pc, #236]	@ (80026dc <UART_SetConfig+0x770>)
 80025f0:	fba3 2301 	umull	r2, r3, r3, r1
 80025f4:	095b      	lsrs	r3, r3, #5
 80025f6:	2264      	movs	r2, #100	@ 0x64
 80025f8:	fb02 f303 	mul.w	r3, r2, r3
 80025fc:	1acb      	subs	r3, r1, r3
 80025fe:	011b      	lsls	r3, r3, #4
 8002600:	3332      	adds	r3, #50	@ 0x32
 8002602:	4a36      	ldr	r2, [pc, #216]	@ (80026dc <UART_SetConfig+0x770>)
 8002604:	fba2 2303 	umull	r2, r3, r2, r3
 8002608:	095b      	lsrs	r3, r3, #5
 800260a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800260e:	441c      	add	r4, r3
 8002610:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002614:	2200      	movs	r2, #0
 8002616:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 800261a:	f8c7 2134 	str.w	r2, [r7, #308]	@ 0x134
 800261e:	e9d7 894c 	ldrd	r8, r9, [r7, #304]	@ 0x130
 8002622:	4642      	mov	r2, r8
 8002624:	464b      	mov	r3, r9
 8002626:	1891      	adds	r1, r2, r2
 8002628:	6339      	str	r1, [r7, #48]	@ 0x30
 800262a:	415b      	adcs	r3, r3
 800262c:	637b      	str	r3, [r7, #52]	@ 0x34
 800262e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002632:	4641      	mov	r1, r8
 8002634:	1851      	adds	r1, r2, r1
 8002636:	62b9      	str	r1, [r7, #40]	@ 0x28
 8002638:	4649      	mov	r1, r9
 800263a:	414b      	adcs	r3, r1
 800263c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800263e:	f04f 0200 	mov.w	r2, #0
 8002642:	f04f 0300 	mov.w	r3, #0
 8002646:	e9d7 ab0a 	ldrd	sl, fp, [r7, #40]	@ 0x28
 800264a:	4659      	mov	r1, fp
 800264c:	00cb      	lsls	r3, r1, #3
 800264e:	4651      	mov	r1, sl
 8002650:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002654:	4651      	mov	r1, sl
 8002656:	00ca      	lsls	r2, r1, #3
 8002658:	4610      	mov	r0, r2
 800265a:	4619      	mov	r1, r3
 800265c:	4603      	mov	r3, r0
 800265e:	4642      	mov	r2, r8
 8002660:	189b      	adds	r3, r3, r2
 8002662:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8002666:	464b      	mov	r3, r9
 8002668:	460a      	mov	r2, r1
 800266a:	eb42 0303 	adc.w	r3, r2, r3
 800266e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8002672:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	2200      	movs	r2, #0
 800267a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 800267e:	f8c7 2124 	str.w	r2, [r7, #292]	@ 0x124
 8002682:	f04f 0200 	mov.w	r2, #0
 8002686:	f04f 0300 	mov.w	r3, #0
 800268a:	e9d7 8948 	ldrd	r8, r9, [r7, #288]	@ 0x120
 800268e:	4649      	mov	r1, r9
 8002690:	008b      	lsls	r3, r1, #2
 8002692:	4641      	mov	r1, r8
 8002694:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002698:	4641      	mov	r1, r8
 800269a:	008a      	lsls	r2, r1, #2
 800269c:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	@ 0x128
 80026a0:	f7fd fde0 	bl	8000264 <__aeabi_uldivmod>
 80026a4:	4602      	mov	r2, r0
 80026a6:	460b      	mov	r3, r1
 80026a8:	4b0c      	ldr	r3, [pc, #48]	@ (80026dc <UART_SetConfig+0x770>)
 80026aa:	fba3 1302 	umull	r1, r3, r3, r2
 80026ae:	095b      	lsrs	r3, r3, #5
 80026b0:	2164      	movs	r1, #100	@ 0x64
 80026b2:	fb01 f303 	mul.w	r3, r1, r3
 80026b6:	1ad3      	subs	r3, r2, r3
 80026b8:	011b      	lsls	r3, r3, #4
 80026ba:	3332      	adds	r3, #50	@ 0x32
 80026bc:	4a07      	ldr	r2, [pc, #28]	@ (80026dc <UART_SetConfig+0x770>)
 80026be:	fba2 2303 	umull	r2, r3, r2, r3
 80026c2:	095b      	lsrs	r3, r3, #5
 80026c4:	f003 020f 	and.w	r2, r3, #15
 80026c8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4422      	add	r2, r4
 80026d0:	609a      	str	r2, [r3, #8]
 80026d2:	e112      	b.n	80028fa <UART_SetConfig+0x98e>
 80026d4:	40011000 	.word	0x40011000
 80026d8:	40011400 	.word	0x40011400
 80026dc:	51eb851f 	.word	0x51eb851f
      pclk = HAL_RCC_GetPCLK1Freq();
 80026e0:	f7ff f95e 	bl	80019a0 <HAL_RCC_GetPCLK1Freq>
 80026e4:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80026e8:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80026ec:	2200      	movs	r2, #0
 80026ee:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 80026f2:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 80026f6:	e9d7 8946 	ldrd	r8, r9, [r7, #280]	@ 0x118
 80026fa:	4642      	mov	r2, r8
 80026fc:	464b      	mov	r3, r9
 80026fe:	1891      	adds	r1, r2, r2
 8002700:	6239      	str	r1, [r7, #32]
 8002702:	415b      	adcs	r3, r3
 8002704:	627b      	str	r3, [r7, #36]	@ 0x24
 8002706:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800270a:	4641      	mov	r1, r8
 800270c:	1854      	adds	r4, r2, r1
 800270e:	4649      	mov	r1, r9
 8002710:	eb43 0501 	adc.w	r5, r3, r1
 8002714:	f04f 0200 	mov.w	r2, #0
 8002718:	f04f 0300 	mov.w	r3, #0
 800271c:	00eb      	lsls	r3, r5, #3
 800271e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002722:	00e2      	lsls	r2, r4, #3
 8002724:	4614      	mov	r4, r2
 8002726:	461d      	mov	r5, r3
 8002728:	4643      	mov	r3, r8
 800272a:	18e3      	adds	r3, r4, r3
 800272c:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8002730:	464b      	mov	r3, r9
 8002732:	eb45 0303 	adc.w	r3, r5, r3
 8002736:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 800273a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	2200      	movs	r2, #0
 8002742:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8002746:	f8c7 210c 	str.w	r2, [r7, #268]	@ 0x10c
 800274a:	f04f 0200 	mov.w	r2, #0
 800274e:	f04f 0300 	mov.w	r3, #0
 8002752:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	@ 0x108
 8002756:	4629      	mov	r1, r5
 8002758:	008b      	lsls	r3, r1, #2
 800275a:	4621      	mov	r1, r4
 800275c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002760:	4621      	mov	r1, r4
 8002762:	008a      	lsls	r2, r1, #2
 8002764:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
 8002768:	f7fd fd7c 	bl	8000264 <__aeabi_uldivmod>
 800276c:	4602      	mov	r2, r0
 800276e:	460b      	mov	r3, r1
 8002770:	4b65      	ldr	r3, [pc, #404]	@ (8002908 <UART_SetConfig+0x99c>)
 8002772:	fba3 2302 	umull	r2, r3, r3, r2
 8002776:	095b      	lsrs	r3, r3, #5
 8002778:	011c      	lsls	r4, r3, #4
 800277a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800277e:	2200      	movs	r2, #0
 8002780:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8002784:	f8c7 2104 	str.w	r2, [r7, #260]	@ 0x104
 8002788:	e9d7 8940 	ldrd	r8, r9, [r7, #256]	@ 0x100
 800278c:	4642      	mov	r2, r8
 800278e:	464b      	mov	r3, r9
 8002790:	1891      	adds	r1, r2, r2
 8002792:	61b9      	str	r1, [r7, #24]
 8002794:	415b      	adcs	r3, r3
 8002796:	61fb      	str	r3, [r7, #28]
 8002798:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800279c:	4641      	mov	r1, r8
 800279e:	1851      	adds	r1, r2, r1
 80027a0:	6139      	str	r1, [r7, #16]
 80027a2:	4649      	mov	r1, r9
 80027a4:	414b      	adcs	r3, r1
 80027a6:	617b      	str	r3, [r7, #20]
 80027a8:	f04f 0200 	mov.w	r2, #0
 80027ac:	f04f 0300 	mov.w	r3, #0
 80027b0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80027b4:	4659      	mov	r1, fp
 80027b6:	00cb      	lsls	r3, r1, #3
 80027b8:	4651      	mov	r1, sl
 80027ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80027be:	4651      	mov	r1, sl
 80027c0:	00ca      	lsls	r2, r1, #3
 80027c2:	4610      	mov	r0, r2
 80027c4:	4619      	mov	r1, r3
 80027c6:	4603      	mov	r3, r0
 80027c8:	4642      	mov	r2, r8
 80027ca:	189b      	adds	r3, r3, r2
 80027cc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80027d0:	464b      	mov	r3, r9
 80027d2:	460a      	mov	r2, r1
 80027d4:	eb42 0303 	adc.w	r3, r2, r3
 80027d8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80027dc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	2200      	movs	r2, #0
 80027e4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80027e8:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 80027ec:	f04f 0200 	mov.w	r2, #0
 80027f0:	f04f 0300 	mov.w	r3, #0
 80027f4:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	@ 0xf0
 80027f8:	4649      	mov	r1, r9
 80027fa:	008b      	lsls	r3, r1, #2
 80027fc:	4641      	mov	r1, r8
 80027fe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002802:	4641      	mov	r1, r8
 8002804:	008a      	lsls	r2, r1, #2
 8002806:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	@ 0xf8
 800280a:	f7fd fd2b 	bl	8000264 <__aeabi_uldivmod>
 800280e:	4602      	mov	r2, r0
 8002810:	460b      	mov	r3, r1
 8002812:	4611      	mov	r1, r2
 8002814:	4b3c      	ldr	r3, [pc, #240]	@ (8002908 <UART_SetConfig+0x99c>)
 8002816:	fba3 2301 	umull	r2, r3, r3, r1
 800281a:	095b      	lsrs	r3, r3, #5
 800281c:	2264      	movs	r2, #100	@ 0x64
 800281e:	fb02 f303 	mul.w	r3, r2, r3
 8002822:	1acb      	subs	r3, r1, r3
 8002824:	011b      	lsls	r3, r3, #4
 8002826:	3332      	adds	r3, #50	@ 0x32
 8002828:	4a37      	ldr	r2, [pc, #220]	@ (8002908 <UART_SetConfig+0x99c>)
 800282a:	fba2 2303 	umull	r2, r3, r2, r3
 800282e:	095b      	lsrs	r3, r3, #5
 8002830:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002834:	441c      	add	r4, r3
 8002836:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800283a:	2200      	movs	r2, #0
 800283c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002840:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002844:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 8002848:	4642      	mov	r2, r8
 800284a:	464b      	mov	r3, r9
 800284c:	1891      	adds	r1, r2, r2
 800284e:	60b9      	str	r1, [r7, #8]
 8002850:	415b      	adcs	r3, r3
 8002852:	60fb      	str	r3, [r7, #12]
 8002854:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002858:	4641      	mov	r1, r8
 800285a:	1851      	adds	r1, r2, r1
 800285c:	6039      	str	r1, [r7, #0]
 800285e:	4649      	mov	r1, r9
 8002860:	414b      	adcs	r3, r1
 8002862:	607b      	str	r3, [r7, #4]
 8002864:	f04f 0200 	mov.w	r2, #0
 8002868:	f04f 0300 	mov.w	r3, #0
 800286c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002870:	4659      	mov	r1, fp
 8002872:	00cb      	lsls	r3, r1, #3
 8002874:	4651      	mov	r1, sl
 8002876:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800287a:	4651      	mov	r1, sl
 800287c:	00ca      	lsls	r2, r1, #3
 800287e:	4610      	mov	r0, r2
 8002880:	4619      	mov	r1, r3
 8002882:	4603      	mov	r3, r0
 8002884:	4642      	mov	r2, r8
 8002886:	189b      	adds	r3, r3, r2
 8002888:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800288c:	464b      	mov	r3, r9
 800288e:	460a      	mov	r2, r1
 8002890:	eb42 0303 	adc.w	r3, r2, r3
 8002894:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002898:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	2200      	movs	r2, #0
 80028a0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80028a4:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80028a8:	f04f 0200 	mov.w	r2, #0
 80028ac:	f04f 0300 	mov.w	r3, #0
 80028b0:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	@ 0xd8
 80028b4:	4649      	mov	r1, r9
 80028b6:	008b      	lsls	r3, r1, #2
 80028b8:	4641      	mov	r1, r8
 80028ba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80028be:	4641      	mov	r1, r8
 80028c0:	008a      	lsls	r2, r1, #2
 80028c2:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80028c6:	f7fd fccd 	bl	8000264 <__aeabi_uldivmod>
 80028ca:	4602      	mov	r2, r0
 80028cc:	460b      	mov	r3, r1
 80028ce:	4b0e      	ldr	r3, [pc, #56]	@ (8002908 <UART_SetConfig+0x99c>)
 80028d0:	fba3 1302 	umull	r1, r3, r3, r2
 80028d4:	095b      	lsrs	r3, r3, #5
 80028d6:	2164      	movs	r1, #100	@ 0x64
 80028d8:	fb01 f303 	mul.w	r3, r1, r3
 80028dc:	1ad3      	subs	r3, r2, r3
 80028de:	011b      	lsls	r3, r3, #4
 80028e0:	3332      	adds	r3, #50	@ 0x32
 80028e2:	4a09      	ldr	r2, [pc, #36]	@ (8002908 <UART_SetConfig+0x99c>)
 80028e4:	fba2 2303 	umull	r2, r3, r2, r3
 80028e8:	095b      	lsrs	r3, r3, #5
 80028ea:	f003 020f 	and.w	r2, r3, #15
 80028ee:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4422      	add	r2, r4
 80028f6:	609a      	str	r2, [r3, #8]
}
 80028f8:	e7ff      	b.n	80028fa <UART_SetConfig+0x98e>
 80028fa:	bf00      	nop
 80028fc:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 8002900:	46bd      	mov	sp, r7
 8002902:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002906:	bf00      	nop
 8002908:	51eb851f 	.word	0x51eb851f

0800290c <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800290c:	b480      	push	{r7}
 800290e:	b083      	sub	sp, #12
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	f103 0208 	add.w	r2, r3, #8
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	f04f 32ff 	mov.w	r2, #4294967295
 8002924:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	f103 0208 	add.w	r2, r3, #8
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	f103 0208 	add.w	r2, r3, #8
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2200      	movs	r2, #0
 800293e:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002940:	bf00      	nop
 8002942:	370c      	adds	r7, #12
 8002944:	46bd      	mov	sp, r7
 8002946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294a:	4770      	bx	lr

0800294c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800294c:	b480      	push	{r7}
 800294e:	b083      	sub	sp, #12
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2200      	movs	r2, #0
 8002958:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800295a:	bf00      	nop
 800295c:	370c      	adds	r7, #12
 800295e:	46bd      	mov	sp, r7
 8002960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002964:	4770      	bx	lr

08002966 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8002966:	b480      	push	{r7}
 8002968:	b085      	sub	sp, #20
 800296a:	af00      	add	r7, sp, #0
 800296c:	6078      	str	r0, [r7, #4]
 800296e:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	68fa      	ldr	r2, [r7, #12]
 800297a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	689a      	ldr	r2, [r3, #8]
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	683a      	ldr	r2, [r7, #0]
 800298a:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	683a      	ldr	r2, [r7, #0]
 8002990:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	687a      	ldr	r2, [r7, #4]
 8002996:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	1c5a      	adds	r2, r3, #1
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	601a      	str	r2, [r3, #0]
}
 80029a2:	bf00      	nop
 80029a4:	3714      	adds	r7, #20
 80029a6:	46bd      	mov	sp, r7
 80029a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ac:	4770      	bx	lr

080029ae <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80029ae:	b480      	push	{r7}
 80029b0:	b085      	sub	sp, #20
 80029b2:	af00      	add	r7, sp, #0
 80029b4:	6078      	str	r0, [r7, #4]
 80029b6:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029c4:	d103      	bne.n	80029ce <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	691b      	ldr	r3, [r3, #16]
 80029ca:	60fb      	str	r3, [r7, #12]
 80029cc:	e00c      	b.n	80029e8 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	3308      	adds	r3, #8
 80029d2:	60fb      	str	r3, [r7, #12]
 80029d4:	e002      	b.n	80029dc <vListInsert+0x2e>
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	60fb      	str	r3, [r7, #12]
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	68ba      	ldr	r2, [r7, #8]
 80029e4:	429a      	cmp	r2, r3
 80029e6:	d2f6      	bcs.n	80029d6 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	685a      	ldr	r2, [r3, #4]
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	683a      	ldr	r2, [r7, #0]
 80029f6:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	68fa      	ldr	r2, [r7, #12]
 80029fc:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	683a      	ldr	r2, [r7, #0]
 8002a02:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	687a      	ldr	r2, [r7, #4]
 8002a08:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	1c5a      	adds	r2, r3, #1
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	601a      	str	r2, [r3, #0]
}
 8002a14:	bf00      	nop
 8002a16:	3714      	adds	r7, #20
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1e:	4770      	bx	lr

08002a20 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002a20:	b480      	push	{r7}
 8002a22:	b085      	sub	sp, #20
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	691b      	ldr	r3, [r3, #16]
 8002a2c:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	687a      	ldr	r2, [r7, #4]
 8002a34:	6892      	ldr	r2, [r2, #8]
 8002a36:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	687a      	ldr	r2, [r7, #4]
 8002a3e:	6852      	ldr	r2, [r2, #4]
 8002a40:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	687a      	ldr	r2, [r7, #4]
 8002a48:	429a      	cmp	r2, r3
 8002a4a:	d103      	bne.n	8002a54 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	689a      	ldr	r2, [r3, #8]
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2200      	movs	r2, #0
 8002a58:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	1e5a      	subs	r2, r3, #1
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	3714      	adds	r7, #20
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a72:	4770      	bx	lr

08002a74 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b08c      	sub	sp, #48	@ 0x30
 8002a78:	af04      	add	r7, sp, #16
 8002a7a:	60f8      	str	r0, [r7, #12]
 8002a7c:	60b9      	str	r1, [r7, #8]
 8002a7e:	603b      	str	r3, [r7, #0]
 8002a80:	4613      	mov	r3, r2
 8002a82:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002a84:	88fb      	ldrh	r3, [r7, #6]
 8002a86:	009b      	lsls	r3, r3, #2
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f001 f8d7 	bl	8003c3c <pvPortMalloc>
 8002a8e:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d00e      	beq.n	8002ab4 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002a96:	2058      	movs	r0, #88	@ 0x58
 8002a98:	f001 f8d0 	bl	8003c3c <pvPortMalloc>
 8002a9c:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8002a9e:	69fb      	ldr	r3, [r7, #28]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d003      	beq.n	8002aac <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8002aa4:	69fb      	ldr	r3, [r7, #28]
 8002aa6:	697a      	ldr	r2, [r7, #20]
 8002aa8:	631a      	str	r2, [r3, #48]	@ 0x30
 8002aaa:	e005      	b.n	8002ab8 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8002aac:	6978      	ldr	r0, [r7, #20]
 8002aae:	f001 f9a7 	bl	8003e00 <vPortFree>
 8002ab2:	e001      	b.n	8002ab8 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002ab8:	69fb      	ldr	r3, [r7, #28]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d013      	beq.n	8002ae6 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002abe:	88fa      	ldrh	r2, [r7, #6]
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	9303      	str	r3, [sp, #12]
 8002ac4:	69fb      	ldr	r3, [r7, #28]
 8002ac6:	9302      	str	r3, [sp, #8]
 8002ac8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002aca:	9301      	str	r3, [sp, #4]
 8002acc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ace:	9300      	str	r3, [sp, #0]
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	68b9      	ldr	r1, [r7, #8]
 8002ad4:	68f8      	ldr	r0, [r7, #12]
 8002ad6:	f000 f80e 	bl	8002af6 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002ada:	69f8      	ldr	r0, [r7, #28]
 8002adc:	f000 f8a2 	bl	8002c24 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	61bb      	str	r3, [r7, #24]
 8002ae4:	e002      	b.n	8002aec <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002ae6:	f04f 33ff 	mov.w	r3, #4294967295
 8002aea:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002aec:	69bb      	ldr	r3, [r7, #24]
    }
 8002aee:	4618      	mov	r0, r3
 8002af0:	3720      	adds	r7, #32
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}

08002af6 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002af6:	b580      	push	{r7, lr}
 8002af8:	b088      	sub	sp, #32
 8002afa:	af00      	add	r7, sp, #0
 8002afc:	60f8      	str	r0, [r7, #12]
 8002afe:	60b9      	str	r1, [r7, #8]
 8002b00:	607a      	str	r2, [r7, #4]
 8002b02:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002b04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b06:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	009b      	lsls	r3, r3, #2
 8002b0c:	461a      	mov	r2, r3
 8002b0e:	21a5      	movs	r1, #165	@ 0xa5
 8002b10:	f002 fd7e 	bl	8005610 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002b14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b16:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002b1e:	3b01      	subs	r3, #1
 8002b20:	009b      	lsls	r3, r3, #2
 8002b22:	4413      	add	r3, r2
 8002b24:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002b26:	69bb      	ldr	r3, [r7, #24]
 8002b28:	f023 0307 	bic.w	r3, r3, #7
 8002b2c:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002b2e:	69bb      	ldr	r3, [r7, #24]
 8002b30:	f003 0307 	and.w	r3, r3, #7
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d00b      	beq.n	8002b50 <prvInitialiseNewTask+0x5a>
        __asm volatile
 8002b38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b3c:	f383 8811 	msr	BASEPRI, r3
 8002b40:	f3bf 8f6f 	isb	sy
 8002b44:	f3bf 8f4f 	dsb	sy
 8002b48:	617b      	str	r3, [r7, #20]
    }
 8002b4a:	bf00      	nop
 8002b4c:	bf00      	nop
 8002b4e:	e7fd      	b.n	8002b4c <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d01f      	beq.n	8002b96 <prvInitialiseNewTask+0xa0>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002b56:	2300      	movs	r3, #0
 8002b58:	61fb      	str	r3, [r7, #28]
 8002b5a:	e012      	b.n	8002b82 <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002b5c:	68ba      	ldr	r2, [r7, #8]
 8002b5e:	69fb      	ldr	r3, [r7, #28]
 8002b60:	4413      	add	r3, r2
 8002b62:	7819      	ldrb	r1, [r3, #0]
 8002b64:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002b66:	69fb      	ldr	r3, [r7, #28]
 8002b68:	4413      	add	r3, r2
 8002b6a:	3334      	adds	r3, #52	@ 0x34
 8002b6c:	460a      	mov	r2, r1
 8002b6e:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002b70:	68ba      	ldr	r2, [r7, #8]
 8002b72:	69fb      	ldr	r3, [r7, #28]
 8002b74:	4413      	add	r3, r2
 8002b76:	781b      	ldrb	r3, [r3, #0]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d006      	beq.n	8002b8a <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002b7c:	69fb      	ldr	r3, [r7, #28]
 8002b7e:	3301      	adds	r3, #1
 8002b80:	61fb      	str	r3, [r7, #28]
 8002b82:	69fb      	ldr	r3, [r7, #28]
 8002b84:	2b09      	cmp	r3, #9
 8002b86:	d9e9      	bls.n	8002b5c <prvInitialiseNewTask+0x66>
 8002b88:	e000      	b.n	8002b8c <prvInitialiseNewTask+0x96>
            {
                break;
 8002b8a:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002b8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b8e:	2200      	movs	r2, #0
 8002b90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8002b94:	e003      	b.n	8002b9e <prvInitialiseNewTask+0xa8>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002b96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b98:	2200      	movs	r2, #0
 8002b9a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002b9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ba0:	2b04      	cmp	r3, #4
 8002ba2:	d901      	bls.n	8002ba8 <prvInitialiseNewTask+0xb2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002ba4:	2304      	movs	r3, #4
 8002ba6:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002ba8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002baa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002bac:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8002bae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bb0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002bb2:	649a      	str	r2, [r3, #72]	@ 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8002bb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	64da      	str	r2, [r3, #76]	@ 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002bba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bbc:	3304      	adds	r3, #4
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f7ff fec4 	bl	800294c <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002bc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bc6:	3318      	adds	r3, #24
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f7ff febf 	bl	800294c <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002bce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bd0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002bd2:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002bd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bd6:	f1c3 0205 	rsb	r2, r3, #5
 8002bda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bdc:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002bde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002be0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002be2:	625a      	str	r2, [r3, #36]	@ 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8002be4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002be6:	3350      	adds	r3, #80	@ 0x50
 8002be8:	2204      	movs	r2, #4
 8002bea:	2100      	movs	r1, #0
 8002bec:	4618      	mov	r0, r3
 8002bee:	f002 fd0f 	bl	8005610 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8002bf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bf4:	3354      	adds	r3, #84	@ 0x54
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	2100      	movs	r1, #0
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f002 fd08 	bl	8005610 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002c00:	683a      	ldr	r2, [r7, #0]
 8002c02:	68f9      	ldr	r1, [r7, #12]
 8002c04:	69b8      	ldr	r0, [r7, #24]
 8002c06:	f000 fd77 	bl	80036f8 <pxPortInitialiseStack>
 8002c0a:	4602      	mov	r2, r0
 8002c0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c0e:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002c10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d002      	beq.n	8002c1c <prvInitialiseNewTask+0x126>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002c16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c18:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002c1a:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002c1c:	bf00      	nop
 8002c1e:	3720      	adds	r7, #32
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bd80      	pop	{r7, pc}

08002c24 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002c24:	b5b0      	push	{r4, r5, r7, lr}
 8002c26:	b084      	sub	sp, #16
 8002c28:	af02      	add	r7, sp, #8
 8002c2a:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002c2c:	f000 ff16 	bl	8003a5c <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002c30:	4b3b      	ldr	r3, [pc, #236]	@ (8002d20 <prvAddNewTaskToReadyList+0xfc>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	3301      	adds	r3, #1
 8002c36:	4a3a      	ldr	r2, [pc, #232]	@ (8002d20 <prvAddNewTaskToReadyList+0xfc>)
 8002c38:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002c3a:	4b3a      	ldr	r3, [pc, #232]	@ (8002d24 <prvAddNewTaskToReadyList+0x100>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d109      	bne.n	8002c56 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002c42:	4a38      	ldr	r2, [pc, #224]	@ (8002d24 <prvAddNewTaskToReadyList+0x100>)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002c48:	4b35      	ldr	r3, [pc, #212]	@ (8002d20 <prvAddNewTaskToReadyList+0xfc>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d110      	bne.n	8002c72 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002c50:	f000 fac0 	bl	80031d4 <prvInitialiseTaskLists>
 8002c54:	e00d      	b.n	8002c72 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002c56:	4b34      	ldr	r3, [pc, #208]	@ (8002d28 <prvAddNewTaskToReadyList+0x104>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d109      	bne.n	8002c72 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002c5e:	4b31      	ldr	r3, [pc, #196]	@ (8002d24 <prvAddNewTaskToReadyList+0x100>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c68:	429a      	cmp	r2, r3
 8002c6a:	d802      	bhi.n	8002c72 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002c6c:	4a2d      	ldr	r2, [pc, #180]	@ (8002d24 <prvAddNewTaskToReadyList+0x100>)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002c72:	4b2e      	ldr	r3, [pc, #184]	@ (8002d2c <prvAddNewTaskToReadyList+0x108>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	3301      	adds	r3, #1
 8002c78:	4a2c      	ldr	r2, [pc, #176]	@ (8002d2c <prvAddNewTaskToReadyList+0x108>)
 8002c7a:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002c7c:	4b2b      	ldr	r3, [pc, #172]	@ (8002d2c <prvAddNewTaskToReadyList+0x108>)
 8002c7e:	681a      	ldr	r2, [r3, #0]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	641a      	str	r2, [r3, #64]	@ 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d016      	beq.n	8002cb8 <prvAddNewTaskToReadyList+0x94>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f002 fa41 	bl	8005114 <SEGGER_SYSVIEW_OnTaskCreate>
 8002c92:	6878      	ldr	r0, [r7, #4]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ca2:	461d      	mov	r5, r3
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	461c      	mov	r4, r3
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cae:	1ae3      	subs	r3, r4, r3
 8002cb0:	9300      	str	r3, [sp, #0]
 8002cb2:	462b      	mov	r3, r5
 8002cb4:	f001 f9c4 	bl	8004040 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f002 faae 	bl	800521c <SEGGER_SYSVIEW_OnTaskStartReady>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cc4:	2201      	movs	r2, #1
 8002cc6:	409a      	lsls	r2, r3
 8002cc8:	4b19      	ldr	r3, [pc, #100]	@ (8002d30 <prvAddNewTaskToReadyList+0x10c>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	4a18      	ldr	r2, [pc, #96]	@ (8002d30 <prvAddNewTaskToReadyList+0x10c>)
 8002cd0:	6013      	str	r3, [r2, #0]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002cd6:	4613      	mov	r3, r2
 8002cd8:	009b      	lsls	r3, r3, #2
 8002cda:	4413      	add	r3, r2
 8002cdc:	009b      	lsls	r3, r3, #2
 8002cde:	4a15      	ldr	r2, [pc, #84]	@ (8002d34 <prvAddNewTaskToReadyList+0x110>)
 8002ce0:	441a      	add	r2, r3
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	3304      	adds	r3, #4
 8002ce6:	4619      	mov	r1, r3
 8002ce8:	4610      	mov	r0, r2
 8002cea:	f7ff fe3c 	bl	8002966 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002cee:	f000 fee7 	bl	8003ac0 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002cf2:	4b0d      	ldr	r3, [pc, #52]	@ (8002d28 <prvAddNewTaskToReadyList+0x104>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d00e      	beq.n	8002d18 <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002cfa:	4b0a      	ldr	r3, [pc, #40]	@ (8002d24 <prvAddNewTaskToReadyList+0x100>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d04:	429a      	cmp	r2, r3
 8002d06:	d207      	bcs.n	8002d18 <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8002d08:	4b0b      	ldr	r3, [pc, #44]	@ (8002d38 <prvAddNewTaskToReadyList+0x114>)
 8002d0a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002d0e:	601a      	str	r2, [r3, #0]
 8002d10:	f3bf 8f4f 	dsb	sy
 8002d14:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002d18:	bf00      	nop
 8002d1a:	3708      	adds	r7, #8
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bdb0      	pop	{r4, r5, r7, pc}
 8002d20:	20000194 	.word	0x20000194
 8002d24:	200000bc 	.word	0x200000bc
 8002d28:	200001a0 	.word	0x200001a0
 8002d2c:	200001b0 	.word	0x200001b0
 8002d30:	2000019c 	.word	0x2000019c
 8002d34:	200000c0 	.word	0x200000c0
 8002d38:	e000ed04 	.word	0xe000ed04

08002d3c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b086      	sub	sp, #24
 8002d40:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8002d42:	4b24      	ldr	r3, [pc, #144]	@ (8002dd4 <vTaskStartScheduler+0x98>)
 8002d44:	9301      	str	r3, [sp, #4]
 8002d46:	2300      	movs	r3, #0
 8002d48:	9300      	str	r3, [sp, #0]
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	2282      	movs	r2, #130	@ 0x82
 8002d4e:	4922      	ldr	r1, [pc, #136]	@ (8002dd8 <vTaskStartScheduler+0x9c>)
 8002d50:	4822      	ldr	r0, [pc, #136]	@ (8002ddc <vTaskStartScheduler+0xa0>)
 8002d52:	f7ff fe8f 	bl	8002a74 <xTaskCreate>
 8002d56:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	2b01      	cmp	r3, #1
 8002d5c:	d124      	bne.n	8002da8 <vTaskStartScheduler+0x6c>
        __asm volatile
 8002d5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d62:	f383 8811 	msr	BASEPRI, r3
 8002d66:	f3bf 8f6f 	isb	sy
 8002d6a:	f3bf 8f4f 	dsb	sy
 8002d6e:	60bb      	str	r3, [r7, #8]
    }
 8002d70:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8002d72:	4b1b      	ldr	r3, [pc, #108]	@ (8002de0 <vTaskStartScheduler+0xa4>)
 8002d74:	f04f 32ff 	mov.w	r2, #4294967295
 8002d78:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002d7a:	4b1a      	ldr	r3, [pc, #104]	@ (8002de4 <vTaskStartScheduler+0xa8>)
 8002d7c:	2201      	movs	r2, #1
 8002d7e:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002d80:	4b19      	ldr	r3, [pc, #100]	@ (8002de8 <vTaskStartScheduler+0xac>)
 8002d82:	2200      	movs	r2, #0
 8002d84:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8002d86:	4b19      	ldr	r3, [pc, #100]	@ (8002dec <vTaskStartScheduler+0xb0>)
 8002d88:	681a      	ldr	r2, [r3, #0]
 8002d8a:	4b12      	ldr	r3, [pc, #72]	@ (8002dd4 <vTaskStartScheduler+0x98>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	429a      	cmp	r2, r3
 8002d90:	d102      	bne.n	8002d98 <vTaskStartScheduler+0x5c>
 8002d92:	f002 f9a3 	bl	80050dc <SEGGER_SYSVIEW_OnIdle>
 8002d96:	e004      	b.n	8002da2 <vTaskStartScheduler+0x66>
 8002d98:	4b14      	ldr	r3, [pc, #80]	@ (8002dec <vTaskStartScheduler+0xb0>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f002 f9fb 	bl	8005198 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8002da2:	f000 fd37 	bl	8003814 <xPortStartScheduler>
 8002da6:	e00f      	b.n	8002dc8 <vTaskStartScheduler+0x8c>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dae:	d10b      	bne.n	8002dc8 <vTaskStartScheduler+0x8c>
        __asm volatile
 8002db0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002db4:	f383 8811 	msr	BASEPRI, r3
 8002db8:	f3bf 8f6f 	isb	sy
 8002dbc:	f3bf 8f4f 	dsb	sy
 8002dc0:	607b      	str	r3, [r7, #4]
    }
 8002dc2:	bf00      	nop
 8002dc4:	bf00      	nop
 8002dc6:	e7fd      	b.n	8002dc4 <vTaskStartScheduler+0x88>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002dc8:	4b09      	ldr	r3, [pc, #36]	@ (8002df0 <vTaskStartScheduler+0xb4>)
 8002dca:	681b      	ldr	r3, [r3, #0]
}
 8002dcc:	bf00      	nop
 8002dce:	3710      	adds	r7, #16
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bd80      	pop	{r7, pc}
 8002dd4:	200001b8 	.word	0x200001b8
 8002dd8:	080056b4 	.word	0x080056b4
 8002ddc:	080031a5 	.word	0x080031a5
 8002de0:	200001b4 	.word	0x200001b4
 8002de4:	200001a0 	.word	0x200001a0
 8002de8:	20000198 	.word	0x20000198
 8002dec:	200000bc 	.word	0x200000bc
 8002df0:	2000000c 	.word	0x2000000c

08002df4 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002df4:	b480      	push	{r7}
 8002df6:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002df8:	4b04      	ldr	r3, [pc, #16]	@ (8002e0c <vTaskSuspendAll+0x18>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	3301      	adds	r3, #1
 8002dfe:	4a03      	ldr	r2, [pc, #12]	@ (8002e0c <vTaskSuspendAll+0x18>)
 8002e00:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002e02:	bf00      	nop
 8002e04:	46bd      	mov	sp, r7
 8002e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0a:	4770      	bx	lr
 8002e0c:	200001bc 	.word	0x200001bc

08002e10 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b084      	sub	sp, #16
 8002e14:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002e16:	2300      	movs	r3, #0
 8002e18:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002e1e:	4b44      	ldr	r3, [pc, #272]	@ (8002f30 <xTaskResumeAll+0x120>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d10b      	bne.n	8002e3e <xTaskResumeAll+0x2e>
        __asm volatile
 8002e26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e2a:	f383 8811 	msr	BASEPRI, r3
 8002e2e:	f3bf 8f6f 	isb	sy
 8002e32:	f3bf 8f4f 	dsb	sy
 8002e36:	603b      	str	r3, [r7, #0]
    }
 8002e38:	bf00      	nop
 8002e3a:	bf00      	nop
 8002e3c:	e7fd      	b.n	8002e3a <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002e3e:	f000 fe0d 	bl	8003a5c <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002e42:	4b3b      	ldr	r3, [pc, #236]	@ (8002f30 <xTaskResumeAll+0x120>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	3b01      	subs	r3, #1
 8002e48:	4a39      	ldr	r2, [pc, #228]	@ (8002f30 <xTaskResumeAll+0x120>)
 8002e4a:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002e4c:	4b38      	ldr	r3, [pc, #224]	@ (8002f30 <xTaskResumeAll+0x120>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d165      	bne.n	8002f20 <xTaskResumeAll+0x110>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002e54:	4b37      	ldr	r3, [pc, #220]	@ (8002f34 <xTaskResumeAll+0x124>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d061      	beq.n	8002f20 <xTaskResumeAll+0x110>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002e5c:	e032      	b.n	8002ec4 <xTaskResumeAll+0xb4>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002e5e:	4b36      	ldr	r3, [pc, #216]	@ (8002f38 <xTaskResumeAll+0x128>)
 8002e60:	68db      	ldr	r3, [r3, #12]
 8002e62:	68db      	ldr	r3, [r3, #12]
 8002e64:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	3318      	adds	r3, #24
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f7ff fdd8 	bl	8002a20 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	3304      	adds	r3, #4
 8002e74:	4618      	mov	r0, r3
 8002e76:	f7ff fdd3 	bl	8002a20 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f002 f9cd 	bl	800521c <SEGGER_SYSVIEW_OnTaskStartReady>
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e86:	2201      	movs	r2, #1
 8002e88:	409a      	lsls	r2, r3
 8002e8a:	4b2c      	ldr	r3, [pc, #176]	@ (8002f3c <xTaskResumeAll+0x12c>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	4a2a      	ldr	r2, [pc, #168]	@ (8002f3c <xTaskResumeAll+0x12c>)
 8002e92:	6013      	str	r3, [r2, #0]
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e98:	4613      	mov	r3, r2
 8002e9a:	009b      	lsls	r3, r3, #2
 8002e9c:	4413      	add	r3, r2
 8002e9e:	009b      	lsls	r3, r3, #2
 8002ea0:	4a27      	ldr	r2, [pc, #156]	@ (8002f40 <xTaskResumeAll+0x130>)
 8002ea2:	441a      	add	r2, r3
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	3304      	adds	r3, #4
 8002ea8:	4619      	mov	r1, r3
 8002eaa:	4610      	mov	r0, r2
 8002eac:	f7ff fd5b 	bl	8002966 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002eb4:	4b23      	ldr	r3, [pc, #140]	@ (8002f44 <xTaskResumeAll+0x134>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002eba:	429a      	cmp	r2, r3
 8002ebc:	d302      	bcc.n	8002ec4 <xTaskResumeAll+0xb4>
                    {
                        xYieldPending = pdTRUE;
 8002ebe:	4b22      	ldr	r3, [pc, #136]	@ (8002f48 <xTaskResumeAll+0x138>)
 8002ec0:	2201      	movs	r2, #1
 8002ec2:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002ec4:	4b1c      	ldr	r3, [pc, #112]	@ (8002f38 <xTaskResumeAll+0x128>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d1c8      	bne.n	8002e5e <xTaskResumeAll+0x4e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d001      	beq.n	8002ed6 <xTaskResumeAll+0xc6>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002ed2:	f000 f9fd 	bl	80032d0 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002ed6:	4b1d      	ldr	r3, [pc, #116]	@ (8002f4c <xTaskResumeAll+0x13c>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d010      	beq.n	8002f04 <xTaskResumeAll+0xf4>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002ee2:	f000 f837 	bl	8002f54 <xTaskIncrementTick>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d002      	beq.n	8002ef2 <xTaskResumeAll+0xe2>
                            {
                                xYieldPending = pdTRUE;
 8002eec:	4b16      	ldr	r3, [pc, #88]	@ (8002f48 <xTaskResumeAll+0x138>)
 8002eee:	2201      	movs	r2, #1
 8002ef0:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	3b01      	subs	r3, #1
 8002ef6:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d1f1      	bne.n	8002ee2 <xTaskResumeAll+0xd2>

                        xPendedTicks = 0;
 8002efe:	4b13      	ldr	r3, [pc, #76]	@ (8002f4c <xTaskResumeAll+0x13c>)
 8002f00:	2200      	movs	r2, #0
 8002f02:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002f04:	4b10      	ldr	r3, [pc, #64]	@ (8002f48 <xTaskResumeAll+0x138>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d009      	beq.n	8002f20 <xTaskResumeAll+0x110>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8002f10:	4b0f      	ldr	r3, [pc, #60]	@ (8002f50 <xTaskResumeAll+0x140>)
 8002f12:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002f16:	601a      	str	r2, [r3, #0]
 8002f18:	f3bf 8f4f 	dsb	sy
 8002f1c:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8002f20:	f000 fdce 	bl	8003ac0 <vPortExitCritical>

    return xAlreadyYielded;
 8002f24:	68bb      	ldr	r3, [r7, #8]
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	3710      	adds	r7, #16
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}
 8002f2e:	bf00      	nop
 8002f30:	200001bc 	.word	0x200001bc
 8002f34:	20000194 	.word	0x20000194
 8002f38:	20000154 	.word	0x20000154
 8002f3c:	2000019c 	.word	0x2000019c
 8002f40:	200000c0 	.word	0x200000c0
 8002f44:	200000bc 	.word	0x200000bc
 8002f48:	200001a8 	.word	0x200001a8
 8002f4c:	200001a4 	.word	0x200001a4
 8002f50:	e000ed04 	.word	0xe000ed04

08002f54 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b086      	sub	sp, #24
 8002f58:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002f5e:	4b51      	ldr	r3, [pc, #324]	@ (80030a4 <xTaskIncrementTick+0x150>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	f040 8093 	bne.w	800308e <xTaskIncrementTick+0x13a>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002f68:	4b4f      	ldr	r3, [pc, #316]	@ (80030a8 <xTaskIncrementTick+0x154>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	3301      	adds	r3, #1
 8002f6e:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002f70:	4a4d      	ldr	r2, [pc, #308]	@ (80030a8 <xTaskIncrementTick+0x154>)
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d121      	bne.n	8002fc0 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 8002f7c:	4b4b      	ldr	r3, [pc, #300]	@ (80030ac <xTaskIncrementTick+0x158>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d00b      	beq.n	8002f9e <xTaskIncrementTick+0x4a>
        __asm volatile
 8002f86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f8a:	f383 8811 	msr	BASEPRI, r3
 8002f8e:	f3bf 8f6f 	isb	sy
 8002f92:	f3bf 8f4f 	dsb	sy
 8002f96:	603b      	str	r3, [r7, #0]
    }
 8002f98:	bf00      	nop
 8002f9a:	bf00      	nop
 8002f9c:	e7fd      	b.n	8002f9a <xTaskIncrementTick+0x46>
 8002f9e:	4b43      	ldr	r3, [pc, #268]	@ (80030ac <xTaskIncrementTick+0x158>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	60fb      	str	r3, [r7, #12]
 8002fa4:	4b42      	ldr	r3, [pc, #264]	@ (80030b0 <xTaskIncrementTick+0x15c>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a40      	ldr	r2, [pc, #256]	@ (80030ac <xTaskIncrementTick+0x158>)
 8002faa:	6013      	str	r3, [r2, #0]
 8002fac:	4a40      	ldr	r2, [pc, #256]	@ (80030b0 <xTaskIncrementTick+0x15c>)
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	6013      	str	r3, [r2, #0]
 8002fb2:	4b40      	ldr	r3, [pc, #256]	@ (80030b4 <xTaskIncrementTick+0x160>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	3301      	adds	r3, #1
 8002fb8:	4a3e      	ldr	r2, [pc, #248]	@ (80030b4 <xTaskIncrementTick+0x160>)
 8002fba:	6013      	str	r3, [r2, #0]
 8002fbc:	f000 f988 	bl	80032d0 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002fc0:	4b3d      	ldr	r3, [pc, #244]	@ (80030b8 <xTaskIncrementTick+0x164>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	693a      	ldr	r2, [r7, #16]
 8002fc6:	429a      	cmp	r2, r3
 8002fc8:	d34c      	bcc.n	8003064 <xTaskIncrementTick+0x110>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002fca:	4b38      	ldr	r3, [pc, #224]	@ (80030ac <xTaskIncrementTick+0x158>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d104      	bne.n	8002fde <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002fd4:	4b38      	ldr	r3, [pc, #224]	@ (80030b8 <xTaskIncrementTick+0x164>)
 8002fd6:	f04f 32ff 	mov.w	r2, #4294967295
 8002fda:	601a      	str	r2, [r3, #0]
                    break;
 8002fdc:	e042      	b.n	8003064 <xTaskIncrementTick+0x110>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002fde:	4b33      	ldr	r3, [pc, #204]	@ (80030ac <xTaskIncrementTick+0x158>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	68db      	ldr	r3, [r3, #12]
 8002fe4:	68db      	ldr	r3, [r3, #12]
 8002fe6:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8002fee:	693a      	ldr	r2, [r7, #16]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	429a      	cmp	r2, r3
 8002ff4:	d203      	bcs.n	8002ffe <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002ff6:	4a30      	ldr	r2, [pc, #192]	@ (80030b8 <xTaskIncrementTick+0x164>)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002ffc:	e032      	b.n	8003064 <xTaskIncrementTick+0x110>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	3304      	adds	r3, #4
 8003002:	4618      	mov	r0, r3
 8003004:	f7ff fd0c 	bl	8002a20 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800300c:	2b00      	cmp	r3, #0
 800300e:	d004      	beq.n	800301a <xTaskIncrementTick+0xc6>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003010:	68bb      	ldr	r3, [r7, #8]
 8003012:	3318      	adds	r3, #24
 8003014:	4618      	mov	r0, r3
 8003016:	f7ff fd03 	bl	8002a20 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800301a:	68bb      	ldr	r3, [r7, #8]
 800301c:	4618      	mov	r0, r3
 800301e:	f002 f8fd 	bl	800521c <SEGGER_SYSVIEW_OnTaskStartReady>
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003026:	2201      	movs	r2, #1
 8003028:	409a      	lsls	r2, r3
 800302a:	4b24      	ldr	r3, [pc, #144]	@ (80030bc <xTaskIncrementTick+0x168>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4313      	orrs	r3, r2
 8003030:	4a22      	ldr	r2, [pc, #136]	@ (80030bc <xTaskIncrementTick+0x168>)
 8003032:	6013      	str	r3, [r2, #0]
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003038:	4613      	mov	r3, r2
 800303a:	009b      	lsls	r3, r3, #2
 800303c:	4413      	add	r3, r2
 800303e:	009b      	lsls	r3, r3, #2
 8003040:	4a1f      	ldr	r2, [pc, #124]	@ (80030c0 <xTaskIncrementTick+0x16c>)
 8003042:	441a      	add	r2, r3
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	3304      	adds	r3, #4
 8003048:	4619      	mov	r1, r3
 800304a:	4610      	mov	r0, r2
 800304c:	f7ff fc8b 	bl	8002966 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003054:	4b1b      	ldr	r3, [pc, #108]	@ (80030c4 <xTaskIncrementTick+0x170>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800305a:	429a      	cmp	r2, r3
 800305c:	d3b5      	bcc.n	8002fca <xTaskIncrementTick+0x76>
                            {
                                xSwitchRequired = pdTRUE;
 800305e:	2301      	movs	r3, #1
 8003060:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003062:	e7b2      	b.n	8002fca <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003064:	4b17      	ldr	r3, [pc, #92]	@ (80030c4 <xTaskIncrementTick+0x170>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800306a:	4915      	ldr	r1, [pc, #84]	@ (80030c0 <xTaskIncrementTick+0x16c>)
 800306c:	4613      	mov	r3, r2
 800306e:	009b      	lsls	r3, r3, #2
 8003070:	4413      	add	r3, r2
 8003072:	009b      	lsls	r3, r3, #2
 8003074:	440b      	add	r3, r1
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	2b01      	cmp	r3, #1
 800307a:	d901      	bls.n	8003080 <xTaskIncrementTick+0x12c>
                {
                    xSwitchRequired = pdTRUE;
 800307c:	2301      	movs	r3, #1
 800307e:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8003080:	4b11      	ldr	r3, [pc, #68]	@ (80030c8 <xTaskIncrementTick+0x174>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d007      	beq.n	8003098 <xTaskIncrementTick+0x144>
                {
                    xSwitchRequired = pdTRUE;
 8003088:	2301      	movs	r3, #1
 800308a:	617b      	str	r3, [r7, #20]
 800308c:	e004      	b.n	8003098 <xTaskIncrementTick+0x144>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800308e:	4b0f      	ldr	r3, [pc, #60]	@ (80030cc <xTaskIncrementTick+0x178>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	3301      	adds	r3, #1
 8003094:	4a0d      	ldr	r2, [pc, #52]	@ (80030cc <xTaskIncrementTick+0x178>)
 8003096:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8003098:	697b      	ldr	r3, [r7, #20]
}
 800309a:	4618      	mov	r0, r3
 800309c:	3718      	adds	r7, #24
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}
 80030a2:	bf00      	nop
 80030a4:	200001bc 	.word	0x200001bc
 80030a8:	20000198 	.word	0x20000198
 80030ac:	2000014c 	.word	0x2000014c
 80030b0:	20000150 	.word	0x20000150
 80030b4:	200001ac 	.word	0x200001ac
 80030b8:	200001b4 	.word	0x200001b4
 80030bc:	2000019c 	.word	0x2000019c
 80030c0:	200000c0 	.word	0x200000c0
 80030c4:	200000bc 	.word	0x200000bc
 80030c8:	200001a8 	.word	0x200001a8
 80030cc:	200001a4 	.word	0x200001a4

080030d0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b086      	sub	sp, #24
 80030d4:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80030d6:	4b2d      	ldr	r3, [pc, #180]	@ (800318c <vTaskSwitchContext+0xbc>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d003      	beq.n	80030e6 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80030de:	4b2c      	ldr	r3, [pc, #176]	@ (8003190 <vTaskSwitchContext+0xc0>)
 80030e0:	2201      	movs	r2, #1
 80030e2:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 80030e4:	e04e      	b.n	8003184 <vTaskSwitchContext+0xb4>
        xYieldPending = pdFALSE;
 80030e6:	4b2a      	ldr	r3, [pc, #168]	@ (8003190 <vTaskSwitchContext+0xc0>)
 80030e8:	2200      	movs	r2, #0
 80030ea:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80030ec:	4b29      	ldr	r3, [pc, #164]	@ (8003194 <vTaskSwitchContext+0xc4>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	fab3 f383 	clz	r3, r3
 80030f8:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80030fa:	7afb      	ldrb	r3, [r7, #11]
 80030fc:	f1c3 031f 	rsb	r3, r3, #31
 8003100:	617b      	str	r3, [r7, #20]
 8003102:	4925      	ldr	r1, [pc, #148]	@ (8003198 <vTaskSwitchContext+0xc8>)
 8003104:	697a      	ldr	r2, [r7, #20]
 8003106:	4613      	mov	r3, r2
 8003108:	009b      	lsls	r3, r3, #2
 800310a:	4413      	add	r3, r2
 800310c:	009b      	lsls	r3, r3, #2
 800310e:	440b      	add	r3, r1
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d10b      	bne.n	800312e <vTaskSwitchContext+0x5e>
        __asm volatile
 8003116:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800311a:	f383 8811 	msr	BASEPRI, r3
 800311e:	f3bf 8f6f 	isb	sy
 8003122:	f3bf 8f4f 	dsb	sy
 8003126:	607b      	str	r3, [r7, #4]
    }
 8003128:	bf00      	nop
 800312a:	bf00      	nop
 800312c:	e7fd      	b.n	800312a <vTaskSwitchContext+0x5a>
 800312e:	697a      	ldr	r2, [r7, #20]
 8003130:	4613      	mov	r3, r2
 8003132:	009b      	lsls	r3, r3, #2
 8003134:	4413      	add	r3, r2
 8003136:	009b      	lsls	r3, r3, #2
 8003138:	4a17      	ldr	r2, [pc, #92]	@ (8003198 <vTaskSwitchContext+0xc8>)
 800313a:	4413      	add	r3, r2
 800313c:	613b      	str	r3, [r7, #16]
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	685a      	ldr	r2, [r3, #4]
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	605a      	str	r2, [r3, #4]
 8003148:	693b      	ldr	r3, [r7, #16]
 800314a:	685a      	ldr	r2, [r3, #4]
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	3308      	adds	r3, #8
 8003150:	429a      	cmp	r2, r3
 8003152:	d104      	bne.n	800315e <vTaskSwitchContext+0x8e>
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	685a      	ldr	r2, [r3, #4]
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	605a      	str	r2, [r3, #4]
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	68db      	ldr	r3, [r3, #12]
 8003164:	4a0d      	ldr	r2, [pc, #52]	@ (800319c <vTaskSwitchContext+0xcc>)
 8003166:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8003168:	4b0c      	ldr	r3, [pc, #48]	@ (800319c <vTaskSwitchContext+0xcc>)
 800316a:	681a      	ldr	r2, [r3, #0]
 800316c:	4b0c      	ldr	r3, [pc, #48]	@ (80031a0 <vTaskSwitchContext+0xd0>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	429a      	cmp	r2, r3
 8003172:	d102      	bne.n	800317a <vTaskSwitchContext+0xaa>
 8003174:	f001 ffb2 	bl	80050dc <SEGGER_SYSVIEW_OnIdle>
}
 8003178:	e004      	b.n	8003184 <vTaskSwitchContext+0xb4>
        traceTASK_SWITCHED_IN();
 800317a:	4b08      	ldr	r3, [pc, #32]	@ (800319c <vTaskSwitchContext+0xcc>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4618      	mov	r0, r3
 8003180:	f002 f80a 	bl	8005198 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8003184:	bf00      	nop
 8003186:	3718      	adds	r7, #24
 8003188:	46bd      	mov	sp, r7
 800318a:	bd80      	pop	{r7, pc}
 800318c:	200001bc 	.word	0x200001bc
 8003190:	200001a8 	.word	0x200001a8
 8003194:	2000019c 	.word	0x2000019c
 8003198:	200000c0 	.word	0x200000c0
 800319c:	200000bc 	.word	0x200000bc
 80031a0:	200001b8 	.word	0x200001b8

080031a4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b082      	sub	sp, #8
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80031ac:	f000 f852 	bl	8003254 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80031b0:	4b06      	ldr	r3, [pc, #24]	@ (80031cc <prvIdleTask+0x28>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	2b01      	cmp	r3, #1
 80031b6:	d9f9      	bls.n	80031ac <prvIdleTask+0x8>
                {
                    taskYIELD();
 80031b8:	4b05      	ldr	r3, [pc, #20]	@ (80031d0 <prvIdleTask+0x2c>)
 80031ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80031be:	601a      	str	r2, [r3, #0]
 80031c0:	f3bf 8f4f 	dsb	sy
 80031c4:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80031c8:	e7f0      	b.n	80031ac <prvIdleTask+0x8>
 80031ca:	bf00      	nop
 80031cc:	200000c0 	.word	0x200000c0
 80031d0:	e000ed04 	.word	0xe000ed04

080031d4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b082      	sub	sp, #8
 80031d8:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80031da:	2300      	movs	r3, #0
 80031dc:	607b      	str	r3, [r7, #4]
 80031de:	e00c      	b.n	80031fa <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80031e0:	687a      	ldr	r2, [r7, #4]
 80031e2:	4613      	mov	r3, r2
 80031e4:	009b      	lsls	r3, r3, #2
 80031e6:	4413      	add	r3, r2
 80031e8:	009b      	lsls	r3, r3, #2
 80031ea:	4a12      	ldr	r2, [pc, #72]	@ (8003234 <prvInitialiseTaskLists+0x60>)
 80031ec:	4413      	add	r3, r2
 80031ee:	4618      	mov	r0, r3
 80031f0:	f7ff fb8c 	bl	800290c <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	3301      	adds	r3, #1
 80031f8:	607b      	str	r3, [r7, #4]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2b04      	cmp	r3, #4
 80031fe:	d9ef      	bls.n	80031e0 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003200:	480d      	ldr	r0, [pc, #52]	@ (8003238 <prvInitialiseTaskLists+0x64>)
 8003202:	f7ff fb83 	bl	800290c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003206:	480d      	ldr	r0, [pc, #52]	@ (800323c <prvInitialiseTaskLists+0x68>)
 8003208:	f7ff fb80 	bl	800290c <vListInitialise>
    vListInitialise( &xPendingReadyList );
 800320c:	480c      	ldr	r0, [pc, #48]	@ (8003240 <prvInitialiseTaskLists+0x6c>)
 800320e:	f7ff fb7d 	bl	800290c <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8003212:	480c      	ldr	r0, [pc, #48]	@ (8003244 <prvInitialiseTaskLists+0x70>)
 8003214:	f7ff fb7a 	bl	800290c <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8003218:	480b      	ldr	r0, [pc, #44]	@ (8003248 <prvInitialiseTaskLists+0x74>)
 800321a:	f7ff fb77 	bl	800290c <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800321e:	4b0b      	ldr	r3, [pc, #44]	@ (800324c <prvInitialiseTaskLists+0x78>)
 8003220:	4a05      	ldr	r2, [pc, #20]	@ (8003238 <prvInitialiseTaskLists+0x64>)
 8003222:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003224:	4b0a      	ldr	r3, [pc, #40]	@ (8003250 <prvInitialiseTaskLists+0x7c>)
 8003226:	4a05      	ldr	r2, [pc, #20]	@ (800323c <prvInitialiseTaskLists+0x68>)
 8003228:	601a      	str	r2, [r3, #0]
}
 800322a:	bf00      	nop
 800322c:	3708      	adds	r7, #8
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}
 8003232:	bf00      	nop
 8003234:	200000c0 	.word	0x200000c0
 8003238:	20000124 	.word	0x20000124
 800323c:	20000138 	.word	0x20000138
 8003240:	20000154 	.word	0x20000154
 8003244:	20000168 	.word	0x20000168
 8003248:	20000180 	.word	0x20000180
 800324c:	2000014c 	.word	0x2000014c
 8003250:	20000150 	.word	0x20000150

08003254 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b082      	sub	sp, #8
 8003258:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800325a:	e019      	b.n	8003290 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 800325c:	f000 fbfe 	bl	8003a5c <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003260:	4b10      	ldr	r3, [pc, #64]	@ (80032a4 <prvCheckTasksWaitingTermination+0x50>)
 8003262:	68db      	ldr	r3, [r3, #12]
 8003264:	68db      	ldr	r3, [r3, #12]
 8003266:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	3304      	adds	r3, #4
 800326c:	4618      	mov	r0, r3
 800326e:	f7ff fbd7 	bl	8002a20 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8003272:	4b0d      	ldr	r3, [pc, #52]	@ (80032a8 <prvCheckTasksWaitingTermination+0x54>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	3b01      	subs	r3, #1
 8003278:	4a0b      	ldr	r2, [pc, #44]	@ (80032a8 <prvCheckTasksWaitingTermination+0x54>)
 800327a:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 800327c:	4b0b      	ldr	r3, [pc, #44]	@ (80032ac <prvCheckTasksWaitingTermination+0x58>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	3b01      	subs	r3, #1
 8003282:	4a0a      	ldr	r2, [pc, #40]	@ (80032ac <prvCheckTasksWaitingTermination+0x58>)
 8003284:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8003286:	f000 fc1b 	bl	8003ac0 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 800328a:	6878      	ldr	r0, [r7, #4]
 800328c:	f000 f810 	bl	80032b0 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003290:	4b06      	ldr	r3, [pc, #24]	@ (80032ac <prvCheckTasksWaitingTermination+0x58>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d1e1      	bne.n	800325c <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8003298:	bf00      	nop
 800329a:	bf00      	nop
 800329c:	3708      	adds	r7, #8
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}
 80032a2:	bf00      	nop
 80032a4:	20000168 	.word	0x20000168
 80032a8:	20000194 	.word	0x20000194
 80032ac:	2000017c 	.word	0x2000017c

080032b0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b082      	sub	sp, #8
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032bc:	4618      	mov	r0, r3
 80032be:	f000 fd9f 	bl	8003e00 <vPortFree>
                vPortFree( pxTCB );
 80032c2:	6878      	ldr	r0, [r7, #4]
 80032c4:	f000 fd9c 	bl	8003e00 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80032c8:	bf00      	nop
 80032ca:	3708      	adds	r7, #8
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bd80      	pop	{r7, pc}

080032d0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80032d0:	b480      	push	{r7}
 80032d2:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80032d4:	4b0a      	ldr	r3, [pc, #40]	@ (8003300 <prvResetNextTaskUnblockTime+0x30>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d104      	bne.n	80032e8 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80032de:	4b09      	ldr	r3, [pc, #36]	@ (8003304 <prvResetNextTaskUnblockTime+0x34>)
 80032e0:	f04f 32ff 	mov.w	r2, #4294967295
 80032e4:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80032e6:	e005      	b.n	80032f4 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80032e8:	4b05      	ldr	r3, [pc, #20]	@ (8003300 <prvResetNextTaskUnblockTime+0x30>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	68db      	ldr	r3, [r3, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a04      	ldr	r2, [pc, #16]	@ (8003304 <prvResetNextTaskUnblockTime+0x34>)
 80032f2:	6013      	str	r3, [r2, #0]
}
 80032f4:	bf00      	nop
 80032f6:	46bd      	mov	sp, r7
 80032f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fc:	4770      	bx	lr
 80032fe:	bf00      	nop
 8003300:	2000014c 	.word	0x2000014c
 8003304:	200001b4 	.word	0x200001b4

08003308 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8003308:	b580      	push	{r7, lr}
 800330a:	b088      	sub	sp, #32
 800330c:	af02      	add	r7, sp, #8
 800330e:	60f8      	str	r0, [r7, #12]
 8003310:	60b9      	str	r1, [r7, #8]
 8003312:	607a      	str	r2, [r7, #4]
 8003314:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d00b      	beq.n	8003334 <xTaskGenericNotifyWait+0x2c>
        __asm volatile
 800331c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003320:	f383 8811 	msr	BASEPRI, r3
 8003324:	f3bf 8f6f 	isb	sy
 8003328:	f3bf 8f4f 	dsb	sy
 800332c:	613b      	str	r3, [r7, #16]
    }
 800332e:	bf00      	nop
 8003330:	bf00      	nop
 8003332:	e7fd      	b.n	8003330 <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 8003334:	f000 fb92 	bl	8003a5c <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8003338:	4b36      	ldr	r3, [pc, #216]	@ (8003414 <xTaskGenericNotifyWait+0x10c>)
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	4413      	add	r3, r2
 8003340:	3354      	adds	r3, #84	@ 0x54
 8003342:	781b      	ldrb	r3, [r3, #0]
 8003344:	b2db      	uxtb	r3, r3
 8003346:	2b02      	cmp	r3, #2
 8003348:	d022      	beq.n	8003390 <xTaskGenericNotifyWait+0x88>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 800334a:	4b32      	ldr	r3, [pc, #200]	@ (8003414 <xTaskGenericNotifyWait+0x10c>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	68fa      	ldr	r2, [r7, #12]
 8003350:	3214      	adds	r2, #20
 8003352:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003356:	68ba      	ldr	r2, [r7, #8]
 8003358:	43d2      	mvns	r2, r2
 800335a:	4011      	ands	r1, r2
 800335c:	68fa      	ldr	r2, [r7, #12]
 800335e:	3214      	adds	r2, #20
 8003360:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 8003364:	4b2b      	ldr	r3, [pc, #172]	@ (8003414 <xTaskGenericNotifyWait+0x10c>)
 8003366:	681a      	ldr	r2, [r3, #0]
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	4413      	add	r3, r2
 800336c:	3354      	adds	r3, #84	@ 0x54
 800336e:	2201      	movs	r2, #1
 8003370:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 8003372:	6a3b      	ldr	r3, [r7, #32]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d00b      	beq.n	8003390 <xTaskGenericNotifyWait+0x88>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003378:	2101      	movs	r1, #1
 800337a:	6a38      	ldr	r0, [r7, #32]
 800337c:	f000 f944 	bl	8003608 <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 8003380:	4b25      	ldr	r3, [pc, #148]	@ (8003418 <xTaskGenericNotifyWait+0x110>)
 8003382:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003386:	601a      	str	r2, [r3, #0]
 8003388:	f3bf 8f4f 	dsb	sy
 800338c:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003390:	f000 fb96 	bl	8003ac0 <vPortExitCritical>

        taskENTER_CRITICAL();
 8003394:	f000 fb62 	bl	8003a5c <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );
 8003398:	683a      	ldr	r2, [r7, #0]
 800339a:	6a3b      	ldr	r3, [r7, #32]
 800339c:	9300      	str	r3, [sp, #0]
 800339e:	4613      	mov	r3, r2
 80033a0:	687a      	ldr	r2, [r7, #4]
 80033a2:	68b9      	ldr	r1, [r7, #8]
 80033a4:	2040      	movs	r0, #64	@ 0x40
 80033a6:	f001 fae7 	bl	8004978 <SEGGER_SYSVIEW_RecordU32x4>

            if( pulNotificationValue != NULL )
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d007      	beq.n	80033c0 <xTaskGenericNotifyWait+0xb8>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 80033b0:	4b18      	ldr	r3, [pc, #96]	@ (8003414 <xTaskGenericNotifyWait+0x10c>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	68fa      	ldr	r2, [r7, #12]
 80033b6:	3214      	adds	r2, #20
 80033b8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 80033c0:	4b14      	ldr	r3, [pc, #80]	@ (8003414 <xTaskGenericNotifyWait+0x10c>)
 80033c2:	681a      	ldr	r2, [r3, #0]
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	4413      	add	r3, r2
 80033c8:	3354      	adds	r3, #84	@ 0x54
 80033ca:	781b      	ldrb	r3, [r3, #0]
 80033cc:	b2db      	uxtb	r3, r3
 80033ce:	2b02      	cmp	r3, #2
 80033d0:	d002      	beq.n	80033d8 <xTaskGenericNotifyWait+0xd0>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 80033d2:	2300      	movs	r3, #0
 80033d4:	617b      	str	r3, [r7, #20]
 80033d6:	e00e      	b.n	80033f6 <xTaskGenericNotifyWait+0xee>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 80033d8:	4b0e      	ldr	r3, [pc, #56]	@ (8003414 <xTaskGenericNotifyWait+0x10c>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	68fa      	ldr	r2, [r7, #12]
 80033de:	3214      	adds	r2, #20
 80033e0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80033e4:	687a      	ldr	r2, [r7, #4]
 80033e6:	43d2      	mvns	r2, r2
 80033e8:	4011      	ands	r1, r2
 80033ea:	68fa      	ldr	r2, [r7, #12]
 80033ec:	3214      	adds	r2, #20
 80033ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 80033f2:	2301      	movs	r3, #1
 80033f4:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 80033f6:	4b07      	ldr	r3, [pc, #28]	@ (8003414 <xTaskGenericNotifyWait+0x10c>)
 80033f8:	681a      	ldr	r2, [r3, #0]
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	4413      	add	r3, r2
 80033fe:	3354      	adds	r3, #84	@ 0x54
 8003400:	2200      	movs	r2, #0
 8003402:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8003404:	f000 fb5c 	bl	8003ac0 <vPortExitCritical>

        return xReturn;
 8003408:	697b      	ldr	r3, [r7, #20]
    }
 800340a:	4618      	mov	r0, r3
 800340c:	3718      	adds	r7, #24
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}
 8003412:	bf00      	nop
 8003414:	200000bc 	.word	0x200000bc
 8003418:	e000ed04 	.word	0xe000ed04

0800341c <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 800341c:	b580      	push	{r7, lr}
 800341e:	b08e      	sub	sp, #56	@ 0x38
 8003420:	af02      	add	r7, sp, #8
 8003422:	60f8      	str	r0, [r7, #12]
 8003424:	60b9      	str	r1, [r7, #8]
 8003426:	607a      	str	r2, [r7, #4]
 8003428:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 800342a:	2301      	movs	r3, #1
 800342c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 800342e:	68bb      	ldr	r3, [r7, #8]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d00b      	beq.n	800344c <xTaskGenericNotify+0x30>
        __asm volatile
 8003434:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003438:	f383 8811 	msr	BASEPRI, r3
 800343c:	f3bf 8f6f 	isb	sy
 8003440:	f3bf 8f4f 	dsb	sy
 8003444:	623b      	str	r3, [r7, #32]
    }
 8003446:	bf00      	nop
 8003448:	bf00      	nop
 800344a:	e7fd      	b.n	8003448 <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d10b      	bne.n	800346a <xTaskGenericNotify+0x4e>
        __asm volatile
 8003452:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003456:	f383 8811 	msr	BASEPRI, r3
 800345a:	f3bf 8f6f 	isb	sy
 800345e:	f3bf 8f4f 	dsb	sy
 8003462:	61fb      	str	r3, [r7, #28]
    }
 8003464:	bf00      	nop
 8003466:	bf00      	nop
 8003468:	e7fd      	b.n	8003466 <xTaskGenericNotify+0x4a>
        pxTCB = xTaskToNotify;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	62bb      	str	r3, [r7, #40]	@ 0x28

        taskENTER_CRITICAL();
 800346e:	f000 faf5 	bl	8003a5c <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 8003472:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003474:	2b00      	cmp	r3, #0
 8003476:	d006      	beq.n	8003486 <xTaskGenericNotify+0x6a>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8003478:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800347a:	68ba      	ldr	r2, [r7, #8]
 800347c:	3214      	adds	r2, #20
 800347e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003482:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003484:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8003486:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	4413      	add	r3, r2
 800348c:	3354      	adds	r3, #84	@ 0x54
 800348e:	781b      	ldrb	r3, [r3, #0]
 8003490:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8003494:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	4413      	add	r3, r2
 800349a:	3354      	adds	r3, #84	@ 0x54
 800349c:	2202      	movs	r2, #2
 800349e:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 80034a0:	78fb      	ldrb	r3, [r7, #3]
 80034a2:	2b04      	cmp	r3, #4
 80034a4:	d83b      	bhi.n	800351e <xTaskGenericNotify+0x102>
 80034a6:	a201      	add	r2, pc, #4	@ (adr r2, 80034ac <xTaskGenericNotify+0x90>)
 80034a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034ac:	0800353f 	.word	0x0800353f
 80034b0:	080034c1 	.word	0x080034c1
 80034b4:	080034dd 	.word	0x080034dd
 80034b8:	080034f5 	.word	0x080034f5
 80034bc:	08003503 	.word	0x08003503
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 80034c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034c2:	68ba      	ldr	r2, [r7, #8]
 80034c4:	3214      	adds	r2, #20
 80034c6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	ea42 0103 	orr.w	r1, r2, r3
 80034d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034d2:	68ba      	ldr	r2, [r7, #8]
 80034d4:	3214      	adds	r2, #20
 80034d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80034da:	e033      	b.n	8003544 <xTaskGenericNotify+0x128>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 80034dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034de:	68ba      	ldr	r2, [r7, #8]
 80034e0:	3214      	adds	r2, #20
 80034e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034e6:	1c59      	adds	r1, r3, #1
 80034e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034ea:	68ba      	ldr	r2, [r7, #8]
 80034ec:	3214      	adds	r2, #20
 80034ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80034f2:	e027      	b.n	8003544 <xTaskGenericNotify+0x128>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80034f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034f6:	68ba      	ldr	r2, [r7, #8]
 80034f8:	3214      	adds	r2, #20
 80034fa:	6879      	ldr	r1, [r7, #4]
 80034fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8003500:	e020      	b.n	8003544 <xTaskGenericNotify+0x128>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8003502:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003506:	2b02      	cmp	r3, #2
 8003508:	d006      	beq.n	8003518 <xTaskGenericNotify+0xfc>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 800350a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800350c:	68ba      	ldr	r2, [r7, #8]
 800350e:	3214      	adds	r2, #20
 8003510:	6879      	ldr	r1, [r7, #4]
 8003512:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8003516:	e015      	b.n	8003544 <xTaskGenericNotify+0x128>
                        xReturn = pdFAIL;
 8003518:	2300      	movs	r3, #0
 800351a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    break;
 800351c:	e012      	b.n	8003544 <xTaskGenericNotify+0x128>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 800351e:	4b35      	ldr	r3, [pc, #212]	@ (80035f4 <xTaskGenericNotify+0x1d8>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d00d      	beq.n	8003542 <xTaskGenericNotify+0x126>
        __asm volatile
 8003526:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800352a:	f383 8811 	msr	BASEPRI, r3
 800352e:	f3bf 8f6f 	isb	sy
 8003532:	f3bf 8f4f 	dsb	sy
 8003536:	61bb      	str	r3, [r7, #24]
    }
 8003538:	bf00      	nop
 800353a:	bf00      	nop
 800353c:	e7fd      	b.n	800353a <xTaskGenericNotify+0x11e>
                    break;
 800353e:	bf00      	nop
 8003540:	e000      	b.n	8003544 <xTaskGenericNotify+0x128>

                    break;
 8003542:	bf00      	nop
            }

            traceTASK_NOTIFY(  );
 8003544:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003546:	4618      	mov	r0, r3
 8003548:	f001 ff0a 	bl	8005360 <SEGGER_SYSVIEW_ShrinkId>
 800354c:	4601      	mov	r1, r0
 800354e:	78fa      	ldrb	r2, [r7, #3]
 8003550:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003552:	9300      	str	r3, [sp, #0]
 8003554:	4613      	mov	r3, r2
 8003556:	687a      	ldr	r2, [r7, #4]
 8003558:	203e      	movs	r0, #62	@ 0x3e
 800355a:	f001 fa0d 	bl	8004978 <SEGGER_SYSVIEW_RecordU32x4>

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800355e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003562:	2b01      	cmp	r3, #1
 8003564:	d13e      	bne.n	80035e4 <xTaskGenericNotify+0x1c8>
            {
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003566:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003568:	3304      	adds	r3, #4
 800356a:	4618      	mov	r0, r3
 800356c:	f7ff fa58 	bl	8002a20 <uxListRemove>
                prvAddTaskToReadyList( pxTCB );
 8003570:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003572:	4618      	mov	r0, r3
 8003574:	f001 fe52 	bl	800521c <SEGGER_SYSVIEW_OnTaskStartReady>
 8003578:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800357a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800357c:	2201      	movs	r2, #1
 800357e:	409a      	lsls	r2, r3
 8003580:	4b1d      	ldr	r3, [pc, #116]	@ (80035f8 <xTaskGenericNotify+0x1dc>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4313      	orrs	r3, r2
 8003586:	4a1c      	ldr	r2, [pc, #112]	@ (80035f8 <xTaskGenericNotify+0x1dc>)
 8003588:	6013      	str	r3, [r2, #0]
 800358a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800358c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800358e:	4613      	mov	r3, r2
 8003590:	009b      	lsls	r3, r3, #2
 8003592:	4413      	add	r3, r2
 8003594:	009b      	lsls	r3, r3, #2
 8003596:	4a19      	ldr	r2, [pc, #100]	@ (80035fc <xTaskGenericNotify+0x1e0>)
 8003598:	441a      	add	r2, r3
 800359a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800359c:	3304      	adds	r3, #4
 800359e:	4619      	mov	r1, r3
 80035a0:	4610      	mov	r0, r2
 80035a2:	f7ff f9e0 	bl	8002966 <vListInsertEnd>

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80035a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d00b      	beq.n	80035c6 <xTaskGenericNotify+0x1aa>
        __asm volatile
 80035ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035b2:	f383 8811 	msr	BASEPRI, r3
 80035b6:	f3bf 8f6f 	isb	sy
 80035ba:	f3bf 8f4f 	dsb	sy
 80035be:	617b      	str	r3, [r7, #20]
    }
 80035c0:	bf00      	nop
 80035c2:	bf00      	nop
 80035c4:	e7fd      	b.n	80035c2 <xTaskGenericNotify+0x1a6>
                         * earliest possible time. */
                        prvResetNextTaskUnblockTime();
                    }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80035c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80035ca:	4b0d      	ldr	r3, [pc, #52]	@ (8003600 <xTaskGenericNotify+0x1e4>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035d0:	429a      	cmp	r2, r3
 80035d2:	d907      	bls.n	80035e4 <xTaskGenericNotify+0x1c8>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    taskYIELD_IF_USING_PREEMPTION();
 80035d4:	4b0b      	ldr	r3, [pc, #44]	@ (8003604 <xTaskGenericNotify+0x1e8>)
 80035d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80035da:	601a      	str	r2, [r3, #0]
 80035dc:	f3bf 8f4f 	dsb	sy
 80035e0:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80035e4:	f000 fa6c 	bl	8003ac0 <vPortExitCritical>

        return xReturn;
 80035e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
 80035ea:	4618      	mov	r0, r3
 80035ec:	3730      	adds	r7, #48	@ 0x30
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}
 80035f2:	bf00      	nop
 80035f4:	20000198 	.word	0x20000198
 80035f8:	2000019c 	.word	0x2000019c
 80035fc:	200000c0 	.word	0x200000c0
 8003600:	200000bc 	.word	0x200000bc
 8003604:	e000ed04 	.word	0xe000ed04

08003608 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b084      	sub	sp, #16
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
 8003610:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8003612:	4b32      	ldr	r3, [pc, #200]	@ (80036dc <prvAddCurrentTaskToDelayedList+0xd4>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003618:	4b31      	ldr	r3, [pc, #196]	@ (80036e0 <prvAddCurrentTaskToDelayedList+0xd8>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	3304      	adds	r3, #4
 800361e:	4618      	mov	r0, r3
 8003620:	f7ff f9fe 	bl	8002a20 <uxListRemove>
 8003624:	4603      	mov	r3, r0
 8003626:	2b00      	cmp	r3, #0
 8003628:	d10b      	bne.n	8003642 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800362a:	4b2d      	ldr	r3, [pc, #180]	@ (80036e0 <prvAddCurrentTaskToDelayedList+0xd8>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003630:	2201      	movs	r2, #1
 8003632:	fa02 f303 	lsl.w	r3, r2, r3
 8003636:	43da      	mvns	r2, r3
 8003638:	4b2a      	ldr	r3, [pc, #168]	@ (80036e4 <prvAddCurrentTaskToDelayedList+0xdc>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4013      	ands	r3, r2
 800363e:	4a29      	ldr	r2, [pc, #164]	@ (80036e4 <prvAddCurrentTaskToDelayedList+0xdc>)
 8003640:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003648:	d110      	bne.n	800366c <prvAddCurrentTaskToDelayedList+0x64>
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d00d      	beq.n	800366c <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8003650:	4b23      	ldr	r3, [pc, #140]	@ (80036e0 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	211b      	movs	r1, #27
 8003656:	4618      	mov	r0, r3
 8003658:	f001 fe22 	bl	80052a0 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800365c:	4b20      	ldr	r3, [pc, #128]	@ (80036e0 <prvAddCurrentTaskToDelayedList+0xd8>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	3304      	adds	r3, #4
 8003662:	4619      	mov	r1, r3
 8003664:	4820      	ldr	r0, [pc, #128]	@ (80036e8 <prvAddCurrentTaskToDelayedList+0xe0>)
 8003666:	f7ff f97e 	bl	8002966 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 800366a:	e032      	b.n	80036d2 <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 800366c:	68fa      	ldr	r2, [r7, #12]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	4413      	add	r3, r2
 8003672:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003674:	4b1a      	ldr	r3, [pc, #104]	@ (80036e0 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	68ba      	ldr	r2, [r7, #8]
 800367a:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 800367c:	68ba      	ldr	r2, [r7, #8]
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	429a      	cmp	r2, r3
 8003682:	d20f      	bcs.n	80036a4 <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8003684:	4b16      	ldr	r3, [pc, #88]	@ (80036e0 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	2104      	movs	r1, #4
 800368a:	4618      	mov	r0, r3
 800368c:	f001 fe08 	bl	80052a0 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003690:	4b16      	ldr	r3, [pc, #88]	@ (80036ec <prvAddCurrentTaskToDelayedList+0xe4>)
 8003692:	681a      	ldr	r2, [r3, #0]
 8003694:	4b12      	ldr	r3, [pc, #72]	@ (80036e0 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	3304      	adds	r3, #4
 800369a:	4619      	mov	r1, r3
 800369c:	4610      	mov	r0, r2
 800369e:	f7ff f986 	bl	80029ae <vListInsert>
}
 80036a2:	e016      	b.n	80036d2 <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 80036a4:	4b0e      	ldr	r3, [pc, #56]	@ (80036e0 <prvAddCurrentTaskToDelayedList+0xd8>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	2104      	movs	r1, #4
 80036aa:	4618      	mov	r0, r3
 80036ac:	f001 fdf8 	bl	80052a0 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80036b0:	4b0f      	ldr	r3, [pc, #60]	@ (80036f0 <prvAddCurrentTaskToDelayedList+0xe8>)
 80036b2:	681a      	ldr	r2, [r3, #0]
 80036b4:	4b0a      	ldr	r3, [pc, #40]	@ (80036e0 <prvAddCurrentTaskToDelayedList+0xd8>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	3304      	adds	r3, #4
 80036ba:	4619      	mov	r1, r3
 80036bc:	4610      	mov	r0, r2
 80036be:	f7ff f976 	bl	80029ae <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 80036c2:	4b0c      	ldr	r3, [pc, #48]	@ (80036f4 <prvAddCurrentTaskToDelayedList+0xec>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	68ba      	ldr	r2, [r7, #8]
 80036c8:	429a      	cmp	r2, r3
 80036ca:	d202      	bcs.n	80036d2 <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 80036cc:	4a09      	ldr	r2, [pc, #36]	@ (80036f4 <prvAddCurrentTaskToDelayedList+0xec>)
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	6013      	str	r3, [r2, #0]
}
 80036d2:	bf00      	nop
 80036d4:	3710      	adds	r7, #16
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}
 80036da:	bf00      	nop
 80036dc:	20000198 	.word	0x20000198
 80036e0:	200000bc 	.word	0x200000bc
 80036e4:	2000019c 	.word	0x2000019c
 80036e8:	20000180 	.word	0x20000180
 80036ec:	20000150 	.word	0x20000150
 80036f0:	2000014c 	.word	0x2000014c
 80036f4:	200001b4 	.word	0x200001b4

080036f8 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80036f8:	b480      	push	{r7}
 80036fa:	b085      	sub	sp, #20
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	60f8      	str	r0, [r7, #12]
 8003700:	60b9      	str	r1, [r7, #8]
 8003702:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	3b04      	subs	r3, #4
 8003708:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003710:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	3b04      	subs	r3, #4
 8003716:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	f023 0201 	bic.w	r2, r3, #1
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	3b04      	subs	r3, #4
 8003726:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8003728:	4a0c      	ldr	r2, [pc, #48]	@ (800375c <pxPortInitialiseStack+0x64>)
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	3b14      	subs	r3, #20
 8003732:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8003734:	687a      	ldr	r2, [r7, #4]
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	3b04      	subs	r3, #4
 800373e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	f06f 0202 	mvn.w	r2, #2
 8003746:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	3b20      	subs	r3, #32
 800374c:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800374e:	68fb      	ldr	r3, [r7, #12]
}
 8003750:	4618      	mov	r0, r3
 8003752:	3714      	adds	r7, #20
 8003754:	46bd      	mov	sp, r7
 8003756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375a:	4770      	bx	lr
 800375c:	08003761 	.word	0x08003761

08003760 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003760:	b480      	push	{r7}
 8003762:	b085      	sub	sp, #20
 8003764:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8003766:	2300      	movs	r3, #0
 8003768:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800376a:	4b13      	ldr	r3, [pc, #76]	@ (80037b8 <prvTaskExitError+0x58>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003772:	d00b      	beq.n	800378c <prvTaskExitError+0x2c>
        __asm volatile
 8003774:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003778:	f383 8811 	msr	BASEPRI, r3
 800377c:	f3bf 8f6f 	isb	sy
 8003780:	f3bf 8f4f 	dsb	sy
 8003784:	60fb      	str	r3, [r7, #12]
    }
 8003786:	bf00      	nop
 8003788:	bf00      	nop
 800378a:	e7fd      	b.n	8003788 <prvTaskExitError+0x28>
        __asm volatile
 800378c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003790:	f383 8811 	msr	BASEPRI, r3
 8003794:	f3bf 8f6f 	isb	sy
 8003798:	f3bf 8f4f 	dsb	sy
 800379c:	60bb      	str	r3, [r7, #8]
    }
 800379e:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80037a0:	bf00      	nop
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d0fc      	beq.n	80037a2 <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80037a8:	bf00      	nop
 80037aa:	bf00      	nop
 80037ac:	3714      	adds	r7, #20
 80037ae:	46bd      	mov	sp, r7
 80037b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b4:	4770      	bx	lr
 80037b6:	bf00      	nop
 80037b8:	20000010 	.word	0x20000010
 80037bc:	00000000 	.word	0x00000000

080037c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80037c0:	4b07      	ldr	r3, [pc, #28]	@ (80037e0 <pxCurrentTCBConst2>)
 80037c2:	6819      	ldr	r1, [r3, #0]
 80037c4:	6808      	ldr	r0, [r1, #0]
 80037c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037ca:	f380 8809 	msr	PSP, r0
 80037ce:	f3bf 8f6f 	isb	sy
 80037d2:	f04f 0000 	mov.w	r0, #0
 80037d6:	f380 8811 	msr	BASEPRI, r0
 80037da:	4770      	bx	lr
 80037dc:	f3af 8000 	nop.w

080037e0 <pxCurrentTCBConst2>:
 80037e0:	200000bc 	.word	0x200000bc
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80037e4:	bf00      	nop
 80037e6:	bf00      	nop

080037e8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80037e8:	4808      	ldr	r0, [pc, #32]	@ (800380c <prvPortStartFirstTask+0x24>)
 80037ea:	6800      	ldr	r0, [r0, #0]
 80037ec:	6800      	ldr	r0, [r0, #0]
 80037ee:	f380 8808 	msr	MSP, r0
 80037f2:	f04f 0000 	mov.w	r0, #0
 80037f6:	f380 8814 	msr	CONTROL, r0
 80037fa:	b662      	cpsie	i
 80037fc:	b661      	cpsie	f
 80037fe:	f3bf 8f4f 	dsb	sy
 8003802:	f3bf 8f6f 	isb	sy
 8003806:	df00      	svc	0
 8003808:	bf00      	nop
 800380a:	0000      	.short	0x0000
 800380c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8003810:	bf00      	nop
 8003812:	bf00      	nop

08003814 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b086      	sub	sp, #24
 8003818:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800381a:	4b47      	ldr	r3, [pc, #284]	@ (8003938 <xPortStartScheduler+0x124>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a47      	ldr	r2, [pc, #284]	@ (800393c <xPortStartScheduler+0x128>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d10b      	bne.n	800383c <xPortStartScheduler+0x28>
        __asm volatile
 8003824:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003828:	f383 8811 	msr	BASEPRI, r3
 800382c:	f3bf 8f6f 	isb	sy
 8003830:	f3bf 8f4f 	dsb	sy
 8003834:	613b      	str	r3, [r7, #16]
    }
 8003836:	bf00      	nop
 8003838:	bf00      	nop
 800383a:	e7fd      	b.n	8003838 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800383c:	4b3e      	ldr	r3, [pc, #248]	@ (8003938 <xPortStartScheduler+0x124>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a3f      	ldr	r2, [pc, #252]	@ (8003940 <xPortStartScheduler+0x12c>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d10b      	bne.n	800385e <xPortStartScheduler+0x4a>
        __asm volatile
 8003846:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800384a:	f383 8811 	msr	BASEPRI, r3
 800384e:	f3bf 8f6f 	isb	sy
 8003852:	f3bf 8f4f 	dsb	sy
 8003856:	60fb      	str	r3, [r7, #12]
    }
 8003858:	bf00      	nop
 800385a:	bf00      	nop
 800385c:	e7fd      	b.n	800385a <xPortStartScheduler+0x46>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800385e:	4b39      	ldr	r3, [pc, #228]	@ (8003944 <xPortStartScheduler+0x130>)
 8003860:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	781b      	ldrb	r3, [r3, #0]
 8003866:	b2db      	uxtb	r3, r3
 8003868:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	22ff      	movs	r2, #255	@ 0xff
 800386e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	781b      	ldrb	r3, [r3, #0]
 8003874:	b2db      	uxtb	r3, r3
 8003876:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003878:	78fb      	ldrb	r3, [r7, #3]
 800387a:	b2db      	uxtb	r3, r3
 800387c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003880:	b2da      	uxtb	r2, r3
 8003882:	4b31      	ldr	r3, [pc, #196]	@ (8003948 <xPortStartScheduler+0x134>)
 8003884:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003886:	4b31      	ldr	r3, [pc, #196]	@ (800394c <xPortStartScheduler+0x138>)
 8003888:	2207      	movs	r2, #7
 800388a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800388c:	e009      	b.n	80038a2 <xPortStartScheduler+0x8e>
            {
                ulMaxPRIGROUPValue--;
 800388e:	4b2f      	ldr	r3, [pc, #188]	@ (800394c <xPortStartScheduler+0x138>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	3b01      	subs	r3, #1
 8003894:	4a2d      	ldr	r2, [pc, #180]	@ (800394c <xPortStartScheduler+0x138>)
 8003896:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003898:	78fb      	ldrb	r3, [r7, #3]
 800389a:	b2db      	uxtb	r3, r3
 800389c:	005b      	lsls	r3, r3, #1
 800389e:	b2db      	uxtb	r3, r3
 80038a0:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80038a2:	78fb      	ldrb	r3, [r7, #3]
 80038a4:	b2db      	uxtb	r3, r3
 80038a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038aa:	2b80      	cmp	r3, #128	@ 0x80
 80038ac:	d0ef      	beq.n	800388e <xPortStartScheduler+0x7a>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80038ae:	4b27      	ldr	r3, [pc, #156]	@ (800394c <xPortStartScheduler+0x138>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f1c3 0307 	rsb	r3, r3, #7
 80038b6:	2b04      	cmp	r3, #4
 80038b8:	d00b      	beq.n	80038d2 <xPortStartScheduler+0xbe>
        __asm volatile
 80038ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038be:	f383 8811 	msr	BASEPRI, r3
 80038c2:	f3bf 8f6f 	isb	sy
 80038c6:	f3bf 8f4f 	dsb	sy
 80038ca:	60bb      	str	r3, [r7, #8]
    }
 80038cc:	bf00      	nop
 80038ce:	bf00      	nop
 80038d0:	e7fd      	b.n	80038ce <xPortStartScheduler+0xba>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80038d2:	4b1e      	ldr	r3, [pc, #120]	@ (800394c <xPortStartScheduler+0x138>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	021b      	lsls	r3, r3, #8
 80038d8:	4a1c      	ldr	r2, [pc, #112]	@ (800394c <xPortStartScheduler+0x138>)
 80038da:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80038dc:	4b1b      	ldr	r3, [pc, #108]	@ (800394c <xPortStartScheduler+0x138>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80038e4:	4a19      	ldr	r2, [pc, #100]	@ (800394c <xPortStartScheduler+0x138>)
 80038e6:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	b2da      	uxtb	r2, r3
 80038ec:	697b      	ldr	r3, [r7, #20]
 80038ee:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80038f0:	4b17      	ldr	r3, [pc, #92]	@ (8003950 <xPortStartScheduler+0x13c>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a16      	ldr	r2, [pc, #88]	@ (8003950 <xPortStartScheduler+0x13c>)
 80038f6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80038fa:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80038fc:	4b14      	ldr	r3, [pc, #80]	@ (8003950 <xPortStartScheduler+0x13c>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a13      	ldr	r2, [pc, #76]	@ (8003950 <xPortStartScheduler+0x13c>)
 8003902:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8003906:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8003908:	f000 f968 	bl	8003bdc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 800390c:	4b11      	ldr	r3, [pc, #68]	@ (8003954 <xPortStartScheduler+0x140>)
 800390e:	2200      	movs	r2, #0
 8003910:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8003912:	f000 f987 	bl	8003c24 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003916:	4b10      	ldr	r3, [pc, #64]	@ (8003958 <xPortStartScheduler+0x144>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a0f      	ldr	r2, [pc, #60]	@ (8003958 <xPortStartScheduler+0x144>)
 800391c:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8003920:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8003922:	f7ff ff61 	bl	80037e8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8003926:	f7ff fbd3 	bl	80030d0 <vTaskSwitchContext>
    prvTaskExitError();
 800392a:	f7ff ff19 	bl	8003760 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 800392e:	2300      	movs	r3, #0
}
 8003930:	4618      	mov	r0, r3
 8003932:	3718      	adds	r7, #24
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}
 8003938:	e000ed00 	.word	0xe000ed00
 800393c:	410fc271 	.word	0x410fc271
 8003940:	410fc270 	.word	0x410fc270
 8003944:	e000e400 	.word	0xe000e400
 8003948:	200001c0 	.word	0x200001c0
 800394c:	200001c4 	.word	0x200001c4
 8003950:	e000ed20 	.word	0xe000ed20
 8003954:	20000010 	.word	0x20000010
 8003958:	e000ef34 	.word	0xe000ef34

0800395c <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 800395c:	b480      	push	{r7}
 800395e:	b087      	sub	sp, #28
 8003960:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003962:	4b38      	ldr	r3, [pc, #224]	@ (8003a44 <vInitPrioGroupValue+0xe8>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a38      	ldr	r2, [pc, #224]	@ (8003a48 <vInitPrioGroupValue+0xec>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d10b      	bne.n	8003984 <vInitPrioGroupValue+0x28>
        __asm volatile
 800396c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003970:	f383 8811 	msr	BASEPRI, r3
 8003974:	f3bf 8f6f 	isb	sy
 8003978:	f3bf 8f4f 	dsb	sy
 800397c:	613b      	str	r3, [r7, #16]
    }
 800397e:	bf00      	nop
 8003980:	bf00      	nop
 8003982:	e7fd      	b.n	8003980 <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003984:	4b2f      	ldr	r3, [pc, #188]	@ (8003a44 <vInitPrioGroupValue+0xe8>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a30      	ldr	r2, [pc, #192]	@ (8003a4c <vInitPrioGroupValue+0xf0>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d10b      	bne.n	80039a6 <vInitPrioGroupValue+0x4a>
        __asm volatile
 800398e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003992:	f383 8811 	msr	BASEPRI, r3
 8003996:	f3bf 8f6f 	isb	sy
 800399a:	f3bf 8f4f 	dsb	sy
 800399e:	60fb      	str	r3, [r7, #12]
    }
 80039a0:	bf00      	nop
 80039a2:	bf00      	nop
 80039a4:	e7fd      	b.n	80039a2 <vInitPrioGroupValue+0x46>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80039a6:	4b2a      	ldr	r3, [pc, #168]	@ (8003a50 <vInitPrioGroupValue+0xf4>)
 80039a8:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	781b      	ldrb	r3, [r3, #0]
 80039ae:	b2db      	uxtb	r3, r3
 80039b0:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	22ff      	movs	r2, #255	@ 0xff
 80039b6:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	781b      	ldrb	r3, [r3, #0]
 80039bc:	b2db      	uxtb	r3, r3
 80039be:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80039c0:	78fb      	ldrb	r3, [r7, #3]
 80039c2:	b2db      	uxtb	r3, r3
 80039c4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80039c8:	b2da      	uxtb	r2, r3
 80039ca:	4b22      	ldr	r3, [pc, #136]	@ (8003a54 <vInitPrioGroupValue+0xf8>)
 80039cc:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80039ce:	4b22      	ldr	r3, [pc, #136]	@ (8003a58 <vInitPrioGroupValue+0xfc>)
 80039d0:	2207      	movs	r2, #7
 80039d2:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80039d4:	e009      	b.n	80039ea <vInitPrioGroupValue+0x8e>
            {
                ulMaxPRIGROUPValue--;
 80039d6:	4b20      	ldr	r3, [pc, #128]	@ (8003a58 <vInitPrioGroupValue+0xfc>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	3b01      	subs	r3, #1
 80039dc:	4a1e      	ldr	r2, [pc, #120]	@ (8003a58 <vInitPrioGroupValue+0xfc>)
 80039de:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80039e0:	78fb      	ldrb	r3, [r7, #3]
 80039e2:	b2db      	uxtb	r3, r3
 80039e4:	005b      	lsls	r3, r3, #1
 80039e6:	b2db      	uxtb	r3, r3
 80039e8:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80039ea:	78fb      	ldrb	r3, [r7, #3]
 80039ec:	b2db      	uxtb	r3, r3
 80039ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039f2:	2b80      	cmp	r3, #128	@ 0x80
 80039f4:	d0ef      	beq.n	80039d6 <vInitPrioGroupValue+0x7a>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80039f6:	4b18      	ldr	r3, [pc, #96]	@ (8003a58 <vInitPrioGroupValue+0xfc>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f1c3 0307 	rsb	r3, r3, #7
 80039fe:	2b04      	cmp	r3, #4
 8003a00:	d00b      	beq.n	8003a1a <vInitPrioGroupValue+0xbe>
        __asm volatile
 8003a02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a06:	f383 8811 	msr	BASEPRI, r3
 8003a0a:	f3bf 8f6f 	isb	sy
 8003a0e:	f3bf 8f4f 	dsb	sy
 8003a12:	60bb      	str	r3, [r7, #8]
    }
 8003a14:	bf00      	nop
 8003a16:	bf00      	nop
 8003a18:	e7fd      	b.n	8003a16 <vInitPrioGroupValue+0xba>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003a1a:	4b0f      	ldr	r3, [pc, #60]	@ (8003a58 <vInitPrioGroupValue+0xfc>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	021b      	lsls	r3, r3, #8
 8003a20:	4a0d      	ldr	r2, [pc, #52]	@ (8003a58 <vInitPrioGroupValue+0xfc>)
 8003a22:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003a24:	4b0c      	ldr	r3, [pc, #48]	@ (8003a58 <vInitPrioGroupValue+0xfc>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003a2c:	4a0a      	ldr	r2, [pc, #40]	@ (8003a58 <vInitPrioGroupValue+0xfc>)
 8003a2e:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	b2da      	uxtb	r2, r3
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 8003a38:	bf00      	nop
 8003a3a:	371c      	adds	r7, #28
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a42:	4770      	bx	lr
 8003a44:	e000ed00 	.word	0xe000ed00
 8003a48:	410fc271 	.word	0x410fc271
 8003a4c:	410fc270 	.word	0x410fc270
 8003a50:	e000e400 	.word	0xe000e400
 8003a54:	200001c0 	.word	0x200001c0
 8003a58:	200001c4 	.word	0x200001c4

08003a5c <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b083      	sub	sp, #12
 8003a60:	af00      	add	r7, sp, #0
        __asm volatile
 8003a62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a66:	f383 8811 	msr	BASEPRI, r3
 8003a6a:	f3bf 8f6f 	isb	sy
 8003a6e:	f3bf 8f4f 	dsb	sy
 8003a72:	607b      	str	r3, [r7, #4]
    }
 8003a74:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8003a76:	4b10      	ldr	r3, [pc, #64]	@ (8003ab8 <vPortEnterCritical+0x5c>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	3301      	adds	r3, #1
 8003a7c:	4a0e      	ldr	r2, [pc, #56]	@ (8003ab8 <vPortEnterCritical+0x5c>)
 8003a7e:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8003a80:	4b0d      	ldr	r3, [pc, #52]	@ (8003ab8 <vPortEnterCritical+0x5c>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	2b01      	cmp	r3, #1
 8003a86:	d110      	bne.n	8003aaa <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003a88:	4b0c      	ldr	r3, [pc, #48]	@ (8003abc <vPortEnterCritical+0x60>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	b2db      	uxtb	r3, r3
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d00b      	beq.n	8003aaa <vPortEnterCritical+0x4e>
        __asm volatile
 8003a92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a96:	f383 8811 	msr	BASEPRI, r3
 8003a9a:	f3bf 8f6f 	isb	sy
 8003a9e:	f3bf 8f4f 	dsb	sy
 8003aa2:	603b      	str	r3, [r7, #0]
    }
 8003aa4:	bf00      	nop
 8003aa6:	bf00      	nop
 8003aa8:	e7fd      	b.n	8003aa6 <vPortEnterCritical+0x4a>
    }
}
 8003aaa:	bf00      	nop
 8003aac:	370c      	adds	r7, #12
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab4:	4770      	bx	lr
 8003ab6:	bf00      	nop
 8003ab8:	20000010 	.word	0x20000010
 8003abc:	e000ed04 	.word	0xe000ed04

08003ac0 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b083      	sub	sp, #12
 8003ac4:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8003ac6:	4b12      	ldr	r3, [pc, #72]	@ (8003b10 <vPortExitCritical+0x50>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d10b      	bne.n	8003ae6 <vPortExitCritical+0x26>
        __asm volatile
 8003ace:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ad2:	f383 8811 	msr	BASEPRI, r3
 8003ad6:	f3bf 8f6f 	isb	sy
 8003ada:	f3bf 8f4f 	dsb	sy
 8003ade:	607b      	str	r3, [r7, #4]
    }
 8003ae0:	bf00      	nop
 8003ae2:	bf00      	nop
 8003ae4:	e7fd      	b.n	8003ae2 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8003ae6:	4b0a      	ldr	r3, [pc, #40]	@ (8003b10 <vPortExitCritical+0x50>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	3b01      	subs	r3, #1
 8003aec:	4a08      	ldr	r2, [pc, #32]	@ (8003b10 <vPortExitCritical+0x50>)
 8003aee:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8003af0:	4b07      	ldr	r3, [pc, #28]	@ (8003b10 <vPortExitCritical+0x50>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d105      	bne.n	8003b04 <vPortExitCritical+0x44>
 8003af8:	2300      	movs	r3, #0
 8003afa:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8003b02:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8003b04:	bf00      	nop
 8003b06:	370c      	adds	r7, #12
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0e:	4770      	bx	lr
 8003b10:	20000010 	.word	0x20000010
	...

08003b20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8003b20:	f3ef 8009 	mrs	r0, PSP
 8003b24:	f3bf 8f6f 	isb	sy
 8003b28:	4b15      	ldr	r3, [pc, #84]	@ (8003b80 <pxCurrentTCBConst>)
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	f01e 0f10 	tst.w	lr, #16
 8003b30:	bf08      	it	eq
 8003b32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003b36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b3a:	6010      	str	r0, [r2, #0]
 8003b3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003b40:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8003b44:	f380 8811 	msr	BASEPRI, r0
 8003b48:	f3bf 8f4f 	dsb	sy
 8003b4c:	f3bf 8f6f 	isb	sy
 8003b50:	f7ff fabe 	bl	80030d0 <vTaskSwitchContext>
 8003b54:	f04f 0000 	mov.w	r0, #0
 8003b58:	f380 8811 	msr	BASEPRI, r0
 8003b5c:	bc09      	pop	{r0, r3}
 8003b5e:	6819      	ldr	r1, [r3, #0]
 8003b60:	6808      	ldr	r0, [r1, #0]
 8003b62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b66:	f01e 0f10 	tst.w	lr, #16
 8003b6a:	bf08      	it	eq
 8003b6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003b70:	f380 8809 	msr	PSP, r0
 8003b74:	f3bf 8f6f 	isb	sy
 8003b78:	4770      	bx	lr
 8003b7a:	bf00      	nop
 8003b7c:	f3af 8000 	nop.w

08003b80 <pxCurrentTCBConst>:
 8003b80:	200000bc 	.word	0x200000bc
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8003b84:	bf00      	nop
 8003b86:	bf00      	nop

08003b88 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b082      	sub	sp, #8
 8003b8c:	af00      	add	r7, sp, #0
        __asm volatile
 8003b8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b92:	f383 8811 	msr	BASEPRI, r3
 8003b96:	f3bf 8f6f 	isb	sy
 8003b9a:	f3bf 8f4f 	dsb	sy
 8003b9e:	607b      	str	r3, [r7, #4]
    }
 8003ba0:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8003ba2:	f001 fa21 	bl	8004fe8 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8003ba6:	f7ff f9d5 	bl	8002f54 <xTaskIncrementTick>
 8003baa:	4603      	mov	r3, r0
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d006      	beq.n	8003bbe <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8003bb0:	f001 fa78 	bl	80050a4 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003bb4:	4b08      	ldr	r3, [pc, #32]	@ (8003bd8 <SysTick_Handler+0x50>)
 8003bb6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003bba:	601a      	str	r2, [r3, #0]
 8003bbc:	e001      	b.n	8003bc2 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 8003bbe:	f001 fa55 	bl	800506c <SEGGER_SYSVIEW_RecordExitISR>
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	603b      	str	r3, [r7, #0]
        __asm volatile
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	f383 8811 	msr	BASEPRI, r3
    }
 8003bcc:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 8003bce:	bf00      	nop
 8003bd0:	3708      	adds	r7, #8
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}
 8003bd6:	bf00      	nop
 8003bd8:	e000ed04 	.word	0xe000ed04

08003bdc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8003bdc:	b480      	push	{r7}
 8003bde:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003be0:	4b0b      	ldr	r3, [pc, #44]	@ (8003c10 <vPortSetupTimerInterrupt+0x34>)
 8003be2:	2200      	movs	r2, #0
 8003be4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003be6:	4b0b      	ldr	r3, [pc, #44]	@ (8003c14 <vPortSetupTimerInterrupt+0x38>)
 8003be8:	2200      	movs	r2, #0
 8003bea:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003bec:	4b0a      	ldr	r3, [pc, #40]	@ (8003c18 <vPortSetupTimerInterrupt+0x3c>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a0a      	ldr	r2, [pc, #40]	@ (8003c1c <vPortSetupTimerInterrupt+0x40>)
 8003bf2:	fba2 2303 	umull	r2, r3, r2, r3
 8003bf6:	099b      	lsrs	r3, r3, #6
 8003bf8:	4a09      	ldr	r2, [pc, #36]	@ (8003c20 <vPortSetupTimerInterrupt+0x44>)
 8003bfa:	3b01      	subs	r3, #1
 8003bfc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003bfe:	4b04      	ldr	r3, [pc, #16]	@ (8003c10 <vPortSetupTimerInterrupt+0x34>)
 8003c00:	2207      	movs	r2, #7
 8003c02:	601a      	str	r2, [r3, #0]
}
 8003c04:	bf00      	nop
 8003c06:	46bd      	mov	sp, r7
 8003c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0c:	4770      	bx	lr
 8003c0e:	bf00      	nop
 8003c10:	e000e010 	.word	0xe000e010
 8003c14:	e000e018 	.word	0xe000e018
 8003c18:	20000000 	.word	0x20000000
 8003c1c:	10624dd3 	.word	0x10624dd3
 8003c20:	e000e014 	.word	0xe000e014

08003c24 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8003c24:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8003c34 <vPortEnableVFP+0x10>
 8003c28:	6801      	ldr	r1, [r0, #0]
 8003c2a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8003c2e:	6001      	str	r1, [r0, #0]
 8003c30:	4770      	bx	lr
 8003c32:	0000      	.short	0x0000
 8003c34:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8003c38:	bf00      	nop
 8003c3a:	bf00      	nop

08003c3c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b08a      	sub	sp, #40	@ 0x28
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8003c44:	2300      	movs	r3, #0
 8003c46:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8003c48:	f7ff f8d4 	bl	8002df4 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8003c4c:	4b66      	ldr	r3, [pc, #408]	@ (8003de8 <pvPortMalloc+0x1ac>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d101      	bne.n	8003c58 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8003c54:	f000 f938 	bl	8003ec8 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003c58:	4b64      	ldr	r3, [pc, #400]	@ (8003dec <pvPortMalloc+0x1b0>)
 8003c5a:	681a      	ldr	r2, [r3, #0]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	4013      	ands	r3, r2
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	f040 80a9 	bne.w	8003db8 <pvPortMalloc+0x17c>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d02e      	beq.n	8003cca <pvPortMalloc+0x8e>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8003c6c:	2208      	movs	r2, #8
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8003c72:	687a      	ldr	r2, [r7, #4]
 8003c74:	429a      	cmp	r2, r3
 8003c76:	d228      	bcs.n	8003cca <pvPortMalloc+0x8e>
            {
                xWantedSize += xHeapStructSize;
 8003c78:	2208      	movs	r2, #8
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	4413      	add	r3, r2
 8003c7e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	f003 0307 	and.w	r3, r3, #7
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d022      	beq.n	8003cd0 <pvPortMalloc+0x94>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	f023 0307 	bic.w	r3, r3, #7
 8003c90:	3308      	adds	r3, #8
 8003c92:	687a      	ldr	r2, [r7, #4]
 8003c94:	429a      	cmp	r2, r3
 8003c96:	d215      	bcs.n	8003cc4 <pvPortMalloc+0x88>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	f023 0307 	bic.w	r3, r3, #7
 8003c9e:	3308      	adds	r3, #8
 8003ca0:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	f003 0307 	and.w	r3, r3, #7
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d011      	beq.n	8003cd0 <pvPortMalloc+0x94>
        __asm volatile
 8003cac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cb0:	f383 8811 	msr	BASEPRI, r3
 8003cb4:	f3bf 8f6f 	isb	sy
 8003cb8:	f3bf 8f4f 	dsb	sy
 8003cbc:	617b      	str	r3, [r7, #20]
    }
 8003cbe:	bf00      	nop
 8003cc0:	bf00      	nop
 8003cc2:	e7fd      	b.n	8003cc0 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003cc8:	e002      	b.n	8003cd0 <pvPortMalloc+0x94>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8003cca:	2300      	movs	r3, #0
 8003ccc:	607b      	str	r3, [r7, #4]
 8003cce:	e000      	b.n	8003cd2 <pvPortMalloc+0x96>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003cd0:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d06f      	beq.n	8003db8 <pvPortMalloc+0x17c>
 8003cd8:	4b45      	ldr	r3, [pc, #276]	@ (8003df0 <pvPortMalloc+0x1b4>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	687a      	ldr	r2, [r7, #4]
 8003cde:	429a      	cmp	r2, r3
 8003ce0:	d86a      	bhi.n	8003db8 <pvPortMalloc+0x17c>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8003ce2:	4b44      	ldr	r3, [pc, #272]	@ (8003df4 <pvPortMalloc+0x1b8>)
 8003ce4:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8003ce6:	4b43      	ldr	r3, [pc, #268]	@ (8003df4 <pvPortMalloc+0x1b8>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	627b      	str	r3, [r7, #36]	@ 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003cec:	e004      	b.n	8003cf8 <pvPortMalloc+0xbc>
                {
                    pxPreviousBlock = pxBlock;
 8003cee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cf0:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8003cf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	627b      	str	r3, [r7, #36]	@ 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003cf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	687a      	ldr	r2, [r7, #4]
 8003cfe:	429a      	cmp	r2, r3
 8003d00:	d903      	bls.n	8003d0a <pvPortMalloc+0xce>
 8003d02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d1f1      	bne.n	8003cee <pvPortMalloc+0xb2>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8003d0a:	4b37      	ldr	r3, [pc, #220]	@ (8003de8 <pvPortMalloc+0x1ac>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d10:	429a      	cmp	r2, r3
 8003d12:	d051      	beq.n	8003db8 <pvPortMalloc+0x17c>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003d14:	6a3b      	ldr	r3, [r7, #32]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	2208      	movs	r2, #8
 8003d1a:	4413      	add	r3, r2
 8003d1c:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003d1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d20:	681a      	ldr	r2, [r3, #0]
 8003d22:	6a3b      	ldr	r3, [r7, #32]
 8003d24:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003d26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d28:	685a      	ldr	r2, [r3, #4]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	1ad2      	subs	r2, r2, r3
 8003d2e:	2308      	movs	r3, #8
 8003d30:	005b      	lsls	r3, r3, #1
 8003d32:	429a      	cmp	r2, r3
 8003d34:	d920      	bls.n	8003d78 <pvPortMalloc+0x13c>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003d36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	4413      	add	r3, r2
 8003d3c:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003d3e:	69bb      	ldr	r3, [r7, #24]
 8003d40:	f003 0307 	and.w	r3, r3, #7
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d00b      	beq.n	8003d60 <pvPortMalloc+0x124>
        __asm volatile
 8003d48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d4c:	f383 8811 	msr	BASEPRI, r3
 8003d50:	f3bf 8f6f 	isb	sy
 8003d54:	f3bf 8f4f 	dsb	sy
 8003d58:	613b      	str	r3, [r7, #16]
    }
 8003d5a:	bf00      	nop
 8003d5c:	bf00      	nop
 8003d5e:	e7fd      	b.n	8003d5c <pvPortMalloc+0x120>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003d60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d62:	685a      	ldr	r2, [r3, #4]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	1ad2      	subs	r2, r2, r3
 8003d68:	69bb      	ldr	r3, [r7, #24]
 8003d6a:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8003d6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d6e:	687a      	ldr	r2, [r7, #4]
 8003d70:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003d72:	69b8      	ldr	r0, [r7, #24]
 8003d74:	f000 f90a 	bl	8003f8c <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003d78:	4b1d      	ldr	r3, [pc, #116]	@ (8003df0 <pvPortMalloc+0x1b4>)
 8003d7a:	681a      	ldr	r2, [r3, #0]
 8003d7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	1ad3      	subs	r3, r2, r3
 8003d82:	4a1b      	ldr	r2, [pc, #108]	@ (8003df0 <pvPortMalloc+0x1b4>)
 8003d84:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003d86:	4b1a      	ldr	r3, [pc, #104]	@ (8003df0 <pvPortMalloc+0x1b4>)
 8003d88:	681a      	ldr	r2, [r3, #0]
 8003d8a:	4b1b      	ldr	r3, [pc, #108]	@ (8003df8 <pvPortMalloc+0x1bc>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	429a      	cmp	r2, r3
 8003d90:	d203      	bcs.n	8003d9a <pvPortMalloc+0x15e>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003d92:	4b17      	ldr	r3, [pc, #92]	@ (8003df0 <pvPortMalloc+0x1b4>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a18      	ldr	r2, [pc, #96]	@ (8003df8 <pvPortMalloc+0x1bc>)
 8003d98:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003d9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d9c:	685a      	ldr	r2, [r3, #4]
 8003d9e:	4b13      	ldr	r3, [pc, #76]	@ (8003dec <pvPortMalloc+0x1b0>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	431a      	orrs	r2, r3
 8003da4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003da6:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8003da8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003daa:	2200      	movs	r2, #0
 8003dac:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8003dae:	4b13      	ldr	r3, [pc, #76]	@ (8003dfc <pvPortMalloc+0x1c0>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	3301      	adds	r3, #1
 8003db4:	4a11      	ldr	r2, [pc, #68]	@ (8003dfc <pvPortMalloc+0x1c0>)
 8003db6:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8003db8:	f7ff f82a 	bl	8002e10 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003dbc:	69fb      	ldr	r3, [r7, #28]
 8003dbe:	f003 0307 	and.w	r3, r3, #7
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d00b      	beq.n	8003dde <pvPortMalloc+0x1a2>
        __asm volatile
 8003dc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003dca:	f383 8811 	msr	BASEPRI, r3
 8003dce:	f3bf 8f6f 	isb	sy
 8003dd2:	f3bf 8f4f 	dsb	sy
 8003dd6:	60fb      	str	r3, [r7, #12]
    }
 8003dd8:	bf00      	nop
 8003dda:	bf00      	nop
 8003ddc:	e7fd      	b.n	8003dda <pvPortMalloc+0x19e>
    return pvReturn;
 8003dde:	69fb      	ldr	r3, [r7, #28]
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	3728      	adds	r7, #40	@ 0x28
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bd80      	pop	{r7, pc}
 8003de8:	20012dd0 	.word	0x20012dd0
 8003dec:	20012de4 	.word	0x20012de4
 8003df0:	20012dd4 	.word	0x20012dd4
 8003df4:	20012dc8 	.word	0x20012dc8
 8003df8:	20012dd8 	.word	0x20012dd8
 8003dfc:	20012ddc 	.word	0x20012ddc

08003e00 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b086      	sub	sp, #24
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d04f      	beq.n	8003eb2 <vPortFree+0xb2>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8003e12:	2308      	movs	r3, #8
 8003e14:	425b      	negs	r3, r3
 8003e16:	697a      	ldr	r2, [r7, #20]
 8003e18:	4413      	add	r3, r2
 8003e1a:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8003e1c:	697b      	ldr	r3, [r7, #20]
 8003e1e:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003e20:	693b      	ldr	r3, [r7, #16]
 8003e22:	685a      	ldr	r2, [r3, #4]
 8003e24:	4b25      	ldr	r3, [pc, #148]	@ (8003ebc <vPortFree+0xbc>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4013      	ands	r3, r2
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d10b      	bne.n	8003e46 <vPortFree+0x46>
        __asm volatile
 8003e2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e32:	f383 8811 	msr	BASEPRI, r3
 8003e36:	f3bf 8f6f 	isb	sy
 8003e3a:	f3bf 8f4f 	dsb	sy
 8003e3e:	60fb      	str	r3, [r7, #12]
    }
 8003e40:	bf00      	nop
 8003e42:	bf00      	nop
 8003e44:	e7fd      	b.n	8003e42 <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003e46:	693b      	ldr	r3, [r7, #16]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d00b      	beq.n	8003e66 <vPortFree+0x66>
        __asm volatile
 8003e4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e52:	f383 8811 	msr	BASEPRI, r3
 8003e56:	f3bf 8f6f 	isb	sy
 8003e5a:	f3bf 8f4f 	dsb	sy
 8003e5e:	60bb      	str	r3, [r7, #8]
    }
 8003e60:	bf00      	nop
 8003e62:	bf00      	nop
 8003e64:	e7fd      	b.n	8003e62 <vPortFree+0x62>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003e66:	693b      	ldr	r3, [r7, #16]
 8003e68:	685a      	ldr	r2, [r3, #4]
 8003e6a:	4b14      	ldr	r3, [pc, #80]	@ (8003ebc <vPortFree+0xbc>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4013      	ands	r3, r2
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d01e      	beq.n	8003eb2 <vPortFree+0xb2>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8003e74:	693b      	ldr	r3, [r7, #16]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d11a      	bne.n	8003eb2 <vPortFree+0xb2>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003e7c:	693b      	ldr	r3, [r7, #16]
 8003e7e:	685a      	ldr	r2, [r3, #4]
 8003e80:	4b0e      	ldr	r3, [pc, #56]	@ (8003ebc <vPortFree+0xbc>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	43db      	mvns	r3, r3
 8003e86:	401a      	ands	r2, r3
 8003e88:	693b      	ldr	r3, [r7, #16]
 8003e8a:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8003e8c:	f7fe ffb2 	bl	8002df4 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8003e90:	693b      	ldr	r3, [r7, #16]
 8003e92:	685a      	ldr	r2, [r3, #4]
 8003e94:	4b0a      	ldr	r3, [pc, #40]	@ (8003ec0 <vPortFree+0xc0>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4413      	add	r3, r2
 8003e9a:	4a09      	ldr	r2, [pc, #36]	@ (8003ec0 <vPortFree+0xc0>)
 8003e9c:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003e9e:	6938      	ldr	r0, [r7, #16]
 8003ea0:	f000 f874 	bl	8003f8c <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8003ea4:	4b07      	ldr	r3, [pc, #28]	@ (8003ec4 <vPortFree+0xc4>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	3301      	adds	r3, #1
 8003eaa:	4a06      	ldr	r2, [pc, #24]	@ (8003ec4 <vPortFree+0xc4>)
 8003eac:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8003eae:	f7fe ffaf 	bl	8002e10 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8003eb2:	bf00      	nop
 8003eb4:	3718      	adds	r7, #24
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bd80      	pop	{r7, pc}
 8003eba:	bf00      	nop
 8003ebc:	20012de4 	.word	0x20012de4
 8003ec0:	20012dd4 	.word	0x20012dd4
 8003ec4:	20012de0 	.word	0x20012de0

08003ec8 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b085      	sub	sp, #20
 8003ecc:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003ece:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 8003ed2:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8003ed4:	4b27      	ldr	r3, [pc, #156]	@ (8003f74 <prvHeapInit+0xac>)
 8003ed6:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	f003 0307 	and.w	r3, r3, #7
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d00c      	beq.n	8003efc <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	3307      	adds	r3, #7
 8003ee6:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	f023 0307 	bic.w	r3, r3, #7
 8003eee:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003ef0:	68ba      	ldr	r2, [r7, #8]
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	1ad3      	subs	r3, r2, r3
 8003ef6:	4a1f      	ldr	r2, [pc, #124]	@ (8003f74 <prvHeapInit+0xac>)
 8003ef8:	4413      	add	r3, r2
 8003efa:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003f00:	4a1d      	ldr	r2, [pc, #116]	@ (8003f78 <prvHeapInit+0xb0>)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8003f06:	4b1c      	ldr	r3, [pc, #112]	@ (8003f78 <prvHeapInit+0xb0>)
 8003f08:	2200      	movs	r2, #0
 8003f0a:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	68ba      	ldr	r2, [r7, #8]
 8003f10:	4413      	add	r3, r2
 8003f12:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8003f14:	2208      	movs	r2, #8
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	1a9b      	subs	r3, r3, r2
 8003f1a:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	f023 0307 	bic.w	r3, r3, #7
 8003f22:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	4a15      	ldr	r2, [pc, #84]	@ (8003f7c <prvHeapInit+0xb4>)
 8003f28:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8003f2a:	4b14      	ldr	r3, [pc, #80]	@ (8003f7c <prvHeapInit+0xb4>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	2200      	movs	r2, #0
 8003f30:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8003f32:	4b12      	ldr	r3, [pc, #72]	@ (8003f7c <prvHeapInit+0xb4>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	2200      	movs	r2, #0
 8003f38:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	68fa      	ldr	r2, [r7, #12]
 8003f42:	1ad2      	subs	r2, r2, r3
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003f48:	4b0c      	ldr	r3, [pc, #48]	@ (8003f7c <prvHeapInit+0xb4>)
 8003f4a:	681a      	ldr	r2, [r3, #0]
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	4a0a      	ldr	r2, [pc, #40]	@ (8003f80 <prvHeapInit+0xb8>)
 8003f56:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	4a09      	ldr	r2, [pc, #36]	@ (8003f84 <prvHeapInit+0xbc>)
 8003f5e:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003f60:	4b09      	ldr	r3, [pc, #36]	@ (8003f88 <prvHeapInit+0xc0>)
 8003f62:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8003f66:	601a      	str	r2, [r3, #0]
}
 8003f68:	bf00      	nop
 8003f6a:	3714      	adds	r7, #20
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f72:	4770      	bx	lr
 8003f74:	200001c8 	.word	0x200001c8
 8003f78:	20012dc8 	.word	0x20012dc8
 8003f7c:	20012dd0 	.word	0x20012dd0
 8003f80:	20012dd8 	.word	0x20012dd8
 8003f84:	20012dd4 	.word	0x20012dd4
 8003f88:	20012de4 	.word	0x20012de4

08003f8c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b085      	sub	sp, #20
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003f94:	4b28      	ldr	r3, [pc, #160]	@ (8004038 <prvInsertBlockIntoFreeList+0xac>)
 8003f96:	60fb      	str	r3, [r7, #12]
 8003f98:	e002      	b.n	8003fa0 <prvInsertBlockIntoFreeList+0x14>
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	60fb      	str	r3, [r7, #12]
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	687a      	ldr	r2, [r7, #4]
 8003fa6:	429a      	cmp	r2, r3
 8003fa8:	d8f7      	bhi.n	8003f9a <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	68ba      	ldr	r2, [r7, #8]
 8003fb4:	4413      	add	r3, r2
 8003fb6:	687a      	ldr	r2, [r7, #4]
 8003fb8:	429a      	cmp	r2, r3
 8003fba:	d108      	bne.n	8003fce <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	685a      	ldr	r2, [r3, #4]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	441a      	add	r2, r3
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	68ba      	ldr	r2, [r7, #8]
 8003fd8:	441a      	add	r2, r3
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	429a      	cmp	r2, r3
 8003fe0:	d118      	bne.n	8004014 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681a      	ldr	r2, [r3, #0]
 8003fe6:	4b15      	ldr	r3, [pc, #84]	@ (800403c <prvInsertBlockIntoFreeList+0xb0>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	429a      	cmp	r2, r3
 8003fec:	d00d      	beq.n	800400a <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	685a      	ldr	r2, [r3, #4]
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	441a      	add	r2, r3
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	681a      	ldr	r2, [r3, #0]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	601a      	str	r2, [r3, #0]
 8004008:	e008      	b.n	800401c <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800400a:	4b0c      	ldr	r3, [pc, #48]	@ (800403c <prvInsertBlockIntoFreeList+0xb0>)
 800400c:	681a      	ldr	r2, [r3, #0]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	601a      	str	r2, [r3, #0]
 8004012:	e003      	b.n	800401c <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681a      	ldr	r2, [r3, #0]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 800401c:	68fa      	ldr	r2, [r7, #12]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	429a      	cmp	r2, r3
 8004022:	d002      	beq.n	800402a <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	687a      	ldr	r2, [r7, #4]
 8004028:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800402a:	bf00      	nop
 800402c:	3714      	adds	r7, #20
 800402e:	46bd      	mov	sp, r7
 8004030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004034:	4770      	bx	lr
 8004036:	bf00      	nop
 8004038:	20012dc8 	.word	0x20012dc8
 800403c:	20012dd0 	.word	0x20012dd0

08004040 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8004040:	b580      	push	{r7, lr}
 8004042:	b086      	sub	sp, #24
 8004044:	af02      	add	r7, sp, #8
 8004046:	60f8      	str	r0, [r7, #12]
 8004048:	60b9      	str	r1, [r7, #8]
 800404a:	607a      	str	r2, [r7, #4]
 800404c:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 800404e:	2205      	movs	r2, #5
 8004050:	492b      	ldr	r1, [pc, #172]	@ (8004100 <SYSVIEW_AddTask+0xc0>)
 8004052:	68b8      	ldr	r0, [r7, #8]
 8004054:	f001 facc 	bl	80055f0 <memcmp>
 8004058:	4603      	mov	r3, r0
 800405a:	2b00      	cmp	r3, #0
 800405c:	d04b      	beq.n	80040f6 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 800405e:	4b29      	ldr	r3, [pc, #164]	@ (8004104 <SYSVIEW_AddTask+0xc4>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	2b07      	cmp	r3, #7
 8004064:	d903      	bls.n	800406e <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8004066:	4828      	ldr	r0, [pc, #160]	@ (8004108 <SYSVIEW_AddTask+0xc8>)
 8004068:	f001 fa66 	bl	8005538 <SEGGER_SYSVIEW_Warn>
    return;
 800406c:	e044      	b.n	80040f8 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 800406e:	4b25      	ldr	r3, [pc, #148]	@ (8004104 <SYSVIEW_AddTask+0xc4>)
 8004070:	681a      	ldr	r2, [r3, #0]
 8004072:	4926      	ldr	r1, [pc, #152]	@ (800410c <SYSVIEW_AddTask+0xcc>)
 8004074:	4613      	mov	r3, r2
 8004076:	009b      	lsls	r3, r3, #2
 8004078:	4413      	add	r3, r2
 800407a:	009b      	lsls	r3, r3, #2
 800407c:	440b      	add	r3, r1
 800407e:	68fa      	ldr	r2, [r7, #12]
 8004080:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8004082:	4b20      	ldr	r3, [pc, #128]	@ (8004104 <SYSVIEW_AddTask+0xc4>)
 8004084:	681a      	ldr	r2, [r3, #0]
 8004086:	4921      	ldr	r1, [pc, #132]	@ (800410c <SYSVIEW_AddTask+0xcc>)
 8004088:	4613      	mov	r3, r2
 800408a:	009b      	lsls	r3, r3, #2
 800408c:	4413      	add	r3, r2
 800408e:	009b      	lsls	r3, r3, #2
 8004090:	440b      	add	r3, r1
 8004092:	3304      	adds	r3, #4
 8004094:	68ba      	ldr	r2, [r7, #8]
 8004096:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8004098:	4b1a      	ldr	r3, [pc, #104]	@ (8004104 <SYSVIEW_AddTask+0xc4>)
 800409a:	681a      	ldr	r2, [r3, #0]
 800409c:	491b      	ldr	r1, [pc, #108]	@ (800410c <SYSVIEW_AddTask+0xcc>)
 800409e:	4613      	mov	r3, r2
 80040a0:	009b      	lsls	r3, r3, #2
 80040a2:	4413      	add	r3, r2
 80040a4:	009b      	lsls	r3, r3, #2
 80040a6:	440b      	add	r3, r1
 80040a8:	3308      	adds	r3, #8
 80040aa:	687a      	ldr	r2, [r7, #4]
 80040ac:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 80040ae:	4b15      	ldr	r3, [pc, #84]	@ (8004104 <SYSVIEW_AddTask+0xc4>)
 80040b0:	681a      	ldr	r2, [r3, #0]
 80040b2:	4916      	ldr	r1, [pc, #88]	@ (800410c <SYSVIEW_AddTask+0xcc>)
 80040b4:	4613      	mov	r3, r2
 80040b6:	009b      	lsls	r3, r3, #2
 80040b8:	4413      	add	r3, r2
 80040ba:	009b      	lsls	r3, r3, #2
 80040bc:	440b      	add	r3, r1
 80040be:	330c      	adds	r3, #12
 80040c0:	683a      	ldr	r2, [r7, #0]
 80040c2:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 80040c4:	4b0f      	ldr	r3, [pc, #60]	@ (8004104 <SYSVIEW_AddTask+0xc4>)
 80040c6:	681a      	ldr	r2, [r3, #0]
 80040c8:	4910      	ldr	r1, [pc, #64]	@ (800410c <SYSVIEW_AddTask+0xcc>)
 80040ca:	4613      	mov	r3, r2
 80040cc:	009b      	lsls	r3, r3, #2
 80040ce:	4413      	add	r3, r2
 80040d0:	009b      	lsls	r3, r3, #2
 80040d2:	440b      	add	r3, r1
 80040d4:	3310      	adds	r3, #16
 80040d6:	69ba      	ldr	r2, [r7, #24]
 80040d8:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 80040da:	4b0a      	ldr	r3, [pc, #40]	@ (8004104 <SYSVIEW_AddTask+0xc4>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	3301      	adds	r3, #1
 80040e0:	4a08      	ldr	r2, [pc, #32]	@ (8004104 <SYSVIEW_AddTask+0xc4>)
 80040e2:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 80040e4:	69bb      	ldr	r3, [r7, #24]
 80040e6:	9300      	str	r3, [sp, #0]
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	687a      	ldr	r2, [r7, #4]
 80040ec:	68b9      	ldr	r1, [r7, #8]
 80040ee:	68f8      	ldr	r0, [r7, #12]
 80040f0:	f000 f80e 	bl	8004110 <SYSVIEW_SendTaskInfo>
 80040f4:	e000      	b.n	80040f8 <SYSVIEW_AddTask+0xb8>
    return;
 80040f6:	bf00      	nop

}
 80040f8:	3710      	adds	r7, #16
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bd80      	pop	{r7, pc}
 80040fe:	bf00      	nop
 8004100:	080056bc 	.word	0x080056bc
 8004104:	20012e88 	.word	0x20012e88
 8004108:	080056c4 	.word	0x080056c4
 800410c:	20012de8 	.word	0x20012de8

08004110 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8004110:	b580      	push	{r7, lr}
 8004112:	b08a      	sub	sp, #40	@ 0x28
 8004114:	af00      	add	r7, sp, #0
 8004116:	60f8      	str	r0, [r7, #12]
 8004118:	60b9      	str	r1, [r7, #8]
 800411a:	607a      	str	r2, [r7, #4]
 800411c:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 800411e:	f107 0314 	add.w	r3, r7, #20
 8004122:	2214      	movs	r2, #20
 8004124:	2100      	movs	r1, #0
 8004126:	4618      	mov	r0, r3
 8004128:	f001 fa72 	bl	8005610 <memset>
  TaskInfo.TaskID     = TaskID;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 800413c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800413e:	627b      	str	r3, [r7, #36]	@ 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8004140:	f107 0314 	add.w	r3, r7, #20
 8004144:	4618      	mov	r0, r3
 8004146:	f000 fe25 	bl	8004d94 <SEGGER_SYSVIEW_SendTaskInfo>
}
 800414a:	bf00      	nop
 800414c:	3728      	adds	r7, #40	@ 0x28
 800414e:	46bd      	mov	sp, r7
 8004150:	bd80      	pop	{r7, pc}
	...

08004154 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 8004154:	b580      	push	{r7, lr}
 8004156:	b084      	sub	sp, #16
 8004158:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 800415a:	4b1e      	ldr	r3, [pc, #120]	@ (80041d4 <USART2_IRQHandler+0x80>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	f003 0320 	and.w	r3, r3, #32
 8004166:	2b00      	cmp	r3, #0
 8004168:	d011      	beq.n	800418e <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 800416a:	4b1b      	ldr	r3, [pc, #108]	@ (80041d8 <USART2_IRQHandler+0x84>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	b2db      	uxtb	r3, r3
 8004170:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	f003 030b 	and.w	r3, r3, #11
 8004178:	2b00      	cmp	r3, #0
 800417a:	d108      	bne.n	800418e <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 800417c:	4b17      	ldr	r3, [pc, #92]	@ (80041dc <USART2_IRQHandler+0x88>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d004      	beq.n	800418e <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8004184:	4b15      	ldr	r3, [pc, #84]	@ (80041dc <USART2_IRQHandler+0x88>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	79fa      	ldrb	r2, [r7, #7]
 800418a:	4610      	mov	r0, r2
 800418c:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004194:	2b00      	cmp	r3, #0
 8004196:	d01a      	beq.n	80041ce <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8004198:	4b11      	ldr	r3, [pc, #68]	@ (80041e0 <USART2_IRQHandler+0x8c>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d015      	beq.n	80041cc <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 80041a0:	4b0f      	ldr	r3, [pc, #60]	@ (80041e0 <USART2_IRQHandler+0x8c>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	1dfa      	adds	r2, r7, #7
 80041a6:	4610      	mov	r0, r2
 80041a8:	4798      	blx	r3
 80041aa:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d106      	bne.n	80041c0 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 80041b2:	4b0c      	ldr	r3, [pc, #48]	@ (80041e4 <USART2_IRQHandler+0x90>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a0b      	ldr	r2, [pc, #44]	@ (80041e4 <USART2_IRQHandler+0x90>)
 80041b8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80041bc:	6013      	str	r3, [r2, #0]
 80041be:	e006      	b.n	80041ce <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 80041c0:	4b04      	ldr	r3, [pc, #16]	@ (80041d4 <USART2_IRQHandler+0x80>)
 80041c2:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 80041c4:	79fa      	ldrb	r2, [r7, #7]
 80041c6:	4b04      	ldr	r3, [pc, #16]	@ (80041d8 <USART2_IRQHandler+0x84>)
 80041c8:	601a      	str	r2, [r3, #0]
 80041ca:	e000      	b.n	80041ce <USART2_IRQHandler+0x7a>
      return;
 80041cc:	bf00      	nop
    }
  }
}
 80041ce:	3710      	adds	r7, #16
 80041d0:	46bd      	mov	sp, r7
 80041d2:	bd80      	pop	{r7, pc}
 80041d4:	40004400 	.word	0x40004400
 80041d8:	40004404 	.word	0x40004404
 80041dc:	20012e8c 	.word	0x20012e8c
 80041e0:	20012e90 	.word	0x20012e90
 80041e4:	4000440c 	.word	0x4000440c

080041e8 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 80041e8:	b480      	push	{r7}
 80041ea:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 80041ec:	4b05      	ldr	r3, [pc, #20]	@ (8004204 <HIF_UART_EnableTXEInterrupt+0x1c>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a04      	ldr	r2, [pc, #16]	@ (8004204 <HIF_UART_EnableTXEInterrupt+0x1c>)
 80041f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80041f6:	6013      	str	r3, [r2, #0]
}
 80041f8:	bf00      	nop
 80041fa:	46bd      	mov	sp, r7
 80041fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004200:	4770      	bx	lr
 8004202:	bf00      	nop
 8004204:	4000440c 	.word	0x4000440c

08004208 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8004208:	b480      	push	{r7}
 800420a:	b083      	sub	sp, #12
 800420c:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 800420e:	4b24      	ldr	r3, [pc, #144]	@ (80042a0 <_DoInit+0x98>)
 8004210:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2203      	movs	r2, #3
 8004216:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2203      	movs	r2, #3
 800421c:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	4a20      	ldr	r2, [pc, #128]	@ (80042a4 <_DoInit+0x9c>)
 8004222:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	4a20      	ldr	r2, [pc, #128]	@ (80042a8 <_DoInit+0xa0>)
 8004228:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004230:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2200      	movs	r2, #0
 8004236:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2200      	movs	r2, #0
 800423c:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2200      	movs	r2, #0
 8004242:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	4a17      	ldr	r2, [pc, #92]	@ (80042a4 <_DoInit+0x9c>)
 8004248:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	4a17      	ldr	r2, [pc, #92]	@ (80042ac <_DoInit+0xa4>)
 800424e:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2210      	movs	r2, #16
 8004254:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2200      	movs	r2, #0
 800425a:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2200      	movs	r2, #0
 8004260:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2200      	movs	r2, #0
 8004266:	675a      	str	r2, [r3, #116]	@ 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	3307      	adds	r3, #7
 800426c:	4a10      	ldr	r2, [pc, #64]	@ (80042b0 <_DoInit+0xa8>)
 800426e:	6810      	ldr	r0, [r2, #0]
 8004270:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004272:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	4a0e      	ldr	r2, [pc, #56]	@ (80042b4 <_DoInit+0xac>)
 800427a:	6810      	ldr	r0, [r2, #0]
 800427c:	6018      	str	r0, [r3, #0]
 800427e:	8891      	ldrh	r1, [r2, #4]
 8004280:	7992      	ldrb	r2, [r2, #6]
 8004282:	8099      	strh	r1, [r3, #4]
 8004284:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004286:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2220      	movs	r2, #32
 800428e:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004290:	f3bf 8f5f 	dmb	sy
}
 8004294:	bf00      	nop
 8004296:	370c      	adds	r7, #12
 8004298:	46bd      	mov	sp, r7
 800429a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429e:	4770      	bx	lr
 80042a0:	20012e94 	.word	0x20012e94
 80042a4:	08005714 	.word	0x08005714
 80042a8:	20012f3c 	.word	0x20012f3c
 80042ac:	2001333c 	.word	0x2001333c
 80042b0:	08005720 	.word	0x08005720
 80042b4:	08005724 	.word	0x08005724

080042b8 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b08c      	sub	sp, #48	@ 0x30
 80042bc:	af00      	add	r7, sp, #0
 80042be:	60f8      	str	r0, [r7, #12]
 80042c0:	60b9      	str	r1, [r7, #8]
 80042c2:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 80042c4:	4b3e      	ldr	r3, [pc, #248]	@ (80043c0 <SEGGER_RTT_ReadNoLock+0x108>)
 80042c6:	623b      	str	r3, [r7, #32]
 80042c8:	6a3b      	ldr	r3, [r7, #32]
 80042ca:	781b      	ldrb	r3, [r3, #0]
 80042cc:	b2db      	uxtb	r3, r3
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d101      	bne.n	80042d6 <SEGGER_RTT_ReadNoLock+0x1e>
 80042d2:	f7ff ff99 	bl	8004208 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80042d6:	68fa      	ldr	r2, [r7, #12]
 80042d8:	4613      	mov	r3, r2
 80042da:	005b      	lsls	r3, r3, #1
 80042dc:	4413      	add	r3, r2
 80042de:	00db      	lsls	r3, r3, #3
 80042e0:	3360      	adds	r3, #96	@ 0x60
 80042e2:	4a37      	ldr	r2, [pc, #220]	@ (80043c0 <SEGGER_RTT_ReadNoLock+0x108>)
 80042e4:	4413      	add	r3, r2
 80042e6:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 80042ec:	69fb      	ldr	r3, [r7, #28]
 80042ee:	691b      	ldr	r3, [r3, #16]
 80042f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 80042f2:	69fb      	ldr	r3, [r7, #28]
 80042f4:	68db      	ldr	r3, [r3, #12]
 80042f6:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80042f8:	2300      	movs	r3, #0
 80042fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80042fc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80042fe:	69bb      	ldr	r3, [r7, #24]
 8004300:	429a      	cmp	r2, r3
 8004302:	d92b      	bls.n	800435c <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8004304:	69fb      	ldr	r3, [r7, #28]
 8004306:	689a      	ldr	r2, [r3, #8]
 8004308:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800430a:	1ad3      	subs	r3, r2, r3
 800430c:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 800430e:	697a      	ldr	r2, [r7, #20]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	4293      	cmp	r3, r2
 8004314:	bf28      	it	cs
 8004316:	4613      	movcs	r3, r2
 8004318:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800431a:	69fb      	ldr	r3, [r7, #28]
 800431c:	685a      	ldr	r2, [r3, #4]
 800431e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004320:	4413      	add	r3, r2
 8004322:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004324:	697a      	ldr	r2, [r7, #20]
 8004326:	6939      	ldr	r1, [r7, #16]
 8004328:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800432a:	f001 f99d 	bl	8005668 <memcpy>
    NumBytesRead += NumBytesRem;
 800432e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004330:	697b      	ldr	r3, [r7, #20]
 8004332:	4413      	add	r3, r2
 8004334:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8004336:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004338:	697b      	ldr	r3, [r7, #20]
 800433a:	4413      	add	r3, r2
 800433c:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 800433e:	687a      	ldr	r2, [r7, #4]
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	1ad3      	subs	r3, r2, r3
 8004344:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004346:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004348:	697b      	ldr	r3, [r7, #20]
 800434a:	4413      	add	r3, r2
 800434c:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800434e:	69fb      	ldr	r3, [r7, #28]
 8004350:	689b      	ldr	r3, [r3, #8]
 8004352:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004354:	429a      	cmp	r2, r3
 8004356:	d101      	bne.n	800435c <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8004358:	2300      	movs	r3, #0
 800435a:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 800435c:	69ba      	ldr	r2, [r7, #24]
 800435e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004360:	1ad3      	subs	r3, r2, r3
 8004362:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004364:	697a      	ldr	r2, [r7, #20]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	4293      	cmp	r3, r2
 800436a:	bf28      	it	cs
 800436c:	4613      	movcs	r3, r2
 800436e:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8004370:	697b      	ldr	r3, [r7, #20]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d019      	beq.n	80043aa <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004376:	69fb      	ldr	r3, [r7, #28]
 8004378:	685a      	ldr	r2, [r3, #4]
 800437a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800437c:	4413      	add	r3, r2
 800437e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004380:	697a      	ldr	r2, [r7, #20]
 8004382:	6939      	ldr	r1, [r7, #16]
 8004384:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004386:	f001 f96f 	bl	8005668 <memcpy>
    NumBytesRead += NumBytesRem;
 800438a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800438c:	697b      	ldr	r3, [r7, #20]
 800438e:	4413      	add	r3, r2
 8004390:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8004392:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	4413      	add	r3, r2
 8004398:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 800439a:	687a      	ldr	r2, [r7, #4]
 800439c:	697b      	ldr	r3, [r7, #20]
 800439e:	1ad3      	subs	r3, r2, r3
 80043a0:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80043a2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80043a4:	697b      	ldr	r3, [r7, #20]
 80043a6:	4413      	add	r3, r2
 80043a8:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  if (NumBytesRead) {
 80043aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d002      	beq.n	80043b6 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 80043b0:	69fb      	ldr	r3, [r7, #28]
 80043b2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80043b4:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80043b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80043b8:	4618      	mov	r0, r3
 80043ba:	3730      	adds	r7, #48	@ 0x30
 80043bc:	46bd      	mov	sp, r7
 80043be:	bd80      	pop	{r7, pc}
 80043c0:	20012e94 	.word	0x20012e94

080043c4 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 80043c4:	b480      	push	{r7}
 80043c6:	b087      	sub	sp, #28
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	60f8      	str	r0, [r7, #12]
 80043cc:	60b9      	str	r1, [r7, #8]
 80043ce:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 80043d0:	2300      	movs	r3, #0
 80043d2:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 80043d4:	e002      	b.n	80043dc <_EncodeStr+0x18>
    Len++;
 80043d6:	693b      	ldr	r3, [r7, #16]
 80043d8:	3301      	adds	r3, #1
 80043da:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 80043dc:	68ba      	ldr	r2, [r7, #8]
 80043de:	693b      	ldr	r3, [r7, #16]
 80043e0:	4413      	add	r3, r2
 80043e2:	781b      	ldrb	r3, [r3, #0]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d1f6      	bne.n	80043d6 <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 80043e8:	693a      	ldr	r2, [r7, #16]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	429a      	cmp	r2, r3
 80043ee:	d901      	bls.n	80043f4 <_EncodeStr+0x30>
    Len = Limit;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 80043f4:	693b      	ldr	r3, [r7, #16]
 80043f6:	2bfe      	cmp	r3, #254	@ 0xfe
 80043f8:	d806      	bhi.n	8004408 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	1c5a      	adds	r2, r3, #1
 80043fe:	60fa      	str	r2, [r7, #12]
 8004400:	693a      	ldr	r2, [r7, #16]
 8004402:	b2d2      	uxtb	r2, r2
 8004404:	701a      	strb	r2, [r3, #0]
 8004406:	e011      	b.n	800442c <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	1c5a      	adds	r2, r3, #1
 800440c:	60fa      	str	r2, [r7, #12]
 800440e:	22ff      	movs	r2, #255	@ 0xff
 8004410:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	1c5a      	adds	r2, r3, #1
 8004416:	60fa      	str	r2, [r7, #12]
 8004418:	693a      	ldr	r2, [r7, #16]
 800441a:	b2d2      	uxtb	r2, r2
 800441c:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 800441e:	693b      	ldr	r3, [r7, #16]
 8004420:	0a19      	lsrs	r1, r3, #8
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	1c5a      	adds	r2, r3, #1
 8004426:	60fa      	str	r2, [r7, #12]
 8004428:	b2ca      	uxtb	r2, r1
 800442a:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 800442c:	2300      	movs	r3, #0
 800442e:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8004430:	e00a      	b.n	8004448 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 8004432:	68ba      	ldr	r2, [r7, #8]
 8004434:	1c53      	adds	r3, r2, #1
 8004436:	60bb      	str	r3, [r7, #8]
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	1c59      	adds	r1, r3, #1
 800443c:	60f9      	str	r1, [r7, #12]
 800443e:	7812      	ldrb	r2, [r2, #0]
 8004440:	701a      	strb	r2, [r3, #0]
    n++;
 8004442:	697b      	ldr	r3, [r7, #20]
 8004444:	3301      	adds	r3, #1
 8004446:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8004448:	697a      	ldr	r2, [r7, #20]
 800444a:	693b      	ldr	r3, [r7, #16]
 800444c:	429a      	cmp	r2, r3
 800444e:	d3f0      	bcc.n	8004432 <_EncodeStr+0x6e>
  }
  return pPayload;
 8004450:	68fb      	ldr	r3, [r7, #12]
}
 8004452:	4618      	mov	r0, r3
 8004454:	371c      	adds	r7, #28
 8004456:	46bd      	mov	sp, r7
 8004458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445c:	4770      	bx	lr

0800445e <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 800445e:	b480      	push	{r7}
 8004460:	b083      	sub	sp, #12
 8004462:	af00      	add	r7, sp, #0
 8004464:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	3304      	adds	r3, #4
}
 800446a:	4618      	mov	r0, r3
 800446c:	370c      	adds	r7, #12
 800446e:	46bd      	mov	sp, r7
 8004470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004474:	4770      	bx	lr
	...

08004478 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8004478:	b580      	push	{r7, lr}
 800447a:	b082      	sub	sp, #8
 800447c:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800447e:	4b35      	ldr	r3, [pc, #212]	@ (8004554 <_HandleIncomingPacket+0xdc>)
 8004480:	7e1b      	ldrb	r3, [r3, #24]
 8004482:	4618      	mov	r0, r3
 8004484:	1cfb      	adds	r3, r7, #3
 8004486:	2201      	movs	r2, #1
 8004488:	4619      	mov	r1, r3
 800448a:	f7ff ff15 	bl	80042b8 <SEGGER_RTT_ReadNoLock>
 800448e:	4603      	mov	r3, r0
 8004490:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2b00      	cmp	r3, #0
 8004496:	dd59      	ble.n	800454c <_HandleIncomingPacket+0xd4>
    switch (Cmd) {
 8004498:	78fb      	ldrb	r3, [r7, #3]
 800449a:	2b80      	cmp	r3, #128	@ 0x80
 800449c:	d032      	beq.n	8004504 <_HandleIncomingPacket+0x8c>
 800449e:	2b80      	cmp	r3, #128	@ 0x80
 80044a0:	dc42      	bgt.n	8004528 <_HandleIncomingPacket+0xb0>
 80044a2:	2b07      	cmp	r3, #7
 80044a4:	dc16      	bgt.n	80044d4 <_HandleIncomingPacket+0x5c>
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	dd3e      	ble.n	8004528 <_HandleIncomingPacket+0xb0>
 80044aa:	3b01      	subs	r3, #1
 80044ac:	2b06      	cmp	r3, #6
 80044ae:	d83b      	bhi.n	8004528 <_HandleIncomingPacket+0xb0>
 80044b0:	a201      	add	r2, pc, #4	@ (adr r2, 80044b8 <_HandleIncomingPacket+0x40>)
 80044b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044b6:	bf00      	nop
 80044b8:	080044db 	.word	0x080044db
 80044bc:	080044e1 	.word	0x080044e1
 80044c0:	080044e7 	.word	0x080044e7
 80044c4:	080044ed 	.word	0x080044ed
 80044c8:	080044f3 	.word	0x080044f3
 80044cc:	080044f9 	.word	0x080044f9
 80044d0:	080044ff 	.word	0x080044ff
 80044d4:	2b7f      	cmp	r3, #127	@ 0x7f
 80044d6:	d034      	beq.n	8004542 <_HandleIncomingPacket+0xca>
 80044d8:	e026      	b.n	8004528 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 80044da:	f000 fadf 	bl	8004a9c <SEGGER_SYSVIEW_Start>
      break;
 80044de:	e035      	b.n	800454c <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 80044e0:	f000 fb98 	bl	8004c14 <SEGGER_SYSVIEW_Stop>
      break;
 80044e4:	e032      	b.n	800454c <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 80044e6:	f000 fd4d 	bl	8004f84 <SEGGER_SYSVIEW_RecordSystime>
      break;
 80044ea:	e02f      	b.n	800454c <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 80044ec:	f000 fd36 	bl	8004f5c <SEGGER_SYSVIEW_SendTaskList>
      break;
 80044f0:	e02c      	b.n	800454c <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 80044f2:	f000 fbb5 	bl	8004c60 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 80044f6:	e029      	b.n	800454c <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 80044f8:	f000 ffe0 	bl	80054bc <SEGGER_SYSVIEW_SendNumModules>
      break;
 80044fc:	e026      	b.n	800454c <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 80044fe:	f000 ffbf 	bl	8005480 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8004502:	e023      	b.n	800454c <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004504:	4b13      	ldr	r3, [pc, #76]	@ (8004554 <_HandleIncomingPacket+0xdc>)
 8004506:	7e1b      	ldrb	r3, [r3, #24]
 8004508:	4618      	mov	r0, r3
 800450a:	1cfb      	adds	r3, r7, #3
 800450c:	2201      	movs	r2, #1
 800450e:	4619      	mov	r1, r3
 8004510:	f7ff fed2 	bl	80042b8 <SEGGER_RTT_ReadNoLock>
 8004514:	4603      	mov	r3, r0
 8004516:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2b00      	cmp	r3, #0
 800451c:	dd13      	ble.n	8004546 <_HandleIncomingPacket+0xce>
        SEGGER_SYSVIEW_SendModule(Cmd);
 800451e:	78fb      	ldrb	r3, [r7, #3]
 8004520:	4618      	mov	r0, r3
 8004522:	f000 ff2d 	bl	8005380 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8004526:	e00e      	b.n	8004546 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8004528:	78fb      	ldrb	r3, [r7, #3]
 800452a:	b25b      	sxtb	r3, r3
 800452c:	2b00      	cmp	r3, #0
 800452e:	da0c      	bge.n	800454a <_HandleIncomingPacket+0xd2>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004530:	4b08      	ldr	r3, [pc, #32]	@ (8004554 <_HandleIncomingPacket+0xdc>)
 8004532:	7e1b      	ldrb	r3, [r3, #24]
 8004534:	4618      	mov	r0, r3
 8004536:	1cfb      	adds	r3, r7, #3
 8004538:	2201      	movs	r2, #1
 800453a:	4619      	mov	r1, r3
 800453c:	f7ff febc 	bl	80042b8 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8004540:	e003      	b.n	800454a <_HandleIncomingPacket+0xd2>
      break;
 8004542:	bf00      	nop
 8004544:	e002      	b.n	800454c <_HandleIncomingPacket+0xd4>
      break;
 8004546:	bf00      	nop
 8004548:	e000      	b.n	800454c <_HandleIncomingPacket+0xd4>
      break;
 800454a:	bf00      	nop
    }
  }
}
 800454c:	bf00      	nop
 800454e:	3708      	adds	r7, #8
 8004550:	46bd      	mov	sp, r7
 8004552:	bd80      	pop	{r7, pc}
 8004554:	2001334c 	.word	0x2001334c

08004558 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8004558:	b580      	push	{r7, lr}
 800455a:	b08c      	sub	sp, #48	@ 0x30
 800455c:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 800455e:	2301      	movs	r3, #1
 8004560:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8004562:	1d3b      	adds	r3, r7, #4
 8004564:	3301      	adds	r3, #1
 8004566:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8004568:	69fb      	ldr	r3, [r7, #28]
 800456a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800456c:	4b32      	ldr	r3, [pc, #200]	@ (8004638 <_TrySendOverflowPacket+0xe0>)
 800456e:	695b      	ldr	r3, [r3, #20]
 8004570:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004572:	e00b      	b.n	800458c <_TrySendOverflowPacket+0x34>
 8004574:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004576:	b2da      	uxtb	r2, r3
 8004578:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800457a:	1c59      	adds	r1, r3, #1
 800457c:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800457e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004582:	b2d2      	uxtb	r2, r2
 8004584:	701a      	strb	r2, [r3, #0]
 8004586:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004588:	09db      	lsrs	r3, r3, #7
 800458a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800458c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800458e:	2b7f      	cmp	r3, #127	@ 0x7f
 8004590:	d8f0      	bhi.n	8004574 <_TrySendOverflowPacket+0x1c>
 8004592:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004594:	1c5a      	adds	r2, r3, #1
 8004596:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004598:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800459a:	b2d2      	uxtb	r2, r2
 800459c:	701a      	strb	r2, [r3, #0]
 800459e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045a0:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80045a2:	4b26      	ldr	r3, [pc, #152]	@ (800463c <_TrySendOverflowPacket+0xe4>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80045a8:	4b23      	ldr	r3, [pc, #140]	@ (8004638 <_TrySendOverflowPacket+0xe0>)
 80045aa:	68db      	ldr	r3, [r3, #12]
 80045ac:	69ba      	ldr	r2, [r7, #24]
 80045ae:	1ad3      	subs	r3, r2, r3
 80045b0:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 80045b2:	69fb      	ldr	r3, [r7, #28]
 80045b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80045b6:	697b      	ldr	r3, [r7, #20]
 80045b8:	623b      	str	r3, [r7, #32]
 80045ba:	e00b      	b.n	80045d4 <_TrySendOverflowPacket+0x7c>
 80045bc:	6a3b      	ldr	r3, [r7, #32]
 80045be:	b2da      	uxtb	r2, r3
 80045c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045c2:	1c59      	adds	r1, r3, #1
 80045c4:	6279      	str	r1, [r7, #36]	@ 0x24
 80045c6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80045ca:	b2d2      	uxtb	r2, r2
 80045cc:	701a      	strb	r2, [r3, #0]
 80045ce:	6a3b      	ldr	r3, [r7, #32]
 80045d0:	09db      	lsrs	r3, r3, #7
 80045d2:	623b      	str	r3, [r7, #32]
 80045d4:	6a3b      	ldr	r3, [r7, #32]
 80045d6:	2b7f      	cmp	r3, #127	@ 0x7f
 80045d8:	d8f0      	bhi.n	80045bc <_TrySendOverflowPacket+0x64>
 80045da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045dc:	1c5a      	adds	r2, r3, #1
 80045de:	627a      	str	r2, [r7, #36]	@ 0x24
 80045e0:	6a3a      	ldr	r2, [r7, #32]
 80045e2:	b2d2      	uxtb	r2, r2
 80045e4:	701a      	strb	r2, [r3, #0]
 80045e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045e8:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 80045ea:	4b13      	ldr	r3, [pc, #76]	@ (8004638 <_TrySendOverflowPacket+0xe0>)
 80045ec:	785b      	ldrb	r3, [r3, #1]
 80045ee:	4618      	mov	r0, r3
 80045f0:	1d3b      	adds	r3, r7, #4
 80045f2:	69fa      	ldr	r2, [r7, #28]
 80045f4:	1ad3      	subs	r3, r2, r3
 80045f6:	461a      	mov	r2, r3
 80045f8:	1d3b      	adds	r3, r7, #4
 80045fa:	4619      	mov	r1, r3
 80045fc:	f7fb fde8 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004600:	4603      	mov	r3, r0
 8004602:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 8004604:	f7ff fdf0 	bl	80041e8 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8004608:	693b      	ldr	r3, [r7, #16]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d009      	beq.n	8004622 <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800460e:	4a0a      	ldr	r2, [pc, #40]	@ (8004638 <_TrySendOverflowPacket+0xe0>)
 8004610:	69bb      	ldr	r3, [r7, #24]
 8004612:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8004614:	4b08      	ldr	r3, [pc, #32]	@ (8004638 <_TrySendOverflowPacket+0xe0>)
 8004616:	781b      	ldrb	r3, [r3, #0]
 8004618:	3b01      	subs	r3, #1
 800461a:	b2da      	uxtb	r2, r3
 800461c:	4b06      	ldr	r3, [pc, #24]	@ (8004638 <_TrySendOverflowPacket+0xe0>)
 800461e:	701a      	strb	r2, [r3, #0]
 8004620:	e004      	b.n	800462c <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8004622:	4b05      	ldr	r3, [pc, #20]	@ (8004638 <_TrySendOverflowPacket+0xe0>)
 8004624:	695b      	ldr	r3, [r3, #20]
 8004626:	3301      	adds	r3, #1
 8004628:	4a03      	ldr	r2, [pc, #12]	@ (8004638 <_TrySendOverflowPacket+0xe0>)
 800462a:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 800462c:	693b      	ldr	r3, [r7, #16]
}
 800462e:	4618      	mov	r0, r3
 8004630:	3730      	adds	r7, #48	@ 0x30
 8004632:	46bd      	mov	sp, r7
 8004634:	bd80      	pop	{r7, pc}
 8004636:	bf00      	nop
 8004638:	2001334c 	.word	0x2001334c
 800463c:	e0001004 	.word	0xe0001004

08004640 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8004640:	b580      	push	{r7, lr}
 8004642:	b08a      	sub	sp, #40	@ 0x28
 8004644:	af00      	add	r7, sp, #0
 8004646:	60f8      	str	r0, [r7, #12]
 8004648:	60b9      	str	r1, [r7, #8]
 800464a:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 800464c:	4b6d      	ldr	r3, [pc, #436]	@ (8004804 <_SendPacket+0x1c4>)
 800464e:	781b      	ldrb	r3, [r3, #0]
 8004650:	2b01      	cmp	r3, #1
 8004652:	d010      	beq.n	8004676 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8004654:	4b6b      	ldr	r3, [pc, #428]	@ (8004804 <_SendPacket+0x1c4>)
 8004656:	781b      	ldrb	r3, [r3, #0]
 8004658:	2b00      	cmp	r3, #0
 800465a:	f000 80a5 	beq.w	80047a8 <_SendPacket+0x168>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 800465e:	4b69      	ldr	r3, [pc, #420]	@ (8004804 <_SendPacket+0x1c4>)
 8004660:	781b      	ldrb	r3, [r3, #0]
 8004662:	2b02      	cmp	r3, #2
 8004664:	d109      	bne.n	800467a <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8004666:	f7ff ff77 	bl	8004558 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 800466a:	4b66      	ldr	r3, [pc, #408]	@ (8004804 <_SendPacket+0x1c4>)
 800466c:	781b      	ldrb	r3, [r3, #0]
 800466e:	2b01      	cmp	r3, #1
 8004670:	f040 809c 	bne.w	80047ac <_SendPacket+0x16c>
      goto SendDone;
    }
  }
Send:
 8004674:	e001      	b.n	800467a <_SendPacket+0x3a>
    goto Send;
 8004676:	bf00      	nop
 8004678:	e000      	b.n	800467c <_SendPacket+0x3c>
Send:
 800467a:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2b1f      	cmp	r3, #31
 8004680:	d809      	bhi.n	8004696 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8004682:	4b60      	ldr	r3, [pc, #384]	@ (8004804 <_SendPacket+0x1c4>)
 8004684:	69da      	ldr	r2, [r3, #28]
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	fa22 f303 	lsr.w	r3, r2, r3
 800468c:	f003 0301 	and.w	r3, r3, #1
 8004690:	2b00      	cmp	r3, #0
 8004692:	f040 808d 	bne.w	80047b0 <_SendPacket+0x170>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2b17      	cmp	r3, #23
 800469a:	d807      	bhi.n	80046ac <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	3b01      	subs	r3, #1
 80046a0:	60fb      	str	r3, [r7, #12]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	b2da      	uxtb	r2, r3
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	701a      	strb	r2, [r3, #0]
 80046aa:	e03d      	b.n	8004728 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 80046ac:	68ba      	ldr	r2, [r7, #8]
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	1ad3      	subs	r3, r2, r3
 80046b2:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 80046b4:	69fb      	ldr	r3, [r7, #28]
 80046b6:	2b7f      	cmp	r3, #127	@ 0x7f
 80046b8:	d912      	bls.n	80046e0 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 80046ba:	69fb      	ldr	r3, [r7, #28]
 80046bc:	09da      	lsrs	r2, r3, #7
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	3b01      	subs	r3, #1
 80046c2:	60fb      	str	r3, [r7, #12]
 80046c4:	b2d2      	uxtb	r2, r2
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 80046ca:	69fb      	ldr	r3, [r7, #28]
 80046cc:	b2db      	uxtb	r3, r3
 80046ce:	68fa      	ldr	r2, [r7, #12]
 80046d0:	3a01      	subs	r2, #1
 80046d2:	60fa      	str	r2, [r7, #12]
 80046d4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80046d8:	b2da      	uxtb	r2, r3
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	701a      	strb	r2, [r3, #0]
 80046de:	e006      	b.n	80046ee <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	3b01      	subs	r3, #1
 80046e4:	60fb      	str	r3, [r7, #12]
 80046e6:	69fb      	ldr	r3, [r7, #28]
 80046e8:	b2da      	uxtb	r2, r3
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2b7f      	cmp	r3, #127	@ 0x7f
 80046f2:	d912      	bls.n	800471a <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	09da      	lsrs	r2, r3, #7
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	3b01      	subs	r3, #1
 80046fc:	60fb      	str	r3, [r7, #12]
 80046fe:	b2d2      	uxtb	r2, r2
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	b2db      	uxtb	r3, r3
 8004708:	68fa      	ldr	r2, [r7, #12]
 800470a:	3a01      	subs	r2, #1
 800470c:	60fa      	str	r2, [r7, #12]
 800470e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004712:	b2da      	uxtb	r2, r3
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	701a      	strb	r2, [r3, #0]
 8004718:	e006      	b.n	8004728 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	3b01      	subs	r3, #1
 800471e:	60fb      	str	r3, [r7, #12]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	b2da      	uxtb	r2, r3
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004728:	4b37      	ldr	r3, [pc, #220]	@ (8004808 <_SendPacket+0x1c8>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800472e:	4b35      	ldr	r3, [pc, #212]	@ (8004804 <_SendPacket+0x1c4>)
 8004730:	68db      	ldr	r3, [r3, #12]
 8004732:	69ba      	ldr	r2, [r7, #24]
 8004734:	1ad3      	subs	r3, r2, r3
 8004736:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8004738:	68bb      	ldr	r3, [r7, #8]
 800473a:	627b      	str	r3, [r7, #36]	@ 0x24
 800473c:	697b      	ldr	r3, [r7, #20]
 800473e:	623b      	str	r3, [r7, #32]
 8004740:	e00b      	b.n	800475a <_SendPacket+0x11a>
 8004742:	6a3b      	ldr	r3, [r7, #32]
 8004744:	b2da      	uxtb	r2, r3
 8004746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004748:	1c59      	adds	r1, r3, #1
 800474a:	6279      	str	r1, [r7, #36]	@ 0x24
 800474c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004750:	b2d2      	uxtb	r2, r2
 8004752:	701a      	strb	r2, [r3, #0]
 8004754:	6a3b      	ldr	r3, [r7, #32]
 8004756:	09db      	lsrs	r3, r3, #7
 8004758:	623b      	str	r3, [r7, #32]
 800475a:	6a3b      	ldr	r3, [r7, #32]
 800475c:	2b7f      	cmp	r3, #127	@ 0x7f
 800475e:	d8f0      	bhi.n	8004742 <_SendPacket+0x102>
 8004760:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004762:	1c5a      	adds	r2, r3, #1
 8004764:	627a      	str	r2, [r7, #36]	@ 0x24
 8004766:	6a3a      	ldr	r2, [r7, #32]
 8004768:	b2d2      	uxtb	r2, r2
 800476a:	701a      	strb	r2, [r3, #0]
 800476c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800476e:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8004770:	4b24      	ldr	r3, [pc, #144]	@ (8004804 <_SendPacket+0x1c4>)
 8004772:	785b      	ldrb	r3, [r3, #1]
 8004774:	4618      	mov	r0, r3
 8004776:	68ba      	ldr	r2, [r7, #8]
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	1ad3      	subs	r3, r2, r3
 800477c:	461a      	mov	r2, r3
 800477e:	68f9      	ldr	r1, [r7, #12]
 8004780:	f7fb fd26 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004784:	4603      	mov	r3, r0
 8004786:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 8004788:	f7ff fd2e 	bl	80041e8 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 800478c:	693b      	ldr	r3, [r7, #16]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d003      	beq.n	800479a <_SendPacket+0x15a>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8004792:	4a1c      	ldr	r2, [pc, #112]	@ (8004804 <_SendPacket+0x1c4>)
 8004794:	69bb      	ldr	r3, [r7, #24]
 8004796:	60d3      	str	r3, [r2, #12]
 8004798:	e00b      	b.n	80047b2 <_SendPacket+0x172>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 800479a:	4b1a      	ldr	r3, [pc, #104]	@ (8004804 <_SendPacket+0x1c4>)
 800479c:	781b      	ldrb	r3, [r3, #0]
 800479e:	3301      	adds	r3, #1
 80047a0:	b2da      	uxtb	r2, r3
 80047a2:	4b18      	ldr	r3, [pc, #96]	@ (8004804 <_SendPacket+0x1c4>)
 80047a4:	701a      	strb	r2, [r3, #0]
 80047a6:	e004      	b.n	80047b2 <_SendPacket+0x172>
    goto SendDone;
 80047a8:	bf00      	nop
 80047aa:	e002      	b.n	80047b2 <_SendPacket+0x172>
      goto SendDone;
 80047ac:	bf00      	nop
 80047ae:	e000      	b.n	80047b2 <_SendPacket+0x172>
      goto SendDone;
 80047b0:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80047b2:	4b14      	ldr	r3, [pc, #80]	@ (8004804 <_SendPacket+0x1c4>)
 80047b4:	7e1b      	ldrb	r3, [r3, #24]
 80047b6:	4619      	mov	r1, r3
 80047b8:	4a14      	ldr	r2, [pc, #80]	@ (800480c <_SendPacket+0x1cc>)
 80047ba:	460b      	mov	r3, r1
 80047bc:	005b      	lsls	r3, r3, #1
 80047be:	440b      	add	r3, r1
 80047c0:	00db      	lsls	r3, r3, #3
 80047c2:	4413      	add	r3, r2
 80047c4:	336c      	adds	r3, #108	@ 0x6c
 80047c6:	681a      	ldr	r2, [r3, #0]
 80047c8:	4b0e      	ldr	r3, [pc, #56]	@ (8004804 <_SendPacket+0x1c4>)
 80047ca:	7e1b      	ldrb	r3, [r3, #24]
 80047cc:	4618      	mov	r0, r3
 80047ce:	490f      	ldr	r1, [pc, #60]	@ (800480c <_SendPacket+0x1cc>)
 80047d0:	4603      	mov	r3, r0
 80047d2:	005b      	lsls	r3, r3, #1
 80047d4:	4403      	add	r3, r0
 80047d6:	00db      	lsls	r3, r3, #3
 80047d8:	440b      	add	r3, r1
 80047da:	3370      	adds	r3, #112	@ 0x70
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	429a      	cmp	r2, r3
 80047e0:	d00b      	beq.n	80047fa <_SendPacket+0x1ba>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80047e2:	4b08      	ldr	r3, [pc, #32]	@ (8004804 <_SendPacket+0x1c4>)
 80047e4:	789b      	ldrb	r3, [r3, #2]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d107      	bne.n	80047fa <_SendPacket+0x1ba>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80047ea:	4b06      	ldr	r3, [pc, #24]	@ (8004804 <_SendPacket+0x1c4>)
 80047ec:	2201      	movs	r2, #1
 80047ee:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80047f0:	f7ff fe42 	bl	8004478 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80047f4:	4b03      	ldr	r3, [pc, #12]	@ (8004804 <_SendPacket+0x1c4>)
 80047f6:	2200      	movs	r2, #0
 80047f8:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 80047fa:	bf00      	nop
 80047fc:	3728      	adds	r7, #40	@ 0x28
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd80      	pop	{r7, pc}
 8004802:	bf00      	nop
 8004804:	2001334c 	.word	0x2001334c
 8004808:	e0001004 	.word	0xe0001004
 800480c:	20012e94 	.word	0x20012e94

08004810 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8004810:	b580      	push	{r7, lr}
 8004812:	b084      	sub	sp, #16
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004818:	f3ef 8311 	mrs	r3, BASEPRI
 800481c:	f04f 0120 	mov.w	r1, #32
 8004820:	f381 8811 	msr	BASEPRI, r1
 8004824:	60fb      	str	r3, [r7, #12]
 8004826:	4808      	ldr	r0, [pc, #32]	@ (8004848 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8004828:	f7ff fe19 	bl	800445e <_PreparePacket>
 800482c:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 800482e:	687a      	ldr	r2, [r7, #4]
 8004830:	68b9      	ldr	r1, [r7, #8]
 8004832:	68b8      	ldr	r0, [r7, #8]
 8004834:	f7ff ff04 	bl	8004640 <_SendPacket>
  RECORD_END();
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	f383 8811 	msr	BASEPRI, r3
}
 800483e:	bf00      	nop
 8004840:	3710      	adds	r7, #16
 8004842:	46bd      	mov	sp, r7
 8004844:	bd80      	pop	{r7, pc}
 8004846:	bf00      	nop
 8004848:	2001337c 	.word	0x2001337c

0800484c <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 800484c:	b580      	push	{r7, lr}
 800484e:	b088      	sub	sp, #32
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
 8004854:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004856:	f3ef 8311 	mrs	r3, BASEPRI
 800485a:	f04f 0120 	mov.w	r1, #32
 800485e:	f381 8811 	msr	BASEPRI, r1
 8004862:	617b      	str	r3, [r7, #20]
 8004864:	4816      	ldr	r0, [pc, #88]	@ (80048c0 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8004866:	f7ff fdfa 	bl	800445e <_PreparePacket>
 800486a:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800486c:	693b      	ldr	r3, [r7, #16]
 800486e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	61fb      	str	r3, [r7, #28]
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	61bb      	str	r3, [r7, #24]
 8004878:	e00b      	b.n	8004892 <SEGGER_SYSVIEW_RecordU32+0x46>
 800487a:	69bb      	ldr	r3, [r7, #24]
 800487c:	b2da      	uxtb	r2, r3
 800487e:	69fb      	ldr	r3, [r7, #28]
 8004880:	1c59      	adds	r1, r3, #1
 8004882:	61f9      	str	r1, [r7, #28]
 8004884:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004888:	b2d2      	uxtb	r2, r2
 800488a:	701a      	strb	r2, [r3, #0]
 800488c:	69bb      	ldr	r3, [r7, #24]
 800488e:	09db      	lsrs	r3, r3, #7
 8004890:	61bb      	str	r3, [r7, #24]
 8004892:	69bb      	ldr	r3, [r7, #24]
 8004894:	2b7f      	cmp	r3, #127	@ 0x7f
 8004896:	d8f0      	bhi.n	800487a <SEGGER_SYSVIEW_RecordU32+0x2e>
 8004898:	69fb      	ldr	r3, [r7, #28]
 800489a:	1c5a      	adds	r2, r3, #1
 800489c:	61fa      	str	r2, [r7, #28]
 800489e:	69ba      	ldr	r2, [r7, #24]
 80048a0:	b2d2      	uxtb	r2, r2
 80048a2:	701a      	strb	r2, [r3, #0]
 80048a4:	69fb      	ldr	r3, [r7, #28]
 80048a6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80048a8:	687a      	ldr	r2, [r7, #4]
 80048aa:	68f9      	ldr	r1, [r7, #12]
 80048ac:	6938      	ldr	r0, [r7, #16]
 80048ae:	f7ff fec7 	bl	8004640 <_SendPacket>
  RECORD_END();
 80048b2:	697b      	ldr	r3, [r7, #20]
 80048b4:	f383 8811 	msr	BASEPRI, r3
}
 80048b8:	bf00      	nop
 80048ba:	3720      	adds	r7, #32
 80048bc:	46bd      	mov	sp, r7
 80048be:	bd80      	pop	{r7, pc}
 80048c0:	2001337c 	.word	0x2001337c

080048c4 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b08c      	sub	sp, #48	@ 0x30
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	60f8      	str	r0, [r7, #12]
 80048cc:	60b9      	str	r1, [r7, #8]
 80048ce:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80048d0:	f3ef 8311 	mrs	r3, BASEPRI
 80048d4:	f04f 0120 	mov.w	r1, #32
 80048d8:	f381 8811 	msr	BASEPRI, r1
 80048dc:	61fb      	str	r3, [r7, #28]
 80048de:	4825      	ldr	r0, [pc, #148]	@ (8004974 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 80048e0:	f7ff fdbd 	bl	800445e <_PreparePacket>
 80048e4:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80048e6:	69bb      	ldr	r3, [r7, #24]
 80048e8:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80048ea:	697b      	ldr	r3, [r7, #20]
 80048ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80048ee:	68bb      	ldr	r3, [r7, #8]
 80048f0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80048f2:	e00b      	b.n	800490c <SEGGER_SYSVIEW_RecordU32x2+0x48>
 80048f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048f6:	b2da      	uxtb	r2, r3
 80048f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048fa:	1c59      	adds	r1, r3, #1
 80048fc:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80048fe:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004902:	b2d2      	uxtb	r2, r2
 8004904:	701a      	strb	r2, [r3, #0]
 8004906:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004908:	09db      	lsrs	r3, r3, #7
 800490a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800490c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800490e:	2b7f      	cmp	r3, #127	@ 0x7f
 8004910:	d8f0      	bhi.n	80048f4 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8004912:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004914:	1c5a      	adds	r2, r3, #1
 8004916:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004918:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800491a:	b2d2      	uxtb	r2, r2
 800491c:	701a      	strb	r2, [r3, #0]
 800491e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004920:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8004922:	697b      	ldr	r3, [r7, #20]
 8004924:	627b      	str	r3, [r7, #36]	@ 0x24
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	623b      	str	r3, [r7, #32]
 800492a:	e00b      	b.n	8004944 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 800492c:	6a3b      	ldr	r3, [r7, #32]
 800492e:	b2da      	uxtb	r2, r3
 8004930:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004932:	1c59      	adds	r1, r3, #1
 8004934:	6279      	str	r1, [r7, #36]	@ 0x24
 8004936:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800493a:	b2d2      	uxtb	r2, r2
 800493c:	701a      	strb	r2, [r3, #0]
 800493e:	6a3b      	ldr	r3, [r7, #32]
 8004940:	09db      	lsrs	r3, r3, #7
 8004942:	623b      	str	r3, [r7, #32]
 8004944:	6a3b      	ldr	r3, [r7, #32]
 8004946:	2b7f      	cmp	r3, #127	@ 0x7f
 8004948:	d8f0      	bhi.n	800492c <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800494a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800494c:	1c5a      	adds	r2, r3, #1
 800494e:	627a      	str	r2, [r7, #36]	@ 0x24
 8004950:	6a3a      	ldr	r2, [r7, #32]
 8004952:	b2d2      	uxtb	r2, r2
 8004954:	701a      	strb	r2, [r3, #0]
 8004956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004958:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800495a:	68fa      	ldr	r2, [r7, #12]
 800495c:	6979      	ldr	r1, [r7, #20]
 800495e:	69b8      	ldr	r0, [r7, #24]
 8004960:	f7ff fe6e 	bl	8004640 <_SendPacket>
  RECORD_END();
 8004964:	69fb      	ldr	r3, [r7, #28]
 8004966:	f383 8811 	msr	BASEPRI, r3
}
 800496a:	bf00      	nop
 800496c:	3730      	adds	r7, #48	@ 0x30
 800496e:	46bd      	mov	sp, r7
 8004970:	bd80      	pop	{r7, pc}
 8004972:	bf00      	nop
 8004974:	2001337c 	.word	0x2001337c

08004978 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8004978:	b580      	push	{r7, lr}
 800497a:	b090      	sub	sp, #64	@ 0x40
 800497c:	af00      	add	r7, sp, #0
 800497e:	60f8      	str	r0, [r7, #12]
 8004980:	60b9      	str	r1, [r7, #8]
 8004982:	607a      	str	r2, [r7, #4]
 8004984:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004986:	f3ef 8311 	mrs	r3, BASEPRI
 800498a:	f04f 0120 	mov.w	r1, #32
 800498e:	f381 8811 	msr	BASEPRI, r1
 8004992:	61fb      	str	r3, [r7, #28]
 8004994:	4840      	ldr	r0, [pc, #256]	@ (8004a98 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8004996:	f7ff fd62 	bl	800445e <_PreparePacket>
 800499a:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800499c:	69bb      	ldr	r3, [r7, #24]
 800499e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80049a0:	697b      	ldr	r3, [r7, #20]
 80049a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80049a8:	e00b      	b.n	80049c2 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 80049aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049ac:	b2da      	uxtb	r2, r3
 80049ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80049b0:	1c59      	adds	r1, r3, #1
 80049b2:	63f9      	str	r1, [r7, #60]	@ 0x3c
 80049b4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80049b8:	b2d2      	uxtb	r2, r2
 80049ba:	701a      	strb	r2, [r3, #0]
 80049bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049be:	09db      	lsrs	r3, r3, #7
 80049c0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80049c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049c4:	2b7f      	cmp	r3, #127	@ 0x7f
 80049c6:	d8f0      	bhi.n	80049aa <SEGGER_SYSVIEW_RecordU32x4+0x32>
 80049c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80049ca:	1c5a      	adds	r2, r3, #1
 80049cc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80049ce:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80049d0:	b2d2      	uxtb	r2, r2
 80049d2:	701a      	strb	r2, [r3, #0]
 80049d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80049d6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80049d8:	697b      	ldr	r3, [r7, #20]
 80049da:	637b      	str	r3, [r7, #52]	@ 0x34
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	633b      	str	r3, [r7, #48]	@ 0x30
 80049e0:	e00b      	b.n	80049fa <SEGGER_SYSVIEW_RecordU32x4+0x82>
 80049e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049e4:	b2da      	uxtb	r2, r3
 80049e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049e8:	1c59      	adds	r1, r3, #1
 80049ea:	6379      	str	r1, [r7, #52]	@ 0x34
 80049ec:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80049f0:	b2d2      	uxtb	r2, r2
 80049f2:	701a      	strb	r2, [r3, #0]
 80049f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049f6:	09db      	lsrs	r3, r3, #7
 80049f8:	633b      	str	r3, [r7, #48]	@ 0x30
 80049fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049fc:	2b7f      	cmp	r3, #127	@ 0x7f
 80049fe:	d8f0      	bhi.n	80049e2 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8004a00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a02:	1c5a      	adds	r2, r3, #1
 8004a04:	637a      	str	r2, [r7, #52]	@ 0x34
 8004a06:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004a08:	b2d2      	uxtb	r2, r2
 8004a0a:	701a      	strb	r2, [r3, #0]
 8004a0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a0e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8004a10:	697b      	ldr	r3, [r7, #20]
 8004a12:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004a18:	e00b      	b.n	8004a32 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8004a1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a1c:	b2da      	uxtb	r2, r3
 8004a1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a20:	1c59      	adds	r1, r3, #1
 8004a22:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8004a24:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004a28:	b2d2      	uxtb	r2, r2
 8004a2a:	701a      	strb	r2, [r3, #0]
 8004a2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a2e:	09db      	lsrs	r3, r3, #7
 8004a30:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004a32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a34:	2b7f      	cmp	r3, #127	@ 0x7f
 8004a36:	d8f0      	bhi.n	8004a1a <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8004a38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a3a:	1c5a      	adds	r2, r3, #1
 8004a3c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004a3e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004a40:	b2d2      	uxtb	r2, r2
 8004a42:	701a      	strb	r2, [r3, #0]
 8004a44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a46:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8004a48:	697b      	ldr	r3, [r7, #20]
 8004a4a:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a4c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004a4e:	623b      	str	r3, [r7, #32]
 8004a50:	e00b      	b.n	8004a6a <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8004a52:	6a3b      	ldr	r3, [r7, #32]
 8004a54:	b2da      	uxtb	r2, r3
 8004a56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a58:	1c59      	adds	r1, r3, #1
 8004a5a:	6279      	str	r1, [r7, #36]	@ 0x24
 8004a5c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004a60:	b2d2      	uxtb	r2, r2
 8004a62:	701a      	strb	r2, [r3, #0]
 8004a64:	6a3b      	ldr	r3, [r7, #32]
 8004a66:	09db      	lsrs	r3, r3, #7
 8004a68:	623b      	str	r3, [r7, #32]
 8004a6a:	6a3b      	ldr	r3, [r7, #32]
 8004a6c:	2b7f      	cmp	r3, #127	@ 0x7f
 8004a6e:	d8f0      	bhi.n	8004a52 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8004a70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a72:	1c5a      	adds	r2, r3, #1
 8004a74:	627a      	str	r2, [r7, #36]	@ 0x24
 8004a76:	6a3a      	ldr	r2, [r7, #32]
 8004a78:	b2d2      	uxtb	r2, r2
 8004a7a:	701a      	strb	r2, [r3, #0]
 8004a7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a7e:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004a80:	68fa      	ldr	r2, [r7, #12]
 8004a82:	6979      	ldr	r1, [r7, #20]
 8004a84:	69b8      	ldr	r0, [r7, #24]
 8004a86:	f7ff fddb 	bl	8004640 <_SendPacket>
  RECORD_END();
 8004a8a:	69fb      	ldr	r3, [r7, #28]
 8004a8c:	f383 8811 	msr	BASEPRI, r3
}
 8004a90:	bf00      	nop
 8004a92:	3740      	adds	r7, #64	@ 0x40
 8004a94:	46bd      	mov	sp, r7
 8004a96:	bd80      	pop	{r7, pc}
 8004a98:	2001337c 	.word	0x2001337c

08004a9c <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b08c      	sub	sp, #48	@ 0x30
 8004aa0:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8004aa2:	4b59      	ldr	r3, [pc, #356]	@ (8004c08 <SEGGER_SYSVIEW_Start+0x16c>)
 8004aa4:	2201      	movs	r2, #1
 8004aa6:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8004aa8:	f3ef 8311 	mrs	r3, BASEPRI
 8004aac:	f04f 0120 	mov.w	r1, #32
 8004ab0:	f381 8811 	msr	BASEPRI, r1
 8004ab4:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8004ab6:	4b54      	ldr	r3, [pc, #336]	@ (8004c08 <SEGGER_SYSVIEW_Start+0x16c>)
 8004ab8:	785b      	ldrb	r3, [r3, #1]
 8004aba:	220a      	movs	r2, #10
 8004abc:	4953      	ldr	r1, [pc, #332]	@ (8004c0c <SEGGER_SYSVIEW_Start+0x170>)
 8004abe:	4618      	mov	r0, r3
 8004ac0:	f7fb fb86 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 8004aca:	f7ff fb8d 	bl	80041e8 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8004ace:	200a      	movs	r0, #10
 8004ad0:	f7ff fe9e 	bl	8004810 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004ad4:	f3ef 8311 	mrs	r3, BASEPRI
 8004ad8:	f04f 0120 	mov.w	r1, #32
 8004adc:	f381 8811 	msr	BASEPRI, r1
 8004ae0:	60bb      	str	r3, [r7, #8]
 8004ae2:	484b      	ldr	r0, [pc, #300]	@ (8004c10 <SEGGER_SYSVIEW_Start+0x174>)
 8004ae4:	f7ff fcbb 	bl	800445e <_PreparePacket>
 8004ae8:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004af2:	4b45      	ldr	r3, [pc, #276]	@ (8004c08 <SEGGER_SYSVIEW_Start+0x16c>)
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004af8:	e00b      	b.n	8004b12 <SEGGER_SYSVIEW_Start+0x76>
 8004afa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004afc:	b2da      	uxtb	r2, r3
 8004afe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b00:	1c59      	adds	r1, r3, #1
 8004b02:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8004b04:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004b08:	b2d2      	uxtb	r2, r2
 8004b0a:	701a      	strb	r2, [r3, #0]
 8004b0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b0e:	09db      	lsrs	r3, r3, #7
 8004b10:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004b12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b14:	2b7f      	cmp	r3, #127	@ 0x7f
 8004b16:	d8f0      	bhi.n	8004afa <SEGGER_SYSVIEW_Start+0x5e>
 8004b18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b1a:	1c5a      	adds	r2, r3, #1
 8004b1c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004b1e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004b20:	b2d2      	uxtb	r2, r2
 8004b22:	701a      	strb	r2, [r3, #0]
 8004b24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b26:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b2c:	4b36      	ldr	r3, [pc, #216]	@ (8004c08 <SEGGER_SYSVIEW_Start+0x16c>)
 8004b2e:	689b      	ldr	r3, [r3, #8]
 8004b30:	623b      	str	r3, [r7, #32]
 8004b32:	e00b      	b.n	8004b4c <SEGGER_SYSVIEW_Start+0xb0>
 8004b34:	6a3b      	ldr	r3, [r7, #32]
 8004b36:	b2da      	uxtb	r2, r3
 8004b38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b3a:	1c59      	adds	r1, r3, #1
 8004b3c:	6279      	str	r1, [r7, #36]	@ 0x24
 8004b3e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004b42:	b2d2      	uxtb	r2, r2
 8004b44:	701a      	strb	r2, [r3, #0]
 8004b46:	6a3b      	ldr	r3, [r7, #32]
 8004b48:	09db      	lsrs	r3, r3, #7
 8004b4a:	623b      	str	r3, [r7, #32]
 8004b4c:	6a3b      	ldr	r3, [r7, #32]
 8004b4e:	2b7f      	cmp	r3, #127	@ 0x7f
 8004b50:	d8f0      	bhi.n	8004b34 <SEGGER_SYSVIEW_Start+0x98>
 8004b52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b54:	1c5a      	adds	r2, r3, #1
 8004b56:	627a      	str	r2, [r7, #36]	@ 0x24
 8004b58:	6a3a      	ldr	r2, [r7, #32]
 8004b5a:	b2d2      	uxtb	r2, r2
 8004b5c:	701a      	strb	r2, [r3, #0]
 8004b5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b60:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	61fb      	str	r3, [r7, #28]
 8004b66:	4b28      	ldr	r3, [pc, #160]	@ (8004c08 <SEGGER_SYSVIEW_Start+0x16c>)
 8004b68:	691b      	ldr	r3, [r3, #16]
 8004b6a:	61bb      	str	r3, [r7, #24]
 8004b6c:	e00b      	b.n	8004b86 <SEGGER_SYSVIEW_Start+0xea>
 8004b6e:	69bb      	ldr	r3, [r7, #24]
 8004b70:	b2da      	uxtb	r2, r3
 8004b72:	69fb      	ldr	r3, [r7, #28]
 8004b74:	1c59      	adds	r1, r3, #1
 8004b76:	61f9      	str	r1, [r7, #28]
 8004b78:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004b7c:	b2d2      	uxtb	r2, r2
 8004b7e:	701a      	strb	r2, [r3, #0]
 8004b80:	69bb      	ldr	r3, [r7, #24]
 8004b82:	09db      	lsrs	r3, r3, #7
 8004b84:	61bb      	str	r3, [r7, #24]
 8004b86:	69bb      	ldr	r3, [r7, #24]
 8004b88:	2b7f      	cmp	r3, #127	@ 0x7f
 8004b8a:	d8f0      	bhi.n	8004b6e <SEGGER_SYSVIEW_Start+0xd2>
 8004b8c:	69fb      	ldr	r3, [r7, #28]
 8004b8e:	1c5a      	adds	r2, r3, #1
 8004b90:	61fa      	str	r2, [r7, #28]
 8004b92:	69ba      	ldr	r2, [r7, #24]
 8004b94:	b2d2      	uxtb	r2, r2
 8004b96:	701a      	strb	r2, [r3, #0]
 8004b98:	69fb      	ldr	r3, [r7, #28]
 8004b9a:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	617b      	str	r3, [r7, #20]
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	613b      	str	r3, [r7, #16]
 8004ba4:	e00b      	b.n	8004bbe <SEGGER_SYSVIEW_Start+0x122>
 8004ba6:	693b      	ldr	r3, [r7, #16]
 8004ba8:	b2da      	uxtb	r2, r3
 8004baa:	697b      	ldr	r3, [r7, #20]
 8004bac:	1c59      	adds	r1, r3, #1
 8004bae:	6179      	str	r1, [r7, #20]
 8004bb0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004bb4:	b2d2      	uxtb	r2, r2
 8004bb6:	701a      	strb	r2, [r3, #0]
 8004bb8:	693b      	ldr	r3, [r7, #16]
 8004bba:	09db      	lsrs	r3, r3, #7
 8004bbc:	613b      	str	r3, [r7, #16]
 8004bbe:	693b      	ldr	r3, [r7, #16]
 8004bc0:	2b7f      	cmp	r3, #127	@ 0x7f
 8004bc2:	d8f0      	bhi.n	8004ba6 <SEGGER_SYSVIEW_Start+0x10a>
 8004bc4:	697b      	ldr	r3, [r7, #20]
 8004bc6:	1c5a      	adds	r2, r3, #1
 8004bc8:	617a      	str	r2, [r7, #20]
 8004bca:	693a      	ldr	r2, [r7, #16]
 8004bcc:	b2d2      	uxtb	r2, r2
 8004bce:	701a      	strb	r2, [r3, #0]
 8004bd0:	697b      	ldr	r3, [r7, #20]
 8004bd2:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8004bd4:	2218      	movs	r2, #24
 8004bd6:	6839      	ldr	r1, [r7, #0]
 8004bd8:	6878      	ldr	r0, [r7, #4]
 8004bda:	f7ff fd31 	bl	8004640 <_SendPacket>
      RECORD_END();
 8004bde:	68bb      	ldr	r3, [r7, #8]
 8004be0:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8004be4:	4b08      	ldr	r3, [pc, #32]	@ (8004c08 <SEGGER_SYSVIEW_Start+0x16c>)
 8004be6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d002      	beq.n	8004bf2 <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8004bec:	4b06      	ldr	r3, [pc, #24]	@ (8004c08 <SEGGER_SYSVIEW_Start+0x16c>)
 8004bee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bf0:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8004bf2:	f000 f9c7 	bl	8004f84 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8004bf6:	f000 f9b1 	bl	8004f5c <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8004bfa:	f000 fc5f 	bl	80054bc <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8004bfe:	bf00      	nop
 8004c00:	3730      	adds	r7, #48	@ 0x30
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd80      	pop	{r7, pc}
 8004c06:	bf00      	nop
 8004c08:	2001334c 	.word	0x2001334c
 8004c0c:	08005744 	.word	0x08005744
 8004c10:	2001337c 	.word	0x2001337c

08004c14 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b082      	sub	sp, #8
 8004c18:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004c1a:	f3ef 8311 	mrs	r3, BASEPRI
 8004c1e:	f04f 0120 	mov.w	r1, #32
 8004c22:	f381 8811 	msr	BASEPRI, r1
 8004c26:	607b      	str	r3, [r7, #4]
 8004c28:	480b      	ldr	r0, [pc, #44]	@ (8004c58 <SEGGER_SYSVIEW_Stop+0x44>)
 8004c2a:	f7ff fc18 	bl	800445e <_PreparePacket>
 8004c2e:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8004c30:	4b0a      	ldr	r3, [pc, #40]	@ (8004c5c <SEGGER_SYSVIEW_Stop+0x48>)
 8004c32:	781b      	ldrb	r3, [r3, #0]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d007      	beq.n	8004c48 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8004c38:	220b      	movs	r2, #11
 8004c3a:	6839      	ldr	r1, [r7, #0]
 8004c3c:	6838      	ldr	r0, [r7, #0]
 8004c3e:	f7ff fcff 	bl	8004640 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8004c42:	4b06      	ldr	r3, [pc, #24]	@ (8004c5c <SEGGER_SYSVIEW_Stop+0x48>)
 8004c44:	2200      	movs	r2, #0
 8004c46:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	f383 8811 	msr	BASEPRI, r3
}
 8004c4e:	bf00      	nop
 8004c50:	3708      	adds	r7, #8
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bd80      	pop	{r7, pc}
 8004c56:	bf00      	nop
 8004c58:	2001337c 	.word	0x2001337c
 8004c5c:	2001334c 	.word	0x2001334c

08004c60 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b08c      	sub	sp, #48	@ 0x30
 8004c64:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004c66:	f3ef 8311 	mrs	r3, BASEPRI
 8004c6a:	f04f 0120 	mov.w	r1, #32
 8004c6e:	f381 8811 	msr	BASEPRI, r1
 8004c72:	60fb      	str	r3, [r7, #12]
 8004c74:	4845      	ldr	r0, [pc, #276]	@ (8004d8c <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8004c76:	f7ff fbf2 	bl	800445e <_PreparePacket>
 8004c7a:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004c84:	4b42      	ldr	r3, [pc, #264]	@ (8004d90 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004c86:	685b      	ldr	r3, [r3, #4]
 8004c88:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004c8a:	e00b      	b.n	8004ca4 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8004c8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c8e:	b2da      	uxtb	r2, r3
 8004c90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c92:	1c59      	adds	r1, r3, #1
 8004c94:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8004c96:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004c9a:	b2d2      	uxtb	r2, r2
 8004c9c:	701a      	strb	r2, [r3, #0]
 8004c9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ca0:	09db      	lsrs	r3, r3, #7
 8004ca2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004ca4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ca6:	2b7f      	cmp	r3, #127	@ 0x7f
 8004ca8:	d8f0      	bhi.n	8004c8c <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8004caa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cac:	1c5a      	adds	r2, r3, #1
 8004cae:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004cb0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004cb2:	b2d2      	uxtb	r2, r2
 8004cb4:	701a      	strb	r2, [r3, #0]
 8004cb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cb8:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	627b      	str	r3, [r7, #36]	@ 0x24
 8004cbe:	4b34      	ldr	r3, [pc, #208]	@ (8004d90 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004cc0:	689b      	ldr	r3, [r3, #8]
 8004cc2:	623b      	str	r3, [r7, #32]
 8004cc4:	e00b      	b.n	8004cde <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8004cc6:	6a3b      	ldr	r3, [r7, #32]
 8004cc8:	b2da      	uxtb	r2, r3
 8004cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ccc:	1c59      	adds	r1, r3, #1
 8004cce:	6279      	str	r1, [r7, #36]	@ 0x24
 8004cd0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004cd4:	b2d2      	uxtb	r2, r2
 8004cd6:	701a      	strb	r2, [r3, #0]
 8004cd8:	6a3b      	ldr	r3, [r7, #32]
 8004cda:	09db      	lsrs	r3, r3, #7
 8004cdc:	623b      	str	r3, [r7, #32]
 8004cde:	6a3b      	ldr	r3, [r7, #32]
 8004ce0:	2b7f      	cmp	r3, #127	@ 0x7f
 8004ce2:	d8f0      	bhi.n	8004cc6 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8004ce4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ce6:	1c5a      	adds	r2, r3, #1
 8004ce8:	627a      	str	r2, [r7, #36]	@ 0x24
 8004cea:	6a3a      	ldr	r2, [r7, #32]
 8004cec:	b2d2      	uxtb	r2, r2
 8004cee:	701a      	strb	r2, [r3, #0]
 8004cf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cf2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	61fb      	str	r3, [r7, #28]
 8004cf8:	4b25      	ldr	r3, [pc, #148]	@ (8004d90 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004cfa:	691b      	ldr	r3, [r3, #16]
 8004cfc:	61bb      	str	r3, [r7, #24]
 8004cfe:	e00b      	b.n	8004d18 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8004d00:	69bb      	ldr	r3, [r7, #24]
 8004d02:	b2da      	uxtb	r2, r3
 8004d04:	69fb      	ldr	r3, [r7, #28]
 8004d06:	1c59      	adds	r1, r3, #1
 8004d08:	61f9      	str	r1, [r7, #28]
 8004d0a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004d0e:	b2d2      	uxtb	r2, r2
 8004d10:	701a      	strb	r2, [r3, #0]
 8004d12:	69bb      	ldr	r3, [r7, #24]
 8004d14:	09db      	lsrs	r3, r3, #7
 8004d16:	61bb      	str	r3, [r7, #24]
 8004d18:	69bb      	ldr	r3, [r7, #24]
 8004d1a:	2b7f      	cmp	r3, #127	@ 0x7f
 8004d1c:	d8f0      	bhi.n	8004d00 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8004d1e:	69fb      	ldr	r3, [r7, #28]
 8004d20:	1c5a      	adds	r2, r3, #1
 8004d22:	61fa      	str	r2, [r7, #28]
 8004d24:	69ba      	ldr	r2, [r7, #24]
 8004d26:	b2d2      	uxtb	r2, r2
 8004d28:	701a      	strb	r2, [r3, #0]
 8004d2a:	69fb      	ldr	r3, [r7, #28]
 8004d2c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	617b      	str	r3, [r7, #20]
 8004d32:	2300      	movs	r3, #0
 8004d34:	613b      	str	r3, [r7, #16]
 8004d36:	e00b      	b.n	8004d50 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8004d38:	693b      	ldr	r3, [r7, #16]
 8004d3a:	b2da      	uxtb	r2, r3
 8004d3c:	697b      	ldr	r3, [r7, #20]
 8004d3e:	1c59      	adds	r1, r3, #1
 8004d40:	6179      	str	r1, [r7, #20]
 8004d42:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004d46:	b2d2      	uxtb	r2, r2
 8004d48:	701a      	strb	r2, [r3, #0]
 8004d4a:	693b      	ldr	r3, [r7, #16]
 8004d4c:	09db      	lsrs	r3, r3, #7
 8004d4e:	613b      	str	r3, [r7, #16]
 8004d50:	693b      	ldr	r3, [r7, #16]
 8004d52:	2b7f      	cmp	r3, #127	@ 0x7f
 8004d54:	d8f0      	bhi.n	8004d38 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8004d56:	697b      	ldr	r3, [r7, #20]
 8004d58:	1c5a      	adds	r2, r3, #1
 8004d5a:	617a      	str	r2, [r7, #20]
 8004d5c:	693a      	ldr	r2, [r7, #16]
 8004d5e:	b2d2      	uxtb	r2, r2
 8004d60:	701a      	strb	r2, [r3, #0]
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8004d66:	2218      	movs	r2, #24
 8004d68:	6879      	ldr	r1, [r7, #4]
 8004d6a:	68b8      	ldr	r0, [r7, #8]
 8004d6c:	f7ff fc68 	bl	8004640 <_SendPacket>
  RECORD_END();
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8004d76:	4b06      	ldr	r3, [pc, #24]	@ (8004d90 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004d78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d002      	beq.n	8004d84 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8004d7e:	4b04      	ldr	r3, [pc, #16]	@ (8004d90 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004d80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d82:	4798      	blx	r3
  }
}
 8004d84:	bf00      	nop
 8004d86:	3730      	adds	r7, #48	@ 0x30
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	bd80      	pop	{r7, pc}
 8004d8c:	2001337c 	.word	0x2001337c
 8004d90:	2001334c 	.word	0x2001334c

08004d94 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b092      	sub	sp, #72	@ 0x48
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8004d9c:	f3ef 8311 	mrs	r3, BASEPRI
 8004da0:	f04f 0120 	mov.w	r1, #32
 8004da4:	f381 8811 	msr	BASEPRI, r1
 8004da8:	617b      	str	r3, [r7, #20]
 8004daa:	486a      	ldr	r0, [pc, #424]	@ (8004f54 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8004dac:	f7ff fb57 	bl	800445e <_PreparePacket>
 8004db0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004db2:	693b      	ldr	r3, [r7, #16]
 8004db4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	647b      	str	r3, [r7, #68]	@ 0x44
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681a      	ldr	r2, [r3, #0]
 8004dbe:	4b66      	ldr	r3, [pc, #408]	@ (8004f58 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8004dc0:	691b      	ldr	r3, [r3, #16]
 8004dc2:	1ad3      	subs	r3, r2, r3
 8004dc4:	643b      	str	r3, [r7, #64]	@ 0x40
 8004dc6:	e00b      	b.n	8004de0 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8004dc8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004dca:	b2da      	uxtb	r2, r3
 8004dcc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004dce:	1c59      	adds	r1, r3, #1
 8004dd0:	6479      	str	r1, [r7, #68]	@ 0x44
 8004dd2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004dd6:	b2d2      	uxtb	r2, r2
 8004dd8:	701a      	strb	r2, [r3, #0]
 8004dda:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004ddc:	09db      	lsrs	r3, r3, #7
 8004dde:	643b      	str	r3, [r7, #64]	@ 0x40
 8004de0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004de2:	2b7f      	cmp	r3, #127	@ 0x7f
 8004de4:	d8f0      	bhi.n	8004dc8 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8004de6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004de8:	1c5a      	adds	r2, r3, #1
 8004dea:	647a      	str	r2, [r7, #68]	@ 0x44
 8004dec:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004dee:	b2d2      	uxtb	r2, r2
 8004df0:	701a      	strb	r2, [r3, #0]
 8004df2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004df4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	689b      	ldr	r3, [r3, #8]
 8004dfe:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004e00:	e00b      	b.n	8004e1a <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8004e02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e04:	b2da      	uxtb	r2, r3
 8004e06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e08:	1c59      	adds	r1, r3, #1
 8004e0a:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8004e0c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004e10:	b2d2      	uxtb	r2, r2
 8004e12:	701a      	strb	r2, [r3, #0]
 8004e14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e16:	09db      	lsrs	r3, r3, #7
 8004e18:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004e1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e1c:	2b7f      	cmp	r3, #127	@ 0x7f
 8004e1e:	d8f0      	bhi.n	8004e02 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8004e20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e22:	1c5a      	adds	r2, r3, #1
 8004e24:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004e26:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004e28:	b2d2      	uxtb	r2, r2
 8004e2a:	701a      	strb	r2, [r3, #0]
 8004e2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e2e:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	685b      	ldr	r3, [r3, #4]
 8004e34:	2220      	movs	r2, #32
 8004e36:	4619      	mov	r1, r3
 8004e38:	68f8      	ldr	r0, [r7, #12]
 8004e3a:	f7ff fac3 	bl	80043c4 <_EncodeStr>
 8004e3e:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8004e40:	2209      	movs	r2, #9
 8004e42:	68f9      	ldr	r1, [r7, #12]
 8004e44:	6938      	ldr	r0, [r7, #16]
 8004e46:	f7ff fbfb 	bl	8004640 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8004e4a:	693b      	ldr	r3, [r7, #16]
 8004e4c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681a      	ldr	r2, [r3, #0]
 8004e56:	4b40      	ldr	r3, [pc, #256]	@ (8004f58 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8004e58:	691b      	ldr	r3, [r3, #16]
 8004e5a:	1ad3      	subs	r3, r2, r3
 8004e5c:	633b      	str	r3, [r7, #48]	@ 0x30
 8004e5e:	e00b      	b.n	8004e78 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8004e60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e62:	b2da      	uxtb	r2, r3
 8004e64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e66:	1c59      	adds	r1, r3, #1
 8004e68:	6379      	str	r1, [r7, #52]	@ 0x34
 8004e6a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004e6e:	b2d2      	uxtb	r2, r2
 8004e70:	701a      	strb	r2, [r3, #0]
 8004e72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e74:	09db      	lsrs	r3, r3, #7
 8004e76:	633b      	str	r3, [r7, #48]	@ 0x30
 8004e78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e7a:	2b7f      	cmp	r3, #127	@ 0x7f
 8004e7c:	d8f0      	bhi.n	8004e60 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8004e7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e80:	1c5a      	adds	r2, r3, #1
 8004e82:	637a      	str	r2, [r7, #52]	@ 0x34
 8004e84:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004e86:	b2d2      	uxtb	r2, r2
 8004e88:	701a      	strb	r2, [r3, #0]
 8004e8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e8c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	68db      	ldr	r3, [r3, #12]
 8004e96:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004e98:	e00b      	b.n	8004eb2 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8004e9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e9c:	b2da      	uxtb	r2, r3
 8004e9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ea0:	1c59      	adds	r1, r3, #1
 8004ea2:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8004ea4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004ea8:	b2d2      	uxtb	r2, r2
 8004eaa:	701a      	strb	r2, [r3, #0]
 8004eac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004eae:	09db      	lsrs	r3, r3, #7
 8004eb0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004eb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004eb4:	2b7f      	cmp	r3, #127	@ 0x7f
 8004eb6:	d8f0      	bhi.n	8004e9a <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8004eb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004eba:	1c5a      	adds	r2, r3, #1
 8004ebc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004ebe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004ec0:	b2d2      	uxtb	r2, r2
 8004ec2:	701a      	strb	r2, [r3, #0]
 8004ec4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ec6:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	691b      	ldr	r3, [r3, #16]
 8004ed0:	623b      	str	r3, [r7, #32]
 8004ed2:	e00b      	b.n	8004eec <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8004ed4:	6a3b      	ldr	r3, [r7, #32]
 8004ed6:	b2da      	uxtb	r2, r3
 8004ed8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eda:	1c59      	adds	r1, r3, #1
 8004edc:	6279      	str	r1, [r7, #36]	@ 0x24
 8004ede:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004ee2:	b2d2      	uxtb	r2, r2
 8004ee4:	701a      	strb	r2, [r3, #0]
 8004ee6:	6a3b      	ldr	r3, [r7, #32]
 8004ee8:	09db      	lsrs	r3, r3, #7
 8004eea:	623b      	str	r3, [r7, #32]
 8004eec:	6a3b      	ldr	r3, [r7, #32]
 8004eee:	2b7f      	cmp	r3, #127	@ 0x7f
 8004ef0:	d8f0      	bhi.n	8004ed4 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8004ef2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ef4:	1c5a      	adds	r2, r3, #1
 8004ef6:	627a      	str	r2, [r7, #36]	@ 0x24
 8004ef8:	6a3a      	ldr	r2, [r7, #32]
 8004efa:	b2d2      	uxtb	r2, r2
 8004efc:	701a      	strb	r2, [r3, #0]
 8004efe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f00:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	61fb      	str	r3, [r7, #28]
 8004f06:	2300      	movs	r3, #0
 8004f08:	61bb      	str	r3, [r7, #24]
 8004f0a:	e00b      	b.n	8004f24 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8004f0c:	69bb      	ldr	r3, [r7, #24]
 8004f0e:	b2da      	uxtb	r2, r3
 8004f10:	69fb      	ldr	r3, [r7, #28]
 8004f12:	1c59      	adds	r1, r3, #1
 8004f14:	61f9      	str	r1, [r7, #28]
 8004f16:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004f1a:	b2d2      	uxtb	r2, r2
 8004f1c:	701a      	strb	r2, [r3, #0]
 8004f1e:	69bb      	ldr	r3, [r7, #24]
 8004f20:	09db      	lsrs	r3, r3, #7
 8004f22:	61bb      	str	r3, [r7, #24]
 8004f24:	69bb      	ldr	r3, [r7, #24]
 8004f26:	2b7f      	cmp	r3, #127	@ 0x7f
 8004f28:	d8f0      	bhi.n	8004f0c <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8004f2a:	69fb      	ldr	r3, [r7, #28]
 8004f2c:	1c5a      	adds	r2, r3, #1
 8004f2e:	61fa      	str	r2, [r7, #28]
 8004f30:	69ba      	ldr	r2, [r7, #24]
 8004f32:	b2d2      	uxtb	r2, r2
 8004f34:	701a      	strb	r2, [r3, #0]
 8004f36:	69fb      	ldr	r3, [r7, #28]
 8004f38:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8004f3a:	2215      	movs	r2, #21
 8004f3c:	68f9      	ldr	r1, [r7, #12]
 8004f3e:	6938      	ldr	r0, [r7, #16]
 8004f40:	f7ff fb7e 	bl	8004640 <_SendPacket>
  RECORD_END();
 8004f44:	697b      	ldr	r3, [r7, #20]
 8004f46:	f383 8811 	msr	BASEPRI, r3
}
 8004f4a:	bf00      	nop
 8004f4c:	3748      	adds	r7, #72	@ 0x48
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bd80      	pop	{r7, pc}
 8004f52:	bf00      	nop
 8004f54:	2001337c 	.word	0x2001337c
 8004f58:	2001334c 	.word	0x2001334c

08004f5c <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8004f60:	4b07      	ldr	r3, [pc, #28]	@ (8004f80 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004f62:	6a1b      	ldr	r3, [r3, #32]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d008      	beq.n	8004f7a <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8004f68:	4b05      	ldr	r3, [pc, #20]	@ (8004f80 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004f6a:	6a1b      	ldr	r3, [r3, #32]
 8004f6c:	685b      	ldr	r3, [r3, #4]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d003      	beq.n	8004f7a <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8004f72:	4b03      	ldr	r3, [pc, #12]	@ (8004f80 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004f74:	6a1b      	ldr	r3, [r3, #32]
 8004f76:	685b      	ldr	r3, [r3, #4]
 8004f78:	4798      	blx	r3
  }
}
 8004f7a:	bf00      	nop
 8004f7c:	bd80      	pop	{r7, pc}
 8004f7e:	bf00      	nop
 8004f80:	2001334c 	.word	0x2001334c

08004f84 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8004f84:	b590      	push	{r4, r7, lr}
 8004f86:	b083      	sub	sp, #12
 8004f88:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8004f8a:	4b15      	ldr	r3, [pc, #84]	@ (8004fe0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004f8c:	6a1b      	ldr	r3, [r3, #32]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d01a      	beq.n	8004fc8 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8004f92:	4b13      	ldr	r3, [pc, #76]	@ (8004fe0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004f94:	6a1b      	ldr	r3, [r3, #32]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d015      	beq.n	8004fc8 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8004f9c:	4b10      	ldr	r3, [pc, #64]	@ (8004fe0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004f9e:	6a1b      	ldr	r3, [r3, #32]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4798      	blx	r3
 8004fa4:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8004fa8:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8004faa:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004fae:	f04f 0200 	mov.w	r2, #0
 8004fb2:	f04f 0300 	mov.w	r3, #0
 8004fb6:	000a      	movs	r2, r1
 8004fb8:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8004fba:	4613      	mov	r3, r2
 8004fbc:	461a      	mov	r2, r3
 8004fbe:	4621      	mov	r1, r4
 8004fc0:	200d      	movs	r0, #13
 8004fc2:	f7ff fc7f 	bl	80048c4 <SEGGER_SYSVIEW_RecordU32x2>
 8004fc6:	e006      	b.n	8004fd6 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8004fc8:	4b06      	ldr	r3, [pc, #24]	@ (8004fe4 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4619      	mov	r1, r3
 8004fce:	200c      	movs	r0, #12
 8004fd0:	f7ff fc3c 	bl	800484c <SEGGER_SYSVIEW_RecordU32>
  }
}
 8004fd4:	bf00      	nop
 8004fd6:	bf00      	nop
 8004fd8:	370c      	adds	r7, #12
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bd90      	pop	{r4, r7, pc}
 8004fde:	bf00      	nop
 8004fe0:	2001334c 	.word	0x2001334c
 8004fe4:	e0001004 	.word	0xe0001004

08004fe8 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b086      	sub	sp, #24
 8004fec:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004fee:	f3ef 8311 	mrs	r3, BASEPRI
 8004ff2:	f04f 0120 	mov.w	r1, #32
 8004ff6:	f381 8811 	msr	BASEPRI, r1
 8004ffa:	60fb      	str	r3, [r7, #12]
 8004ffc:	4819      	ldr	r0, [pc, #100]	@ (8005064 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8004ffe:	f7ff fa2e 	bl	800445e <_PreparePacket>
 8005002:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8005008:	4b17      	ldr	r3, [pc, #92]	@ (8005068 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005010:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	617b      	str	r3, [r7, #20]
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	613b      	str	r3, [r7, #16]
 800501a:	e00b      	b.n	8005034 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 800501c:	693b      	ldr	r3, [r7, #16]
 800501e:	b2da      	uxtb	r2, r3
 8005020:	697b      	ldr	r3, [r7, #20]
 8005022:	1c59      	adds	r1, r3, #1
 8005024:	6179      	str	r1, [r7, #20]
 8005026:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800502a:	b2d2      	uxtb	r2, r2
 800502c:	701a      	strb	r2, [r3, #0]
 800502e:	693b      	ldr	r3, [r7, #16]
 8005030:	09db      	lsrs	r3, r3, #7
 8005032:	613b      	str	r3, [r7, #16]
 8005034:	693b      	ldr	r3, [r7, #16]
 8005036:	2b7f      	cmp	r3, #127	@ 0x7f
 8005038:	d8f0      	bhi.n	800501c <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 800503a:	697b      	ldr	r3, [r7, #20]
 800503c:	1c5a      	adds	r2, r3, #1
 800503e:	617a      	str	r2, [r7, #20]
 8005040:	693a      	ldr	r2, [r7, #16]
 8005042:	b2d2      	uxtb	r2, r2
 8005044:	701a      	strb	r2, [r3, #0]
 8005046:	697b      	ldr	r3, [r7, #20]
 8005048:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 800504a:	2202      	movs	r2, #2
 800504c:	6879      	ldr	r1, [r7, #4]
 800504e:	68b8      	ldr	r0, [r7, #8]
 8005050:	f7ff faf6 	bl	8004640 <_SendPacket>
  RECORD_END();
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	f383 8811 	msr	BASEPRI, r3
}
 800505a:	bf00      	nop
 800505c:	3718      	adds	r7, #24
 800505e:	46bd      	mov	sp, r7
 8005060:	bd80      	pop	{r7, pc}
 8005062:	bf00      	nop
 8005064:	2001337c 	.word	0x2001337c
 8005068:	e000ed04 	.word	0xe000ed04

0800506c <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 800506c:	b580      	push	{r7, lr}
 800506e:	b082      	sub	sp, #8
 8005070:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005072:	f3ef 8311 	mrs	r3, BASEPRI
 8005076:	f04f 0120 	mov.w	r1, #32
 800507a:	f381 8811 	msr	BASEPRI, r1
 800507e:	607b      	str	r3, [r7, #4]
 8005080:	4807      	ldr	r0, [pc, #28]	@ (80050a0 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8005082:	f7ff f9ec 	bl	800445e <_PreparePacket>
 8005086:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8005088:	2203      	movs	r2, #3
 800508a:	6839      	ldr	r1, [r7, #0]
 800508c:	6838      	ldr	r0, [r7, #0]
 800508e:	f7ff fad7 	bl	8004640 <_SendPacket>
  RECORD_END();
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	f383 8811 	msr	BASEPRI, r3
}
 8005098:	bf00      	nop
 800509a:	3708      	adds	r7, #8
 800509c:	46bd      	mov	sp, r7
 800509e:	bd80      	pop	{r7, pc}
 80050a0:	2001337c 	.word	0x2001337c

080050a4 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b082      	sub	sp, #8
 80050a8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80050aa:	f3ef 8311 	mrs	r3, BASEPRI
 80050ae:	f04f 0120 	mov.w	r1, #32
 80050b2:	f381 8811 	msr	BASEPRI, r1
 80050b6:	607b      	str	r3, [r7, #4]
 80050b8:	4807      	ldr	r0, [pc, #28]	@ (80050d8 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 80050ba:	f7ff f9d0 	bl	800445e <_PreparePacket>
 80050be:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 80050c0:	2212      	movs	r2, #18
 80050c2:	6839      	ldr	r1, [r7, #0]
 80050c4:	6838      	ldr	r0, [r7, #0]
 80050c6:	f7ff fabb 	bl	8004640 <_SendPacket>
  RECORD_END();
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	f383 8811 	msr	BASEPRI, r3
}
 80050d0:	bf00      	nop
 80050d2:	3708      	adds	r7, #8
 80050d4:	46bd      	mov	sp, r7
 80050d6:	bd80      	pop	{r7, pc}
 80050d8:	2001337c 	.word	0x2001337c

080050dc <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 80050dc:	b580      	push	{r7, lr}
 80050de:	b082      	sub	sp, #8
 80050e0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80050e2:	f3ef 8311 	mrs	r3, BASEPRI
 80050e6:	f04f 0120 	mov.w	r1, #32
 80050ea:	f381 8811 	msr	BASEPRI, r1
 80050ee:	607b      	str	r3, [r7, #4]
 80050f0:	4807      	ldr	r0, [pc, #28]	@ (8005110 <SEGGER_SYSVIEW_OnIdle+0x34>)
 80050f2:	f7ff f9b4 	bl	800445e <_PreparePacket>
 80050f6:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 80050f8:	2211      	movs	r2, #17
 80050fa:	6839      	ldr	r1, [r7, #0]
 80050fc:	6838      	ldr	r0, [r7, #0]
 80050fe:	f7ff fa9f 	bl	8004640 <_SendPacket>
  RECORD_END();
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	f383 8811 	msr	BASEPRI, r3
}
 8005108:	bf00      	nop
 800510a:	3708      	adds	r7, #8
 800510c:	46bd      	mov	sp, r7
 800510e:	bd80      	pop	{r7, pc}
 8005110:	2001337c 	.word	0x2001337c

08005114 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8005114:	b580      	push	{r7, lr}
 8005116:	b088      	sub	sp, #32
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800511c:	f3ef 8311 	mrs	r3, BASEPRI
 8005120:	f04f 0120 	mov.w	r1, #32
 8005124:	f381 8811 	msr	BASEPRI, r1
 8005128:	617b      	str	r3, [r7, #20]
 800512a:	4819      	ldr	r0, [pc, #100]	@ (8005190 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 800512c:	f7ff f997 	bl	800445e <_PreparePacket>
 8005130:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005132:	693b      	ldr	r3, [r7, #16]
 8005134:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005136:	4b17      	ldr	r3, [pc, #92]	@ (8005194 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8005138:	691b      	ldr	r3, [r3, #16]
 800513a:	687a      	ldr	r2, [r7, #4]
 800513c:	1ad3      	subs	r3, r2, r3
 800513e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	61fb      	str	r3, [r7, #28]
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	61bb      	str	r3, [r7, #24]
 8005148:	e00b      	b.n	8005162 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 800514a:	69bb      	ldr	r3, [r7, #24]
 800514c:	b2da      	uxtb	r2, r3
 800514e:	69fb      	ldr	r3, [r7, #28]
 8005150:	1c59      	adds	r1, r3, #1
 8005152:	61f9      	str	r1, [r7, #28]
 8005154:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005158:	b2d2      	uxtb	r2, r2
 800515a:	701a      	strb	r2, [r3, #0]
 800515c:	69bb      	ldr	r3, [r7, #24]
 800515e:	09db      	lsrs	r3, r3, #7
 8005160:	61bb      	str	r3, [r7, #24]
 8005162:	69bb      	ldr	r3, [r7, #24]
 8005164:	2b7f      	cmp	r3, #127	@ 0x7f
 8005166:	d8f0      	bhi.n	800514a <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8005168:	69fb      	ldr	r3, [r7, #28]
 800516a:	1c5a      	adds	r2, r3, #1
 800516c:	61fa      	str	r2, [r7, #28]
 800516e:	69ba      	ldr	r2, [r7, #24]
 8005170:	b2d2      	uxtb	r2, r2
 8005172:	701a      	strb	r2, [r3, #0]
 8005174:	69fb      	ldr	r3, [r7, #28]
 8005176:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8005178:	2208      	movs	r2, #8
 800517a:	68f9      	ldr	r1, [r7, #12]
 800517c:	6938      	ldr	r0, [r7, #16]
 800517e:	f7ff fa5f 	bl	8004640 <_SendPacket>
  RECORD_END();
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	f383 8811 	msr	BASEPRI, r3
}
 8005188:	bf00      	nop
 800518a:	3720      	adds	r7, #32
 800518c:	46bd      	mov	sp, r7
 800518e:	bd80      	pop	{r7, pc}
 8005190:	2001337c 	.word	0x2001337c
 8005194:	2001334c 	.word	0x2001334c

08005198 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8005198:	b580      	push	{r7, lr}
 800519a:	b088      	sub	sp, #32
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80051a0:	f3ef 8311 	mrs	r3, BASEPRI
 80051a4:	f04f 0120 	mov.w	r1, #32
 80051a8:	f381 8811 	msr	BASEPRI, r1
 80051ac:	617b      	str	r3, [r7, #20]
 80051ae:	4819      	ldr	r0, [pc, #100]	@ (8005214 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 80051b0:	f7ff f955 	bl	800445e <_PreparePacket>
 80051b4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80051b6:	693b      	ldr	r3, [r7, #16]
 80051b8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80051ba:	4b17      	ldr	r3, [pc, #92]	@ (8005218 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 80051bc:	691b      	ldr	r3, [r3, #16]
 80051be:	687a      	ldr	r2, [r7, #4]
 80051c0:	1ad3      	subs	r3, r2, r3
 80051c2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	61fb      	str	r3, [r7, #28]
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	61bb      	str	r3, [r7, #24]
 80051cc:	e00b      	b.n	80051e6 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 80051ce:	69bb      	ldr	r3, [r7, #24]
 80051d0:	b2da      	uxtb	r2, r3
 80051d2:	69fb      	ldr	r3, [r7, #28]
 80051d4:	1c59      	adds	r1, r3, #1
 80051d6:	61f9      	str	r1, [r7, #28]
 80051d8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80051dc:	b2d2      	uxtb	r2, r2
 80051de:	701a      	strb	r2, [r3, #0]
 80051e0:	69bb      	ldr	r3, [r7, #24]
 80051e2:	09db      	lsrs	r3, r3, #7
 80051e4:	61bb      	str	r3, [r7, #24]
 80051e6:	69bb      	ldr	r3, [r7, #24]
 80051e8:	2b7f      	cmp	r3, #127	@ 0x7f
 80051ea:	d8f0      	bhi.n	80051ce <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 80051ec:	69fb      	ldr	r3, [r7, #28]
 80051ee:	1c5a      	adds	r2, r3, #1
 80051f0:	61fa      	str	r2, [r7, #28]
 80051f2:	69ba      	ldr	r2, [r7, #24]
 80051f4:	b2d2      	uxtb	r2, r2
 80051f6:	701a      	strb	r2, [r3, #0]
 80051f8:	69fb      	ldr	r3, [r7, #28]
 80051fa:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 80051fc:	2204      	movs	r2, #4
 80051fe:	68f9      	ldr	r1, [r7, #12]
 8005200:	6938      	ldr	r0, [r7, #16]
 8005202:	f7ff fa1d 	bl	8004640 <_SendPacket>
  RECORD_END();
 8005206:	697b      	ldr	r3, [r7, #20]
 8005208:	f383 8811 	msr	BASEPRI, r3
}
 800520c:	bf00      	nop
 800520e:	3720      	adds	r7, #32
 8005210:	46bd      	mov	sp, r7
 8005212:	bd80      	pop	{r7, pc}
 8005214:	2001337c 	.word	0x2001337c
 8005218:	2001334c 	.word	0x2001334c

0800521c <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 800521c:	b580      	push	{r7, lr}
 800521e:	b088      	sub	sp, #32
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005224:	f3ef 8311 	mrs	r3, BASEPRI
 8005228:	f04f 0120 	mov.w	r1, #32
 800522c:	f381 8811 	msr	BASEPRI, r1
 8005230:	617b      	str	r3, [r7, #20]
 8005232:	4819      	ldr	r0, [pc, #100]	@ (8005298 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8005234:	f7ff f913 	bl	800445e <_PreparePacket>
 8005238:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800523a:	693b      	ldr	r3, [r7, #16]
 800523c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800523e:	4b17      	ldr	r3, [pc, #92]	@ (800529c <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8005240:	691b      	ldr	r3, [r3, #16]
 8005242:	687a      	ldr	r2, [r7, #4]
 8005244:	1ad3      	subs	r3, r2, r3
 8005246:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	61fb      	str	r3, [r7, #28]
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	61bb      	str	r3, [r7, #24]
 8005250:	e00b      	b.n	800526a <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8005252:	69bb      	ldr	r3, [r7, #24]
 8005254:	b2da      	uxtb	r2, r3
 8005256:	69fb      	ldr	r3, [r7, #28]
 8005258:	1c59      	adds	r1, r3, #1
 800525a:	61f9      	str	r1, [r7, #28]
 800525c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005260:	b2d2      	uxtb	r2, r2
 8005262:	701a      	strb	r2, [r3, #0]
 8005264:	69bb      	ldr	r3, [r7, #24]
 8005266:	09db      	lsrs	r3, r3, #7
 8005268:	61bb      	str	r3, [r7, #24]
 800526a:	69bb      	ldr	r3, [r7, #24]
 800526c:	2b7f      	cmp	r3, #127	@ 0x7f
 800526e:	d8f0      	bhi.n	8005252 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8005270:	69fb      	ldr	r3, [r7, #28]
 8005272:	1c5a      	adds	r2, r3, #1
 8005274:	61fa      	str	r2, [r7, #28]
 8005276:	69ba      	ldr	r2, [r7, #24]
 8005278:	b2d2      	uxtb	r2, r2
 800527a:	701a      	strb	r2, [r3, #0]
 800527c:	69fb      	ldr	r3, [r7, #28]
 800527e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8005280:	2206      	movs	r2, #6
 8005282:	68f9      	ldr	r1, [r7, #12]
 8005284:	6938      	ldr	r0, [r7, #16]
 8005286:	f7ff f9db 	bl	8004640 <_SendPacket>
  RECORD_END();
 800528a:	697b      	ldr	r3, [r7, #20]
 800528c:	f383 8811 	msr	BASEPRI, r3
}
 8005290:	bf00      	nop
 8005292:	3720      	adds	r7, #32
 8005294:	46bd      	mov	sp, r7
 8005296:	bd80      	pop	{r7, pc}
 8005298:	2001337c 	.word	0x2001337c
 800529c:	2001334c 	.word	0x2001334c

080052a0 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b08a      	sub	sp, #40	@ 0x28
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
 80052a8:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80052aa:	f3ef 8311 	mrs	r3, BASEPRI
 80052ae:	f04f 0120 	mov.w	r1, #32
 80052b2:	f381 8811 	msr	BASEPRI, r1
 80052b6:	617b      	str	r3, [r7, #20]
 80052b8:	4827      	ldr	r0, [pc, #156]	@ (8005358 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 80052ba:	f7ff f8d0 	bl	800445e <_PreparePacket>
 80052be:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80052c0:	693b      	ldr	r3, [r7, #16]
 80052c2:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80052c4:	4b25      	ldr	r3, [pc, #148]	@ (800535c <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 80052c6:	691b      	ldr	r3, [r3, #16]
 80052c8:	687a      	ldr	r2, [r7, #4]
 80052ca:	1ad3      	subs	r3, r2, r3
 80052cc:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	623b      	str	r3, [r7, #32]
 80052d6:	e00b      	b.n	80052f0 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 80052d8:	6a3b      	ldr	r3, [r7, #32]
 80052da:	b2da      	uxtb	r2, r3
 80052dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052de:	1c59      	adds	r1, r3, #1
 80052e0:	6279      	str	r1, [r7, #36]	@ 0x24
 80052e2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80052e6:	b2d2      	uxtb	r2, r2
 80052e8:	701a      	strb	r2, [r3, #0]
 80052ea:	6a3b      	ldr	r3, [r7, #32]
 80052ec:	09db      	lsrs	r3, r3, #7
 80052ee:	623b      	str	r3, [r7, #32]
 80052f0:	6a3b      	ldr	r3, [r7, #32]
 80052f2:	2b7f      	cmp	r3, #127	@ 0x7f
 80052f4:	d8f0      	bhi.n	80052d8 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 80052f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052f8:	1c5a      	adds	r2, r3, #1
 80052fa:	627a      	str	r2, [r7, #36]	@ 0x24
 80052fc:	6a3a      	ldr	r2, [r7, #32]
 80052fe:	b2d2      	uxtb	r2, r2
 8005300:	701a      	strb	r2, [r3, #0]
 8005302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005304:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	61fb      	str	r3, [r7, #28]
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	61bb      	str	r3, [r7, #24]
 800530e:	e00b      	b.n	8005328 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8005310:	69bb      	ldr	r3, [r7, #24]
 8005312:	b2da      	uxtb	r2, r3
 8005314:	69fb      	ldr	r3, [r7, #28]
 8005316:	1c59      	adds	r1, r3, #1
 8005318:	61f9      	str	r1, [r7, #28]
 800531a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800531e:	b2d2      	uxtb	r2, r2
 8005320:	701a      	strb	r2, [r3, #0]
 8005322:	69bb      	ldr	r3, [r7, #24]
 8005324:	09db      	lsrs	r3, r3, #7
 8005326:	61bb      	str	r3, [r7, #24]
 8005328:	69bb      	ldr	r3, [r7, #24]
 800532a:	2b7f      	cmp	r3, #127	@ 0x7f
 800532c:	d8f0      	bhi.n	8005310 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 800532e:	69fb      	ldr	r3, [r7, #28]
 8005330:	1c5a      	adds	r2, r3, #1
 8005332:	61fa      	str	r2, [r7, #28]
 8005334:	69ba      	ldr	r2, [r7, #24]
 8005336:	b2d2      	uxtb	r2, r2
 8005338:	701a      	strb	r2, [r3, #0]
 800533a:	69fb      	ldr	r3, [r7, #28]
 800533c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 800533e:	2207      	movs	r2, #7
 8005340:	68f9      	ldr	r1, [r7, #12]
 8005342:	6938      	ldr	r0, [r7, #16]
 8005344:	f7ff f97c 	bl	8004640 <_SendPacket>
  RECORD_END();
 8005348:	697b      	ldr	r3, [r7, #20]
 800534a:	f383 8811 	msr	BASEPRI, r3
}
 800534e:	bf00      	nop
 8005350:	3728      	adds	r7, #40	@ 0x28
 8005352:	46bd      	mov	sp, r7
 8005354:	bd80      	pop	{r7, pc}
 8005356:	bf00      	nop
 8005358:	2001337c 	.word	0x2001337c
 800535c:	2001334c 	.word	0x2001334c

08005360 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8005360:	b480      	push	{r7}
 8005362:	b083      	sub	sp, #12
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8005368:	4b04      	ldr	r3, [pc, #16]	@ (800537c <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 800536a:	691b      	ldr	r3, [r3, #16]
 800536c:	687a      	ldr	r2, [r7, #4]
 800536e:	1ad3      	subs	r3, r2, r3
}
 8005370:	4618      	mov	r0, r3
 8005372:	370c      	adds	r7, #12
 8005374:	46bd      	mov	sp, r7
 8005376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537a:	4770      	bx	lr
 800537c:	2001334c 	.word	0x2001334c

08005380 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8005380:	b580      	push	{r7, lr}
 8005382:	b08c      	sub	sp, #48	@ 0x30
 8005384:	af00      	add	r7, sp, #0
 8005386:	4603      	mov	r3, r0
 8005388:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800538a:	4b3b      	ldr	r3, [pc, #236]	@ (8005478 <SEGGER_SYSVIEW_SendModule+0xf8>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d06d      	beq.n	800546e <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8005392:	4b39      	ldr	r3, [pc, #228]	@ (8005478 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (n = 0; n < ModuleId; n++) {
 8005398:	2300      	movs	r3, #0
 800539a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800539c:	e008      	b.n	80053b0 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800539e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053a0:	691b      	ldr	r3, [r3, #16]
 80053a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (pModule == 0) {
 80053a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d007      	beq.n	80053ba <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 80053aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053ac:	3301      	adds	r3, #1
 80053ae:	62bb      	str	r3, [r7, #40]	@ 0x28
 80053b0:	79fb      	ldrb	r3, [r7, #7]
 80053b2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80053b4:	429a      	cmp	r2, r3
 80053b6:	d3f2      	bcc.n	800539e <SEGGER_SYSVIEW_SendModule+0x1e>
 80053b8:	e000      	b.n	80053bc <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 80053ba:	bf00      	nop
      }
    }
    if (pModule != 0) {
 80053bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d055      	beq.n	800546e <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80053c2:	f3ef 8311 	mrs	r3, BASEPRI
 80053c6:	f04f 0120 	mov.w	r1, #32
 80053ca:	f381 8811 	msr	BASEPRI, r1
 80053ce:	617b      	str	r3, [r7, #20]
 80053d0:	482a      	ldr	r0, [pc, #168]	@ (800547c <SEGGER_SYSVIEW_SendModule+0xfc>)
 80053d2:	f7ff f844 	bl	800445e <_PreparePacket>
 80053d6:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 80053d8:	693b      	ldr	r3, [r7, #16]
 80053da:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	627b      	str	r3, [r7, #36]	@ 0x24
 80053e0:	79fb      	ldrb	r3, [r7, #7]
 80053e2:	623b      	str	r3, [r7, #32]
 80053e4:	e00b      	b.n	80053fe <SEGGER_SYSVIEW_SendModule+0x7e>
 80053e6:	6a3b      	ldr	r3, [r7, #32]
 80053e8:	b2da      	uxtb	r2, r3
 80053ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053ec:	1c59      	adds	r1, r3, #1
 80053ee:	6279      	str	r1, [r7, #36]	@ 0x24
 80053f0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80053f4:	b2d2      	uxtb	r2, r2
 80053f6:	701a      	strb	r2, [r3, #0]
 80053f8:	6a3b      	ldr	r3, [r7, #32]
 80053fa:	09db      	lsrs	r3, r3, #7
 80053fc:	623b      	str	r3, [r7, #32]
 80053fe:	6a3b      	ldr	r3, [r7, #32]
 8005400:	2b7f      	cmp	r3, #127	@ 0x7f
 8005402:	d8f0      	bhi.n	80053e6 <SEGGER_SYSVIEW_SendModule+0x66>
 8005404:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005406:	1c5a      	adds	r2, r3, #1
 8005408:	627a      	str	r2, [r7, #36]	@ 0x24
 800540a:	6a3a      	ldr	r2, [r7, #32]
 800540c:	b2d2      	uxtb	r2, r2
 800540e:	701a      	strb	r2, [r3, #0]
 8005410:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005412:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	61fb      	str	r3, [r7, #28]
 8005418:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800541a:	689b      	ldr	r3, [r3, #8]
 800541c:	61bb      	str	r3, [r7, #24]
 800541e:	e00b      	b.n	8005438 <SEGGER_SYSVIEW_SendModule+0xb8>
 8005420:	69bb      	ldr	r3, [r7, #24]
 8005422:	b2da      	uxtb	r2, r3
 8005424:	69fb      	ldr	r3, [r7, #28]
 8005426:	1c59      	adds	r1, r3, #1
 8005428:	61f9      	str	r1, [r7, #28]
 800542a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800542e:	b2d2      	uxtb	r2, r2
 8005430:	701a      	strb	r2, [r3, #0]
 8005432:	69bb      	ldr	r3, [r7, #24]
 8005434:	09db      	lsrs	r3, r3, #7
 8005436:	61bb      	str	r3, [r7, #24]
 8005438:	69bb      	ldr	r3, [r7, #24]
 800543a:	2b7f      	cmp	r3, #127	@ 0x7f
 800543c:	d8f0      	bhi.n	8005420 <SEGGER_SYSVIEW_SendModule+0xa0>
 800543e:	69fb      	ldr	r3, [r7, #28]
 8005440:	1c5a      	adds	r2, r3, #1
 8005442:	61fa      	str	r2, [r7, #28]
 8005444:	69ba      	ldr	r2, [r7, #24]
 8005446:	b2d2      	uxtb	r2, r2
 8005448:	701a      	strb	r2, [r3, #0]
 800544a:	69fb      	ldr	r3, [r7, #28]
 800544c:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800544e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	2280      	movs	r2, #128	@ 0x80
 8005454:	4619      	mov	r1, r3
 8005456:	68f8      	ldr	r0, [r7, #12]
 8005458:	f7fe ffb4 	bl	80043c4 <_EncodeStr>
 800545c:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800545e:	2216      	movs	r2, #22
 8005460:	68f9      	ldr	r1, [r7, #12]
 8005462:	6938      	ldr	r0, [r7, #16]
 8005464:	f7ff f8ec 	bl	8004640 <_SendPacket>
      RECORD_END();
 8005468:	697b      	ldr	r3, [r7, #20]
 800546a:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 800546e:	bf00      	nop
 8005470:	3730      	adds	r7, #48	@ 0x30
 8005472:	46bd      	mov	sp, r7
 8005474:	bd80      	pop	{r7, pc}
 8005476:	bf00      	nop
 8005478:	20013374 	.word	0x20013374
 800547c:	2001337c 	.word	0x2001337c

08005480 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8005480:	b580      	push	{r7, lr}
 8005482:	b082      	sub	sp, #8
 8005484:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8005486:	4b0c      	ldr	r3, [pc, #48]	@ (80054b8 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d00f      	beq.n	80054ae <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800548e:	4b0a      	ldr	r3, [pc, #40]	@ (80054b8 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	68db      	ldr	r3, [r3, #12]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d002      	beq.n	80054a2 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	68db      	ldr	r3, [r3, #12]
 80054a0:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	691b      	ldr	r3, [r3, #16]
 80054a6:	607b      	str	r3, [r7, #4]
    } while (pModule);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d1f2      	bne.n	8005494 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 80054ae:	bf00      	nop
 80054b0:	3708      	adds	r7, #8
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bd80      	pop	{r7, pc}
 80054b6:	bf00      	nop
 80054b8:	20013374 	.word	0x20013374

080054bc <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 80054bc:	b580      	push	{r7, lr}
 80054be:	b086      	sub	sp, #24
 80054c0:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 80054c2:	f3ef 8311 	mrs	r3, BASEPRI
 80054c6:	f04f 0120 	mov.w	r1, #32
 80054ca:	f381 8811 	msr	BASEPRI, r1
 80054ce:	60fb      	str	r3, [r7, #12]
 80054d0:	4817      	ldr	r0, [pc, #92]	@ (8005530 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 80054d2:	f7fe ffc4 	bl	800445e <_PreparePacket>
 80054d6:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	617b      	str	r3, [r7, #20]
 80054e0:	4b14      	ldr	r3, [pc, #80]	@ (8005534 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 80054e2:	781b      	ldrb	r3, [r3, #0]
 80054e4:	613b      	str	r3, [r7, #16]
 80054e6:	e00b      	b.n	8005500 <SEGGER_SYSVIEW_SendNumModules+0x44>
 80054e8:	693b      	ldr	r3, [r7, #16]
 80054ea:	b2da      	uxtb	r2, r3
 80054ec:	697b      	ldr	r3, [r7, #20]
 80054ee:	1c59      	adds	r1, r3, #1
 80054f0:	6179      	str	r1, [r7, #20]
 80054f2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80054f6:	b2d2      	uxtb	r2, r2
 80054f8:	701a      	strb	r2, [r3, #0]
 80054fa:	693b      	ldr	r3, [r7, #16]
 80054fc:	09db      	lsrs	r3, r3, #7
 80054fe:	613b      	str	r3, [r7, #16]
 8005500:	693b      	ldr	r3, [r7, #16]
 8005502:	2b7f      	cmp	r3, #127	@ 0x7f
 8005504:	d8f0      	bhi.n	80054e8 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8005506:	697b      	ldr	r3, [r7, #20]
 8005508:	1c5a      	adds	r2, r3, #1
 800550a:	617a      	str	r2, [r7, #20]
 800550c:	693a      	ldr	r2, [r7, #16]
 800550e:	b2d2      	uxtb	r2, r2
 8005510:	701a      	strb	r2, [r3, #0]
 8005512:	697b      	ldr	r3, [r7, #20]
 8005514:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8005516:	221b      	movs	r2, #27
 8005518:	6879      	ldr	r1, [r7, #4]
 800551a:	68b8      	ldr	r0, [r7, #8]
 800551c:	f7ff f890 	bl	8004640 <_SendPacket>
  RECORD_END();
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	f383 8811 	msr	BASEPRI, r3
}
 8005526:	bf00      	nop
 8005528:	3718      	adds	r7, #24
 800552a:	46bd      	mov	sp, r7
 800552c:	bd80      	pop	{r7, pc}
 800552e:	bf00      	nop
 8005530:	2001337c 	.word	0x2001337c
 8005534:	20013378 	.word	0x20013378

08005538 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8005538:	b580      	push	{r7, lr}
 800553a:	b08a      	sub	sp, #40	@ 0x28
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005540:	f3ef 8311 	mrs	r3, BASEPRI
 8005544:	f04f 0120 	mov.w	r1, #32
 8005548:	f381 8811 	msr	BASEPRI, r1
 800554c:	617b      	str	r3, [r7, #20]
 800554e:	4827      	ldr	r0, [pc, #156]	@ (80055ec <SEGGER_SYSVIEW_Warn+0xb4>)
 8005550:	f7fe ff85 	bl	800445e <_PreparePacket>
 8005554:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005556:	2280      	movs	r2, #128	@ 0x80
 8005558:	6879      	ldr	r1, [r7, #4]
 800555a:	6938      	ldr	r0, [r7, #16]
 800555c:	f7fe ff32 	bl	80043c4 <_EncodeStr>
 8005560:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	627b      	str	r3, [r7, #36]	@ 0x24
 8005566:	2301      	movs	r3, #1
 8005568:	623b      	str	r3, [r7, #32]
 800556a:	e00b      	b.n	8005584 <SEGGER_SYSVIEW_Warn+0x4c>
 800556c:	6a3b      	ldr	r3, [r7, #32]
 800556e:	b2da      	uxtb	r2, r3
 8005570:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005572:	1c59      	adds	r1, r3, #1
 8005574:	6279      	str	r1, [r7, #36]	@ 0x24
 8005576:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800557a:	b2d2      	uxtb	r2, r2
 800557c:	701a      	strb	r2, [r3, #0]
 800557e:	6a3b      	ldr	r3, [r7, #32]
 8005580:	09db      	lsrs	r3, r3, #7
 8005582:	623b      	str	r3, [r7, #32]
 8005584:	6a3b      	ldr	r3, [r7, #32]
 8005586:	2b7f      	cmp	r3, #127	@ 0x7f
 8005588:	d8f0      	bhi.n	800556c <SEGGER_SYSVIEW_Warn+0x34>
 800558a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800558c:	1c5a      	adds	r2, r3, #1
 800558e:	627a      	str	r2, [r7, #36]	@ 0x24
 8005590:	6a3a      	ldr	r2, [r7, #32]
 8005592:	b2d2      	uxtb	r2, r2
 8005594:	701a      	strb	r2, [r3, #0]
 8005596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005598:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	61fb      	str	r3, [r7, #28]
 800559e:	2300      	movs	r3, #0
 80055a0:	61bb      	str	r3, [r7, #24]
 80055a2:	e00b      	b.n	80055bc <SEGGER_SYSVIEW_Warn+0x84>
 80055a4:	69bb      	ldr	r3, [r7, #24]
 80055a6:	b2da      	uxtb	r2, r3
 80055a8:	69fb      	ldr	r3, [r7, #28]
 80055aa:	1c59      	adds	r1, r3, #1
 80055ac:	61f9      	str	r1, [r7, #28]
 80055ae:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80055b2:	b2d2      	uxtb	r2, r2
 80055b4:	701a      	strb	r2, [r3, #0]
 80055b6:	69bb      	ldr	r3, [r7, #24]
 80055b8:	09db      	lsrs	r3, r3, #7
 80055ba:	61bb      	str	r3, [r7, #24]
 80055bc:	69bb      	ldr	r3, [r7, #24]
 80055be:	2b7f      	cmp	r3, #127	@ 0x7f
 80055c0:	d8f0      	bhi.n	80055a4 <SEGGER_SYSVIEW_Warn+0x6c>
 80055c2:	69fb      	ldr	r3, [r7, #28]
 80055c4:	1c5a      	adds	r2, r3, #1
 80055c6:	61fa      	str	r2, [r7, #28]
 80055c8:	69ba      	ldr	r2, [r7, #24]
 80055ca:	b2d2      	uxtb	r2, r2
 80055cc:	701a      	strb	r2, [r3, #0]
 80055ce:	69fb      	ldr	r3, [r7, #28]
 80055d0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80055d2:	221a      	movs	r2, #26
 80055d4:	68f9      	ldr	r1, [r7, #12]
 80055d6:	6938      	ldr	r0, [r7, #16]
 80055d8:	f7ff f832 	bl	8004640 <_SendPacket>
  RECORD_END();
 80055dc:	697b      	ldr	r3, [r7, #20]
 80055de:	f383 8811 	msr	BASEPRI, r3
}
 80055e2:	bf00      	nop
 80055e4:	3728      	adds	r7, #40	@ 0x28
 80055e6:	46bd      	mov	sp, r7
 80055e8:	bd80      	pop	{r7, pc}
 80055ea:	bf00      	nop
 80055ec:	2001337c 	.word	0x2001337c

080055f0 <memcmp>:
 80055f0:	b510      	push	{r4, lr}
 80055f2:	3901      	subs	r1, #1
 80055f4:	4402      	add	r2, r0
 80055f6:	4290      	cmp	r0, r2
 80055f8:	d101      	bne.n	80055fe <memcmp+0xe>
 80055fa:	2000      	movs	r0, #0
 80055fc:	e005      	b.n	800560a <memcmp+0x1a>
 80055fe:	7803      	ldrb	r3, [r0, #0]
 8005600:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8005604:	42a3      	cmp	r3, r4
 8005606:	d001      	beq.n	800560c <memcmp+0x1c>
 8005608:	1b18      	subs	r0, r3, r4
 800560a:	bd10      	pop	{r4, pc}
 800560c:	3001      	adds	r0, #1
 800560e:	e7f2      	b.n	80055f6 <memcmp+0x6>

08005610 <memset>:
 8005610:	4402      	add	r2, r0
 8005612:	4603      	mov	r3, r0
 8005614:	4293      	cmp	r3, r2
 8005616:	d100      	bne.n	800561a <memset+0xa>
 8005618:	4770      	bx	lr
 800561a:	f803 1b01 	strb.w	r1, [r3], #1
 800561e:	e7f9      	b.n	8005614 <memset+0x4>

08005620 <__libc_init_array>:
 8005620:	b570      	push	{r4, r5, r6, lr}
 8005622:	4d0d      	ldr	r5, [pc, #52]	@ (8005658 <__libc_init_array+0x38>)
 8005624:	4c0d      	ldr	r4, [pc, #52]	@ (800565c <__libc_init_array+0x3c>)
 8005626:	1b64      	subs	r4, r4, r5
 8005628:	10a4      	asrs	r4, r4, #2
 800562a:	2600      	movs	r6, #0
 800562c:	42a6      	cmp	r6, r4
 800562e:	d109      	bne.n	8005644 <__libc_init_array+0x24>
 8005630:	4d0b      	ldr	r5, [pc, #44]	@ (8005660 <__libc_init_array+0x40>)
 8005632:	4c0c      	ldr	r4, [pc, #48]	@ (8005664 <__libc_init_array+0x44>)
 8005634:	f000 f826 	bl	8005684 <_init>
 8005638:	1b64      	subs	r4, r4, r5
 800563a:	10a4      	asrs	r4, r4, #2
 800563c:	2600      	movs	r6, #0
 800563e:	42a6      	cmp	r6, r4
 8005640:	d105      	bne.n	800564e <__libc_init_array+0x2e>
 8005642:	bd70      	pop	{r4, r5, r6, pc}
 8005644:	f855 3b04 	ldr.w	r3, [r5], #4
 8005648:	4798      	blx	r3
 800564a:	3601      	adds	r6, #1
 800564c:	e7ee      	b.n	800562c <__libc_init_array+0xc>
 800564e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005652:	4798      	blx	r3
 8005654:	3601      	adds	r6, #1
 8005656:	e7f2      	b.n	800563e <__libc_init_array+0x1e>
 8005658:	08005758 	.word	0x08005758
 800565c:	08005758 	.word	0x08005758
 8005660:	08005758 	.word	0x08005758
 8005664:	0800575c 	.word	0x0800575c

08005668 <memcpy>:
 8005668:	440a      	add	r2, r1
 800566a:	4291      	cmp	r1, r2
 800566c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005670:	d100      	bne.n	8005674 <memcpy+0xc>
 8005672:	4770      	bx	lr
 8005674:	b510      	push	{r4, lr}
 8005676:	f811 4b01 	ldrb.w	r4, [r1], #1
 800567a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800567e:	4291      	cmp	r1, r2
 8005680:	d1f9      	bne.n	8005676 <memcpy+0xe>
 8005682:	bd10      	pop	{r4, pc}

08005684 <_init>:
 8005684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005686:	bf00      	nop
 8005688:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800568a:	bc08      	pop	{r3}
 800568c:	469e      	mov	lr, r3
 800568e:	4770      	bx	lr

08005690 <_fini>:
 8005690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005692:	bf00      	nop
 8005694:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005696:	bc08      	pop	{r3}
 8005698:	469e      	mov	lr, r3
 800569a:	4770      	bx	lr
